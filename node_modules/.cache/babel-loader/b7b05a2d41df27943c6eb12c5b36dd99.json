{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { Range } from '../../common/core/range.js';\nimport { MATCHES_LIMIT } from './findModel.js';\n\nfunction effectiveOptionValue(override, value) {\n  if (override === 1\n  /* True */\n  ) {\n    return true;\n  }\n\n  if (override === 2\n  /* False */\n  ) {\n    return false;\n  }\n\n  return value;\n}\n\nexport class FindReplaceState extends Disposable {\n  constructor() {\n    super();\n    this._onFindReplaceStateChange = this._register(new Emitter());\n    this.onFindReplaceStateChange = this._onFindReplaceStateChange.event;\n    this._searchString = '';\n    this._replaceString = '';\n    this._isRevealed = false;\n    this._isReplaceRevealed = false;\n    this._isRegex = false;\n    this._isRegexOverride = 0\n    /* NotSet */\n    ;\n    this._wholeWord = false;\n    this._wholeWordOverride = 0\n    /* NotSet */\n    ;\n    this._matchCase = false;\n    this._matchCaseOverride = 0\n    /* NotSet */\n    ;\n    this._preserveCase = false;\n    this._preserveCaseOverride = 0\n    /* NotSet */\n    ;\n    this._searchScope = null;\n    this._matchesPosition = 0;\n    this._matchesCount = 0;\n    this._currentMatch = null;\n    this._loop = true;\n  }\n\n  get searchString() {\n    return this._searchString;\n  }\n\n  get replaceString() {\n    return this._replaceString;\n  }\n\n  get isRevealed() {\n    return this._isRevealed;\n  }\n\n  get isReplaceRevealed() {\n    return this._isReplaceRevealed;\n  }\n\n  get isRegex() {\n    return effectiveOptionValue(this._isRegexOverride, this._isRegex);\n  }\n\n  get wholeWord() {\n    return effectiveOptionValue(this._wholeWordOverride, this._wholeWord);\n  }\n\n  get matchCase() {\n    return effectiveOptionValue(this._matchCaseOverride, this._matchCase);\n  }\n\n  get preserveCase() {\n    return effectiveOptionValue(this._preserveCaseOverride, this._preserveCase);\n  }\n\n  get actualIsRegex() {\n    return this._isRegex;\n  }\n\n  get actualWholeWord() {\n    return this._wholeWord;\n  }\n\n  get actualMatchCase() {\n    return this._matchCase;\n  }\n\n  get actualPreserveCase() {\n    return this._preserveCase;\n  }\n\n  get searchScope() {\n    return this._searchScope;\n  }\n\n  get matchesPosition() {\n    return this._matchesPosition;\n  }\n\n  get matchesCount() {\n    return this._matchesCount;\n  }\n\n  get currentMatch() {\n    return this._currentMatch;\n  }\n\n  changeMatchInfo(matchesPosition, matchesCount, currentMatch) {\n    let changeEvent = {\n      moveCursor: false,\n      updateHistory: false,\n      searchString: false,\n      replaceString: false,\n      isRevealed: false,\n      isReplaceRevealed: false,\n      isRegex: false,\n      wholeWord: false,\n      matchCase: false,\n      preserveCase: false,\n      searchScope: false,\n      matchesPosition: false,\n      matchesCount: false,\n      currentMatch: false,\n      loop: false\n    };\n    let somethingChanged = false;\n\n    if (matchesCount === 0) {\n      matchesPosition = 0;\n    }\n\n    if (matchesPosition > matchesCount) {\n      matchesPosition = matchesCount;\n    }\n\n    if (this._matchesPosition !== matchesPosition) {\n      this._matchesPosition = matchesPosition;\n      changeEvent.matchesPosition = true;\n      somethingChanged = true;\n    }\n\n    if (this._matchesCount !== matchesCount) {\n      this._matchesCount = matchesCount;\n      changeEvent.matchesCount = true;\n      somethingChanged = true;\n    }\n\n    if (typeof currentMatch !== 'undefined') {\n      if (!Range.equalsRange(this._currentMatch, currentMatch)) {\n        this._currentMatch = currentMatch;\n        changeEvent.currentMatch = true;\n        somethingChanged = true;\n      }\n    }\n\n    if (somethingChanged) {\n      this._onFindReplaceStateChange.fire(changeEvent);\n    }\n  }\n\n  change(newState, moveCursor) {\n    let updateHistory = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n    var _a;\n\n    let changeEvent = {\n      moveCursor: moveCursor,\n      updateHistory: updateHistory,\n      searchString: false,\n      replaceString: false,\n      isRevealed: false,\n      isReplaceRevealed: false,\n      isRegex: false,\n      wholeWord: false,\n      matchCase: false,\n      preserveCase: false,\n      searchScope: false,\n      matchesPosition: false,\n      matchesCount: false,\n      currentMatch: false,\n      loop: false\n    };\n    let somethingChanged = false;\n    const oldEffectiveIsRegex = this.isRegex;\n    const oldEffectiveWholeWords = this.wholeWord;\n    const oldEffectiveMatchCase = this.matchCase;\n    const oldEffectivePreserveCase = this.preserveCase;\n\n    if (typeof newState.searchString !== 'undefined') {\n      if (this._searchString !== newState.searchString) {\n        this._searchString = newState.searchString;\n        changeEvent.searchString = true;\n        somethingChanged = true;\n      }\n    }\n\n    if (typeof newState.replaceString !== 'undefined') {\n      if (this._replaceString !== newState.replaceString) {\n        this._replaceString = newState.replaceString;\n        changeEvent.replaceString = true;\n        somethingChanged = true;\n      }\n    }\n\n    if (typeof newState.isRevealed !== 'undefined') {\n      if (this._isRevealed !== newState.isRevealed) {\n        this._isRevealed = newState.isRevealed;\n        changeEvent.isRevealed = true;\n        somethingChanged = true;\n      }\n    }\n\n    if (typeof newState.isReplaceRevealed !== 'undefined') {\n      if (this._isReplaceRevealed !== newState.isReplaceRevealed) {\n        this._isReplaceRevealed = newState.isReplaceRevealed;\n        changeEvent.isReplaceRevealed = true;\n        somethingChanged = true;\n      }\n    }\n\n    if (typeof newState.isRegex !== 'undefined') {\n      this._isRegex = newState.isRegex;\n    }\n\n    if (typeof newState.wholeWord !== 'undefined') {\n      this._wholeWord = newState.wholeWord;\n    }\n\n    if (typeof newState.matchCase !== 'undefined') {\n      this._matchCase = newState.matchCase;\n    }\n\n    if (typeof newState.preserveCase !== 'undefined') {\n      this._preserveCase = newState.preserveCase;\n    }\n\n    if (typeof newState.searchScope !== 'undefined') {\n      if (!((_a = newState.searchScope) === null || _a === void 0 ? void 0 : _a.every(newSearchScope => {\n        var _a;\n\n        return (_a = this._searchScope) === null || _a === void 0 ? void 0 : _a.some(existingSearchScope => {\n          return !Range.equalsRange(existingSearchScope, newSearchScope);\n        });\n      }))) {\n        this._searchScope = newState.searchScope;\n        changeEvent.searchScope = true;\n        somethingChanged = true;\n      }\n    }\n\n    if (typeof newState.loop !== 'undefined') {\n      if (this._loop !== newState.loop) {\n        this._loop = newState.loop;\n        changeEvent.loop = true;\n        somethingChanged = true;\n      }\n    } // Overrides get set when they explicitly come in and get reset anytime something else changes\n\n\n    this._isRegexOverride = typeof newState.isRegexOverride !== 'undefined' ? newState.isRegexOverride : 0\n    /* NotSet */\n    ;\n    this._wholeWordOverride = typeof newState.wholeWordOverride !== 'undefined' ? newState.wholeWordOverride : 0\n    /* NotSet */\n    ;\n    this._matchCaseOverride = typeof newState.matchCaseOverride !== 'undefined' ? newState.matchCaseOverride : 0\n    /* NotSet */\n    ;\n    this._preserveCaseOverride = typeof newState.preserveCaseOverride !== 'undefined' ? newState.preserveCaseOverride : 0\n    /* NotSet */\n    ;\n\n    if (oldEffectiveIsRegex !== this.isRegex) {\n      somethingChanged = true;\n      changeEvent.isRegex = true;\n    }\n\n    if (oldEffectiveWholeWords !== this.wholeWord) {\n      somethingChanged = true;\n      changeEvent.wholeWord = true;\n    }\n\n    if (oldEffectiveMatchCase !== this.matchCase) {\n      somethingChanged = true;\n      changeEvent.matchCase = true;\n    }\n\n    if (oldEffectivePreserveCase !== this.preserveCase) {\n      somethingChanged = true;\n      changeEvent.preserveCase = true;\n    }\n\n    if (somethingChanged) {\n      this._onFindReplaceStateChange.fire(changeEvent);\n    }\n  }\n\n  canNavigateBack() {\n    return this.canNavigateInLoop() || this.matchesPosition !== 1;\n  }\n\n  canNavigateForward() {\n    return this.canNavigateInLoop() || this.matchesPosition < this.matchesCount;\n  }\n\n  canNavigateInLoop() {\n    return this._loop || this.matchesCount >= MATCHES_LIMIT;\n  }\n\n}","map":{"version":3,"sources":["/home/umut/Documents/cs/cs410/Project2Group14/node_modules/monaco-editor/esm/vs/editor/contrib/find/findState.js"],"names":["Emitter","Disposable","Range","MATCHES_LIMIT","effectiveOptionValue","override","value","FindReplaceState","constructor","_onFindReplaceStateChange","_register","onFindReplaceStateChange","event","_searchString","_replaceString","_isRevealed","_isReplaceRevealed","_isRegex","_isRegexOverride","_wholeWord","_wholeWordOverride","_matchCase","_matchCaseOverride","_preserveCase","_preserveCaseOverride","_searchScope","_matchesPosition","_matchesCount","_currentMatch","_loop","searchString","replaceString","isRevealed","isReplaceRevealed","isRegex","wholeWord","matchCase","preserveCase","actualIsRegex","actualWholeWord","actualMatchCase","actualPreserveCase","searchScope","matchesPosition","matchesCount","currentMatch","changeMatchInfo","changeEvent","moveCursor","updateHistory","loop","somethingChanged","equalsRange","fire","change","newState","_a","oldEffectiveIsRegex","oldEffectiveWholeWords","oldEffectiveMatchCase","oldEffectivePreserveCase","every","newSearchScope","some","existingSearchScope","isRegexOverride","wholeWordOverride","matchCaseOverride","preserveCaseOverride","canNavigateBack","canNavigateInLoop","canNavigateForward"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,OAAT,QAAwB,+BAAxB;AACA,SAASC,UAAT,QAA2B,mCAA3B;AACA,SAASC,KAAT,QAAsB,4BAAtB;AACA,SAASC,aAAT,QAA8B,gBAA9B;;AACA,SAASC,oBAAT,CAA8BC,QAA9B,EAAwCC,KAAxC,EAA+C;AAC3C,MAAID,QAAQ,KAAK;AAAE;AAAnB,IAA+B;AAC3B,WAAO,IAAP;AACH;;AACD,MAAIA,QAAQ,KAAK;AAAE;AAAnB,IAAgC;AAC5B,WAAO,KAAP;AACH;;AACD,SAAOC,KAAP;AACH;;AACD,OAAO,MAAMC,gBAAN,SAA+BN,UAA/B,CAA0C;AAC7CO,EAAAA,WAAW,GAAG;AACV;AACA,SAAKC,yBAAL,GAAiC,KAAKC,SAAL,CAAe,IAAIV,OAAJ,EAAf,CAAjC;AACA,SAAKW,wBAAL,GAAgC,KAAKF,yBAAL,CAA+BG,KAA/D;AACA,SAAKC,aAAL,GAAqB,EAArB;AACA,SAAKC,cAAL,GAAsB,EAAtB;AACA,SAAKC,WAAL,GAAmB,KAAnB;AACA,SAAKC,kBAAL,GAA0B,KAA1B;AACA,SAAKC,QAAL,GAAgB,KAAhB;AACA,SAAKC,gBAAL,GAAwB;AAAE;AAA1B;AACA,SAAKC,UAAL,GAAkB,KAAlB;AACA,SAAKC,kBAAL,GAA0B;AAAE;AAA5B;AACA,SAAKC,UAAL,GAAkB,KAAlB;AACA,SAAKC,kBAAL,GAA0B;AAAE;AAA5B;AACA,SAAKC,aAAL,GAAqB,KAArB;AACA,SAAKC,qBAAL,GAA6B;AAAE;AAA/B;AACA,SAAKC,YAAL,GAAoB,IAApB;AACA,SAAKC,gBAAL,GAAwB,CAAxB;AACA,SAAKC,aAAL,GAAqB,CAArB;AACA,SAAKC,aAAL,GAAqB,IAArB;AACA,SAAKC,KAAL,GAAa,IAAb;AACH;;AACe,MAAZC,YAAY,GAAG;AAAE,WAAO,KAAKjB,aAAZ;AAA4B;;AAChC,MAAbkB,aAAa,GAAG;AAAE,WAAO,KAAKjB,cAAZ;AAA6B;;AACrC,MAAVkB,UAAU,GAAG;AAAE,WAAO,KAAKjB,WAAZ;AAA0B;;AACxB,MAAjBkB,iBAAiB,GAAG;AAAE,WAAO,KAAKjB,kBAAZ;AAAiC;;AAChD,MAAPkB,OAAO,GAAG;AAAE,WAAO9B,oBAAoB,CAAC,KAAKc,gBAAN,EAAwB,KAAKD,QAA7B,CAA3B;AAAoE;;AACvE,MAATkB,SAAS,GAAG;AAAE,WAAO/B,oBAAoB,CAAC,KAAKgB,kBAAN,EAA0B,KAAKD,UAA/B,CAA3B;AAAwE;;AAC7E,MAATiB,SAAS,GAAG;AAAE,WAAOhC,oBAAoB,CAAC,KAAKkB,kBAAN,EAA0B,KAAKD,UAA/B,CAA3B;AAAwE;;AAC1E,MAAZgB,YAAY,GAAG;AAAE,WAAOjC,oBAAoB,CAAC,KAAKoB,qBAAN,EAA6B,KAAKD,aAAlC,CAA3B;AAA8E;;AAClF,MAAbe,aAAa,GAAG;AAAE,WAAO,KAAKrB,QAAZ;AAAuB;;AAC1B,MAAfsB,eAAe,GAAG;AAAE,WAAO,KAAKpB,UAAZ;AAAyB;;AAC9B,MAAfqB,eAAe,GAAG;AAAE,WAAO,KAAKnB,UAAZ;AAAyB;;AAC3B,MAAlBoB,kBAAkB,GAAG;AAAE,WAAO,KAAKlB,aAAZ;AAA4B;;AACxC,MAAXmB,WAAW,GAAG;AAAE,WAAO,KAAKjB,YAAZ;AAA2B;;AAC5B,MAAfkB,eAAe,GAAG;AAAE,WAAO,KAAKjB,gBAAZ;AAA+B;;AACvC,MAAZkB,YAAY,GAAG;AAAE,WAAO,KAAKjB,aAAZ;AAA4B;;AACjC,MAAZkB,YAAY,GAAG;AAAE,WAAO,KAAKjB,aAAZ;AAA4B;;AACjDkB,EAAAA,eAAe,CAACH,eAAD,EAAkBC,YAAlB,EAAgCC,YAAhC,EAA8C;AACzD,QAAIE,WAAW,GAAG;AACdC,MAAAA,UAAU,EAAE,KADE;AAEdC,MAAAA,aAAa,EAAE,KAFD;AAGdnB,MAAAA,YAAY,EAAE,KAHA;AAIdC,MAAAA,aAAa,EAAE,KAJD;AAKdC,MAAAA,UAAU,EAAE,KALE;AAMdC,MAAAA,iBAAiB,EAAE,KANL;AAOdC,MAAAA,OAAO,EAAE,KAPK;AAQdC,MAAAA,SAAS,EAAE,KARG;AASdC,MAAAA,SAAS,EAAE,KATG;AAUdC,MAAAA,YAAY,EAAE,KAVA;AAWdK,MAAAA,WAAW,EAAE,KAXC;AAYdC,MAAAA,eAAe,EAAE,KAZH;AAadC,MAAAA,YAAY,EAAE,KAbA;AAcdC,MAAAA,YAAY,EAAE,KAdA;AAedK,MAAAA,IAAI,EAAE;AAfQ,KAAlB;AAiBA,QAAIC,gBAAgB,GAAG,KAAvB;;AACA,QAAIP,YAAY,KAAK,CAArB,EAAwB;AACpBD,MAAAA,eAAe,GAAG,CAAlB;AACH;;AACD,QAAIA,eAAe,GAAGC,YAAtB,EAAoC;AAChCD,MAAAA,eAAe,GAAGC,YAAlB;AACH;;AACD,QAAI,KAAKlB,gBAAL,KAA0BiB,eAA9B,EAA+C;AAC3C,WAAKjB,gBAAL,GAAwBiB,eAAxB;AACAI,MAAAA,WAAW,CAACJ,eAAZ,GAA8B,IAA9B;AACAQ,MAAAA,gBAAgB,GAAG,IAAnB;AACH;;AACD,QAAI,KAAKxB,aAAL,KAAuBiB,YAA3B,EAAyC;AACrC,WAAKjB,aAAL,GAAqBiB,YAArB;AACAG,MAAAA,WAAW,CAACH,YAAZ,GAA2B,IAA3B;AACAO,MAAAA,gBAAgB,GAAG,IAAnB;AACH;;AACD,QAAI,OAAON,YAAP,KAAwB,WAA5B,EAAyC;AACrC,UAAI,CAAC3C,KAAK,CAACkD,WAAN,CAAkB,KAAKxB,aAAvB,EAAsCiB,YAAtC,CAAL,EAA0D;AACtD,aAAKjB,aAAL,GAAqBiB,YAArB;AACAE,QAAAA,WAAW,CAACF,YAAZ,GAA2B,IAA3B;AACAM,QAAAA,gBAAgB,GAAG,IAAnB;AACH;AACJ;;AACD,QAAIA,gBAAJ,EAAsB;AAClB,WAAK1C,yBAAL,CAA+B4C,IAA/B,CAAoCN,WAApC;AACH;AACJ;;AACDO,EAAAA,MAAM,CAACC,QAAD,EAAWP,UAAX,EAA6C;AAAA,QAAtBC,aAAsB,uEAAN,IAAM;;AAC/C,QAAIO,EAAJ;;AACA,QAAIT,WAAW,GAAG;AACdC,MAAAA,UAAU,EAAEA,UADE;AAEdC,MAAAA,aAAa,EAAEA,aAFD;AAGdnB,MAAAA,YAAY,EAAE,KAHA;AAIdC,MAAAA,aAAa,EAAE,KAJD;AAKdC,MAAAA,UAAU,EAAE,KALE;AAMdC,MAAAA,iBAAiB,EAAE,KANL;AAOdC,MAAAA,OAAO,EAAE,KAPK;AAQdC,MAAAA,SAAS,EAAE,KARG;AASdC,MAAAA,SAAS,EAAE,KATG;AAUdC,MAAAA,YAAY,EAAE,KAVA;AAWdK,MAAAA,WAAW,EAAE,KAXC;AAYdC,MAAAA,eAAe,EAAE,KAZH;AAadC,MAAAA,YAAY,EAAE,KAbA;AAcdC,MAAAA,YAAY,EAAE,KAdA;AAedK,MAAAA,IAAI,EAAE;AAfQ,KAAlB;AAiBA,QAAIC,gBAAgB,GAAG,KAAvB;AACA,UAAMM,mBAAmB,GAAG,KAAKvB,OAAjC;AACA,UAAMwB,sBAAsB,GAAG,KAAKvB,SAApC;AACA,UAAMwB,qBAAqB,GAAG,KAAKvB,SAAnC;AACA,UAAMwB,wBAAwB,GAAG,KAAKvB,YAAtC;;AACA,QAAI,OAAOkB,QAAQ,CAACzB,YAAhB,KAAiC,WAArC,EAAkD;AAC9C,UAAI,KAAKjB,aAAL,KAAuB0C,QAAQ,CAACzB,YAApC,EAAkD;AAC9C,aAAKjB,aAAL,GAAqB0C,QAAQ,CAACzB,YAA9B;AACAiB,QAAAA,WAAW,CAACjB,YAAZ,GAA2B,IAA3B;AACAqB,QAAAA,gBAAgB,GAAG,IAAnB;AACH;AACJ;;AACD,QAAI,OAAOI,QAAQ,CAACxB,aAAhB,KAAkC,WAAtC,EAAmD;AAC/C,UAAI,KAAKjB,cAAL,KAAwByC,QAAQ,CAACxB,aAArC,EAAoD;AAChD,aAAKjB,cAAL,GAAsByC,QAAQ,CAACxB,aAA/B;AACAgB,QAAAA,WAAW,CAAChB,aAAZ,GAA4B,IAA5B;AACAoB,QAAAA,gBAAgB,GAAG,IAAnB;AACH;AACJ;;AACD,QAAI,OAAOI,QAAQ,CAACvB,UAAhB,KAA+B,WAAnC,EAAgD;AAC5C,UAAI,KAAKjB,WAAL,KAAqBwC,QAAQ,CAACvB,UAAlC,EAA8C;AAC1C,aAAKjB,WAAL,GAAmBwC,QAAQ,CAACvB,UAA5B;AACAe,QAAAA,WAAW,CAACf,UAAZ,GAAyB,IAAzB;AACAmB,QAAAA,gBAAgB,GAAG,IAAnB;AACH;AACJ;;AACD,QAAI,OAAOI,QAAQ,CAACtB,iBAAhB,KAAsC,WAA1C,EAAuD;AACnD,UAAI,KAAKjB,kBAAL,KAA4BuC,QAAQ,CAACtB,iBAAzC,EAA4D;AACxD,aAAKjB,kBAAL,GAA0BuC,QAAQ,CAACtB,iBAAnC;AACAc,QAAAA,WAAW,CAACd,iBAAZ,GAAgC,IAAhC;AACAkB,QAAAA,gBAAgB,GAAG,IAAnB;AACH;AACJ;;AACD,QAAI,OAAOI,QAAQ,CAACrB,OAAhB,KAA4B,WAAhC,EAA6C;AACzC,WAAKjB,QAAL,GAAgBsC,QAAQ,CAACrB,OAAzB;AACH;;AACD,QAAI,OAAOqB,QAAQ,CAACpB,SAAhB,KAA8B,WAAlC,EAA+C;AAC3C,WAAKhB,UAAL,GAAkBoC,QAAQ,CAACpB,SAA3B;AACH;;AACD,QAAI,OAAOoB,QAAQ,CAACnB,SAAhB,KAA8B,WAAlC,EAA+C;AAC3C,WAAKf,UAAL,GAAkBkC,QAAQ,CAACnB,SAA3B;AACH;;AACD,QAAI,OAAOmB,QAAQ,CAAClB,YAAhB,KAAiC,WAArC,EAAkD;AAC9C,WAAKd,aAAL,GAAqBgC,QAAQ,CAAClB,YAA9B;AACH;;AACD,QAAI,OAAOkB,QAAQ,CAACb,WAAhB,KAAgC,WAApC,EAAiD;AAC7C,UAAI,EAAE,CAACc,EAAE,GAAGD,QAAQ,CAACb,WAAf,MAAgC,IAAhC,IAAwCc,EAAE,KAAK,KAAK,CAApD,GAAwD,KAAK,CAA7D,GAAiEA,EAAE,CAACK,KAAH,CAAUC,cAAD,IAAoB;AAChG,YAAIN,EAAJ;;AACA,eAAO,CAACA,EAAE,GAAG,KAAK/B,YAAX,MAA6B,IAA7B,IAAqC+B,EAAE,KAAK,KAAK,CAAjD,GAAqD,KAAK,CAA1D,GAA8DA,EAAE,CAACO,IAAH,CAAQC,mBAAmB,IAAI;AAChG,iBAAO,CAAC9D,KAAK,CAACkD,WAAN,CAAkBY,mBAAlB,EAAuCF,cAAvC,CAAR;AACH,SAFoE,CAArE;AAGH,OALsE,CAAnE,CAAJ,EAKK;AACD,aAAKrC,YAAL,GAAoB8B,QAAQ,CAACb,WAA7B;AACAK,QAAAA,WAAW,CAACL,WAAZ,GAA0B,IAA1B;AACAS,QAAAA,gBAAgB,GAAG,IAAnB;AACH;AACJ;;AACD,QAAI,OAAOI,QAAQ,CAACL,IAAhB,KAAyB,WAA7B,EAA0C;AACtC,UAAI,KAAKrB,KAAL,KAAe0B,QAAQ,CAACL,IAA5B,EAAkC;AAC9B,aAAKrB,KAAL,GAAa0B,QAAQ,CAACL,IAAtB;AACAH,QAAAA,WAAW,CAACG,IAAZ,GAAmB,IAAnB;AACAC,QAAAA,gBAAgB,GAAG,IAAnB;AACH;AACJ,KAlF8C,CAmF/C;;;AACA,SAAKjC,gBAAL,GAAyB,OAAOqC,QAAQ,CAACU,eAAhB,KAAoC,WAApC,GAAkDV,QAAQ,CAACU,eAA3D,GAA6E;AAAE;AAAxG;AACA,SAAK7C,kBAAL,GAA2B,OAAOmC,QAAQ,CAACW,iBAAhB,KAAsC,WAAtC,GAAoDX,QAAQ,CAACW,iBAA7D,GAAiF;AAAE;AAA9G;AACA,SAAK5C,kBAAL,GAA2B,OAAOiC,QAAQ,CAACY,iBAAhB,KAAsC,WAAtC,GAAoDZ,QAAQ,CAACY,iBAA7D,GAAiF;AAAE;AAA9G;AACA,SAAK3C,qBAAL,GAA8B,OAAO+B,QAAQ,CAACa,oBAAhB,KAAyC,WAAzC,GAAuDb,QAAQ,CAACa,oBAAhE,GAAuF;AAAE;AAAvH;;AACA,QAAIX,mBAAmB,KAAK,KAAKvB,OAAjC,EAA0C;AACtCiB,MAAAA,gBAAgB,GAAG,IAAnB;AACAJ,MAAAA,WAAW,CAACb,OAAZ,GAAsB,IAAtB;AACH;;AACD,QAAIwB,sBAAsB,KAAK,KAAKvB,SAApC,EAA+C;AAC3CgB,MAAAA,gBAAgB,GAAG,IAAnB;AACAJ,MAAAA,WAAW,CAACZ,SAAZ,GAAwB,IAAxB;AACH;;AACD,QAAIwB,qBAAqB,KAAK,KAAKvB,SAAnC,EAA8C;AAC1Ce,MAAAA,gBAAgB,GAAG,IAAnB;AACAJ,MAAAA,WAAW,CAACX,SAAZ,GAAwB,IAAxB;AACH;;AACD,QAAIwB,wBAAwB,KAAK,KAAKvB,YAAtC,EAAoD;AAChDc,MAAAA,gBAAgB,GAAG,IAAnB;AACAJ,MAAAA,WAAW,CAACV,YAAZ,GAA2B,IAA3B;AACH;;AACD,QAAIc,gBAAJ,EAAsB;AAClB,WAAK1C,yBAAL,CAA+B4C,IAA/B,CAAoCN,WAApC;AACH;AACJ;;AACDsB,EAAAA,eAAe,GAAG;AACd,WAAO,KAAKC,iBAAL,MAA6B,KAAK3B,eAAL,KAAyB,CAA7D;AACH;;AACD4B,EAAAA,kBAAkB,GAAG;AACjB,WAAO,KAAKD,iBAAL,MAA6B,KAAK3B,eAAL,GAAuB,KAAKC,YAAhE;AACH;;AACD0B,EAAAA,iBAAiB,GAAG;AAChB,WAAO,KAAKzC,KAAL,IAAe,KAAKe,YAAL,IAAqBzC,aAA3C;AACH;;AAzM4C","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { Range } from '../../common/core/range.js';\nimport { MATCHES_LIMIT } from './findModel.js';\nfunction effectiveOptionValue(override, value) {\n    if (override === 1 /* True */) {\n        return true;\n    }\n    if (override === 2 /* False */) {\n        return false;\n    }\n    return value;\n}\nexport class FindReplaceState extends Disposable {\n    constructor() {\n        super();\n        this._onFindReplaceStateChange = this._register(new Emitter());\n        this.onFindReplaceStateChange = this._onFindReplaceStateChange.event;\n        this._searchString = '';\n        this._replaceString = '';\n        this._isRevealed = false;\n        this._isReplaceRevealed = false;\n        this._isRegex = false;\n        this._isRegexOverride = 0 /* NotSet */;\n        this._wholeWord = false;\n        this._wholeWordOverride = 0 /* NotSet */;\n        this._matchCase = false;\n        this._matchCaseOverride = 0 /* NotSet */;\n        this._preserveCase = false;\n        this._preserveCaseOverride = 0 /* NotSet */;\n        this._searchScope = null;\n        this._matchesPosition = 0;\n        this._matchesCount = 0;\n        this._currentMatch = null;\n        this._loop = true;\n    }\n    get searchString() { return this._searchString; }\n    get replaceString() { return this._replaceString; }\n    get isRevealed() { return this._isRevealed; }\n    get isReplaceRevealed() { return this._isReplaceRevealed; }\n    get isRegex() { return effectiveOptionValue(this._isRegexOverride, this._isRegex); }\n    get wholeWord() { return effectiveOptionValue(this._wholeWordOverride, this._wholeWord); }\n    get matchCase() { return effectiveOptionValue(this._matchCaseOverride, this._matchCase); }\n    get preserveCase() { return effectiveOptionValue(this._preserveCaseOverride, this._preserveCase); }\n    get actualIsRegex() { return this._isRegex; }\n    get actualWholeWord() { return this._wholeWord; }\n    get actualMatchCase() { return this._matchCase; }\n    get actualPreserveCase() { return this._preserveCase; }\n    get searchScope() { return this._searchScope; }\n    get matchesPosition() { return this._matchesPosition; }\n    get matchesCount() { return this._matchesCount; }\n    get currentMatch() { return this._currentMatch; }\n    changeMatchInfo(matchesPosition, matchesCount, currentMatch) {\n        let changeEvent = {\n            moveCursor: false,\n            updateHistory: false,\n            searchString: false,\n            replaceString: false,\n            isRevealed: false,\n            isReplaceRevealed: false,\n            isRegex: false,\n            wholeWord: false,\n            matchCase: false,\n            preserveCase: false,\n            searchScope: false,\n            matchesPosition: false,\n            matchesCount: false,\n            currentMatch: false,\n            loop: false\n        };\n        let somethingChanged = false;\n        if (matchesCount === 0) {\n            matchesPosition = 0;\n        }\n        if (matchesPosition > matchesCount) {\n            matchesPosition = matchesCount;\n        }\n        if (this._matchesPosition !== matchesPosition) {\n            this._matchesPosition = matchesPosition;\n            changeEvent.matchesPosition = true;\n            somethingChanged = true;\n        }\n        if (this._matchesCount !== matchesCount) {\n            this._matchesCount = matchesCount;\n            changeEvent.matchesCount = true;\n            somethingChanged = true;\n        }\n        if (typeof currentMatch !== 'undefined') {\n            if (!Range.equalsRange(this._currentMatch, currentMatch)) {\n                this._currentMatch = currentMatch;\n                changeEvent.currentMatch = true;\n                somethingChanged = true;\n            }\n        }\n        if (somethingChanged) {\n            this._onFindReplaceStateChange.fire(changeEvent);\n        }\n    }\n    change(newState, moveCursor, updateHistory = true) {\n        var _a;\n        let changeEvent = {\n            moveCursor: moveCursor,\n            updateHistory: updateHistory,\n            searchString: false,\n            replaceString: false,\n            isRevealed: false,\n            isReplaceRevealed: false,\n            isRegex: false,\n            wholeWord: false,\n            matchCase: false,\n            preserveCase: false,\n            searchScope: false,\n            matchesPosition: false,\n            matchesCount: false,\n            currentMatch: false,\n            loop: false\n        };\n        let somethingChanged = false;\n        const oldEffectiveIsRegex = this.isRegex;\n        const oldEffectiveWholeWords = this.wholeWord;\n        const oldEffectiveMatchCase = this.matchCase;\n        const oldEffectivePreserveCase = this.preserveCase;\n        if (typeof newState.searchString !== 'undefined') {\n            if (this._searchString !== newState.searchString) {\n                this._searchString = newState.searchString;\n                changeEvent.searchString = true;\n                somethingChanged = true;\n            }\n        }\n        if (typeof newState.replaceString !== 'undefined') {\n            if (this._replaceString !== newState.replaceString) {\n                this._replaceString = newState.replaceString;\n                changeEvent.replaceString = true;\n                somethingChanged = true;\n            }\n        }\n        if (typeof newState.isRevealed !== 'undefined') {\n            if (this._isRevealed !== newState.isRevealed) {\n                this._isRevealed = newState.isRevealed;\n                changeEvent.isRevealed = true;\n                somethingChanged = true;\n            }\n        }\n        if (typeof newState.isReplaceRevealed !== 'undefined') {\n            if (this._isReplaceRevealed !== newState.isReplaceRevealed) {\n                this._isReplaceRevealed = newState.isReplaceRevealed;\n                changeEvent.isReplaceRevealed = true;\n                somethingChanged = true;\n            }\n        }\n        if (typeof newState.isRegex !== 'undefined') {\n            this._isRegex = newState.isRegex;\n        }\n        if (typeof newState.wholeWord !== 'undefined') {\n            this._wholeWord = newState.wholeWord;\n        }\n        if (typeof newState.matchCase !== 'undefined') {\n            this._matchCase = newState.matchCase;\n        }\n        if (typeof newState.preserveCase !== 'undefined') {\n            this._preserveCase = newState.preserveCase;\n        }\n        if (typeof newState.searchScope !== 'undefined') {\n            if (!((_a = newState.searchScope) === null || _a === void 0 ? void 0 : _a.every((newSearchScope) => {\n                var _a;\n                return (_a = this._searchScope) === null || _a === void 0 ? void 0 : _a.some(existingSearchScope => {\n                    return !Range.equalsRange(existingSearchScope, newSearchScope);\n                });\n            }))) {\n                this._searchScope = newState.searchScope;\n                changeEvent.searchScope = true;\n                somethingChanged = true;\n            }\n        }\n        if (typeof newState.loop !== 'undefined') {\n            if (this._loop !== newState.loop) {\n                this._loop = newState.loop;\n                changeEvent.loop = true;\n                somethingChanged = true;\n            }\n        }\n        // Overrides get set when they explicitly come in and get reset anytime something else changes\n        this._isRegexOverride = (typeof newState.isRegexOverride !== 'undefined' ? newState.isRegexOverride : 0 /* NotSet */);\n        this._wholeWordOverride = (typeof newState.wholeWordOverride !== 'undefined' ? newState.wholeWordOverride : 0 /* NotSet */);\n        this._matchCaseOverride = (typeof newState.matchCaseOverride !== 'undefined' ? newState.matchCaseOverride : 0 /* NotSet */);\n        this._preserveCaseOverride = (typeof newState.preserveCaseOverride !== 'undefined' ? newState.preserveCaseOverride : 0 /* NotSet */);\n        if (oldEffectiveIsRegex !== this.isRegex) {\n            somethingChanged = true;\n            changeEvent.isRegex = true;\n        }\n        if (oldEffectiveWholeWords !== this.wholeWord) {\n            somethingChanged = true;\n            changeEvent.wholeWord = true;\n        }\n        if (oldEffectiveMatchCase !== this.matchCase) {\n            somethingChanged = true;\n            changeEvent.matchCase = true;\n        }\n        if (oldEffectivePreserveCase !== this.preserveCase) {\n            somethingChanged = true;\n            changeEvent.preserveCase = true;\n        }\n        if (somethingChanged) {\n            this._onFindReplaceStateChange.fire(changeEvent);\n        }\n    }\n    canNavigateBack() {\n        return this.canNavigateInLoop() || (this.matchesPosition !== 1);\n    }\n    canNavigateForward() {\n        return this.canNavigateInLoop() || (this.matchesPosition < this.matchesCount);\n    }\n    canNavigateInLoop() {\n        return this._loop || (this.matchesCount >= MATCHES_LIMIT);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}