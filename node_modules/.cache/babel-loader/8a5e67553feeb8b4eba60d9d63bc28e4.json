{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../base/browser/dom.js';\nimport { asArray } from '../../../base/common/arrays.js';\nimport { isEmptyMarkdownString } from '../../../base/common/htmlContent.js';\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\nimport { MarkdownRenderer } from '../../browser/core/markdownRenderer.js';\nimport { HoverOperation } from './hoverOperation.js';\nimport { Widget } from '../../../base/browser/ui/widget.js';\nimport { NullOpenerService } from '../../../platform/opener/common/opener.js';\nimport { HoverWidget } from '../../../base/browser/ui/hover/hoverWidget.js';\nconst $ = dom.$;\n\nclass MarginComputer {\n  constructor(editor) {\n    this._editor = editor;\n    this._lineNumber = -1;\n    this._result = [];\n  }\n\n  setLineNumber(lineNumber) {\n    this._lineNumber = lineNumber;\n    this._result = [];\n  }\n\n  clearResult() {\n    this._result = [];\n  }\n\n  computeSync() {\n    const toHoverMessage = contents => {\n      return {\n        value: contents\n      };\n    };\n\n    const lineDecorations = this._editor.getLineDecorations(this._lineNumber);\n\n    const result = [];\n\n    if (!lineDecorations) {\n      return result;\n    }\n\n    for (const d of lineDecorations) {\n      if (!d.options.glyphMarginClassName) {\n        continue;\n      }\n\n      const hoverMessage = d.options.glyphMarginHoverMessage;\n\n      if (!hoverMessage || isEmptyMarkdownString(hoverMessage)) {\n        continue;\n      }\n\n      result.push(...asArray(hoverMessage).map(toHoverMessage));\n    }\n\n    return result;\n  }\n\n  onResult(result, isFromSynchronousComputation) {\n    this._result = this._result.concat(result);\n  }\n\n  getResult() {\n    return this._result;\n  }\n\n  getResultWithLoadingMessage() {\n    return this.getResult();\n  }\n\n}\n\nexport class ModesGlyphHoverWidget extends Widget {\n  constructor(editor, modeService) {\n    let openerService = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : NullOpenerService;\n    super();\n    this._renderDisposeables = this._register(new DisposableStore());\n    this._editor = editor;\n    this._isVisible = false;\n    this._messages = [];\n    this._lastLineNumber = -1;\n    this._hover = this._register(new HoverWidget());\n\n    this._hover.containerDomNode.classList.toggle('hidden', !this._isVisible);\n\n    this._markdownRenderer = this._register(new MarkdownRenderer({\n      editor: this._editor\n    }, modeService, openerService));\n    this._computer = new MarginComputer(this._editor);\n    this._hoverOperation = new HoverOperation(this._computer, result => this._withResult(result), undefined, result => this._withResult(result), 300);\n\n    this._register(this._editor.onDidChangeConfiguration(e => {\n      if (e.hasChanged(43\n      /* fontInfo */\n      )) {\n        this._updateFont();\n      }\n    }));\n\n    this._editor.addOverlayWidget(this);\n  }\n\n  dispose() {\n    this._hoverOperation.cancel();\n\n    this._editor.removeOverlayWidget(this);\n\n    super.dispose();\n  }\n\n  getId() {\n    return ModesGlyphHoverWidget.ID;\n  }\n\n  getDomNode() {\n    return this._hover.containerDomNode;\n  }\n\n  getPosition() {\n    return null;\n  }\n\n  _showAt(lineNumber) {\n    if (!this._isVisible) {\n      this._isVisible = true;\n\n      this._hover.containerDomNode.classList.toggle('hidden', !this._isVisible);\n    }\n\n    const editorLayout = this._editor.getLayoutInfo();\n\n    const topForLineNumber = this._editor.getTopForLineNumber(lineNumber);\n\n    const editorScrollTop = this._editor.getScrollTop();\n\n    const lineHeight = this._editor.getOption(58\n    /* lineHeight */\n    );\n\n    const nodeHeight = this._hover.containerDomNode.clientHeight;\n    const top = topForLineNumber - editorScrollTop - (nodeHeight - lineHeight) / 2;\n    this._hover.containerDomNode.style.left = `${editorLayout.glyphMarginLeft + editorLayout.glyphMarginWidth}px`;\n    this._hover.containerDomNode.style.top = `${Math.max(Math.round(top), 0)}px`;\n  }\n\n  _updateFont() {\n    const codeClasses = Array.prototype.slice.call(this._hover.contentsDomNode.getElementsByClassName('code'));\n    codeClasses.forEach(node => this._editor.applyFontInfo(node));\n  }\n\n  _updateContents(node) {\n    this._hover.contentsDomNode.textContent = '';\n\n    this._hover.contentsDomNode.appendChild(node);\n\n    this._updateFont();\n  }\n\n  onModelDecorationsChanged() {\n    if (this._isVisible) {\n      // The decorations have changed and the hover is visible,\n      // we need to recompute the displayed text\n      this._hoverOperation.cancel();\n\n      this._computer.clearResult();\n\n      this._hoverOperation.start(0\n      /* Delayed */\n      );\n    }\n  }\n\n  startShowingAt(lineNumber) {\n    if (this._lastLineNumber === lineNumber) {\n      // We have to show the widget at the exact same line number as before, so no work is needed\n      return;\n    }\n\n    this._hoverOperation.cancel();\n\n    this.hide();\n    this._lastLineNumber = lineNumber;\n\n    this._computer.setLineNumber(lineNumber);\n\n    this._hoverOperation.start(0\n    /* Delayed */\n    );\n  }\n\n  hide() {\n    this._lastLineNumber = -1;\n\n    this._hoverOperation.cancel();\n\n    if (!this._isVisible) {\n      return;\n    }\n\n    this._isVisible = false;\n\n    this._hover.containerDomNode.classList.toggle('hidden', !this._isVisible);\n  }\n\n  _withResult(result) {\n    this._messages = result;\n\n    if (this._messages.length > 0) {\n      this._renderMessages(this._lastLineNumber, this._messages);\n    } else {\n      this.hide();\n    }\n  }\n\n  _renderMessages(lineNumber, messages) {\n    this._renderDisposeables.clear();\n\n    const fragment = document.createDocumentFragment();\n\n    for (const msg of messages) {\n      const markdownHoverElement = $('div.hover-row.markdown-hover');\n      const hoverContentsElement = dom.append(markdownHoverElement, $('div.hover-contents'));\n\n      const renderedContents = this._renderDisposeables.add(this._markdownRenderer.render(msg.value));\n\n      hoverContentsElement.appendChild(renderedContents.element);\n      fragment.appendChild(markdownHoverElement);\n    }\n\n    this._updateContents(fragment);\n\n    this._showAt(lineNumber);\n  }\n\n}\nModesGlyphHoverWidget.ID = 'editor.contrib.modesGlyphHoverWidget';","map":{"version":3,"sources":["/home/umut/Documents/cs/cs410/Project2Group14/node_modules/monaco-editor/esm/vs/editor/contrib/hover/modesGlyphHover.js"],"names":["dom","asArray","isEmptyMarkdownString","DisposableStore","MarkdownRenderer","HoverOperation","Widget","NullOpenerService","HoverWidget","$","MarginComputer","constructor","editor","_editor","_lineNumber","_result","setLineNumber","lineNumber","clearResult","computeSync","toHoverMessage","contents","value","lineDecorations","getLineDecorations","result","d","options","glyphMarginClassName","hoverMessage","glyphMarginHoverMessage","push","map","onResult","isFromSynchronousComputation","concat","getResult","getResultWithLoadingMessage","ModesGlyphHoverWidget","modeService","openerService","_renderDisposeables","_register","_isVisible","_messages","_lastLineNumber","_hover","containerDomNode","classList","toggle","_markdownRenderer","_computer","_hoverOperation","_withResult","undefined","onDidChangeConfiguration","e","hasChanged","_updateFont","addOverlayWidget","dispose","cancel","removeOverlayWidget","getId","ID","getDomNode","getPosition","_showAt","editorLayout","getLayoutInfo","topForLineNumber","getTopForLineNumber","editorScrollTop","getScrollTop","lineHeight","getOption","nodeHeight","clientHeight","top","style","left","glyphMarginLeft","glyphMarginWidth","Math","max","round","codeClasses","Array","prototype","slice","call","contentsDomNode","getElementsByClassName","forEach","node","applyFontInfo","_updateContents","textContent","appendChild","onModelDecorationsChanged","start","startShowingAt","hide","length","_renderMessages","messages","clear","fragment","document","createDocumentFragment","msg","markdownHoverElement","hoverContentsElement","append","renderedContents","add","render","element"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../base/browser/dom.js';\nimport { asArray } from '../../../base/common/arrays.js';\nimport { isEmptyMarkdownString } from '../../../base/common/htmlContent.js';\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\nimport { MarkdownRenderer } from '../../browser/core/markdownRenderer.js';\nimport { HoverOperation } from './hoverOperation.js';\nimport { Widget } from '../../../base/browser/ui/widget.js';\nimport { NullOpenerService } from '../../../platform/opener/common/opener.js';\nimport { HoverWidget } from '../../../base/browser/ui/hover/hoverWidget.js';\nconst $ = dom.$;\nclass MarginComputer {\n    constructor(editor) {\n        this._editor = editor;\n        this._lineNumber = -1;\n        this._result = [];\n    }\n    setLineNumber(lineNumber) {\n        this._lineNumber = lineNumber;\n        this._result = [];\n    }\n    clearResult() {\n        this._result = [];\n    }\n    computeSync() {\n        const toHoverMessage = (contents) => {\n            return {\n                value: contents\n            };\n        };\n        const lineDecorations = this._editor.getLineDecorations(this._lineNumber);\n        const result = [];\n        if (!lineDecorations) {\n            return result;\n        }\n        for (const d of lineDecorations) {\n            if (!d.options.glyphMarginClassName) {\n                continue;\n            }\n            const hoverMessage = d.options.glyphMarginHoverMessage;\n            if (!hoverMessage || isEmptyMarkdownString(hoverMessage)) {\n                continue;\n            }\n            result.push(...asArray(hoverMessage).map(toHoverMessage));\n        }\n        return result;\n    }\n    onResult(result, isFromSynchronousComputation) {\n        this._result = this._result.concat(result);\n    }\n    getResult() {\n        return this._result;\n    }\n    getResultWithLoadingMessage() {\n        return this.getResult();\n    }\n}\nexport class ModesGlyphHoverWidget extends Widget {\n    constructor(editor, modeService, openerService = NullOpenerService) {\n        super();\n        this._renderDisposeables = this._register(new DisposableStore());\n        this._editor = editor;\n        this._isVisible = false;\n        this._messages = [];\n        this._lastLineNumber = -1;\n        this._hover = this._register(new HoverWidget());\n        this._hover.containerDomNode.classList.toggle('hidden', !this._isVisible);\n        this._markdownRenderer = this._register(new MarkdownRenderer({ editor: this._editor }, modeService, openerService));\n        this._computer = new MarginComputer(this._editor);\n        this._hoverOperation = new HoverOperation(this._computer, (result) => this._withResult(result), undefined, (result) => this._withResult(result), 300);\n        this._register(this._editor.onDidChangeConfiguration((e) => {\n            if (e.hasChanged(43 /* fontInfo */)) {\n                this._updateFont();\n            }\n        }));\n        this._editor.addOverlayWidget(this);\n    }\n    dispose() {\n        this._hoverOperation.cancel();\n        this._editor.removeOverlayWidget(this);\n        super.dispose();\n    }\n    getId() {\n        return ModesGlyphHoverWidget.ID;\n    }\n    getDomNode() {\n        return this._hover.containerDomNode;\n    }\n    getPosition() {\n        return null;\n    }\n    _showAt(lineNumber) {\n        if (!this._isVisible) {\n            this._isVisible = true;\n            this._hover.containerDomNode.classList.toggle('hidden', !this._isVisible);\n        }\n        const editorLayout = this._editor.getLayoutInfo();\n        const topForLineNumber = this._editor.getTopForLineNumber(lineNumber);\n        const editorScrollTop = this._editor.getScrollTop();\n        const lineHeight = this._editor.getOption(58 /* lineHeight */);\n        const nodeHeight = this._hover.containerDomNode.clientHeight;\n        const top = topForLineNumber - editorScrollTop - ((nodeHeight - lineHeight) / 2);\n        this._hover.containerDomNode.style.left = `${editorLayout.glyphMarginLeft + editorLayout.glyphMarginWidth}px`;\n        this._hover.containerDomNode.style.top = `${Math.max(Math.round(top), 0)}px`;\n    }\n    _updateFont() {\n        const codeClasses = Array.prototype.slice.call(this._hover.contentsDomNode.getElementsByClassName('code'));\n        codeClasses.forEach(node => this._editor.applyFontInfo(node));\n    }\n    _updateContents(node) {\n        this._hover.contentsDomNode.textContent = '';\n        this._hover.contentsDomNode.appendChild(node);\n        this._updateFont();\n    }\n    onModelDecorationsChanged() {\n        if (this._isVisible) {\n            // The decorations have changed and the hover is visible,\n            // we need to recompute the displayed text\n            this._hoverOperation.cancel();\n            this._computer.clearResult();\n            this._hoverOperation.start(0 /* Delayed */);\n        }\n    }\n    startShowingAt(lineNumber) {\n        if (this._lastLineNumber === lineNumber) {\n            // We have to show the widget at the exact same line number as before, so no work is needed\n            return;\n        }\n        this._hoverOperation.cancel();\n        this.hide();\n        this._lastLineNumber = lineNumber;\n        this._computer.setLineNumber(lineNumber);\n        this._hoverOperation.start(0 /* Delayed */);\n    }\n    hide() {\n        this._lastLineNumber = -1;\n        this._hoverOperation.cancel();\n        if (!this._isVisible) {\n            return;\n        }\n        this._isVisible = false;\n        this._hover.containerDomNode.classList.toggle('hidden', !this._isVisible);\n    }\n    _withResult(result) {\n        this._messages = result;\n        if (this._messages.length > 0) {\n            this._renderMessages(this._lastLineNumber, this._messages);\n        }\n        else {\n            this.hide();\n        }\n    }\n    _renderMessages(lineNumber, messages) {\n        this._renderDisposeables.clear();\n        const fragment = document.createDocumentFragment();\n        for (const msg of messages) {\n            const markdownHoverElement = $('div.hover-row.markdown-hover');\n            const hoverContentsElement = dom.append(markdownHoverElement, $('div.hover-contents'));\n            const renderedContents = this._renderDisposeables.add(this._markdownRenderer.render(msg.value));\n            hoverContentsElement.appendChild(renderedContents.element);\n            fragment.appendChild(markdownHoverElement);\n        }\n        this._updateContents(fragment);\n        this._showAt(lineNumber);\n    }\n}\nModesGlyphHoverWidget.ID = 'editor.contrib.modesGlyphHoverWidget';\n"]},"metadata":{},"sourceType":"module"}