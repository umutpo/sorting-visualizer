{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { assertType } from '../../../base/common/types.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { IModelService } from '../../common/services/modelService.js';\nimport { ITextModelService } from '../../common/services/resolverService.js';\nimport { OutlineModel } from './outlineModel.js';\nimport { CommandsRegistry } from '../../../platform/commands/common/commands.js';\nexport function getDocumentSymbols(document, flat, token) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const model = yield OutlineModel.create(document, token);\n    return flat ? model.asListOfDocumentSymbols() : model.getTopLevelSymbols();\n  });\n}\nCommandsRegistry.registerCommand('_executeDocumentSymbolProvider', function (accessor) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  return __awaiter(this, void 0, void 0, function* () {\n    const [resource] = args;\n    assertType(URI.isUri(resource));\n    const model = accessor.get(IModelService).getModel(resource);\n\n    if (model) {\n      return getDocumentSymbols(model, false, CancellationToken.None);\n    }\n\n    const reference = yield accessor.get(ITextModelService).createModelReference(resource);\n\n    try {\n      return yield getDocumentSymbols(reference.object.textEditorModel, false, CancellationToken.None);\n    } finally {\n      reference.dispose();\n    }\n  });\n});","map":{"version":3,"sources":["/home/umut/Documents/cs/cs410/Project2Group14/node_modules/monaco-editor/esm/vs/editor/contrib/documentSymbols/documentSymbols.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","CancellationToken","assertType","URI","IModelService","ITextModelService","OutlineModel","CommandsRegistry","getDocumentSymbols","document","flat","token","model","create","asListOfDocumentSymbols","getTopLevelSymbols","registerCommand","accessor","args","resource","isUri","get","getModel","None","reference","createModelReference","object","textEditorModel","dispose"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { assertType } from '../../../base/common/types.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { IModelService } from '../../common/services/modelService.js';\nimport { ITextModelService } from '../../common/services/resolverService.js';\nimport { OutlineModel } from './outlineModel.js';\nimport { CommandsRegistry } from '../../../platform/commands/common/commands.js';\nexport function getDocumentSymbols(document, flat, token) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const model = yield OutlineModel.create(document, token);\n        return flat\n            ? model.asListOfDocumentSymbols()\n            : model.getTopLevelSymbols();\n    });\n}\nCommandsRegistry.registerCommand('_executeDocumentSymbolProvider', function (accessor, ...args) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const [resource] = args;\n        assertType(URI.isUri(resource));\n        const model = accessor.get(IModelService).getModel(resource);\n        if (model) {\n            return getDocumentSymbols(model, false, CancellationToken.None);\n        }\n        const reference = yield accessor.get(ITextModelService).createModelReference(resource);\n        try {\n            return yield getDocumentSymbols(reference.object.textEditorModel, false, CancellationToken.None);\n        }\n        finally {\n            reference.dispose();\n        }\n    });\n});\n"]},"metadata":{},"sourceType":"module"}