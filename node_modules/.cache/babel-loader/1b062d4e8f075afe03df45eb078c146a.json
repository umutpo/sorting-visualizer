{"ast":null,"code":"export function memoize(_target, key, descriptor) {\n  let fnKey = null;\n  let fn = null;\n\n  if (typeof descriptor.value === 'function') {\n    fnKey = 'value';\n    fn = descriptor.value;\n\n    if (fn.length !== 0) {\n      console.warn('Memoize should only be used in functions with zero parameters');\n    }\n  } else if (typeof descriptor.get === 'function') {\n    fnKey = 'get';\n    fn = descriptor.get;\n  }\n\n  if (!fn) {\n    throw new Error('not supported');\n  }\n\n  const memoizeKey = `$memoize$${key}`;\n\n  descriptor[fnKey] = function () {\n    if (!this.hasOwnProperty(memoizeKey)) {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      Object.defineProperty(this, memoizeKey, {\n        configurable: false,\n        enumerable: false,\n        writable: false,\n        value: fn.apply(this, args)\n      });\n    }\n\n    return this[memoizeKey];\n  };\n}","map":{"version":3,"sources":["/home/umut/Documents/cs/cs410/Project2Group14/node_modules/monaco-editor/esm/vs/base/common/decorators.js"],"names":["memoize","_target","key","descriptor","fnKey","fn","value","length","console","warn","get","Error","memoizeKey","hasOwnProperty","args","Object","defineProperty","configurable","enumerable","writable","apply"],"mappings":"AAAA,OAAO,SAASA,OAAT,CAAiBC,OAAjB,EAA0BC,GAA1B,EAA+BC,UAA/B,EAA2C;AAC9C,MAAIC,KAAK,GAAG,IAAZ;AACA,MAAIC,EAAE,GAAG,IAAT;;AACA,MAAI,OAAOF,UAAU,CAACG,KAAlB,KAA4B,UAAhC,EAA4C;AACxCF,IAAAA,KAAK,GAAG,OAAR;AACAC,IAAAA,EAAE,GAAGF,UAAU,CAACG,KAAhB;;AACA,QAAID,EAAE,CAACE,MAAH,KAAc,CAAlB,EAAqB;AACjBC,MAAAA,OAAO,CAACC,IAAR,CAAa,+DAAb;AACH;AACJ,GAND,MAOK,IAAI,OAAON,UAAU,CAACO,GAAlB,KAA0B,UAA9B,EAA0C;AAC3CN,IAAAA,KAAK,GAAG,KAAR;AACAC,IAAAA,EAAE,GAAGF,UAAU,CAACO,GAAhB;AACH;;AACD,MAAI,CAACL,EAAL,EAAS;AACL,UAAM,IAAIM,KAAJ,CAAU,eAAV,CAAN;AACH;;AACD,QAAMC,UAAU,GAAI,YAAWV,GAAI,EAAnC;;AACAC,EAAAA,UAAU,CAACC,KAAD,CAAV,GAAoB,YAAmB;AACnC,QAAI,CAAC,KAAKS,cAAL,CAAoBD,UAApB,CAAL,EAAsC;AAAA,wCADTE,IACS;AADTA,QAAAA,IACS;AAAA;;AAClCC,MAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4BJ,UAA5B,EAAwC;AACpCK,QAAAA,YAAY,EAAE,KADsB;AAEpCC,QAAAA,UAAU,EAAE,KAFwB;AAGpCC,QAAAA,QAAQ,EAAE,KAH0B;AAIpCb,QAAAA,KAAK,EAAED,EAAE,CAACe,KAAH,CAAS,IAAT,EAAeN,IAAf;AAJ6B,OAAxC;AAMH;;AACD,WAAO,KAAKF,UAAL,CAAP;AACH,GAVD;AAWH","sourcesContent":["export function memoize(_target, key, descriptor) {\n    let fnKey = null;\n    let fn = null;\n    if (typeof descriptor.value === 'function') {\n        fnKey = 'value';\n        fn = descriptor.value;\n        if (fn.length !== 0) {\n            console.warn('Memoize should only be used in functions with zero parameters');\n        }\n    }\n    else if (typeof descriptor.get === 'function') {\n        fnKey = 'get';\n        fn = descriptor.get;\n    }\n    if (!fn) {\n        throw new Error('not supported');\n    }\n    const memoizeKey = `$memoize$${key}`;\n    descriptor[fnKey] = function (...args) {\n        if (!this.hasOwnProperty(memoizeKey)) {\n            Object.defineProperty(this, memoizeKey, {\n                configurable: false,\n                enumerable: false,\n                writable: false,\n                value: fn.apply(this, args)\n            });\n        }\n        return this[memoizeKey];\n    };\n}\n"]},"metadata":{},"sourceType":"module"}