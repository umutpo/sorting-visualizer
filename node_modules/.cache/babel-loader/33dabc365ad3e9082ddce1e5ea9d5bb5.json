{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Selection } from '../core/selection.js';\nexport class ReplaceCommand {\n  constructor(range, text) {\n    let insertsAutoWhitespace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    this._range = range;\n    this._text = text;\n    this.insertsAutoWhitespace = insertsAutoWhitespace;\n  }\n\n  getEditOperations(model, builder) {\n    builder.addTrackedEditOperation(this._range, this._text);\n  }\n\n  computeCursorState(model, helper) {\n    let inverseEditOperations = helper.getInverseEditOperations();\n    let srcRange = inverseEditOperations[0].range;\n    return new Selection(srcRange.endLineNumber, srcRange.endColumn, srcRange.endLineNumber, srcRange.endColumn);\n  }\n\n}\nexport class ReplaceCommandThatSelectsText {\n  constructor(range, text) {\n    this._range = range;\n    this._text = text;\n  }\n\n  getEditOperations(model, builder) {\n    builder.addTrackedEditOperation(this._range, this._text);\n  }\n\n  computeCursorState(model, helper) {\n    const inverseEditOperations = helper.getInverseEditOperations();\n    const srcRange = inverseEditOperations[0].range;\n    return new Selection(srcRange.startLineNumber, srcRange.startColumn, srcRange.endLineNumber, srcRange.endColumn);\n  }\n\n}\nexport class ReplaceCommandWithoutChangingPosition {\n  constructor(range, text) {\n    let insertsAutoWhitespace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    this._range = range;\n    this._text = text;\n    this.insertsAutoWhitespace = insertsAutoWhitespace;\n  }\n\n  getEditOperations(model, builder) {\n    builder.addTrackedEditOperation(this._range, this._text);\n  }\n\n  computeCursorState(model, helper) {\n    let inverseEditOperations = helper.getInverseEditOperations();\n    let srcRange = inverseEditOperations[0].range;\n    return new Selection(srcRange.startLineNumber, srcRange.startColumn, srcRange.startLineNumber, srcRange.startColumn);\n  }\n\n}\nexport class ReplaceCommandWithOffsetCursorState {\n  constructor(range, text, lineNumberDeltaOffset, columnDeltaOffset) {\n    let insertsAutoWhitespace = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    this._range = range;\n    this._text = text;\n    this._columnDeltaOffset = columnDeltaOffset;\n    this._lineNumberDeltaOffset = lineNumberDeltaOffset;\n    this.insertsAutoWhitespace = insertsAutoWhitespace;\n  }\n\n  getEditOperations(model, builder) {\n    builder.addTrackedEditOperation(this._range, this._text);\n  }\n\n  computeCursorState(model, helper) {\n    let inverseEditOperations = helper.getInverseEditOperations();\n    let srcRange = inverseEditOperations[0].range;\n    return new Selection(srcRange.endLineNumber + this._lineNumberDeltaOffset, srcRange.endColumn + this._columnDeltaOffset, srcRange.endLineNumber + this._lineNumberDeltaOffset, srcRange.endColumn + this._columnDeltaOffset);\n  }\n\n}\nexport class ReplaceCommandThatPreservesSelection {\n  constructor(editRange, text, initialSelection) {\n    let forceMoveMarkers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    this._range = editRange;\n    this._text = text;\n    this._initialSelection = initialSelection;\n    this._forceMoveMarkers = forceMoveMarkers;\n    this._selectionId = null;\n  }\n\n  getEditOperations(model, builder) {\n    builder.addTrackedEditOperation(this._range, this._text, this._forceMoveMarkers);\n    this._selectionId = builder.trackSelection(this._initialSelection);\n  }\n\n  computeCursorState(model, helper) {\n    return helper.getTrackedSelection(this._selectionId);\n  }\n\n}","map":{"version":3,"sources":["/home/umut/Documents/cs/cs410/Project2Group14/node_modules/monaco-editor/esm/vs/editor/common/commands/replaceCommand.js"],"names":["Selection","ReplaceCommand","constructor","range","text","insertsAutoWhitespace","_range","_text","getEditOperations","model","builder","addTrackedEditOperation","computeCursorState","helper","inverseEditOperations","getInverseEditOperations","srcRange","endLineNumber","endColumn","ReplaceCommandThatSelectsText","startLineNumber","startColumn","ReplaceCommandWithoutChangingPosition","ReplaceCommandWithOffsetCursorState","lineNumberDeltaOffset","columnDeltaOffset","_columnDeltaOffset","_lineNumberDeltaOffset","ReplaceCommandThatPreservesSelection","editRange","initialSelection","forceMoveMarkers","_initialSelection","_forceMoveMarkers","_selectionId","trackSelection","getTrackedSelection"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Selection } from '../core/selection.js';\nexport class ReplaceCommand {\n    constructor(range, text, insertsAutoWhitespace = false) {\n        this._range = range;\n        this._text = text;\n        this.insertsAutoWhitespace = insertsAutoWhitespace;\n    }\n    getEditOperations(model, builder) {\n        builder.addTrackedEditOperation(this._range, this._text);\n    }\n    computeCursorState(model, helper) {\n        let inverseEditOperations = helper.getInverseEditOperations();\n        let srcRange = inverseEditOperations[0].range;\n        return new Selection(srcRange.endLineNumber, srcRange.endColumn, srcRange.endLineNumber, srcRange.endColumn);\n    }\n}\nexport class ReplaceCommandThatSelectsText {\n    constructor(range, text) {\n        this._range = range;\n        this._text = text;\n    }\n    getEditOperations(model, builder) {\n        builder.addTrackedEditOperation(this._range, this._text);\n    }\n    computeCursorState(model, helper) {\n        const inverseEditOperations = helper.getInverseEditOperations();\n        const srcRange = inverseEditOperations[0].range;\n        return new Selection(srcRange.startLineNumber, srcRange.startColumn, srcRange.endLineNumber, srcRange.endColumn);\n    }\n}\nexport class ReplaceCommandWithoutChangingPosition {\n    constructor(range, text, insertsAutoWhitespace = false) {\n        this._range = range;\n        this._text = text;\n        this.insertsAutoWhitespace = insertsAutoWhitespace;\n    }\n    getEditOperations(model, builder) {\n        builder.addTrackedEditOperation(this._range, this._text);\n    }\n    computeCursorState(model, helper) {\n        let inverseEditOperations = helper.getInverseEditOperations();\n        let srcRange = inverseEditOperations[0].range;\n        return new Selection(srcRange.startLineNumber, srcRange.startColumn, srcRange.startLineNumber, srcRange.startColumn);\n    }\n}\nexport class ReplaceCommandWithOffsetCursorState {\n    constructor(range, text, lineNumberDeltaOffset, columnDeltaOffset, insertsAutoWhitespace = false) {\n        this._range = range;\n        this._text = text;\n        this._columnDeltaOffset = columnDeltaOffset;\n        this._lineNumberDeltaOffset = lineNumberDeltaOffset;\n        this.insertsAutoWhitespace = insertsAutoWhitespace;\n    }\n    getEditOperations(model, builder) {\n        builder.addTrackedEditOperation(this._range, this._text);\n    }\n    computeCursorState(model, helper) {\n        let inverseEditOperations = helper.getInverseEditOperations();\n        let srcRange = inverseEditOperations[0].range;\n        return new Selection(srcRange.endLineNumber + this._lineNumberDeltaOffset, srcRange.endColumn + this._columnDeltaOffset, srcRange.endLineNumber + this._lineNumberDeltaOffset, srcRange.endColumn + this._columnDeltaOffset);\n    }\n}\nexport class ReplaceCommandThatPreservesSelection {\n    constructor(editRange, text, initialSelection, forceMoveMarkers = false) {\n        this._range = editRange;\n        this._text = text;\n        this._initialSelection = initialSelection;\n        this._forceMoveMarkers = forceMoveMarkers;\n        this._selectionId = null;\n    }\n    getEditOperations(model, builder) {\n        builder.addTrackedEditOperation(this._range, this._text, this._forceMoveMarkers);\n        this._selectionId = builder.trackSelection(this._initialSelection);\n    }\n    computeCursorState(model, helper) {\n        return helper.getTrackedSelection(this._selectionId);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}