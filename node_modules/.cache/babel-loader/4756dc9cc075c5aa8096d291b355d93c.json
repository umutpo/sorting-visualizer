{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './standalone-tokens.css';\nimport { ICodeEditorService } from '../../browser/services/codeEditorService.js';\nimport { OpenerService } from '../../browser/services/openerService.js';\nimport { DiffNavigator } from '../../browser/widget/diffNavigator.js';\nimport { EditorOptions, ConfigurationChangedEvent } from '../../common/config/editorOptions.js';\nimport { BareFontInfo, FontInfo } from '../../common/config/fontInfo.js';\nimport { EditorType } from '../../common/editorCommon.js';\nimport { FindMatch, TextModelResolvedOptions } from '../../common/model.js';\nimport * as modes from '../../common/modes.js';\nimport { NULL_STATE, nullTokenize } from '../../common/modes/nullMode.js';\nimport { IEditorWorkerService } from '../../common/services/editorWorkerService.js';\nimport { IModeService } from '../../common/services/modeService.js';\nimport { ITextModelService } from '../../common/services/resolverService.js';\nimport { createWebWorker as actualCreateWebWorker } from '../../common/services/webWorker.js';\nimport * as standaloneEnums from '../../common/standalone/standaloneEnums.js';\nimport { Colorizer } from './colorizer.js';\nimport { SimpleEditorModelResolverService } from './simpleServices.js';\nimport { StandaloneDiffEditor, StandaloneEditor, createTextModel } from './standaloneCodeEditor.js';\nimport { DynamicStandaloneServices, StaticServices } from './standaloneServices.js';\nimport { IStandaloneThemeService } from '../common/standaloneThemeService.js';\nimport { CommandsRegistry, ICommandService } from '../../../platform/commands/common/commands.js';\nimport { IConfigurationService } from '../../../platform/configuration/common/configuration.js';\nimport { IContextKeyService } from '../../../platform/contextkey/common/contextkey.js';\nimport { IContextViewService, IContextMenuService } from '../../../platform/contextview/browser/contextView.js';\nimport { IInstantiationService } from '../../../platform/instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../../platform/keybinding/common/keybinding.js';\nimport { INotificationService } from '../../../platform/notification/common/notification.js';\nimport { IOpenerService } from '../../../platform/opener/common/opener.js';\nimport { IAccessibilityService } from '../../../platform/accessibility/common/accessibility.js';\nimport { clearAllFontInfos } from '../../browser/config/configuration.js';\nimport { IEditorProgressService } from '../../../platform/progress/common/progress.js';\nimport { IClipboardService } from '../../../platform/clipboard/common/clipboardService.js';\nimport { splitLines } from '../../../base/common/strings.js';\nimport { IModelService } from '../../common/services/modelService.js';\n\nfunction withAllStandaloneServices(domElement, override, callback) {\n  let services = new DynamicStandaloneServices(domElement, override);\n  let simpleEditorModelResolverService = null;\n\n  if (!services.has(ITextModelService)) {\n    simpleEditorModelResolverService = new SimpleEditorModelResolverService(StaticServices.modelService.get());\n    services.set(ITextModelService, simpleEditorModelResolverService);\n  }\n\n  if (!services.has(IOpenerService)) {\n    services.set(IOpenerService, new OpenerService(services.get(ICodeEditorService), services.get(ICommandService)));\n  }\n\n  let result = callback(services);\n\n  if (simpleEditorModelResolverService) {\n    simpleEditorModelResolverService.setEditor(result);\n  }\n\n  return result;\n}\n/**\n * Create a new editor under `domElement`.\n * `domElement` should be empty (not contain other dom nodes).\n * The editor will read the size of `domElement`.\n */\n\n\nexport function create(domElement, options, override) {\n  return withAllStandaloneServices(domElement, override || {}, services => {\n    return new StandaloneEditor(domElement, options, services, services.get(IInstantiationService), services.get(ICodeEditorService), services.get(ICommandService), services.get(IContextKeyService), services.get(IKeybindingService), services.get(IContextViewService), services.get(IStandaloneThemeService), services.get(INotificationService), services.get(IConfigurationService), services.get(IAccessibilityService), services.get(IModelService), services.get(IModeService));\n  });\n}\n/**\n * Emitted when an editor is created.\n * Creating a diff editor might cause this listener to be invoked with the two editors.\n * @event\n */\n\nexport function onDidCreateEditor(listener) {\n  return StaticServices.codeEditorService.get().onCodeEditorAdd(editor => {\n    listener(editor);\n  });\n}\n/**\n * Create a new diff editor under `domElement`.\n * `domElement` should be empty (not contain other dom nodes).\n * The editor will read the size of `domElement`.\n */\n\nexport function createDiffEditor(domElement, options, override) {\n  return withAllStandaloneServices(domElement, override || {}, services => {\n    return new StandaloneDiffEditor(domElement, options, services, services.get(IInstantiationService), services.get(IContextKeyService), services.get(IKeybindingService), services.get(IContextViewService), services.get(IEditorWorkerService), services.get(ICodeEditorService), services.get(IStandaloneThemeService), services.get(INotificationService), services.get(IConfigurationService), services.get(IContextMenuService), services.get(IEditorProgressService), services.get(IClipboardService));\n  });\n}\nexport function createDiffNavigator(diffEditor, opts) {\n  return new DiffNavigator(diffEditor, opts);\n}\n/**\n * Create a new editor model.\n * You can specify the language that should be set for this model or let the language be inferred from the `uri`.\n */\n\nexport function createModel(value, language, uri) {\n  return createTextModel(StaticServices.modelService.get(), StaticServices.modeService.get(), value, language, uri);\n}\n/**\n * Change the language for a model.\n */\n\nexport function setModelLanguage(model, languageId) {\n  StaticServices.modelService.get().setMode(model, StaticServices.modeService.get().create(languageId));\n}\n/**\n * Set the markers for a model.\n */\n\nexport function setModelMarkers(model, owner, markers) {\n  if (model) {\n    StaticServices.markerService.get().changeOne(owner, model.uri, markers);\n  }\n}\n/**\n * Get markers for owner and/or resource\n *\n * @returns list of markers\n */\n\nexport function getModelMarkers(filter) {\n  return StaticServices.markerService.get().read(filter);\n}\n/**\n * Emitted when markers change for a model.\n * @event\n */\n\nexport function onDidChangeMarkers(listener) {\n  return StaticServices.markerService.get().onMarkerChanged(listener);\n}\n/**\n * Get the model that has `uri` if it exists.\n */\n\nexport function getModel(uri) {\n  return StaticServices.modelService.get().getModel(uri);\n}\n/**\n * Get all the created models.\n */\n\nexport function getModels() {\n  return StaticServices.modelService.get().getModels();\n}\n/**\n * Emitted when a model is created.\n * @event\n */\n\nexport function onDidCreateModel(listener) {\n  return StaticServices.modelService.get().onModelAdded(listener);\n}\n/**\n * Emitted right before a model is disposed.\n * @event\n */\n\nexport function onWillDisposeModel(listener) {\n  return StaticServices.modelService.get().onModelRemoved(listener);\n}\n/**\n * Emitted when a different language is set to a model.\n * @event\n */\n\nexport function onDidChangeModelLanguage(listener) {\n  return StaticServices.modelService.get().onModelModeChanged(e => {\n    listener({\n      model: e.model,\n      oldLanguage: e.oldModeId\n    });\n  });\n}\n/**\n * Create a new web worker that has model syncing capabilities built in.\n * Specify an AMD module to load that will `create` an object that will be proxied.\n */\n\nexport function createWebWorker(opts) {\n  return actualCreateWebWorker(StaticServices.modelService.get(), opts);\n}\n/**\n * Colorize the contents of `domNode` using attribute `data-lang`.\n */\n\nexport function colorizeElement(domNode, options) {\n  const themeService = StaticServices.standaloneThemeService.get();\n  themeService.registerEditorContainer(domNode);\n  return Colorizer.colorizeElement(themeService, StaticServices.modeService.get(), domNode, options);\n}\n/**\n * Colorize `text` using language `languageId`.\n */\n\nexport function colorize(text, languageId, options) {\n  const themeService = StaticServices.standaloneThemeService.get();\n  themeService.registerEditorContainer(document.body);\n  return Colorizer.colorize(StaticServices.modeService.get(), text, languageId, options);\n}\n/**\n * Colorize a line in a model.\n */\n\nexport function colorizeModelLine(model, lineNumber) {\n  let tabSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4;\n  const themeService = StaticServices.standaloneThemeService.get();\n  themeService.registerEditorContainer(document.body);\n  return Colorizer.colorizeModelLine(model, lineNumber, tabSize);\n}\n/**\n * @internal\n */\n\nfunction getSafeTokenizationSupport(language) {\n  let tokenizationSupport = modes.TokenizationRegistry.get(language);\n\n  if (tokenizationSupport) {\n    return tokenizationSupport;\n  }\n\n  return {\n    getInitialState: () => NULL_STATE,\n    tokenize: (line, hasEOL, state, deltaOffset) => nullTokenize(language, line, state, deltaOffset)\n  };\n}\n/**\n * Tokenize `text` using language `languageId`\n */\n\n\nexport function tokenize(text, languageId) {\n  let modeService = StaticServices.modeService.get(); // Needed in order to get the mode registered for subsequent look-ups\n\n  modeService.triggerMode(languageId);\n  let tokenizationSupport = getSafeTokenizationSupport(languageId);\n  let lines = splitLines(text);\n  let result = [];\n  let state = tokenizationSupport.getInitialState();\n\n  for (let i = 0, len = lines.length; i < len; i++) {\n    let line = lines[i];\n    let tokenizationResult = tokenizationSupport.tokenize(line, true, state, 0);\n    result[i] = tokenizationResult.tokens;\n    state = tokenizationResult.endState;\n  }\n\n  return result;\n}\n/**\n * Define a new theme or update an existing theme.\n */\n\nexport function defineTheme(themeName, themeData) {\n  StaticServices.standaloneThemeService.get().defineTheme(themeName, themeData);\n}\n/**\n * Switches to a theme.\n */\n\nexport function setTheme(themeName) {\n  StaticServices.standaloneThemeService.get().setTheme(themeName);\n}\n/**\n * Clears all cached font measurements and triggers re-measurement.\n */\n\nexport function remeasureFonts() {\n  clearAllFontInfos();\n}\n/**\n * Register a command.\n */\n\nexport function registerCommand(id, handler) {\n  return CommandsRegistry.registerCommand({\n    id,\n    handler\n  });\n}\n/**\n * @internal\n */\n\nexport function createMonacoEditorAPI() {\n  return {\n    // methods\n    create: create,\n    onDidCreateEditor: onDidCreateEditor,\n    createDiffEditor: createDiffEditor,\n    createDiffNavigator: createDiffNavigator,\n    createModel: createModel,\n    setModelLanguage: setModelLanguage,\n    setModelMarkers: setModelMarkers,\n    getModelMarkers: getModelMarkers,\n    onDidChangeMarkers: onDidChangeMarkers,\n    getModels: getModels,\n    getModel: getModel,\n    onDidCreateModel: onDidCreateModel,\n    onWillDisposeModel: onWillDisposeModel,\n    onDidChangeModelLanguage: onDidChangeModelLanguage,\n    createWebWorker: createWebWorker,\n    colorizeElement: colorizeElement,\n    colorize: colorize,\n    colorizeModelLine: colorizeModelLine,\n    tokenize: tokenize,\n    defineTheme: defineTheme,\n    setTheme: setTheme,\n    remeasureFonts: remeasureFonts,\n    registerCommand: registerCommand,\n    // enums\n    AccessibilitySupport: standaloneEnums.AccessibilitySupport,\n    ContentWidgetPositionPreference: standaloneEnums.ContentWidgetPositionPreference,\n    CursorChangeReason: standaloneEnums.CursorChangeReason,\n    DefaultEndOfLine: standaloneEnums.DefaultEndOfLine,\n    EditorAutoIndentStrategy: standaloneEnums.EditorAutoIndentStrategy,\n    EditorOption: standaloneEnums.EditorOption,\n    EndOfLinePreference: standaloneEnums.EndOfLinePreference,\n    EndOfLineSequence: standaloneEnums.EndOfLineSequence,\n    MinimapPosition: standaloneEnums.MinimapPosition,\n    MouseTargetType: standaloneEnums.MouseTargetType,\n    OverlayWidgetPositionPreference: standaloneEnums.OverlayWidgetPositionPreference,\n    OverviewRulerLane: standaloneEnums.OverviewRulerLane,\n    RenderLineNumbersType: standaloneEnums.RenderLineNumbersType,\n    RenderMinimap: standaloneEnums.RenderMinimap,\n    ScrollbarVisibility: standaloneEnums.ScrollbarVisibility,\n    ScrollType: standaloneEnums.ScrollType,\n    TextEditorCursorBlinkingStyle: standaloneEnums.TextEditorCursorBlinkingStyle,\n    TextEditorCursorStyle: standaloneEnums.TextEditorCursorStyle,\n    TrackedRangeStickiness: standaloneEnums.TrackedRangeStickiness,\n    WrappingIndent: standaloneEnums.WrappingIndent,\n    // classes\n    ConfigurationChangedEvent: ConfigurationChangedEvent,\n    BareFontInfo: BareFontInfo,\n    FontInfo: FontInfo,\n    TextModelResolvedOptions: TextModelResolvedOptions,\n    FindMatch: FindMatch,\n    // vars\n    EditorType: EditorType,\n    EditorOptions: EditorOptions\n  };\n}","map":{"version":3,"sources":["/home/umut/Documents/cs/cs410/Project2Group14/node_modules/monaco-editor/esm/vs/editor/standalone/browser/standaloneEditor.js"],"names":["ICodeEditorService","OpenerService","DiffNavigator","EditorOptions","ConfigurationChangedEvent","BareFontInfo","FontInfo","EditorType","FindMatch","TextModelResolvedOptions","modes","NULL_STATE","nullTokenize","IEditorWorkerService","IModeService","ITextModelService","createWebWorker","actualCreateWebWorker","standaloneEnums","Colorizer","SimpleEditorModelResolverService","StandaloneDiffEditor","StandaloneEditor","createTextModel","DynamicStandaloneServices","StaticServices","IStandaloneThemeService","CommandsRegistry","ICommandService","IConfigurationService","IContextKeyService","IContextViewService","IContextMenuService","IInstantiationService","IKeybindingService","INotificationService","IOpenerService","IAccessibilityService","clearAllFontInfos","IEditorProgressService","IClipboardService","splitLines","IModelService","withAllStandaloneServices","domElement","override","callback","services","simpleEditorModelResolverService","has","modelService","get","set","result","setEditor","create","options","onDidCreateEditor","listener","codeEditorService","onCodeEditorAdd","editor","createDiffEditor","createDiffNavigator","diffEditor","opts","createModel","value","language","uri","modeService","setModelLanguage","model","languageId","setMode","setModelMarkers","owner","markers","markerService","changeOne","getModelMarkers","filter","read","onDidChangeMarkers","onMarkerChanged","getModel","getModels","onDidCreateModel","onModelAdded","onWillDisposeModel","onModelRemoved","onDidChangeModelLanguage","onModelModeChanged","e","oldLanguage","oldModeId","colorizeElement","domNode","themeService","standaloneThemeService","registerEditorContainer","colorize","text","document","body","colorizeModelLine","lineNumber","tabSize","getSafeTokenizationSupport","tokenizationSupport","TokenizationRegistry","getInitialState","tokenize","line","hasEOL","state","deltaOffset","triggerMode","lines","i","len","length","tokenizationResult","tokens","endState","defineTheme","themeName","themeData","setTheme","remeasureFonts","registerCommand","id","handler","createMonacoEditorAPI","AccessibilitySupport","ContentWidgetPositionPreference","CursorChangeReason","DefaultEndOfLine","EditorAutoIndentStrategy","EditorOption","EndOfLinePreference","EndOfLineSequence","MinimapPosition","MouseTargetType","OverlayWidgetPositionPreference","OverviewRulerLane","RenderLineNumbersType","RenderMinimap","ScrollbarVisibility","ScrollType","TextEditorCursorBlinkingStyle","TextEditorCursorStyle","TrackedRangeStickiness","WrappingIndent"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './standalone-tokens.css';\nimport { ICodeEditorService } from '../../browser/services/codeEditorService.js';\nimport { OpenerService } from '../../browser/services/openerService.js';\nimport { DiffNavigator } from '../../browser/widget/diffNavigator.js';\nimport { EditorOptions, ConfigurationChangedEvent } from '../../common/config/editorOptions.js';\nimport { BareFontInfo, FontInfo } from '../../common/config/fontInfo.js';\nimport { EditorType } from '../../common/editorCommon.js';\nimport { FindMatch, TextModelResolvedOptions } from '../../common/model.js';\nimport * as modes from '../../common/modes.js';\nimport { NULL_STATE, nullTokenize } from '../../common/modes/nullMode.js';\nimport { IEditorWorkerService } from '../../common/services/editorWorkerService.js';\nimport { IModeService } from '../../common/services/modeService.js';\nimport { ITextModelService } from '../../common/services/resolverService.js';\nimport { createWebWorker as actualCreateWebWorker } from '../../common/services/webWorker.js';\nimport * as standaloneEnums from '../../common/standalone/standaloneEnums.js';\nimport { Colorizer } from './colorizer.js';\nimport { SimpleEditorModelResolverService } from './simpleServices.js';\nimport { StandaloneDiffEditor, StandaloneEditor, createTextModel } from './standaloneCodeEditor.js';\nimport { DynamicStandaloneServices, StaticServices } from './standaloneServices.js';\nimport { IStandaloneThemeService } from '../common/standaloneThemeService.js';\nimport { CommandsRegistry, ICommandService } from '../../../platform/commands/common/commands.js';\nimport { IConfigurationService } from '../../../platform/configuration/common/configuration.js';\nimport { IContextKeyService } from '../../../platform/contextkey/common/contextkey.js';\nimport { IContextViewService, IContextMenuService } from '../../../platform/contextview/browser/contextView.js';\nimport { IInstantiationService } from '../../../platform/instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../../platform/keybinding/common/keybinding.js';\nimport { INotificationService } from '../../../platform/notification/common/notification.js';\nimport { IOpenerService } from '../../../platform/opener/common/opener.js';\nimport { IAccessibilityService } from '../../../platform/accessibility/common/accessibility.js';\nimport { clearAllFontInfos } from '../../browser/config/configuration.js';\nimport { IEditorProgressService } from '../../../platform/progress/common/progress.js';\nimport { IClipboardService } from '../../../platform/clipboard/common/clipboardService.js';\nimport { splitLines } from '../../../base/common/strings.js';\nimport { IModelService } from '../../common/services/modelService.js';\nfunction withAllStandaloneServices(domElement, override, callback) {\n    let services = new DynamicStandaloneServices(domElement, override);\n    let simpleEditorModelResolverService = null;\n    if (!services.has(ITextModelService)) {\n        simpleEditorModelResolverService = new SimpleEditorModelResolverService(StaticServices.modelService.get());\n        services.set(ITextModelService, simpleEditorModelResolverService);\n    }\n    if (!services.has(IOpenerService)) {\n        services.set(IOpenerService, new OpenerService(services.get(ICodeEditorService), services.get(ICommandService)));\n    }\n    let result = callback(services);\n    if (simpleEditorModelResolverService) {\n        simpleEditorModelResolverService.setEditor(result);\n    }\n    return result;\n}\n/**\n * Create a new editor under `domElement`.\n * `domElement` should be empty (not contain other dom nodes).\n * The editor will read the size of `domElement`.\n */\nexport function create(domElement, options, override) {\n    return withAllStandaloneServices(domElement, override || {}, (services) => {\n        return new StandaloneEditor(domElement, options, services, services.get(IInstantiationService), services.get(ICodeEditorService), services.get(ICommandService), services.get(IContextKeyService), services.get(IKeybindingService), services.get(IContextViewService), services.get(IStandaloneThemeService), services.get(INotificationService), services.get(IConfigurationService), services.get(IAccessibilityService), services.get(IModelService), services.get(IModeService));\n    });\n}\n/**\n * Emitted when an editor is created.\n * Creating a diff editor might cause this listener to be invoked with the two editors.\n * @event\n */\nexport function onDidCreateEditor(listener) {\n    return StaticServices.codeEditorService.get().onCodeEditorAdd((editor) => {\n        listener(editor);\n    });\n}\n/**\n * Create a new diff editor under `domElement`.\n * `domElement` should be empty (not contain other dom nodes).\n * The editor will read the size of `domElement`.\n */\nexport function createDiffEditor(domElement, options, override) {\n    return withAllStandaloneServices(domElement, override || {}, (services) => {\n        return new StandaloneDiffEditor(domElement, options, services, services.get(IInstantiationService), services.get(IContextKeyService), services.get(IKeybindingService), services.get(IContextViewService), services.get(IEditorWorkerService), services.get(ICodeEditorService), services.get(IStandaloneThemeService), services.get(INotificationService), services.get(IConfigurationService), services.get(IContextMenuService), services.get(IEditorProgressService), services.get(IClipboardService));\n    });\n}\nexport function createDiffNavigator(diffEditor, opts) {\n    return new DiffNavigator(diffEditor, opts);\n}\n/**\n * Create a new editor model.\n * You can specify the language that should be set for this model or let the language be inferred from the `uri`.\n */\nexport function createModel(value, language, uri) {\n    return createTextModel(StaticServices.modelService.get(), StaticServices.modeService.get(), value, language, uri);\n}\n/**\n * Change the language for a model.\n */\nexport function setModelLanguage(model, languageId) {\n    StaticServices.modelService.get().setMode(model, StaticServices.modeService.get().create(languageId));\n}\n/**\n * Set the markers for a model.\n */\nexport function setModelMarkers(model, owner, markers) {\n    if (model) {\n        StaticServices.markerService.get().changeOne(owner, model.uri, markers);\n    }\n}\n/**\n * Get markers for owner and/or resource\n *\n * @returns list of markers\n */\nexport function getModelMarkers(filter) {\n    return StaticServices.markerService.get().read(filter);\n}\n/**\n * Emitted when markers change for a model.\n * @event\n */\nexport function onDidChangeMarkers(listener) {\n    return StaticServices.markerService.get().onMarkerChanged(listener);\n}\n/**\n * Get the model that has `uri` if it exists.\n */\nexport function getModel(uri) {\n    return StaticServices.modelService.get().getModel(uri);\n}\n/**\n * Get all the created models.\n */\nexport function getModels() {\n    return StaticServices.modelService.get().getModels();\n}\n/**\n * Emitted when a model is created.\n * @event\n */\nexport function onDidCreateModel(listener) {\n    return StaticServices.modelService.get().onModelAdded(listener);\n}\n/**\n * Emitted right before a model is disposed.\n * @event\n */\nexport function onWillDisposeModel(listener) {\n    return StaticServices.modelService.get().onModelRemoved(listener);\n}\n/**\n * Emitted when a different language is set to a model.\n * @event\n */\nexport function onDidChangeModelLanguage(listener) {\n    return StaticServices.modelService.get().onModelModeChanged((e) => {\n        listener({\n            model: e.model,\n            oldLanguage: e.oldModeId\n        });\n    });\n}\n/**\n * Create a new web worker that has model syncing capabilities built in.\n * Specify an AMD module to load that will `create` an object that will be proxied.\n */\nexport function createWebWorker(opts) {\n    return actualCreateWebWorker(StaticServices.modelService.get(), opts);\n}\n/**\n * Colorize the contents of `domNode` using attribute `data-lang`.\n */\nexport function colorizeElement(domNode, options) {\n    const themeService = StaticServices.standaloneThemeService.get();\n    themeService.registerEditorContainer(domNode);\n    return Colorizer.colorizeElement(themeService, StaticServices.modeService.get(), domNode, options);\n}\n/**\n * Colorize `text` using language `languageId`.\n */\nexport function colorize(text, languageId, options) {\n    const themeService = StaticServices.standaloneThemeService.get();\n    themeService.registerEditorContainer(document.body);\n    return Colorizer.colorize(StaticServices.modeService.get(), text, languageId, options);\n}\n/**\n * Colorize a line in a model.\n */\nexport function colorizeModelLine(model, lineNumber, tabSize = 4) {\n    const themeService = StaticServices.standaloneThemeService.get();\n    themeService.registerEditorContainer(document.body);\n    return Colorizer.colorizeModelLine(model, lineNumber, tabSize);\n}\n/**\n * @internal\n */\nfunction getSafeTokenizationSupport(language) {\n    let tokenizationSupport = modes.TokenizationRegistry.get(language);\n    if (tokenizationSupport) {\n        return tokenizationSupport;\n    }\n    return {\n        getInitialState: () => NULL_STATE,\n        tokenize: (line, hasEOL, state, deltaOffset) => nullTokenize(language, line, state, deltaOffset)\n    };\n}\n/**\n * Tokenize `text` using language `languageId`\n */\nexport function tokenize(text, languageId) {\n    let modeService = StaticServices.modeService.get();\n    // Needed in order to get the mode registered for subsequent look-ups\n    modeService.triggerMode(languageId);\n    let tokenizationSupport = getSafeTokenizationSupport(languageId);\n    let lines = splitLines(text);\n    let result = [];\n    let state = tokenizationSupport.getInitialState();\n    for (let i = 0, len = lines.length; i < len; i++) {\n        let line = lines[i];\n        let tokenizationResult = tokenizationSupport.tokenize(line, true, state, 0);\n        result[i] = tokenizationResult.tokens;\n        state = tokenizationResult.endState;\n    }\n    return result;\n}\n/**\n * Define a new theme or update an existing theme.\n */\nexport function defineTheme(themeName, themeData) {\n    StaticServices.standaloneThemeService.get().defineTheme(themeName, themeData);\n}\n/**\n * Switches to a theme.\n */\nexport function setTheme(themeName) {\n    StaticServices.standaloneThemeService.get().setTheme(themeName);\n}\n/**\n * Clears all cached font measurements and triggers re-measurement.\n */\nexport function remeasureFonts() {\n    clearAllFontInfos();\n}\n/**\n * Register a command.\n */\nexport function registerCommand(id, handler) {\n    return CommandsRegistry.registerCommand({ id, handler });\n}\n/**\n * @internal\n */\nexport function createMonacoEditorAPI() {\n    return {\n        // methods\n        create: create,\n        onDidCreateEditor: onDidCreateEditor,\n        createDiffEditor: createDiffEditor,\n        createDiffNavigator: createDiffNavigator,\n        createModel: createModel,\n        setModelLanguage: setModelLanguage,\n        setModelMarkers: setModelMarkers,\n        getModelMarkers: getModelMarkers,\n        onDidChangeMarkers: onDidChangeMarkers,\n        getModels: getModels,\n        getModel: getModel,\n        onDidCreateModel: onDidCreateModel,\n        onWillDisposeModel: onWillDisposeModel,\n        onDidChangeModelLanguage: onDidChangeModelLanguage,\n        createWebWorker: createWebWorker,\n        colorizeElement: colorizeElement,\n        colorize: colorize,\n        colorizeModelLine: colorizeModelLine,\n        tokenize: tokenize,\n        defineTheme: defineTheme,\n        setTheme: setTheme,\n        remeasureFonts: remeasureFonts,\n        registerCommand: registerCommand,\n        // enums\n        AccessibilitySupport: standaloneEnums.AccessibilitySupport,\n        ContentWidgetPositionPreference: standaloneEnums.ContentWidgetPositionPreference,\n        CursorChangeReason: standaloneEnums.CursorChangeReason,\n        DefaultEndOfLine: standaloneEnums.DefaultEndOfLine,\n        EditorAutoIndentStrategy: standaloneEnums.EditorAutoIndentStrategy,\n        EditorOption: standaloneEnums.EditorOption,\n        EndOfLinePreference: standaloneEnums.EndOfLinePreference,\n        EndOfLineSequence: standaloneEnums.EndOfLineSequence,\n        MinimapPosition: standaloneEnums.MinimapPosition,\n        MouseTargetType: standaloneEnums.MouseTargetType,\n        OverlayWidgetPositionPreference: standaloneEnums.OverlayWidgetPositionPreference,\n        OverviewRulerLane: standaloneEnums.OverviewRulerLane,\n        RenderLineNumbersType: standaloneEnums.RenderLineNumbersType,\n        RenderMinimap: standaloneEnums.RenderMinimap,\n        ScrollbarVisibility: standaloneEnums.ScrollbarVisibility,\n        ScrollType: standaloneEnums.ScrollType,\n        TextEditorCursorBlinkingStyle: standaloneEnums.TextEditorCursorBlinkingStyle,\n        TextEditorCursorStyle: standaloneEnums.TextEditorCursorStyle,\n        TrackedRangeStickiness: standaloneEnums.TrackedRangeStickiness,\n        WrappingIndent: standaloneEnums.WrappingIndent,\n        // classes\n        ConfigurationChangedEvent: ConfigurationChangedEvent,\n        BareFontInfo: BareFontInfo,\n        FontInfo: FontInfo,\n        TextModelResolvedOptions: TextModelResolvedOptions,\n        FindMatch: FindMatch,\n        // vars\n        EditorType: EditorType,\n        EditorOptions: EditorOptions\n    };\n}\n"]},"metadata":{},"sourceType":"module"}