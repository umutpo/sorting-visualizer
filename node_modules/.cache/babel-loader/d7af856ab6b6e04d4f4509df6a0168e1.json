{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar _a;\n\nimport { TimeoutTimer } from '../../../base/common/async.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { LineTokens } from '../../common/core/lineTokens.js';\nimport { TokenizationRegistry } from '../../common/modes.js';\nimport { RenderLineInput, renderViewLine2 as renderViewLine } from '../../common/viewLayout/viewLineRenderer.js';\nimport { ViewLineRenderingData } from '../../common/viewModel/viewModel.js';\nimport { MonarchTokenizer } from '../common/monarch/monarchLexer.js';\nconst ttPolicy = (_a = window.trustedTypes) === null || _a === void 0 ? void 0 : _a.createPolicy('standaloneColorizer', {\n  createHTML: value => value\n});\nexport class Colorizer {\n  static colorizeElement(themeService, modeService, domNode, options) {\n    options = options || {};\n    let theme = options.theme || 'vs';\n    let mimeType = options.mimeType || domNode.getAttribute('lang') || domNode.getAttribute('data-lang');\n\n    if (!mimeType) {\n      console.error('Mode not detected');\n      return Promise.resolve();\n    }\n\n    themeService.setTheme(theme);\n    let text = domNode.firstChild ? domNode.firstChild.nodeValue : '';\n    domNode.className += ' ' + theme;\n\n    let render = str => {\n      var _a;\n\n      const trustedhtml = (_a = ttPolicy === null || ttPolicy === void 0 ? void 0 : ttPolicy.createHTML(str)) !== null && _a !== void 0 ? _a : str;\n      domNode.innerHTML = trustedhtml;\n    };\n\n    return this.colorize(modeService, text || '', mimeType, options).then(render, err => console.error(err));\n  }\n\n  static colorize(modeService, text, mimeType, options) {\n    const languageIdCodec = modeService.languageIdCodec;\n    let tabSize = 4;\n\n    if (options && typeof options.tabSize === 'number') {\n      tabSize = options.tabSize;\n    }\n\n    if (strings.startsWithUTF8BOM(text)) {\n      text = text.substr(1);\n    }\n\n    let lines = strings.splitLines(text);\n    let language = modeService.getModeId(mimeType);\n\n    if (!language) {\n      return Promise.resolve(_fakeColorize(lines, tabSize, languageIdCodec));\n    } // Send out the event to create the mode\n\n\n    modeService.triggerMode(language);\n    const tokenizationSupport = TokenizationRegistry.get(language);\n\n    if (tokenizationSupport) {\n      return _colorize(lines, tabSize, tokenizationSupport, languageIdCodec);\n    }\n\n    const tokenizationSupportPromise = TokenizationRegistry.getPromise(language);\n\n    if (tokenizationSupportPromise) {\n      // A tokenizer will be registered soon\n      return new Promise((resolve, reject) => {\n        tokenizationSupportPromise.then(tokenizationSupport => {\n          _colorize(lines, tabSize, tokenizationSupport, languageIdCodec).then(resolve, reject);\n        }, reject);\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      let listener = null;\n      let timeout = null;\n\n      const execute = () => {\n        if (listener) {\n          listener.dispose();\n          listener = null;\n        }\n\n        if (timeout) {\n          timeout.dispose();\n          timeout = null;\n        }\n\n        const tokenizationSupport = TokenizationRegistry.get(language);\n\n        if (tokenizationSupport) {\n          _colorize(lines, tabSize, tokenizationSupport, languageIdCodec).then(resolve, reject);\n\n          return;\n        }\n\n        resolve(_fakeColorize(lines, tabSize, languageIdCodec));\n      }; // wait 500ms for mode to load, then give up\n\n\n      timeout = new TimeoutTimer();\n      timeout.cancelAndSet(execute, 500);\n      listener = TokenizationRegistry.onDidChange(e => {\n        if (e.changedLanguages.indexOf(language) >= 0) {\n          execute();\n        }\n      });\n    });\n  }\n\n  static colorizeLine(line, mightContainNonBasicASCII, mightContainRTL, tokens) {\n    let tabSize = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 4;\n    const isBasicASCII = ViewLineRenderingData.isBasicASCII(line, mightContainNonBasicASCII);\n    const containsRTL = ViewLineRenderingData.containsRTL(line, isBasicASCII, mightContainRTL);\n    let renderResult = renderViewLine(new RenderLineInput(false, true, line, false, isBasicASCII, containsRTL, 0, tokens, [], tabSize, 0, 0, 0, 0, -1, 'none', false, false, null));\n    return renderResult.html;\n  }\n\n  static colorizeModelLine(model, lineNumber) {\n    let tabSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4;\n    let content = model.getLineContent(lineNumber);\n    model.forceTokenization(lineNumber);\n    let tokens = model.getLineTokens(lineNumber);\n    let inflatedTokens = tokens.inflate();\n    return this.colorizeLine(content, model.mightContainNonBasicASCII(), model.mightContainRTL(), inflatedTokens, tabSize);\n  }\n\n}\n\nfunction _colorize(lines, tabSize, tokenizationSupport, languageIdCodec) {\n  return new Promise((c, e) => {\n    const execute = () => {\n      const result = _actualColorize(lines, tabSize, tokenizationSupport, languageIdCodec);\n\n      if (tokenizationSupport instanceof MonarchTokenizer) {\n        const status = tokenizationSupport.getLoadStatus();\n\n        if (status.loaded === false) {\n          status.promise.then(execute, e);\n          return;\n        }\n      }\n\n      c(result);\n    };\n\n    execute();\n  });\n}\n\nfunction _fakeColorize(lines, tabSize, languageIdCodec) {\n  let html = [];\n  const defaultMetadata = (0\n  /* None */\n  << 11\n  /* FONT_STYLE_OFFSET */\n  | 1\n  /* DefaultForeground */\n  << 14\n  /* FOREGROUND_OFFSET */\n  | 2\n  /* DefaultBackground */\n  << 23\n  /* BACKGROUND_OFFSET */\n  ) >>> 0;\n  const tokens = new Uint32Array(2);\n  tokens[0] = 0;\n  tokens[1] = defaultMetadata;\n\n  for (let i = 0, length = lines.length; i < length; i++) {\n    let line = lines[i];\n    tokens[0] = line.length;\n    const lineTokens = new LineTokens(tokens, line, languageIdCodec);\n    const isBasicASCII = ViewLineRenderingData.isBasicASCII(line,\n    /* check for basic ASCII */\n    true);\n    const containsRTL = ViewLineRenderingData.containsRTL(line, isBasicASCII,\n    /* check for RTL */\n    true);\n    let renderResult = renderViewLine(new RenderLineInput(false, true, line, false, isBasicASCII, containsRTL, 0, lineTokens, [], tabSize, 0, 0, 0, 0, -1, 'none', false, false, null));\n    html = html.concat(renderResult.html);\n    html.push('<br/>');\n  }\n\n  return html.join('');\n}\n\nfunction _actualColorize(lines, tabSize, tokenizationSupport, languageIdCodec) {\n  let html = [];\n  let state = tokenizationSupport.getInitialState();\n\n  for (let i = 0, length = lines.length; i < length; i++) {\n    let line = lines[i];\n    let tokenizeResult = tokenizationSupport.tokenize2(line, true, state, 0);\n    LineTokens.convertToEndOffset(tokenizeResult.tokens, line.length);\n    let lineTokens = new LineTokens(tokenizeResult.tokens, line, languageIdCodec);\n    const isBasicASCII = ViewLineRenderingData.isBasicASCII(line,\n    /* check for basic ASCII */\n    true);\n    const containsRTL = ViewLineRenderingData.containsRTL(line, isBasicASCII,\n    /* check for RTL */\n    true);\n    let renderResult = renderViewLine(new RenderLineInput(false, true, line, false, isBasicASCII, containsRTL, 0, lineTokens.inflate(), [], tabSize, 0, 0, 0, 0, -1, 'none', false, false, null));\n    html = html.concat(renderResult.html);\n    html.push('<br/>');\n    state = tokenizeResult.endState;\n  }\n\n  return html.join('');\n}","map":{"version":3,"sources":["/home/umut/Documents/cs/cs410/Project2Group14/node_modules/monaco-editor/esm/vs/editor/standalone/browser/colorizer.js"],"names":["_a","TimeoutTimer","strings","LineTokens","TokenizationRegistry","RenderLineInput","renderViewLine2","renderViewLine","ViewLineRenderingData","MonarchTokenizer","ttPolicy","window","trustedTypes","createPolicy","createHTML","value","Colorizer","colorizeElement","themeService","modeService","domNode","options","theme","mimeType","getAttribute","console","error","Promise","resolve","setTheme","text","firstChild","nodeValue","className","render","str","trustedhtml","innerHTML","colorize","then","err","languageIdCodec","tabSize","startsWithUTF8BOM","substr","lines","splitLines","language","getModeId","_fakeColorize","triggerMode","tokenizationSupport","get","_colorize","tokenizationSupportPromise","getPromise","reject","listener","timeout","execute","dispose","cancelAndSet","onDidChange","e","changedLanguages","indexOf","colorizeLine","line","mightContainNonBasicASCII","mightContainRTL","tokens","isBasicASCII","containsRTL","renderResult","html","colorizeModelLine","model","lineNumber","content","getLineContent","forceTokenization","getLineTokens","inflatedTokens","inflate","c","result","_actualColorize","status","getLoadStatus","loaded","promise","defaultMetadata","Uint32Array","i","length","lineTokens","concat","push","join","state","getInitialState","tokenizeResult","tokenize2","convertToEndOffset","endState"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar _a;\nimport { TimeoutTimer } from '../../../base/common/async.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { LineTokens } from '../../common/core/lineTokens.js';\nimport { TokenizationRegistry } from '../../common/modes.js';\nimport { RenderLineInput, renderViewLine2 as renderViewLine } from '../../common/viewLayout/viewLineRenderer.js';\nimport { ViewLineRenderingData } from '../../common/viewModel/viewModel.js';\nimport { MonarchTokenizer } from '../common/monarch/monarchLexer.js';\nconst ttPolicy = (_a = window.trustedTypes) === null || _a === void 0 ? void 0 : _a.createPolicy('standaloneColorizer', { createHTML: value => value });\nexport class Colorizer {\n    static colorizeElement(themeService, modeService, domNode, options) {\n        options = options || {};\n        let theme = options.theme || 'vs';\n        let mimeType = options.mimeType || domNode.getAttribute('lang') || domNode.getAttribute('data-lang');\n        if (!mimeType) {\n            console.error('Mode not detected');\n            return Promise.resolve();\n        }\n        themeService.setTheme(theme);\n        let text = domNode.firstChild ? domNode.firstChild.nodeValue : '';\n        domNode.className += ' ' + theme;\n        let render = (str) => {\n            var _a;\n            const trustedhtml = (_a = ttPolicy === null || ttPolicy === void 0 ? void 0 : ttPolicy.createHTML(str)) !== null && _a !== void 0 ? _a : str;\n            domNode.innerHTML = trustedhtml;\n        };\n        return this.colorize(modeService, text || '', mimeType, options).then(render, (err) => console.error(err));\n    }\n    static colorize(modeService, text, mimeType, options) {\n        const languageIdCodec = modeService.languageIdCodec;\n        let tabSize = 4;\n        if (options && typeof options.tabSize === 'number') {\n            tabSize = options.tabSize;\n        }\n        if (strings.startsWithUTF8BOM(text)) {\n            text = text.substr(1);\n        }\n        let lines = strings.splitLines(text);\n        let language = modeService.getModeId(mimeType);\n        if (!language) {\n            return Promise.resolve(_fakeColorize(lines, tabSize, languageIdCodec));\n        }\n        // Send out the event to create the mode\n        modeService.triggerMode(language);\n        const tokenizationSupport = TokenizationRegistry.get(language);\n        if (tokenizationSupport) {\n            return _colorize(lines, tabSize, tokenizationSupport, languageIdCodec);\n        }\n        const tokenizationSupportPromise = TokenizationRegistry.getPromise(language);\n        if (tokenizationSupportPromise) {\n            // A tokenizer will be registered soon\n            return new Promise((resolve, reject) => {\n                tokenizationSupportPromise.then(tokenizationSupport => {\n                    _colorize(lines, tabSize, tokenizationSupport, languageIdCodec).then(resolve, reject);\n                }, reject);\n            });\n        }\n        return new Promise((resolve, reject) => {\n            let listener = null;\n            let timeout = null;\n            const execute = () => {\n                if (listener) {\n                    listener.dispose();\n                    listener = null;\n                }\n                if (timeout) {\n                    timeout.dispose();\n                    timeout = null;\n                }\n                const tokenizationSupport = TokenizationRegistry.get(language);\n                if (tokenizationSupport) {\n                    _colorize(lines, tabSize, tokenizationSupport, languageIdCodec).then(resolve, reject);\n                    return;\n                }\n                resolve(_fakeColorize(lines, tabSize, languageIdCodec));\n            };\n            // wait 500ms for mode to load, then give up\n            timeout = new TimeoutTimer();\n            timeout.cancelAndSet(execute, 500);\n            listener = TokenizationRegistry.onDidChange((e) => {\n                if (e.changedLanguages.indexOf(language) >= 0) {\n                    execute();\n                }\n            });\n        });\n    }\n    static colorizeLine(line, mightContainNonBasicASCII, mightContainRTL, tokens, tabSize = 4) {\n        const isBasicASCII = ViewLineRenderingData.isBasicASCII(line, mightContainNonBasicASCII);\n        const containsRTL = ViewLineRenderingData.containsRTL(line, isBasicASCII, mightContainRTL);\n        let renderResult = renderViewLine(new RenderLineInput(false, true, line, false, isBasicASCII, containsRTL, 0, tokens, [], tabSize, 0, 0, 0, 0, -1, 'none', false, false, null));\n        return renderResult.html;\n    }\n    static colorizeModelLine(model, lineNumber, tabSize = 4) {\n        let content = model.getLineContent(lineNumber);\n        model.forceTokenization(lineNumber);\n        let tokens = model.getLineTokens(lineNumber);\n        let inflatedTokens = tokens.inflate();\n        return this.colorizeLine(content, model.mightContainNonBasicASCII(), model.mightContainRTL(), inflatedTokens, tabSize);\n    }\n}\nfunction _colorize(lines, tabSize, tokenizationSupport, languageIdCodec) {\n    return new Promise((c, e) => {\n        const execute = () => {\n            const result = _actualColorize(lines, tabSize, tokenizationSupport, languageIdCodec);\n            if (tokenizationSupport instanceof MonarchTokenizer) {\n                const status = tokenizationSupport.getLoadStatus();\n                if (status.loaded === false) {\n                    status.promise.then(execute, e);\n                    return;\n                }\n            }\n            c(result);\n        };\n        execute();\n    });\n}\nfunction _fakeColorize(lines, tabSize, languageIdCodec) {\n    let html = [];\n    const defaultMetadata = ((0 /* None */ << 11 /* FONT_STYLE_OFFSET */)\n        | (1 /* DefaultForeground */ << 14 /* FOREGROUND_OFFSET */)\n        | (2 /* DefaultBackground */ << 23 /* BACKGROUND_OFFSET */)) >>> 0;\n    const tokens = new Uint32Array(2);\n    tokens[0] = 0;\n    tokens[1] = defaultMetadata;\n    for (let i = 0, length = lines.length; i < length; i++) {\n        let line = lines[i];\n        tokens[0] = line.length;\n        const lineTokens = new LineTokens(tokens, line, languageIdCodec);\n        const isBasicASCII = ViewLineRenderingData.isBasicASCII(line, /* check for basic ASCII */ true);\n        const containsRTL = ViewLineRenderingData.containsRTL(line, isBasicASCII, /* check for RTL */ true);\n        let renderResult = renderViewLine(new RenderLineInput(false, true, line, false, isBasicASCII, containsRTL, 0, lineTokens, [], tabSize, 0, 0, 0, 0, -1, 'none', false, false, null));\n        html = html.concat(renderResult.html);\n        html.push('<br/>');\n    }\n    return html.join('');\n}\nfunction _actualColorize(lines, tabSize, tokenizationSupport, languageIdCodec) {\n    let html = [];\n    let state = tokenizationSupport.getInitialState();\n    for (let i = 0, length = lines.length; i < length; i++) {\n        let line = lines[i];\n        let tokenizeResult = tokenizationSupport.tokenize2(line, true, state, 0);\n        LineTokens.convertToEndOffset(tokenizeResult.tokens, line.length);\n        let lineTokens = new LineTokens(tokenizeResult.tokens, line, languageIdCodec);\n        const isBasicASCII = ViewLineRenderingData.isBasicASCII(line, /* check for basic ASCII */ true);\n        const containsRTL = ViewLineRenderingData.containsRTL(line, isBasicASCII, /* check for RTL */ true);\n        let renderResult = renderViewLine(new RenderLineInput(false, true, line, false, isBasicASCII, containsRTL, 0, lineTokens.inflate(), [], tabSize, 0, 0, 0, 0, -1, 'none', false, false, null));\n        html = html.concat(renderResult.html);\n        html.push('<br/>');\n        state = tokenizeResult.endState;\n    }\n    return html.join('');\n}\n"]},"metadata":{},"sourceType":"module"}