{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Color, RGBA } from '../../../base/common/color.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { assertNever } from '../../../base/common/types.js';\nimport * as nls from '../../../nls.js';\nimport { Extensions as JSONExtensions } from '../../jsonschemas/common/jsonContributionRegistry.js';\nimport * as platform from '../../registry/common/platform.js'; // color registry\n\nexport const Extensions = {\n  ColorContribution: 'base.contributions.colors'\n};\n\nclass ColorRegistry {\n  constructor() {\n    this._onDidChangeSchema = new Emitter();\n    this.onDidChangeSchema = this._onDidChangeSchema.event;\n    this.colorSchema = {\n      type: 'object',\n      properties: {}\n    };\n    this.colorReferenceSchema = {\n      type: 'string',\n      enum: [],\n      enumDescriptions: []\n    };\n    this.colorsById = {};\n  }\n\n  registerColor(id, defaults, description) {\n    let needsTransparency = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    let deprecationMessage = arguments.length > 4 ? arguments[4] : undefined;\n    let colorContribution = {\n      id,\n      description,\n      defaults,\n      needsTransparency,\n      deprecationMessage\n    };\n    this.colorsById[id] = colorContribution;\n    let propertySchema = {\n      type: 'string',\n      description,\n      format: 'color-hex',\n      defaultSnippets: [{\n        body: '${1:#ff0000}'\n      }]\n    };\n\n    if (deprecationMessage) {\n      propertySchema.deprecationMessage = deprecationMessage;\n    }\n\n    this.colorSchema.properties[id] = propertySchema;\n    this.colorReferenceSchema.enum.push(id);\n    this.colorReferenceSchema.enumDescriptions.push(description);\n\n    this._onDidChangeSchema.fire();\n\n    return id;\n  }\n\n  resolveDefaultColor(id, theme) {\n    const colorDesc = this.colorsById[id];\n\n    if (colorDesc && colorDesc.defaults) {\n      const colorValue = colorDesc.defaults[theme.type];\n      return resolveColorValue(colorValue, theme);\n    }\n\n    return undefined;\n  }\n\n  getColorSchema() {\n    return this.colorSchema;\n  }\n\n  toString() {\n    let sorter = (a, b) => {\n      let cat1 = a.indexOf('.') === -1 ? 0 : 1;\n      let cat2 = b.indexOf('.') === -1 ? 0 : 1;\n\n      if (cat1 !== cat2) {\n        return cat1 - cat2;\n      }\n\n      return a.localeCompare(b);\n    };\n\n    return Object.keys(this.colorsById).sort(sorter).map(k => `- \\`${k}\\`: ${this.colorsById[k].description}`).join('\\n');\n  }\n\n}\n\nconst colorRegistry = new ColorRegistry();\nplatform.Registry.add(Extensions.ColorContribution, colorRegistry);\nexport function registerColor(id, defaults, description, needsTransparency, deprecationMessage) {\n  return colorRegistry.registerColor(id, defaults, description, needsTransparency, deprecationMessage);\n} // ----- base colors\n\nexport const foreground = registerColor('foreground', {\n  dark: '#CCCCCC',\n  light: '#616161',\n  hc: '#FFFFFF'\n}, nls.localize('foreground', \"Overall foreground color. This color is only used if not overridden by a component.\"));\nexport const errorForeground = registerColor('errorForeground', {\n  dark: '#F48771',\n  light: '#A1260D',\n  hc: '#F48771'\n}, nls.localize('errorForeground', \"Overall foreground color for error messages. This color is only used if not overridden by a component.\"));\nexport const iconForeground = registerColor('icon.foreground', {\n  dark: '#C5C5C5',\n  light: '#424242',\n  hc: '#FFFFFF'\n}, nls.localize('iconForeground', \"The default color for icons in the workbench.\"));\nexport const focusBorder = registerColor('focusBorder', {\n  dark: '#007FD4',\n  light: '#0090F1',\n  hc: '#F38518'\n}, nls.localize('focusBorder', \"Overall border color for focused elements. This color is only used if not overridden by a component.\"));\nexport const contrastBorder = registerColor('contrastBorder', {\n  light: null,\n  dark: null,\n  hc: '#6FC3DF'\n}, nls.localize('contrastBorder', \"An extra border around elements to separate them from others for greater contrast.\"));\nexport const activeContrastBorder = registerColor('contrastActiveBorder', {\n  light: null,\n  dark: null,\n  hc: focusBorder\n}, nls.localize('activeContrastBorder', \"An extra border around active elements to separate them from others for greater contrast.\"));\nexport const textLinkForeground = registerColor('textLink.foreground', {\n  light: '#006AB1',\n  dark: '#3794FF',\n  hc: '#3794FF'\n}, nls.localize('textLinkForeground', \"Foreground color for links in text.\"));\nexport const textLinkActiveForeground = registerColor('textLink.activeForeground', {\n  light: '#006AB1',\n  dark: '#3794FF',\n  hc: '#3794FF'\n}, nls.localize('textLinkActiveForeground', \"Foreground color for links in text when clicked on and on mouse hover.\"));\nexport const textCodeBlockBackground = registerColor('textCodeBlock.background', {\n  light: '#dcdcdc66',\n  dark: '#0a0a0a66',\n  hc: Color.black\n}, nls.localize('textCodeBlockBackground', \"Background color for code blocks in text.\")); // ----- widgets\n\nexport const widgetShadow = registerColor('widget.shadow', {\n  dark: transparent(Color.black, .36),\n  light: transparent(Color.black, .16),\n  hc: null\n}, nls.localize('widgetShadow', 'Shadow color of widgets such as find/replace inside the editor.'));\nexport const inputBackground = registerColor('input.background', {\n  dark: '#3C3C3C',\n  light: Color.white,\n  hc: Color.black\n}, nls.localize('inputBoxBackground', \"Input box background.\"));\nexport const inputForeground = registerColor('input.foreground', {\n  dark: foreground,\n  light: foreground,\n  hc: foreground\n}, nls.localize('inputBoxForeground', \"Input box foreground.\"));\nexport const inputBorder = registerColor('input.border', {\n  dark: null,\n  light: null,\n  hc: contrastBorder\n}, nls.localize('inputBoxBorder', \"Input box border.\"));\nexport const inputActiveOptionBorder = registerColor('inputOption.activeBorder', {\n  dark: '#007ACC00',\n  light: '#007ACC00',\n  hc: contrastBorder\n}, nls.localize('inputBoxActiveOptionBorder', \"Border color of activated options in input fields.\"));\nexport const inputActiveOptionBackground = registerColor('inputOption.activeBackground', {\n  dark: transparent(focusBorder, 0.4),\n  light: transparent(focusBorder, 0.2),\n  hc: Color.transparent\n}, nls.localize('inputOption.activeBackground', \"Background color of activated options in input fields.\"));\nexport const inputActiveOptionForeground = registerColor('inputOption.activeForeground', {\n  dark: Color.white,\n  light: Color.black,\n  hc: null\n}, nls.localize('inputOption.activeForeground', \"Foreground color of activated options in input fields.\"));\nexport const inputValidationInfoBackground = registerColor('inputValidation.infoBackground', {\n  dark: '#063B49',\n  light: '#D6ECF2',\n  hc: Color.black\n}, nls.localize('inputValidationInfoBackground', \"Input validation background color for information severity.\"));\nexport const inputValidationInfoForeground = registerColor('inputValidation.infoForeground', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('inputValidationInfoForeground', \"Input validation foreground color for information severity.\"));\nexport const inputValidationInfoBorder = registerColor('inputValidation.infoBorder', {\n  dark: '#007acc',\n  light: '#007acc',\n  hc: contrastBorder\n}, nls.localize('inputValidationInfoBorder', \"Input validation border color for information severity.\"));\nexport const inputValidationWarningBackground = registerColor('inputValidation.warningBackground', {\n  dark: '#352A05',\n  light: '#F6F5D2',\n  hc: Color.black\n}, nls.localize('inputValidationWarningBackground', \"Input validation background color for warning severity.\"));\nexport const inputValidationWarningForeground = registerColor('inputValidation.warningForeground', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('inputValidationWarningForeground', \"Input validation foreground color for warning severity.\"));\nexport const inputValidationWarningBorder = registerColor('inputValidation.warningBorder', {\n  dark: '#B89500',\n  light: '#B89500',\n  hc: contrastBorder\n}, nls.localize('inputValidationWarningBorder', \"Input validation border color for warning severity.\"));\nexport const inputValidationErrorBackground = registerColor('inputValidation.errorBackground', {\n  dark: '#5A1D1D',\n  light: '#F2DEDE',\n  hc: Color.black\n}, nls.localize('inputValidationErrorBackground', \"Input validation background color for error severity.\"));\nexport const inputValidationErrorForeground = registerColor('inputValidation.errorForeground', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('inputValidationErrorForeground', \"Input validation foreground color for error severity.\"));\nexport const inputValidationErrorBorder = registerColor('inputValidation.errorBorder', {\n  dark: '#BE1100',\n  light: '#BE1100',\n  hc: contrastBorder\n}, nls.localize('inputValidationErrorBorder', \"Input validation border color for error severity.\"));\nexport const selectBackground = registerColor('dropdown.background', {\n  dark: '#3C3C3C',\n  light: Color.white,\n  hc: Color.black\n}, nls.localize('dropdownBackground', \"Dropdown background.\"));\nexport const selectForeground = registerColor('dropdown.foreground', {\n  dark: '#F0F0F0',\n  light: null,\n  hc: Color.white\n}, nls.localize('dropdownForeground', \"Dropdown foreground.\"));\nexport const buttonForeground = registerColor('button.foreground', {\n  dark: Color.white,\n  light: Color.white,\n  hc: Color.white\n}, nls.localize('buttonForeground', \"Button foreground color.\"));\nexport const buttonBackground = registerColor('button.background', {\n  dark: '#0E639C',\n  light: '#007ACC',\n  hc: null\n}, nls.localize('buttonBackground', \"Button background color.\"));\nexport const buttonHoverBackground = registerColor('button.hoverBackground', {\n  dark: lighten(buttonBackground, 0.2),\n  light: darken(buttonBackground, 0.2),\n  hc: null\n}, nls.localize('buttonHoverBackground', \"Button background color when hovering.\"));\nexport const badgeBackground = registerColor('badge.background', {\n  dark: '#4D4D4D',\n  light: '#C4C4C4',\n  hc: Color.black\n}, nls.localize('badgeBackground', \"Badge background color. Badges are small information labels, e.g. for search results count.\"));\nexport const badgeForeground = registerColor('badge.foreground', {\n  dark: Color.white,\n  light: '#333',\n  hc: Color.white\n}, nls.localize('badgeForeground', \"Badge foreground color. Badges are small information labels, e.g. for search results count.\"));\nexport const scrollbarShadow = registerColor('scrollbar.shadow', {\n  dark: '#000000',\n  light: '#DDDDDD',\n  hc: null\n}, nls.localize('scrollbarShadow', \"Scrollbar shadow to indicate that the view is scrolled.\"));\nexport const scrollbarSliderBackground = registerColor('scrollbarSlider.background', {\n  dark: Color.fromHex('#797979').transparent(0.4),\n  light: Color.fromHex('#646464').transparent(0.4),\n  hc: transparent(contrastBorder, 0.6)\n}, nls.localize('scrollbarSliderBackground', \"Scrollbar slider background color.\"));\nexport const scrollbarSliderHoverBackground = registerColor('scrollbarSlider.hoverBackground', {\n  dark: Color.fromHex('#646464').transparent(0.7),\n  light: Color.fromHex('#646464').transparent(0.7),\n  hc: transparent(contrastBorder, 0.8)\n}, nls.localize('scrollbarSliderHoverBackground', \"Scrollbar slider background color when hovering.\"));\nexport const scrollbarSliderActiveBackground = registerColor('scrollbarSlider.activeBackground', {\n  dark: Color.fromHex('#BFBFBF').transparent(0.4),\n  light: Color.fromHex('#000000').transparent(0.6),\n  hc: contrastBorder\n}, nls.localize('scrollbarSliderActiveBackground', \"Scrollbar slider background color when clicked on.\"));\nexport const progressBarBackground = registerColor('progressBar.background', {\n  dark: Color.fromHex('#0E70C0'),\n  light: Color.fromHex('#0E70C0'),\n  hc: contrastBorder\n}, nls.localize('progressBarBackground', \"Background color of the progress bar that can show for long running operations.\"));\nexport const editorErrorBackground = registerColor('editorError.background', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('editorError.background', 'Background color of error text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorErrorForeground = registerColor('editorError.foreground', {\n  dark: '#F14C4C',\n  light: '#E51400',\n  hc: null\n}, nls.localize('editorError.foreground', 'Foreground color of error squigglies in the editor.'));\nexport const editorErrorBorder = registerColor('editorError.border', {\n  dark: null,\n  light: null,\n  hc: Color.fromHex('#E47777').transparent(0.8)\n}, nls.localize('errorBorder', 'Border color of error boxes in the editor.'));\nexport const editorWarningBackground = registerColor('editorWarning.background', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('editorWarning.background', 'Background color of warning text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorWarningForeground = registerColor('editorWarning.foreground', {\n  dark: '#CCA700',\n  light: '#BF8803',\n  hc: null\n}, nls.localize('editorWarning.foreground', 'Foreground color of warning squigglies in the editor.'));\nexport const editorWarningBorder = registerColor('editorWarning.border', {\n  dark: null,\n  light: null,\n  hc: Color.fromHex('#FFCC00').transparent(0.8)\n}, nls.localize('warningBorder', 'Border color of warning boxes in the editor.'));\nexport const editorInfoBackground = registerColor('editorInfo.background', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('editorInfo.background', 'Background color of info text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorInfoForeground = registerColor('editorInfo.foreground', {\n  dark: '#3794FF',\n  light: '#1a85ff',\n  hc: '#3794FF'\n}, nls.localize('editorInfo.foreground', 'Foreground color of info squigglies in the editor.'));\nexport const editorInfoBorder = registerColor('editorInfo.border', {\n  dark: null,\n  light: null,\n  hc: Color.fromHex('#3794FF').transparent(0.8)\n}, nls.localize('infoBorder', 'Border color of info boxes in the editor.'));\nexport const editorHintForeground = registerColor('editorHint.foreground', {\n  dark: Color.fromHex('#eeeeee').transparent(0.7),\n  light: '#6c6c6c',\n  hc: null\n}, nls.localize('editorHint.foreground', 'Foreground color of hint squigglies in the editor.'));\nexport const editorHintBorder = registerColor('editorHint.border', {\n  dark: null,\n  light: null,\n  hc: Color.fromHex('#eeeeee').transparent(0.8)\n}, nls.localize('hintBorder', 'Border color of hint boxes in the editor.'));\n/**\n * Editor background color.\n * Because of bug https://monacotools.visualstudio.com/DefaultCollection/Monaco/_workitems/edit/13254\n * we are *not* using the color white (or #ffffff, rgba(255,255,255)) but something very close to white.\n */\n\nexport const editorBackground = registerColor('editor.background', {\n  light: '#fffffe',\n  dark: '#1E1E1E',\n  hc: Color.black\n}, nls.localize('editorBackground', \"Editor background color.\"));\n/**\n * Editor foreground color.\n */\n\nexport const editorForeground = registerColor('editor.foreground', {\n  light: '#333333',\n  dark: '#BBBBBB',\n  hc: Color.white\n}, nls.localize('editorForeground', \"Editor default foreground color.\"));\n/**\n * Editor widgets\n */\n\nexport const editorWidgetBackground = registerColor('editorWidget.background', {\n  dark: '#252526',\n  light: '#F3F3F3',\n  hc: '#0C141F'\n}, nls.localize('editorWidgetBackground', 'Background color of editor widgets, such as find/replace.'));\nexport const editorWidgetForeground = registerColor('editorWidget.foreground', {\n  dark: foreground,\n  light: foreground,\n  hc: foreground\n}, nls.localize('editorWidgetForeground', 'Foreground color of editor widgets, such as find/replace.'));\nexport const editorWidgetBorder = registerColor('editorWidget.border', {\n  dark: '#454545',\n  light: '#C8C8C8',\n  hc: contrastBorder\n}, nls.localize('editorWidgetBorder', 'Border color of editor widgets. The color is only used if the widget chooses to have a border and if the color is not overridden by a widget.'));\nexport const editorWidgetResizeBorder = registerColor('editorWidget.resizeBorder', {\n  light: null,\n  dark: null,\n  hc: null\n}, nls.localize('editorWidgetResizeBorder', \"Border color of the resize bar of editor widgets. The color is only used if the widget chooses to have a resize border and if the color is not overridden by a widget.\"));\n/**\n * Quick pick widget\n */\n\nexport const quickInputBackground = registerColor('quickInput.background', {\n  dark: editorWidgetBackground,\n  light: editorWidgetBackground,\n  hc: editorWidgetBackground\n}, nls.localize('pickerBackground', \"Quick picker background color. The quick picker widget is the container for pickers like the command palette.\"));\nexport const quickInputForeground = registerColor('quickInput.foreground', {\n  dark: editorWidgetForeground,\n  light: editorWidgetForeground,\n  hc: editorWidgetForeground\n}, nls.localize('pickerForeground', \"Quick picker foreground color. The quick picker widget is the container for pickers like the command palette.\"));\nexport const quickInputTitleBackground = registerColor('quickInputTitle.background', {\n  dark: new Color(new RGBA(255, 255, 255, 0.105)),\n  light: new Color(new RGBA(0, 0, 0, 0.06)),\n  hc: '#000000'\n}, nls.localize('pickerTitleBackground', \"Quick picker title background color. The quick picker widget is the container for pickers like the command palette.\"));\nexport const pickerGroupForeground = registerColor('pickerGroup.foreground', {\n  dark: '#3794FF',\n  light: '#0066BF',\n  hc: Color.white\n}, nls.localize('pickerGroupForeground', \"Quick picker color for grouping labels.\"));\nexport const pickerGroupBorder = registerColor('pickerGroup.border', {\n  dark: '#3F3F46',\n  light: '#CCCEDB',\n  hc: Color.white\n}, nls.localize('pickerGroupBorder', \"Quick picker color for grouping borders.\"));\n/**\n * Keybinding label\n */\n\nexport const keybindingLabelBackground = registerColor('keybindingLabel.background', {\n  dark: new Color(new RGBA(128, 128, 128, 0.17)),\n  light: new Color(new RGBA(221, 221, 221, 0.4)),\n  hc: Color.transparent\n}, nls.localize('keybindingLabelBackground', \"Keybinding label background color. The keybinding label is used to represent a keyboard shortcut.\"));\nexport const keybindingLabelForeground = registerColor('keybindingLabel.foreground', {\n  dark: Color.fromHex('#CCCCCC'),\n  light: Color.fromHex('#555555'),\n  hc: Color.white\n}, nls.localize('keybindingLabelForeground', \"Keybinding label foreground color. The keybinding label is used to represent a keyboard shortcut.\"));\nexport const keybindingLabelBorder = registerColor('keybindingLabel.border', {\n  dark: new Color(new RGBA(51, 51, 51, 0.6)),\n  light: new Color(new RGBA(204, 204, 204, 0.4)),\n  hc: new Color(new RGBA(111, 195, 223))\n}, nls.localize('keybindingLabelBorder', \"Keybinding label border color. The keybinding label is used to represent a keyboard shortcut.\"));\nexport const keybindingLabelBottomBorder = registerColor('keybindingLabel.bottomBorder', {\n  dark: new Color(new RGBA(68, 68, 68, 0.6)),\n  light: new Color(new RGBA(187, 187, 187, 0.4)),\n  hc: new Color(new RGBA(111, 195, 223))\n}, nls.localize('keybindingLabelBottomBorder', \"Keybinding label border bottom color. The keybinding label is used to represent a keyboard shortcut.\"));\n/**\n * Editor selection colors.\n */\n\nexport const editorSelectionBackground = registerColor('editor.selectionBackground', {\n  light: '#ADD6FF',\n  dark: '#264F78',\n  hc: '#f3f518'\n}, nls.localize('editorSelectionBackground', \"Color of the editor selection.\"));\nexport const editorSelectionForeground = registerColor('editor.selectionForeground', {\n  light: null,\n  dark: null,\n  hc: '#000000'\n}, nls.localize('editorSelectionForeground', \"Color of the selected text for high contrast.\"));\nexport const editorInactiveSelection = registerColor('editor.inactiveSelectionBackground', {\n  light: transparent(editorSelectionBackground, 0.5),\n  dark: transparent(editorSelectionBackground, 0.5),\n  hc: transparent(editorSelectionBackground, 0.5)\n}, nls.localize('editorInactiveSelection', \"Color of the selection in an inactive editor. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport const editorSelectionHighlight = registerColor('editor.selectionHighlightBackground', {\n  light: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6),\n  dark: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6),\n  hc: null\n}, nls.localize('editorSelectionHighlight', 'Color for regions with the same content as the selection. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorSelectionHighlightBorder = registerColor('editor.selectionHighlightBorder', {\n  light: null,\n  dark: null,\n  hc: activeContrastBorder\n}, nls.localize('editorSelectionHighlightBorder', \"Border color for regions with the same content as the selection.\"));\n/**\n * Editor find match colors.\n */\n\nexport const editorFindMatch = registerColor('editor.findMatchBackground', {\n  light: '#A8AC94',\n  dark: '#515C6A',\n  hc: null\n}, nls.localize('editorFindMatch', \"Color of the current search match.\"));\nexport const editorFindMatchHighlight = registerColor('editor.findMatchHighlightBackground', {\n  light: '#EA5C0055',\n  dark: '#EA5C0055',\n  hc: null\n}, nls.localize('findMatchHighlight', \"Color of the other search matches. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport const editorFindRangeHighlight = registerColor('editor.findRangeHighlightBackground', {\n  dark: '#3a3d4166',\n  light: '#b4b4b44d',\n  hc: null\n}, nls.localize('findRangeHighlight', \"Color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport const editorFindMatchBorder = registerColor('editor.findMatchBorder', {\n  light: null,\n  dark: null,\n  hc: activeContrastBorder\n}, nls.localize('editorFindMatchBorder', \"Border color of the current search match.\"));\nexport const editorFindMatchHighlightBorder = registerColor('editor.findMatchHighlightBorder', {\n  light: null,\n  dark: null,\n  hc: activeContrastBorder\n}, nls.localize('findMatchHighlightBorder', \"Border color of the other search matches.\"));\nexport const editorFindRangeHighlightBorder = registerColor('editor.findRangeHighlightBorder', {\n  dark: null,\n  light: null,\n  hc: transparent(activeContrastBorder, 0.4)\n}, nls.localize('findRangeHighlightBorder', \"Border color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations.\"), true);\n/**\n * Editor hover\n */\n\nexport const editorHoverHighlight = registerColor('editor.hoverHighlightBackground', {\n  light: '#ADD6FF26',\n  dark: '#264f7840',\n  hc: '#ADD6FF26'\n}, nls.localize('hoverHighlight', 'Highlight below the word for which a hover is shown. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorHoverBackground = registerColor('editorHoverWidget.background', {\n  light: editorWidgetBackground,\n  dark: editorWidgetBackground,\n  hc: editorWidgetBackground\n}, nls.localize('hoverBackground', 'Background color of the editor hover.'));\nexport const editorHoverForeground = registerColor('editorHoverWidget.foreground', {\n  light: editorWidgetForeground,\n  dark: editorWidgetForeground,\n  hc: editorWidgetForeground\n}, nls.localize('hoverForeground', 'Foreground color of the editor hover.'));\nexport const editorHoverBorder = registerColor('editorHoverWidget.border', {\n  light: editorWidgetBorder,\n  dark: editorWidgetBorder,\n  hc: editorWidgetBorder\n}, nls.localize('hoverBorder', 'Border color of the editor hover.'));\nexport const editorHoverStatusBarBackground = registerColor('editorHoverWidget.statusBarBackground', {\n  dark: lighten(editorHoverBackground, 0.2),\n  light: darken(editorHoverBackground, 0.05),\n  hc: editorWidgetBackground\n}, nls.localize('statusBarBackground', \"Background color of the editor hover status bar.\"));\n/**\n * Editor link colors\n */\n\nexport const editorActiveLinkForeground = registerColor('editorLink.activeForeground', {\n  dark: '#4E94CE',\n  light: Color.blue,\n  hc: Color.cyan\n}, nls.localize('activeLinkForeground', 'Color of active links.'));\n/**\n * Inline hints\n */\n\nexport const editorInlayHintForeground = registerColor('editorInlayHint.foreground', {\n  dark: transparent(badgeForeground, .8),\n  light: transparent(badgeForeground, .8),\n  hc: badgeForeground\n}, nls.localize('editorInlayHintForeground', 'Foreground color of inline hints'));\nexport const editorInlayHintBackground = registerColor('editorInlayHint.background', {\n  dark: transparent(badgeBackground, .6),\n  light: transparent(badgeBackground, .3),\n  hc: badgeBackground\n}, nls.localize('editorInlayHintBackground', 'Background color of inline hints'));\nexport const editorInlayHintTypeForeground = registerColor('editorInlayHint.typeForeground', {\n  dark: editorInlayHintForeground,\n  light: editorInlayHintForeground,\n  hc: editorInlayHintForeground\n}, nls.localize('editorInlayHintForegroundTypes', 'Foreground color of inline hints for types'));\nexport const editorInlayHintTypeBackground = registerColor('editorInlayHint.typeBackground', {\n  dark: editorInlayHintBackground,\n  light: editorInlayHintBackground,\n  hc: editorInlayHintBackground\n}, nls.localize('editorInlayHintBackgroundTypes', 'Background color of inline hints for types'));\nexport const editorInlayHintParameterForeground = registerColor('editorInlayHint.parameterForeground', {\n  dark: editorInlayHintForeground,\n  light: editorInlayHintForeground,\n  hc: editorInlayHintForeground\n}, nls.localize('editorInlayHintForegroundParameter', 'Foreground color of inline hints for parameters'));\nexport const editorInlayHintParameterBackground = registerColor('editorInlayHint.parameterBackground', {\n  dark: editorInlayHintBackground,\n  light: editorInlayHintBackground,\n  hc: editorInlayHintBackground\n}, nls.localize('editorInlayHintBackgroundParameter', 'Background color of inline hints for parameters'));\n/**\n * Editor lighbulb icon colors\n */\n\nexport const editorLightBulbForeground = registerColor('editorLightBulb.foreground', {\n  dark: '#FFCC00',\n  light: '#DDB100',\n  hc: '#FFCC00'\n}, nls.localize('editorLightBulbForeground', \"The color used for the lightbulb actions icon.\"));\nexport const editorLightBulbAutoFixForeground = registerColor('editorLightBulbAutoFix.foreground', {\n  dark: '#75BEFF',\n  light: '#007ACC',\n  hc: '#75BEFF'\n}, nls.localize('editorLightBulbAutoFixForeground', \"The color used for the lightbulb auto fix actions icon.\"));\n/**\n * Diff Editor Colors\n */\n\nexport const defaultInsertColor = new Color(new RGBA(155, 185, 85, 0.2));\nexport const defaultRemoveColor = new Color(new RGBA(255, 0, 0, 0.2));\nexport const diffInserted = registerColor('diffEditor.insertedTextBackground', {\n  dark: defaultInsertColor,\n  light: defaultInsertColor,\n  hc: null\n}, nls.localize('diffEditorInserted', 'Background color for text that got inserted. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const diffRemoved = registerColor('diffEditor.removedTextBackground', {\n  dark: defaultRemoveColor,\n  light: defaultRemoveColor,\n  hc: null\n}, nls.localize('diffEditorRemoved', 'Background color for text that got removed. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const diffInsertedOutline = registerColor('diffEditor.insertedTextBorder', {\n  dark: null,\n  light: null,\n  hc: '#33ff2eff'\n}, nls.localize('diffEditorInsertedOutline', 'Outline color for the text that got inserted.'));\nexport const diffRemovedOutline = registerColor('diffEditor.removedTextBorder', {\n  dark: null,\n  light: null,\n  hc: '#FF008F'\n}, nls.localize('diffEditorRemovedOutline', 'Outline color for text that got removed.'));\nexport const diffBorder = registerColor('diffEditor.border', {\n  dark: null,\n  light: null,\n  hc: contrastBorder\n}, nls.localize('diffEditorBorder', 'Border color between the two text editors.'));\nexport const diffDiagonalFill = registerColor('diffEditor.diagonalFill', {\n  dark: '#cccccc33',\n  light: '#22222233',\n  hc: null\n}, nls.localize('diffDiagonalFill', \"Color of the diff editor's diagonal fill. The diagonal fill is used in side-by-side diff views.\"));\n/**\n * List and tree colors\n */\n\nexport const listFocusBackground = registerColor('list.focusBackground', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('listFocusBackground', \"List/Tree background color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listFocusForeground = registerColor('list.focusForeground', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('listFocusForeground', \"List/Tree foreground color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listFocusOutline = registerColor('list.focusOutline', {\n  dark: focusBorder,\n  light: focusBorder,\n  hc: activeContrastBorder\n}, nls.localize('listFocusOutline', \"List/Tree outline color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listActiveSelectionBackground = registerColor('list.activeSelectionBackground', {\n  dark: '#094771',\n  light: '#0060C0',\n  hc: null\n}, nls.localize('listActiveSelectionBackground', \"List/Tree background color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listActiveSelectionForeground = registerColor('list.activeSelectionForeground', {\n  dark: Color.white,\n  light: Color.white,\n  hc: null\n}, nls.localize('listActiveSelectionForeground', \"List/Tree foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listActiveSelectionIconForeground = registerColor('list.activeSelectionIconForeground', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('listActiveSelectionIconForeground', \"List/Tree icon foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveSelectionBackground = registerColor('list.inactiveSelectionBackground', {\n  dark: '#37373D',\n  light: '#E4E6F1',\n  hc: null\n}, nls.localize('listInactiveSelectionBackground', \"List/Tree background color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveSelectionForeground = registerColor('list.inactiveSelectionForeground', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('listInactiveSelectionForeground', \"List/Tree foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveSelectionIconForeground = registerColor('list.inactiveSelectionIconForeground', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('listInactiveSelectionIconForeground', \"List/Tree icon foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveFocusBackground = registerColor('list.inactiveFocusBackground', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('listInactiveFocusBackground', \"List/Tree background color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveFocusOutline = registerColor('list.inactiveFocusOutline', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('listInactiveFocusOutline', \"List/Tree outline color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listHoverBackground = registerColor('list.hoverBackground', {\n  dark: '#2A2D2E',\n  light: '#F0F0F0',\n  hc: null\n}, nls.localize('listHoverBackground', \"List/Tree background when hovering over items using the mouse.\"));\nexport const listHoverForeground = registerColor('list.hoverForeground', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('listHoverForeground', \"List/Tree foreground when hovering over items using the mouse.\"));\nexport const listDropBackground = registerColor('list.dropBackground', {\n  dark: '#062F4A',\n  light: '#D6EBFF',\n  hc: null\n}, nls.localize('listDropBackground', \"List/Tree drag and drop background when moving items around using the mouse.\"));\nexport const listHighlightForeground = registerColor('list.highlightForeground', {\n  dark: '#18A3FF',\n  light: '#0066BF',\n  hc: focusBorder\n}, nls.localize('highlight', 'List/Tree foreground color of the match highlights when searching inside the list/tree.'));\nexport const listFocusHighlightForeground = registerColor('list.focusHighlightForeground', {\n  dark: listHighlightForeground,\n  light: ifDefinedThenElse(listActiveSelectionBackground, listHighlightForeground, '#9DDDFF'),\n  hc: listHighlightForeground\n}, nls.localize('listFocusHighlightForeground', 'List/Tree foreground color of the match highlights on actively focused items when searching inside the list/tree.'));\nexport const listFilterWidgetBackground = registerColor('listFilterWidget.background', {\n  light: '#efc1ad',\n  dark: '#653723',\n  hc: Color.black\n}, nls.localize('listFilterWidgetBackground', 'Background color of the type filter widget in lists and trees.'));\nexport const listFilterWidgetOutline = registerColor('listFilterWidget.outline', {\n  dark: Color.transparent,\n  light: Color.transparent,\n  hc: '#f38518'\n}, nls.localize('listFilterWidgetOutline', 'Outline color of the type filter widget in lists and trees.'));\nexport const listFilterWidgetNoMatchesOutline = registerColor('listFilterWidget.noMatchesOutline', {\n  dark: '#BE1100',\n  light: '#BE1100',\n  hc: contrastBorder\n}, nls.localize('listFilterWidgetNoMatchesOutline', 'Outline color of the type filter widget in lists and trees, when there are no matches.'));\nexport const treeIndentGuidesStroke = registerColor('tree.indentGuidesStroke', {\n  dark: '#585858',\n  light: '#a9a9a9',\n  hc: '#a9a9a9'\n}, nls.localize('treeIndentGuidesStroke', \"Tree stroke color for the indentation guides.\"));\nexport const tableColumnsBorder = registerColor('tree.tableColumnsBorder', {\n  dark: '#CCCCCC20',\n  light: '#61616120',\n  hc: null\n}, nls.localize('treeIndentGuidesStroke', \"Tree stroke color for the indentation guides.\"));\n/**\n * Quick pick widget (dependent on List and tree colors)\n */\n\nexport const _deprecatedQuickInputListFocusBackground = registerColor('quickInput.list.focusBackground', {\n  dark: null,\n  light: null,\n  hc: null\n}, '', undefined, nls.localize('quickInput.list.focusBackground deprecation', \"Please use quickInputList.focusBackground instead\"));\nexport const quickInputListFocusForeground = registerColor('quickInputList.focusForeground', {\n  dark: listActiveSelectionForeground,\n  light: listActiveSelectionForeground,\n  hc: listActiveSelectionForeground\n}, nls.localize('quickInput.listFocusForeground', \"Quick picker foreground color for the focused item.\"));\nexport const quickInputListFocusIconForeground = registerColor('quickInputList.focusIconForeground', {\n  dark: listActiveSelectionIconForeground,\n  light: listActiveSelectionIconForeground,\n  hc: listActiveSelectionIconForeground\n}, nls.localize('quickInput.listFocusIconForeground', \"Quick picker icon foreground color for the focused item.\"));\nexport const quickInputListFocusBackground = registerColor('quickInputList.focusBackground', {\n  dark: oneOf(_deprecatedQuickInputListFocusBackground, listActiveSelectionBackground),\n  light: oneOf(_deprecatedQuickInputListFocusBackground, listActiveSelectionBackground),\n  hc: null\n}, nls.localize('quickInput.listFocusBackground', \"Quick picker background color for the focused item.\"));\n/**\n * Menu colors\n */\n\nexport const menuBorder = registerColor('menu.border', {\n  dark: null,\n  light: null,\n  hc: contrastBorder\n}, nls.localize('menuBorder', \"Border color of menus.\"));\nexport const menuForeground = registerColor('menu.foreground', {\n  dark: selectForeground,\n  light: foreground,\n  hc: selectForeground\n}, nls.localize('menuForeground', \"Foreground color of menu items.\"));\nexport const menuBackground = registerColor('menu.background', {\n  dark: selectBackground,\n  light: selectBackground,\n  hc: selectBackground\n}, nls.localize('menuBackground', \"Background color of menu items.\"));\nexport const menuSelectionForeground = registerColor('menu.selectionForeground', {\n  dark: listActiveSelectionForeground,\n  light: listActiveSelectionForeground,\n  hc: listActiveSelectionForeground\n}, nls.localize('menuSelectionForeground', \"Foreground color of the selected menu item in menus.\"));\nexport const menuSelectionBackground = registerColor('menu.selectionBackground', {\n  dark: listActiveSelectionBackground,\n  light: listActiveSelectionBackground,\n  hc: listActiveSelectionBackground\n}, nls.localize('menuSelectionBackground', \"Background color of the selected menu item in menus.\"));\nexport const menuSelectionBorder = registerColor('menu.selectionBorder', {\n  dark: null,\n  light: null,\n  hc: activeContrastBorder\n}, nls.localize('menuSelectionBorder', \"Border color of the selected menu item in menus.\"));\nexport const menuSeparatorBackground = registerColor('menu.separatorBackground', {\n  dark: '#BBBBBB',\n  light: '#888888',\n  hc: contrastBorder\n}, nls.localize('menuSeparatorBackground', \"Color of a separator menu item in menus.\"));\n/**\n * Toolbar colors\n */\n\nexport const toolbarHoverBackground = registerColor('toolbar.hoverBackground', {\n  dark: '#5a5d5e50',\n  light: '#b8b8b850',\n  hc: null\n}, nls.localize('toolbarHoverBackground', \"Toolbar background when hovering over actions using the mouse\"));\n/**\n * Snippet placeholder colors\n */\n\nexport const snippetTabstopHighlightBackground = registerColor('editor.snippetTabstopHighlightBackground', {\n  dark: new Color(new RGBA(124, 124, 124, 0.3)),\n  light: new Color(new RGBA(10, 50, 100, 0.2)),\n  hc: new Color(new RGBA(124, 124, 124, 0.3))\n}, nls.localize('snippetTabstopHighlightBackground', \"Highlight background color of a snippet tabstop.\"));\nexport const snippetTabstopHighlightBorder = registerColor('editor.snippetTabstopHighlightBorder', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('snippetTabstopHighlightBorder', \"Highlight border color of a snippet tabstop.\"));\nexport const snippetFinalTabstopHighlightBackground = registerColor('editor.snippetFinalTabstopHighlightBackground', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('snippetFinalTabstopHighlightBackground', \"Highlight background color of the final tabstop of a snippet.\"));\nexport const snippetFinalTabstopHighlightBorder = registerColor('editor.snippetFinalTabstopHighlightBorder', {\n  dark: '#525252',\n  light: new Color(new RGBA(10, 50, 100, 0.5)),\n  hc: '#525252'\n}, nls.localize('snippetFinalTabstopHighlightBorder', \"Highlight border color of the final tabstop of a snippet.\"));\nexport const overviewRulerFindMatchForeground = registerColor('editorOverviewRuler.findMatchForeground', {\n  dark: '#d186167e',\n  light: '#d186167e',\n  hc: '#AB5A00'\n}, nls.localize('overviewRulerFindMatchForeground', 'Overview ruler marker color for find matches. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const overviewRulerSelectionHighlightForeground = registerColor('editorOverviewRuler.selectionHighlightForeground', {\n  dark: '#A0A0A0CC',\n  light: '#A0A0A0CC',\n  hc: '#A0A0A0CC'\n}, nls.localize('overviewRulerSelectionHighlightForeground', 'Overview ruler marker color for selection highlights. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const minimapFindMatch = registerColor('minimap.findMatchHighlight', {\n  light: '#d18616',\n  dark: '#d18616',\n  hc: '#AB5A00'\n}, nls.localize('minimapFindMatchHighlight', 'Minimap marker color for find matches.'), true);\nexport const minimapSelectionOccurrenceHighlight = registerColor('minimap.selectionOccurrenceHighlight', {\n  light: '#c9c9c9',\n  dark: '#676767',\n  hc: '#ffffff'\n}, nls.localize('minimapSelectionOccurrenceHighlight', 'Minimap marker color for repeating editor selections.'), true);\nexport const minimapSelection = registerColor('minimap.selectionHighlight', {\n  light: '#ADD6FF',\n  dark: '#264F78',\n  hc: '#ffffff'\n}, nls.localize('minimapSelectionHighlight', 'Minimap marker color for the editor selection.'), true);\nexport const minimapError = registerColor('minimap.errorHighlight', {\n  dark: new Color(new RGBA(255, 18, 18, 0.7)),\n  light: new Color(new RGBA(255, 18, 18, 0.7)),\n  hc: new Color(new RGBA(255, 50, 50, 1))\n}, nls.localize('minimapError', 'Minimap marker color for errors.'));\nexport const minimapWarning = registerColor('minimap.warningHighlight', {\n  dark: editorWarningForeground,\n  light: editorWarningForeground,\n  hc: editorWarningBorder\n}, nls.localize('overviewRuleWarning', 'Minimap marker color for warnings.'));\nexport const minimapBackground = registerColor('minimap.background', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('minimapBackground', \"Minimap background color.\"));\nexport const minimapForegroundOpacity = registerColor('minimap.foregroundOpacity', {\n  dark: Color.fromHex('#000f'),\n  light: Color.fromHex('#000f'),\n  hc: Color.fromHex('#000f')\n}, nls.localize('minimapForegroundOpacity', 'Opacity of foreground elements rendered in the minimap. For example, \"#000000c0\" will render the elements with 75% opacity.'));\nexport const minimapSliderBackground = registerColor('minimapSlider.background', {\n  light: transparent(scrollbarSliderBackground, 0.5),\n  dark: transparent(scrollbarSliderBackground, 0.5),\n  hc: transparent(scrollbarSliderBackground, 0.5)\n}, nls.localize('minimapSliderBackground', \"Minimap slider background color.\"));\nexport const minimapSliderHoverBackground = registerColor('minimapSlider.hoverBackground', {\n  light: transparent(scrollbarSliderHoverBackground, 0.5),\n  dark: transparent(scrollbarSliderHoverBackground, 0.5),\n  hc: transparent(scrollbarSliderHoverBackground, 0.5)\n}, nls.localize('minimapSliderHoverBackground', \"Minimap slider background color when hovering.\"));\nexport const minimapSliderActiveBackground = registerColor('minimapSlider.activeBackground', {\n  light: transparent(scrollbarSliderActiveBackground, 0.5),\n  dark: transparent(scrollbarSliderActiveBackground, 0.5),\n  hc: transparent(scrollbarSliderActiveBackground, 0.5)\n}, nls.localize('minimapSliderActiveBackground', \"Minimap slider background color when clicked on.\"));\nexport const problemsErrorIconForeground = registerColor('problemsErrorIcon.foreground', {\n  dark: editorErrorForeground,\n  light: editorErrorForeground,\n  hc: editorErrorForeground\n}, nls.localize('problemsErrorIconForeground', \"The color used for the problems error icon.\"));\nexport const problemsWarningIconForeground = registerColor('problemsWarningIcon.foreground', {\n  dark: editorWarningForeground,\n  light: editorWarningForeground,\n  hc: editorWarningForeground\n}, nls.localize('problemsWarningIconForeground', \"The color used for the problems warning icon.\"));\nexport const problemsInfoIconForeground = registerColor('problemsInfoIcon.foreground', {\n  dark: editorInfoForeground,\n  light: editorInfoForeground,\n  hc: editorInfoForeground\n}, nls.localize('problemsInfoIconForeground', \"The color used for the problems info icon.\")); // ----- color functions\n\nexport function executeTransform(transform, theme) {\n  var _a, _b, _c;\n\n  switch (transform.op) {\n    case 0\n    /* Darken */\n    :\n      return (_a = resolveColorValue(transform.value, theme)) === null || _a === void 0 ? void 0 : _a.darken(transform.factor);\n\n    case 1\n    /* Lighten */\n    :\n      return (_b = resolveColorValue(transform.value, theme)) === null || _b === void 0 ? void 0 : _b.lighten(transform.factor);\n\n    case 2\n    /* Transparent */\n    :\n      return (_c = resolveColorValue(transform.value, theme)) === null || _c === void 0 ? void 0 : _c.transparent(transform.factor);\n\n    case 3\n    /* OneOf */\n    :\n      for (const candidate of transform.values) {\n        const color = resolveColorValue(candidate, theme);\n\n        if (color) {\n          return color;\n        }\n      }\n\n      return undefined;\n\n    case 5\n    /* IfDefinedThenElse */\n    :\n      return resolveColorValue(theme.defines(transform.if) ? transform.then : transform.else, theme);\n\n    case 4\n    /* LessProminent */\n    :\n      const from = resolveColorValue(transform.value, theme);\n\n      if (!from) {\n        return undefined;\n      }\n\n      const backgroundColor = resolveColorValue(transform.background, theme);\n\n      if (!backgroundColor) {\n        return from.transparent(transform.factor * transform.transparency);\n      }\n\n      return from.isDarkerThan(backgroundColor) ? Color.getLighterColor(from, backgroundColor, transform.factor).transparent(transform.transparency) : Color.getDarkerColor(from, backgroundColor, transform.factor).transparent(transform.transparency);\n\n    default:\n      throw assertNever(transform);\n  }\n}\nexport function darken(colorValue, factor) {\n  return {\n    op: 0\n    /* Darken */\n    ,\n    value: colorValue,\n    factor\n  };\n}\nexport function lighten(colorValue, factor) {\n  return {\n    op: 1\n    /* Lighten */\n    ,\n    value: colorValue,\n    factor\n  };\n}\nexport function transparent(colorValue, factor) {\n  return {\n    op: 2\n    /* Transparent */\n    ,\n    value: colorValue,\n    factor\n  };\n}\nexport function oneOf() {\n  for (var _len = arguments.length, colorValues = new Array(_len), _key = 0; _key < _len; _key++) {\n    colorValues[_key] = arguments[_key];\n  }\n\n  return {\n    op: 3\n    /* OneOf */\n    ,\n    values: colorValues\n  };\n}\nexport function ifDefinedThenElse(ifArg, thenArg, elseArg) {\n  return {\n    op: 5\n    /* IfDefinedThenElse */\n    ,\n    if: ifArg,\n    then: thenArg,\n    else: elseArg\n  };\n}\n\nfunction lessProminent(colorValue, backgroundColorValue, factor, transparency) {\n  return {\n    op: 4\n    /* LessProminent */\n    ,\n    value: colorValue,\n    background: backgroundColorValue,\n    factor,\n    transparency\n  };\n} // ----- implementation\n\n/**\n * @param colorValue Resolve a color value in the context of a theme\n */\n\n\nexport function resolveColorValue(colorValue, theme) {\n  if (colorValue === null) {\n    return undefined;\n  } else if (typeof colorValue === 'string') {\n    if (colorValue[0] === '#') {\n      return Color.fromHex(colorValue);\n    }\n\n    return theme.getColor(colorValue);\n  } else if (colorValue instanceof Color) {\n    return colorValue;\n  } else if (typeof colorValue === 'object') {\n    return executeTransform(colorValue, theme);\n  }\n\n  return undefined;\n}\nexport const workbenchColorsSchemaId = 'vscode://schemas/workbench-colors';\nlet schemaRegistry = platform.Registry.as(JSONExtensions.JSONContribution);\nschemaRegistry.registerSchema(workbenchColorsSchemaId, colorRegistry.getColorSchema());\nconst delayer = new RunOnceScheduler(() => schemaRegistry.notifySchemaChanged(workbenchColorsSchemaId), 200);\ncolorRegistry.onDidChangeSchema(() => {\n  if (!delayer.isScheduled()) {\n    delayer.schedule();\n  }\n}); // setTimeout(_ => console.log(colorRegistry.toString()), 5000);","map":{"version":3,"sources":["/home/umut/Documents/cs/cs410/Project2Group14/node_modules/monaco-editor/esm/vs/platform/theme/common/colorRegistry.js"],"names":["RunOnceScheduler","Color","RGBA","Emitter","assertNever","nls","Extensions","JSONExtensions","platform","ColorContribution","ColorRegistry","constructor","_onDidChangeSchema","onDidChangeSchema","event","colorSchema","type","properties","colorReferenceSchema","enum","enumDescriptions","colorsById","registerColor","id","defaults","description","needsTransparency","deprecationMessage","colorContribution","propertySchema","format","defaultSnippets","body","push","fire","resolveDefaultColor","theme","colorDesc","colorValue","resolveColorValue","undefined","getColorSchema","toString","sorter","a","b","cat1","indexOf","cat2","localeCompare","Object","keys","sort","map","k","join","colorRegistry","Registry","add","foreground","dark","light","hc","localize","errorForeground","iconForeground","focusBorder","contrastBorder","activeContrastBorder","textLinkForeground","textLinkActiveForeground","textCodeBlockBackground","black","widgetShadow","transparent","inputBackground","white","inputForeground","inputBorder","inputActiveOptionBorder","inputActiveOptionBackground","inputActiveOptionForeground","inputValidationInfoBackground","inputValidationInfoForeground","inputValidationInfoBorder","inputValidationWarningBackground","inputValidationWarningForeground","inputValidationWarningBorder","inputValidationErrorBackground","inputValidationErrorForeground","inputValidationErrorBorder","selectBackground","selectForeground","buttonForeground","buttonBackground","buttonHoverBackground","lighten","darken","badgeBackground","badgeForeground","scrollbarShadow","scrollbarSliderBackground","fromHex","scrollbarSliderHoverBackground","scrollbarSliderActiveBackground","progressBarBackground","editorErrorBackground","editorErrorForeground","editorErrorBorder","editorWarningBackground","editorWarningForeground","editorWarningBorder","editorInfoBackground","editorInfoForeground","editorInfoBorder","editorHintForeground","editorHintBorder","editorBackground","editorForeground","editorWidgetBackground","editorWidgetForeground","editorWidgetBorder","editorWidgetResizeBorder","quickInputBackground","quickInputForeground","quickInputTitleBackground","pickerGroupForeground","pickerGroupBorder","keybindingLabelBackground","keybindingLabelForeground","keybindingLabelBorder","keybindingLabelBottomBorder","editorSelectionBackground","editorSelectionForeground","editorInactiveSelection","editorSelectionHighlight","lessProminent","editorSelectionHighlightBorder","editorFindMatch","editorFindMatchHighlight","editorFindRangeHighlight","editorFindMatchBorder","editorFindMatchHighlightBorder","editorFindRangeHighlightBorder","editorHoverHighlight","editorHoverBackground","editorHoverForeground","editorHoverBorder","editorHoverStatusBarBackground","editorActiveLinkForeground","blue","cyan","editorInlayHintForeground","editorInlayHintBackground","editorInlayHintTypeForeground","editorInlayHintTypeBackground","editorInlayHintParameterForeground","editorInlayHintParameterBackground","editorLightBulbForeground","editorLightBulbAutoFixForeground","defaultInsertColor","defaultRemoveColor","diffInserted","diffRemoved","diffInsertedOutline","diffRemovedOutline","diffBorder","diffDiagonalFill","listFocusBackground","listFocusForeground","listFocusOutline","listActiveSelectionBackground","listActiveSelectionForeground","listActiveSelectionIconForeground","listInactiveSelectionBackground","listInactiveSelectionForeground","listInactiveSelectionIconForeground","listInactiveFocusBackground","listInactiveFocusOutline","listHoverBackground","listHoverForeground","listDropBackground","listHighlightForeground","listFocusHighlightForeground","ifDefinedThenElse","listFilterWidgetBackground","listFilterWidgetOutline","listFilterWidgetNoMatchesOutline","treeIndentGuidesStroke","tableColumnsBorder","_deprecatedQuickInputListFocusBackground","quickInputListFocusForeground","quickInputListFocusIconForeground","quickInputListFocusBackground","oneOf","menuBorder","menuForeground","menuBackground","menuSelectionForeground","menuSelectionBackground","menuSelectionBorder","menuSeparatorBackground","toolbarHoverBackground","snippetTabstopHighlightBackground","snippetTabstopHighlightBorder","snippetFinalTabstopHighlightBackground","snippetFinalTabstopHighlightBorder","overviewRulerFindMatchForeground","overviewRulerSelectionHighlightForeground","minimapFindMatch","minimapSelectionOccurrenceHighlight","minimapSelection","minimapError","minimapWarning","minimapBackground","minimapForegroundOpacity","minimapSliderBackground","minimapSliderHoverBackground","minimapSliderActiveBackground","problemsErrorIconForeground","problemsWarningIconForeground","problemsInfoIconForeground","executeTransform","transform","_a","_b","_c","op","value","factor","candidate","values","color","defines","if","then","else","from","backgroundColor","background","transparency","isDarkerThan","getLighterColor","getDarkerColor","colorValues","ifArg","thenArg","elseArg","backgroundColorValue","getColor","workbenchColorsSchemaId","schemaRegistry","as","JSONContribution","registerSchema","delayer","notifySchemaChanged","isScheduled","schedule"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Color, RGBA } from '../../../base/common/color.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { assertNever } from '../../../base/common/types.js';\nimport * as nls from '../../../nls.js';\nimport { Extensions as JSONExtensions } from '../../jsonschemas/common/jsonContributionRegistry.js';\nimport * as platform from '../../registry/common/platform.js';\n// color registry\nexport const Extensions = {\n    ColorContribution: 'base.contributions.colors'\n};\nclass ColorRegistry {\n    constructor() {\n        this._onDidChangeSchema = new Emitter();\n        this.onDidChangeSchema = this._onDidChangeSchema.event;\n        this.colorSchema = { type: 'object', properties: {} };\n        this.colorReferenceSchema = { type: 'string', enum: [], enumDescriptions: [] };\n        this.colorsById = {};\n    }\n    registerColor(id, defaults, description, needsTransparency = false, deprecationMessage) {\n        let colorContribution = { id, description, defaults, needsTransparency, deprecationMessage };\n        this.colorsById[id] = colorContribution;\n        let propertySchema = { type: 'string', description, format: 'color-hex', defaultSnippets: [{ body: '${1:#ff0000}' }] };\n        if (deprecationMessage) {\n            propertySchema.deprecationMessage = deprecationMessage;\n        }\n        this.colorSchema.properties[id] = propertySchema;\n        this.colorReferenceSchema.enum.push(id);\n        this.colorReferenceSchema.enumDescriptions.push(description);\n        this._onDidChangeSchema.fire();\n        return id;\n    }\n    resolveDefaultColor(id, theme) {\n        const colorDesc = this.colorsById[id];\n        if (colorDesc && colorDesc.defaults) {\n            const colorValue = colorDesc.defaults[theme.type];\n            return resolveColorValue(colorValue, theme);\n        }\n        return undefined;\n    }\n    getColorSchema() {\n        return this.colorSchema;\n    }\n    toString() {\n        let sorter = (a, b) => {\n            let cat1 = a.indexOf('.') === -1 ? 0 : 1;\n            let cat2 = b.indexOf('.') === -1 ? 0 : 1;\n            if (cat1 !== cat2) {\n                return cat1 - cat2;\n            }\n            return a.localeCompare(b);\n        };\n        return Object.keys(this.colorsById).sort(sorter).map(k => `- \\`${k}\\`: ${this.colorsById[k].description}`).join('\\n');\n    }\n}\nconst colorRegistry = new ColorRegistry();\nplatform.Registry.add(Extensions.ColorContribution, colorRegistry);\nexport function registerColor(id, defaults, description, needsTransparency, deprecationMessage) {\n    return colorRegistry.registerColor(id, defaults, description, needsTransparency, deprecationMessage);\n}\n// ----- base colors\nexport const foreground = registerColor('foreground', { dark: '#CCCCCC', light: '#616161', hc: '#FFFFFF' }, nls.localize('foreground', \"Overall foreground color. This color is only used if not overridden by a component.\"));\nexport const errorForeground = registerColor('errorForeground', { dark: '#F48771', light: '#A1260D', hc: '#F48771' }, nls.localize('errorForeground', \"Overall foreground color for error messages. This color is only used if not overridden by a component.\"));\nexport const iconForeground = registerColor('icon.foreground', { dark: '#C5C5C5', light: '#424242', hc: '#FFFFFF' }, nls.localize('iconForeground', \"The default color for icons in the workbench.\"));\nexport const focusBorder = registerColor('focusBorder', { dark: '#007FD4', light: '#0090F1', hc: '#F38518' }, nls.localize('focusBorder', \"Overall border color for focused elements. This color is only used if not overridden by a component.\"));\nexport const contrastBorder = registerColor('contrastBorder', { light: null, dark: null, hc: '#6FC3DF' }, nls.localize('contrastBorder', \"An extra border around elements to separate them from others for greater contrast.\"));\nexport const activeContrastBorder = registerColor('contrastActiveBorder', { light: null, dark: null, hc: focusBorder }, nls.localize('activeContrastBorder', \"An extra border around active elements to separate them from others for greater contrast.\"));\nexport const textLinkForeground = registerColor('textLink.foreground', { light: '#006AB1', dark: '#3794FF', hc: '#3794FF' }, nls.localize('textLinkForeground', \"Foreground color for links in text.\"));\nexport const textLinkActiveForeground = registerColor('textLink.activeForeground', { light: '#006AB1', dark: '#3794FF', hc: '#3794FF' }, nls.localize('textLinkActiveForeground', \"Foreground color for links in text when clicked on and on mouse hover.\"));\nexport const textCodeBlockBackground = registerColor('textCodeBlock.background', { light: '#dcdcdc66', dark: '#0a0a0a66', hc: Color.black }, nls.localize('textCodeBlockBackground', \"Background color for code blocks in text.\"));\n// ----- widgets\nexport const widgetShadow = registerColor('widget.shadow', { dark: transparent(Color.black, .36), light: transparent(Color.black, .16), hc: null }, nls.localize('widgetShadow', 'Shadow color of widgets such as find/replace inside the editor.'));\nexport const inputBackground = registerColor('input.background', { dark: '#3C3C3C', light: Color.white, hc: Color.black }, nls.localize('inputBoxBackground', \"Input box background.\"));\nexport const inputForeground = registerColor('input.foreground', { dark: foreground, light: foreground, hc: foreground }, nls.localize('inputBoxForeground', \"Input box foreground.\"));\nexport const inputBorder = registerColor('input.border', { dark: null, light: null, hc: contrastBorder }, nls.localize('inputBoxBorder', \"Input box border.\"));\nexport const inputActiveOptionBorder = registerColor('inputOption.activeBorder', { dark: '#007ACC00', light: '#007ACC00', hc: contrastBorder }, nls.localize('inputBoxActiveOptionBorder', \"Border color of activated options in input fields.\"));\nexport const inputActiveOptionBackground = registerColor('inputOption.activeBackground', { dark: transparent(focusBorder, 0.4), light: transparent(focusBorder, 0.2), hc: Color.transparent }, nls.localize('inputOption.activeBackground', \"Background color of activated options in input fields.\"));\nexport const inputActiveOptionForeground = registerColor('inputOption.activeForeground', { dark: Color.white, light: Color.black, hc: null }, nls.localize('inputOption.activeForeground', \"Foreground color of activated options in input fields.\"));\nexport const inputValidationInfoBackground = registerColor('inputValidation.infoBackground', { dark: '#063B49', light: '#D6ECF2', hc: Color.black }, nls.localize('inputValidationInfoBackground', \"Input validation background color for information severity.\"));\nexport const inputValidationInfoForeground = registerColor('inputValidation.infoForeground', { dark: null, light: null, hc: null }, nls.localize('inputValidationInfoForeground', \"Input validation foreground color for information severity.\"));\nexport const inputValidationInfoBorder = registerColor('inputValidation.infoBorder', { dark: '#007acc', light: '#007acc', hc: contrastBorder }, nls.localize('inputValidationInfoBorder', \"Input validation border color for information severity.\"));\nexport const inputValidationWarningBackground = registerColor('inputValidation.warningBackground', { dark: '#352A05', light: '#F6F5D2', hc: Color.black }, nls.localize('inputValidationWarningBackground', \"Input validation background color for warning severity.\"));\nexport const inputValidationWarningForeground = registerColor('inputValidation.warningForeground', { dark: null, light: null, hc: null }, nls.localize('inputValidationWarningForeground', \"Input validation foreground color for warning severity.\"));\nexport const inputValidationWarningBorder = registerColor('inputValidation.warningBorder', { dark: '#B89500', light: '#B89500', hc: contrastBorder }, nls.localize('inputValidationWarningBorder', \"Input validation border color for warning severity.\"));\nexport const inputValidationErrorBackground = registerColor('inputValidation.errorBackground', { dark: '#5A1D1D', light: '#F2DEDE', hc: Color.black }, nls.localize('inputValidationErrorBackground', \"Input validation background color for error severity.\"));\nexport const inputValidationErrorForeground = registerColor('inputValidation.errorForeground', { dark: null, light: null, hc: null }, nls.localize('inputValidationErrorForeground', \"Input validation foreground color for error severity.\"));\nexport const inputValidationErrorBorder = registerColor('inputValidation.errorBorder', { dark: '#BE1100', light: '#BE1100', hc: contrastBorder }, nls.localize('inputValidationErrorBorder', \"Input validation border color for error severity.\"));\nexport const selectBackground = registerColor('dropdown.background', { dark: '#3C3C3C', light: Color.white, hc: Color.black }, nls.localize('dropdownBackground', \"Dropdown background.\"));\nexport const selectForeground = registerColor('dropdown.foreground', { dark: '#F0F0F0', light: null, hc: Color.white }, nls.localize('dropdownForeground', \"Dropdown foreground.\"));\nexport const buttonForeground = registerColor('button.foreground', { dark: Color.white, light: Color.white, hc: Color.white }, nls.localize('buttonForeground', \"Button foreground color.\"));\nexport const buttonBackground = registerColor('button.background', { dark: '#0E639C', light: '#007ACC', hc: null }, nls.localize('buttonBackground', \"Button background color.\"));\nexport const buttonHoverBackground = registerColor('button.hoverBackground', { dark: lighten(buttonBackground, 0.2), light: darken(buttonBackground, 0.2), hc: null }, nls.localize('buttonHoverBackground', \"Button background color when hovering.\"));\nexport const badgeBackground = registerColor('badge.background', { dark: '#4D4D4D', light: '#C4C4C4', hc: Color.black }, nls.localize('badgeBackground', \"Badge background color. Badges are small information labels, e.g. for search results count.\"));\nexport const badgeForeground = registerColor('badge.foreground', { dark: Color.white, light: '#333', hc: Color.white }, nls.localize('badgeForeground', \"Badge foreground color. Badges are small information labels, e.g. for search results count.\"));\nexport const scrollbarShadow = registerColor('scrollbar.shadow', { dark: '#000000', light: '#DDDDDD', hc: null }, nls.localize('scrollbarShadow', \"Scrollbar shadow to indicate that the view is scrolled.\"));\nexport const scrollbarSliderBackground = registerColor('scrollbarSlider.background', { dark: Color.fromHex('#797979').transparent(0.4), light: Color.fromHex('#646464').transparent(0.4), hc: transparent(contrastBorder, 0.6) }, nls.localize('scrollbarSliderBackground', \"Scrollbar slider background color.\"));\nexport const scrollbarSliderHoverBackground = registerColor('scrollbarSlider.hoverBackground', { dark: Color.fromHex('#646464').transparent(0.7), light: Color.fromHex('#646464').transparent(0.7), hc: transparent(contrastBorder, 0.8) }, nls.localize('scrollbarSliderHoverBackground', \"Scrollbar slider background color when hovering.\"));\nexport const scrollbarSliderActiveBackground = registerColor('scrollbarSlider.activeBackground', { dark: Color.fromHex('#BFBFBF').transparent(0.4), light: Color.fromHex('#000000').transparent(0.6), hc: contrastBorder }, nls.localize('scrollbarSliderActiveBackground', \"Scrollbar slider background color when clicked on.\"));\nexport const progressBarBackground = registerColor('progressBar.background', { dark: Color.fromHex('#0E70C0'), light: Color.fromHex('#0E70C0'), hc: contrastBorder }, nls.localize('progressBarBackground', \"Background color of the progress bar that can show for long running operations.\"));\nexport const editorErrorBackground = registerColor('editorError.background', { dark: null, light: null, hc: null }, nls.localize('editorError.background', 'Background color of error text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorErrorForeground = registerColor('editorError.foreground', { dark: '#F14C4C', light: '#E51400', hc: null }, nls.localize('editorError.foreground', 'Foreground color of error squigglies in the editor.'));\nexport const editorErrorBorder = registerColor('editorError.border', { dark: null, light: null, hc: Color.fromHex('#E47777').transparent(0.8) }, nls.localize('errorBorder', 'Border color of error boxes in the editor.'));\nexport const editorWarningBackground = registerColor('editorWarning.background', { dark: null, light: null, hc: null }, nls.localize('editorWarning.background', 'Background color of warning text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorWarningForeground = registerColor('editorWarning.foreground', { dark: '#CCA700', light: '#BF8803', hc: null }, nls.localize('editorWarning.foreground', 'Foreground color of warning squigglies in the editor.'));\nexport const editorWarningBorder = registerColor('editorWarning.border', { dark: null, light: null, hc: Color.fromHex('#FFCC00').transparent(0.8) }, nls.localize('warningBorder', 'Border color of warning boxes in the editor.'));\nexport const editorInfoBackground = registerColor('editorInfo.background', { dark: null, light: null, hc: null }, nls.localize('editorInfo.background', 'Background color of info text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorInfoForeground = registerColor('editorInfo.foreground', { dark: '#3794FF', light: '#1a85ff', hc: '#3794FF' }, nls.localize('editorInfo.foreground', 'Foreground color of info squigglies in the editor.'));\nexport const editorInfoBorder = registerColor('editorInfo.border', { dark: null, light: null, hc: Color.fromHex('#3794FF').transparent(0.8) }, nls.localize('infoBorder', 'Border color of info boxes in the editor.'));\nexport const editorHintForeground = registerColor('editorHint.foreground', { dark: Color.fromHex('#eeeeee').transparent(0.7), light: '#6c6c6c', hc: null }, nls.localize('editorHint.foreground', 'Foreground color of hint squigglies in the editor.'));\nexport const editorHintBorder = registerColor('editorHint.border', { dark: null, light: null, hc: Color.fromHex('#eeeeee').transparent(0.8) }, nls.localize('hintBorder', 'Border color of hint boxes in the editor.'));\n/**\n * Editor background color.\n * Because of bug https://monacotools.visualstudio.com/DefaultCollection/Monaco/_workitems/edit/13254\n * we are *not* using the color white (or #ffffff, rgba(255,255,255)) but something very close to white.\n */\nexport const editorBackground = registerColor('editor.background', { light: '#fffffe', dark: '#1E1E1E', hc: Color.black }, nls.localize('editorBackground', \"Editor background color.\"));\n/**\n * Editor foreground color.\n */\nexport const editorForeground = registerColor('editor.foreground', { light: '#333333', dark: '#BBBBBB', hc: Color.white }, nls.localize('editorForeground', \"Editor default foreground color.\"));\n/**\n * Editor widgets\n */\nexport const editorWidgetBackground = registerColor('editorWidget.background', { dark: '#252526', light: '#F3F3F3', hc: '#0C141F' }, nls.localize('editorWidgetBackground', 'Background color of editor widgets, such as find/replace.'));\nexport const editorWidgetForeground = registerColor('editorWidget.foreground', { dark: foreground, light: foreground, hc: foreground }, nls.localize('editorWidgetForeground', 'Foreground color of editor widgets, such as find/replace.'));\nexport const editorWidgetBorder = registerColor('editorWidget.border', { dark: '#454545', light: '#C8C8C8', hc: contrastBorder }, nls.localize('editorWidgetBorder', 'Border color of editor widgets. The color is only used if the widget chooses to have a border and if the color is not overridden by a widget.'));\nexport const editorWidgetResizeBorder = registerColor('editorWidget.resizeBorder', { light: null, dark: null, hc: null }, nls.localize('editorWidgetResizeBorder', \"Border color of the resize bar of editor widgets. The color is only used if the widget chooses to have a resize border and if the color is not overridden by a widget.\"));\n/**\n * Quick pick widget\n */\nexport const quickInputBackground = registerColor('quickInput.background', { dark: editorWidgetBackground, light: editorWidgetBackground, hc: editorWidgetBackground }, nls.localize('pickerBackground', \"Quick picker background color. The quick picker widget is the container for pickers like the command palette.\"));\nexport const quickInputForeground = registerColor('quickInput.foreground', { dark: editorWidgetForeground, light: editorWidgetForeground, hc: editorWidgetForeground }, nls.localize('pickerForeground', \"Quick picker foreground color. The quick picker widget is the container for pickers like the command palette.\"));\nexport const quickInputTitleBackground = registerColor('quickInputTitle.background', { dark: new Color(new RGBA(255, 255, 255, 0.105)), light: new Color(new RGBA(0, 0, 0, 0.06)), hc: '#000000' }, nls.localize('pickerTitleBackground', \"Quick picker title background color. The quick picker widget is the container for pickers like the command palette.\"));\nexport const pickerGroupForeground = registerColor('pickerGroup.foreground', { dark: '#3794FF', light: '#0066BF', hc: Color.white }, nls.localize('pickerGroupForeground', \"Quick picker color for grouping labels.\"));\nexport const pickerGroupBorder = registerColor('pickerGroup.border', { dark: '#3F3F46', light: '#CCCEDB', hc: Color.white }, nls.localize('pickerGroupBorder', \"Quick picker color for grouping borders.\"));\n/**\n * Keybinding label\n */\nexport const keybindingLabelBackground = registerColor('keybindingLabel.background', { dark: new Color(new RGBA(128, 128, 128, 0.17)), light: new Color(new RGBA(221, 221, 221, 0.4)), hc: Color.transparent }, nls.localize('keybindingLabelBackground', \"Keybinding label background color. The keybinding label is used to represent a keyboard shortcut.\"));\nexport const keybindingLabelForeground = registerColor('keybindingLabel.foreground', { dark: Color.fromHex('#CCCCCC'), light: Color.fromHex('#555555'), hc: Color.white }, nls.localize('keybindingLabelForeground', \"Keybinding label foreground color. The keybinding label is used to represent a keyboard shortcut.\"));\nexport const keybindingLabelBorder = registerColor('keybindingLabel.border', { dark: new Color(new RGBA(51, 51, 51, 0.6)), light: new Color(new RGBA(204, 204, 204, 0.4)), hc: new Color(new RGBA(111, 195, 223)) }, nls.localize('keybindingLabelBorder', \"Keybinding label border color. The keybinding label is used to represent a keyboard shortcut.\"));\nexport const keybindingLabelBottomBorder = registerColor('keybindingLabel.bottomBorder', { dark: new Color(new RGBA(68, 68, 68, 0.6)), light: new Color(new RGBA(187, 187, 187, 0.4)), hc: new Color(new RGBA(111, 195, 223)) }, nls.localize('keybindingLabelBottomBorder', \"Keybinding label border bottom color. The keybinding label is used to represent a keyboard shortcut.\"));\n/**\n * Editor selection colors.\n */\nexport const editorSelectionBackground = registerColor('editor.selectionBackground', { light: '#ADD6FF', dark: '#264F78', hc: '#f3f518' }, nls.localize('editorSelectionBackground', \"Color of the editor selection.\"));\nexport const editorSelectionForeground = registerColor('editor.selectionForeground', { light: null, dark: null, hc: '#000000' }, nls.localize('editorSelectionForeground', \"Color of the selected text for high contrast.\"));\nexport const editorInactiveSelection = registerColor('editor.inactiveSelectionBackground', { light: transparent(editorSelectionBackground, 0.5), dark: transparent(editorSelectionBackground, 0.5), hc: transparent(editorSelectionBackground, 0.5) }, nls.localize('editorInactiveSelection', \"Color of the selection in an inactive editor. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport const editorSelectionHighlight = registerColor('editor.selectionHighlightBackground', { light: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6), dark: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6), hc: null }, nls.localize('editorSelectionHighlight', 'Color for regions with the same content as the selection. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorSelectionHighlightBorder = registerColor('editor.selectionHighlightBorder', { light: null, dark: null, hc: activeContrastBorder }, nls.localize('editorSelectionHighlightBorder', \"Border color for regions with the same content as the selection.\"));\n/**\n * Editor find match colors.\n */\nexport const editorFindMatch = registerColor('editor.findMatchBackground', { light: '#A8AC94', dark: '#515C6A', hc: null }, nls.localize('editorFindMatch', \"Color of the current search match.\"));\nexport const editorFindMatchHighlight = registerColor('editor.findMatchHighlightBackground', { light: '#EA5C0055', dark: '#EA5C0055', hc: null }, nls.localize('findMatchHighlight', \"Color of the other search matches. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport const editorFindRangeHighlight = registerColor('editor.findRangeHighlightBackground', { dark: '#3a3d4166', light: '#b4b4b44d', hc: null }, nls.localize('findRangeHighlight', \"Color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport const editorFindMatchBorder = registerColor('editor.findMatchBorder', { light: null, dark: null, hc: activeContrastBorder }, nls.localize('editorFindMatchBorder', \"Border color of the current search match.\"));\nexport const editorFindMatchHighlightBorder = registerColor('editor.findMatchHighlightBorder', { light: null, dark: null, hc: activeContrastBorder }, nls.localize('findMatchHighlightBorder', \"Border color of the other search matches.\"));\nexport const editorFindRangeHighlightBorder = registerColor('editor.findRangeHighlightBorder', { dark: null, light: null, hc: transparent(activeContrastBorder, 0.4) }, nls.localize('findRangeHighlightBorder', \"Border color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations.\"), true);\n/**\n * Editor hover\n */\nexport const editorHoverHighlight = registerColor('editor.hoverHighlightBackground', { light: '#ADD6FF26', dark: '#264f7840', hc: '#ADD6FF26' }, nls.localize('hoverHighlight', 'Highlight below the word for which a hover is shown. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorHoverBackground = registerColor('editorHoverWidget.background', { light: editorWidgetBackground, dark: editorWidgetBackground, hc: editorWidgetBackground }, nls.localize('hoverBackground', 'Background color of the editor hover.'));\nexport const editorHoverForeground = registerColor('editorHoverWidget.foreground', { light: editorWidgetForeground, dark: editorWidgetForeground, hc: editorWidgetForeground }, nls.localize('hoverForeground', 'Foreground color of the editor hover.'));\nexport const editorHoverBorder = registerColor('editorHoverWidget.border', { light: editorWidgetBorder, dark: editorWidgetBorder, hc: editorWidgetBorder }, nls.localize('hoverBorder', 'Border color of the editor hover.'));\nexport const editorHoverStatusBarBackground = registerColor('editorHoverWidget.statusBarBackground', { dark: lighten(editorHoverBackground, 0.2), light: darken(editorHoverBackground, 0.05), hc: editorWidgetBackground }, nls.localize('statusBarBackground', \"Background color of the editor hover status bar.\"));\n/**\n * Editor link colors\n */\nexport const editorActiveLinkForeground = registerColor('editorLink.activeForeground', { dark: '#4E94CE', light: Color.blue, hc: Color.cyan }, nls.localize('activeLinkForeground', 'Color of active links.'));\n/**\n * Inline hints\n */\nexport const editorInlayHintForeground = registerColor('editorInlayHint.foreground', { dark: transparent(badgeForeground, .8), light: transparent(badgeForeground, .8), hc: badgeForeground }, nls.localize('editorInlayHintForeground', 'Foreground color of inline hints'));\nexport const editorInlayHintBackground = registerColor('editorInlayHint.background', { dark: transparent(badgeBackground, .6), light: transparent(badgeBackground, .3), hc: badgeBackground }, nls.localize('editorInlayHintBackground', 'Background color of inline hints'));\nexport const editorInlayHintTypeForeground = registerColor('editorInlayHint.typeForeground', { dark: editorInlayHintForeground, light: editorInlayHintForeground, hc: editorInlayHintForeground }, nls.localize('editorInlayHintForegroundTypes', 'Foreground color of inline hints for types'));\nexport const editorInlayHintTypeBackground = registerColor('editorInlayHint.typeBackground', { dark: editorInlayHintBackground, light: editorInlayHintBackground, hc: editorInlayHintBackground }, nls.localize('editorInlayHintBackgroundTypes', 'Background color of inline hints for types'));\nexport const editorInlayHintParameterForeground = registerColor('editorInlayHint.parameterForeground', { dark: editorInlayHintForeground, light: editorInlayHintForeground, hc: editorInlayHintForeground }, nls.localize('editorInlayHintForegroundParameter', 'Foreground color of inline hints for parameters'));\nexport const editorInlayHintParameterBackground = registerColor('editorInlayHint.parameterBackground', { dark: editorInlayHintBackground, light: editorInlayHintBackground, hc: editorInlayHintBackground }, nls.localize('editorInlayHintBackgroundParameter', 'Background color of inline hints for parameters'));\n/**\n * Editor lighbulb icon colors\n */\nexport const editorLightBulbForeground = registerColor('editorLightBulb.foreground', { dark: '#FFCC00', light: '#DDB100', hc: '#FFCC00' }, nls.localize('editorLightBulbForeground', \"The color used for the lightbulb actions icon.\"));\nexport const editorLightBulbAutoFixForeground = registerColor('editorLightBulbAutoFix.foreground', { dark: '#75BEFF', light: '#007ACC', hc: '#75BEFF' }, nls.localize('editorLightBulbAutoFixForeground', \"The color used for the lightbulb auto fix actions icon.\"));\n/**\n * Diff Editor Colors\n */\nexport const defaultInsertColor = new Color(new RGBA(155, 185, 85, 0.2));\nexport const defaultRemoveColor = new Color(new RGBA(255, 0, 0, 0.2));\nexport const diffInserted = registerColor('diffEditor.insertedTextBackground', { dark: defaultInsertColor, light: defaultInsertColor, hc: null }, nls.localize('diffEditorInserted', 'Background color for text that got inserted. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const diffRemoved = registerColor('diffEditor.removedTextBackground', { dark: defaultRemoveColor, light: defaultRemoveColor, hc: null }, nls.localize('diffEditorRemoved', 'Background color for text that got removed. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const diffInsertedOutline = registerColor('diffEditor.insertedTextBorder', { dark: null, light: null, hc: '#33ff2eff' }, nls.localize('diffEditorInsertedOutline', 'Outline color for the text that got inserted.'));\nexport const diffRemovedOutline = registerColor('diffEditor.removedTextBorder', { dark: null, light: null, hc: '#FF008F' }, nls.localize('diffEditorRemovedOutline', 'Outline color for text that got removed.'));\nexport const diffBorder = registerColor('diffEditor.border', { dark: null, light: null, hc: contrastBorder }, nls.localize('diffEditorBorder', 'Border color between the two text editors.'));\nexport const diffDiagonalFill = registerColor('diffEditor.diagonalFill', { dark: '#cccccc33', light: '#22222233', hc: null }, nls.localize('diffDiagonalFill', \"Color of the diff editor's diagonal fill. The diagonal fill is used in side-by-side diff views.\"));\n/**\n * List and tree colors\n */\nexport const listFocusBackground = registerColor('list.focusBackground', { dark: null, light: null, hc: null }, nls.localize('listFocusBackground', \"List/Tree background color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listFocusForeground = registerColor('list.focusForeground', { dark: null, light: null, hc: null }, nls.localize('listFocusForeground', \"List/Tree foreground color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listFocusOutline = registerColor('list.focusOutline', { dark: focusBorder, light: focusBorder, hc: activeContrastBorder }, nls.localize('listFocusOutline', \"List/Tree outline color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listActiveSelectionBackground = registerColor('list.activeSelectionBackground', { dark: '#094771', light: '#0060C0', hc: null }, nls.localize('listActiveSelectionBackground', \"List/Tree background color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listActiveSelectionForeground = registerColor('list.activeSelectionForeground', { dark: Color.white, light: Color.white, hc: null }, nls.localize('listActiveSelectionForeground', \"List/Tree foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listActiveSelectionIconForeground = registerColor('list.activeSelectionIconForeground', { dark: null, light: null, hc: null }, nls.localize('listActiveSelectionIconForeground', \"List/Tree icon foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveSelectionBackground = registerColor('list.inactiveSelectionBackground', { dark: '#37373D', light: '#E4E6F1', hc: null }, nls.localize('listInactiveSelectionBackground', \"List/Tree background color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveSelectionForeground = registerColor('list.inactiveSelectionForeground', { dark: null, light: null, hc: null }, nls.localize('listInactiveSelectionForeground', \"List/Tree foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveSelectionIconForeground = registerColor('list.inactiveSelectionIconForeground', { dark: null, light: null, hc: null }, nls.localize('listInactiveSelectionIconForeground', \"List/Tree icon foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveFocusBackground = registerColor('list.inactiveFocusBackground', { dark: null, light: null, hc: null }, nls.localize('listInactiveFocusBackground', \"List/Tree background color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveFocusOutline = registerColor('list.inactiveFocusOutline', { dark: null, light: null, hc: null }, nls.localize('listInactiveFocusOutline', \"List/Tree outline color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listHoverBackground = registerColor('list.hoverBackground', { dark: '#2A2D2E', light: '#F0F0F0', hc: null }, nls.localize('listHoverBackground', \"List/Tree background when hovering over items using the mouse.\"));\nexport const listHoverForeground = registerColor('list.hoverForeground', { dark: null, light: null, hc: null }, nls.localize('listHoverForeground', \"List/Tree foreground when hovering over items using the mouse.\"));\nexport const listDropBackground = registerColor('list.dropBackground', { dark: '#062F4A', light: '#D6EBFF', hc: null }, nls.localize('listDropBackground', \"List/Tree drag and drop background when moving items around using the mouse.\"));\nexport const listHighlightForeground = registerColor('list.highlightForeground', { dark: '#18A3FF', light: '#0066BF', hc: focusBorder }, nls.localize('highlight', 'List/Tree foreground color of the match highlights when searching inside the list/tree.'));\nexport const listFocusHighlightForeground = registerColor('list.focusHighlightForeground', { dark: listHighlightForeground, light: ifDefinedThenElse(listActiveSelectionBackground, listHighlightForeground, '#9DDDFF'), hc: listHighlightForeground }, nls.localize('listFocusHighlightForeground', 'List/Tree foreground color of the match highlights on actively focused items when searching inside the list/tree.'));\nexport const listFilterWidgetBackground = registerColor('listFilterWidget.background', { light: '#efc1ad', dark: '#653723', hc: Color.black }, nls.localize('listFilterWidgetBackground', 'Background color of the type filter widget in lists and trees.'));\nexport const listFilterWidgetOutline = registerColor('listFilterWidget.outline', { dark: Color.transparent, light: Color.transparent, hc: '#f38518' }, nls.localize('listFilterWidgetOutline', 'Outline color of the type filter widget in lists and trees.'));\nexport const listFilterWidgetNoMatchesOutline = registerColor('listFilterWidget.noMatchesOutline', { dark: '#BE1100', light: '#BE1100', hc: contrastBorder }, nls.localize('listFilterWidgetNoMatchesOutline', 'Outline color of the type filter widget in lists and trees, when there are no matches.'));\nexport const treeIndentGuidesStroke = registerColor('tree.indentGuidesStroke', { dark: '#585858', light: '#a9a9a9', hc: '#a9a9a9' }, nls.localize('treeIndentGuidesStroke', \"Tree stroke color for the indentation guides.\"));\nexport const tableColumnsBorder = registerColor('tree.tableColumnsBorder', { dark: '#CCCCCC20', light: '#61616120', hc: null }, nls.localize('treeIndentGuidesStroke', \"Tree stroke color for the indentation guides.\"));\n/**\n * Quick pick widget (dependent on List and tree colors)\n */\nexport const _deprecatedQuickInputListFocusBackground = registerColor('quickInput.list.focusBackground', { dark: null, light: null, hc: null }, '', undefined, nls.localize('quickInput.list.focusBackground deprecation', \"Please use quickInputList.focusBackground instead\"));\nexport const quickInputListFocusForeground = registerColor('quickInputList.focusForeground', { dark: listActiveSelectionForeground, light: listActiveSelectionForeground, hc: listActiveSelectionForeground }, nls.localize('quickInput.listFocusForeground', \"Quick picker foreground color for the focused item.\"));\nexport const quickInputListFocusIconForeground = registerColor('quickInputList.focusIconForeground', { dark: listActiveSelectionIconForeground, light: listActiveSelectionIconForeground, hc: listActiveSelectionIconForeground }, nls.localize('quickInput.listFocusIconForeground', \"Quick picker icon foreground color for the focused item.\"));\nexport const quickInputListFocusBackground = registerColor('quickInputList.focusBackground', { dark: oneOf(_deprecatedQuickInputListFocusBackground, listActiveSelectionBackground), light: oneOf(_deprecatedQuickInputListFocusBackground, listActiveSelectionBackground), hc: null }, nls.localize('quickInput.listFocusBackground', \"Quick picker background color for the focused item.\"));\n/**\n * Menu colors\n */\nexport const menuBorder = registerColor('menu.border', { dark: null, light: null, hc: contrastBorder }, nls.localize('menuBorder', \"Border color of menus.\"));\nexport const menuForeground = registerColor('menu.foreground', { dark: selectForeground, light: foreground, hc: selectForeground }, nls.localize('menuForeground', \"Foreground color of menu items.\"));\nexport const menuBackground = registerColor('menu.background', { dark: selectBackground, light: selectBackground, hc: selectBackground }, nls.localize('menuBackground', \"Background color of menu items.\"));\nexport const menuSelectionForeground = registerColor('menu.selectionForeground', { dark: listActiveSelectionForeground, light: listActiveSelectionForeground, hc: listActiveSelectionForeground }, nls.localize('menuSelectionForeground', \"Foreground color of the selected menu item in menus.\"));\nexport const menuSelectionBackground = registerColor('menu.selectionBackground', { dark: listActiveSelectionBackground, light: listActiveSelectionBackground, hc: listActiveSelectionBackground }, nls.localize('menuSelectionBackground', \"Background color of the selected menu item in menus.\"));\nexport const menuSelectionBorder = registerColor('menu.selectionBorder', { dark: null, light: null, hc: activeContrastBorder }, nls.localize('menuSelectionBorder', \"Border color of the selected menu item in menus.\"));\nexport const menuSeparatorBackground = registerColor('menu.separatorBackground', { dark: '#BBBBBB', light: '#888888', hc: contrastBorder }, nls.localize('menuSeparatorBackground', \"Color of a separator menu item in menus.\"));\n/**\n * Toolbar colors\n */\nexport const toolbarHoverBackground = registerColor('toolbar.hoverBackground', { dark: '#5a5d5e50', light: '#b8b8b850', hc: null }, nls.localize('toolbarHoverBackground', \"Toolbar background when hovering over actions using the mouse\"));\n/**\n * Snippet placeholder colors\n */\nexport const snippetTabstopHighlightBackground = registerColor('editor.snippetTabstopHighlightBackground', { dark: new Color(new RGBA(124, 124, 124, 0.3)), light: new Color(new RGBA(10, 50, 100, 0.2)), hc: new Color(new RGBA(124, 124, 124, 0.3)) }, nls.localize('snippetTabstopHighlightBackground', \"Highlight background color of a snippet tabstop.\"));\nexport const snippetTabstopHighlightBorder = registerColor('editor.snippetTabstopHighlightBorder', { dark: null, light: null, hc: null }, nls.localize('snippetTabstopHighlightBorder', \"Highlight border color of a snippet tabstop.\"));\nexport const snippetFinalTabstopHighlightBackground = registerColor('editor.snippetFinalTabstopHighlightBackground', { dark: null, light: null, hc: null }, nls.localize('snippetFinalTabstopHighlightBackground', \"Highlight background color of the final tabstop of a snippet.\"));\nexport const snippetFinalTabstopHighlightBorder = registerColor('editor.snippetFinalTabstopHighlightBorder', { dark: '#525252', light: new Color(new RGBA(10, 50, 100, 0.5)), hc: '#525252' }, nls.localize('snippetFinalTabstopHighlightBorder', \"Highlight border color of the final tabstop of a snippet.\"));\nexport const overviewRulerFindMatchForeground = registerColor('editorOverviewRuler.findMatchForeground', { dark: '#d186167e', light: '#d186167e', hc: '#AB5A00' }, nls.localize('overviewRulerFindMatchForeground', 'Overview ruler marker color for find matches. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const overviewRulerSelectionHighlightForeground = registerColor('editorOverviewRuler.selectionHighlightForeground', { dark: '#A0A0A0CC', light: '#A0A0A0CC', hc: '#A0A0A0CC' }, nls.localize('overviewRulerSelectionHighlightForeground', 'Overview ruler marker color for selection highlights. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const minimapFindMatch = registerColor('minimap.findMatchHighlight', { light: '#d18616', dark: '#d18616', hc: '#AB5A00' }, nls.localize('minimapFindMatchHighlight', 'Minimap marker color for find matches.'), true);\nexport const minimapSelectionOccurrenceHighlight = registerColor('minimap.selectionOccurrenceHighlight', { light: '#c9c9c9', dark: '#676767', hc: '#ffffff' }, nls.localize('minimapSelectionOccurrenceHighlight', 'Minimap marker color for repeating editor selections.'), true);\nexport const minimapSelection = registerColor('minimap.selectionHighlight', { light: '#ADD6FF', dark: '#264F78', hc: '#ffffff' }, nls.localize('minimapSelectionHighlight', 'Minimap marker color for the editor selection.'), true);\nexport const minimapError = registerColor('minimap.errorHighlight', { dark: new Color(new RGBA(255, 18, 18, 0.7)), light: new Color(new RGBA(255, 18, 18, 0.7)), hc: new Color(new RGBA(255, 50, 50, 1)) }, nls.localize('minimapError', 'Minimap marker color for errors.'));\nexport const minimapWarning = registerColor('minimap.warningHighlight', { dark: editorWarningForeground, light: editorWarningForeground, hc: editorWarningBorder }, nls.localize('overviewRuleWarning', 'Minimap marker color for warnings.'));\nexport const minimapBackground = registerColor('minimap.background', { dark: null, light: null, hc: null }, nls.localize('minimapBackground', \"Minimap background color.\"));\nexport const minimapForegroundOpacity = registerColor('minimap.foregroundOpacity', { dark: Color.fromHex('#000f'), light: Color.fromHex('#000f'), hc: Color.fromHex('#000f') }, nls.localize('minimapForegroundOpacity', 'Opacity of foreground elements rendered in the minimap. For example, \"#000000c0\" will render the elements with 75% opacity.'));\nexport const minimapSliderBackground = registerColor('minimapSlider.background', { light: transparent(scrollbarSliderBackground, 0.5), dark: transparent(scrollbarSliderBackground, 0.5), hc: transparent(scrollbarSliderBackground, 0.5) }, nls.localize('minimapSliderBackground', \"Minimap slider background color.\"));\nexport const minimapSliderHoverBackground = registerColor('minimapSlider.hoverBackground', { light: transparent(scrollbarSliderHoverBackground, 0.5), dark: transparent(scrollbarSliderHoverBackground, 0.5), hc: transparent(scrollbarSliderHoverBackground, 0.5) }, nls.localize('minimapSliderHoverBackground', \"Minimap slider background color when hovering.\"));\nexport const minimapSliderActiveBackground = registerColor('minimapSlider.activeBackground', { light: transparent(scrollbarSliderActiveBackground, 0.5), dark: transparent(scrollbarSliderActiveBackground, 0.5), hc: transparent(scrollbarSliderActiveBackground, 0.5) }, nls.localize('minimapSliderActiveBackground', \"Minimap slider background color when clicked on.\"));\nexport const problemsErrorIconForeground = registerColor('problemsErrorIcon.foreground', { dark: editorErrorForeground, light: editorErrorForeground, hc: editorErrorForeground }, nls.localize('problemsErrorIconForeground', \"The color used for the problems error icon.\"));\nexport const problemsWarningIconForeground = registerColor('problemsWarningIcon.foreground', { dark: editorWarningForeground, light: editorWarningForeground, hc: editorWarningForeground }, nls.localize('problemsWarningIconForeground', \"The color used for the problems warning icon.\"));\nexport const problemsInfoIconForeground = registerColor('problemsInfoIcon.foreground', { dark: editorInfoForeground, light: editorInfoForeground, hc: editorInfoForeground }, nls.localize('problemsInfoIconForeground', \"The color used for the problems info icon.\"));\n// ----- color functions\nexport function executeTransform(transform, theme) {\n    var _a, _b, _c;\n    switch (transform.op) {\n        case 0 /* Darken */:\n            return (_a = resolveColorValue(transform.value, theme)) === null || _a === void 0 ? void 0 : _a.darken(transform.factor);\n        case 1 /* Lighten */:\n            return (_b = resolveColorValue(transform.value, theme)) === null || _b === void 0 ? void 0 : _b.lighten(transform.factor);\n        case 2 /* Transparent */:\n            return (_c = resolveColorValue(transform.value, theme)) === null || _c === void 0 ? void 0 : _c.transparent(transform.factor);\n        case 3 /* OneOf */:\n            for (const candidate of transform.values) {\n                const color = resolveColorValue(candidate, theme);\n                if (color) {\n                    return color;\n                }\n            }\n            return undefined;\n        case 5 /* IfDefinedThenElse */:\n            return resolveColorValue(theme.defines(transform.if) ? transform.then : transform.else, theme);\n        case 4 /* LessProminent */:\n            const from = resolveColorValue(transform.value, theme);\n            if (!from) {\n                return undefined;\n            }\n            const backgroundColor = resolveColorValue(transform.background, theme);\n            if (!backgroundColor) {\n                return from.transparent(transform.factor * transform.transparency);\n            }\n            return from.isDarkerThan(backgroundColor)\n                ? Color.getLighterColor(from, backgroundColor, transform.factor).transparent(transform.transparency)\n                : Color.getDarkerColor(from, backgroundColor, transform.factor).transparent(transform.transparency);\n        default:\n            throw assertNever(transform);\n    }\n}\nexport function darken(colorValue, factor) {\n    return { op: 0 /* Darken */, value: colorValue, factor };\n}\nexport function lighten(colorValue, factor) {\n    return { op: 1 /* Lighten */, value: colorValue, factor };\n}\nexport function transparent(colorValue, factor) {\n    return { op: 2 /* Transparent */, value: colorValue, factor };\n}\nexport function oneOf(...colorValues) {\n    return { op: 3 /* OneOf */, values: colorValues };\n}\nexport function ifDefinedThenElse(ifArg, thenArg, elseArg) {\n    return { op: 5 /* IfDefinedThenElse */, if: ifArg, then: thenArg, else: elseArg };\n}\nfunction lessProminent(colorValue, backgroundColorValue, factor, transparency) {\n    return { op: 4 /* LessProminent */, value: colorValue, background: backgroundColorValue, factor, transparency };\n}\n// ----- implementation\n/**\n * @param colorValue Resolve a color value in the context of a theme\n */\nexport function resolveColorValue(colorValue, theme) {\n    if (colorValue === null) {\n        return undefined;\n    }\n    else if (typeof colorValue === 'string') {\n        if (colorValue[0] === '#') {\n            return Color.fromHex(colorValue);\n        }\n        return theme.getColor(colorValue);\n    }\n    else if (colorValue instanceof Color) {\n        return colorValue;\n    }\n    else if (typeof colorValue === 'object') {\n        return executeTransform(colorValue, theme);\n    }\n    return undefined;\n}\nexport const workbenchColorsSchemaId = 'vscode://schemas/workbench-colors';\nlet schemaRegistry = platform.Registry.as(JSONExtensions.JSONContribution);\nschemaRegistry.registerSchema(workbenchColorsSchemaId, colorRegistry.getColorSchema());\nconst delayer = new RunOnceScheduler(() => schemaRegistry.notifySchemaChanged(workbenchColorsSchemaId), 200);\ncolorRegistry.onDidChangeSchema(() => {\n    if (!delayer.isScheduled()) {\n        delayer.schedule();\n    }\n});\n// setTimeout(_ => console.log(colorRegistry.toString()), 5000);\n"]},"metadata":{},"sourceType":"module"}