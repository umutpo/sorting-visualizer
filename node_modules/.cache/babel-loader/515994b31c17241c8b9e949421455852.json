{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { languages } from '../fillers/monaco-editor-core.js';\nexport var conf = {\n  comments: {\n    lineComment: '#',\n    blockComment: [\"'''\", \"'''\"]\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"',\n    notIn: ['string']\n  }, {\n    open: \"'\",\n    close: \"'\",\n    notIn: ['string', 'comment']\n  }],\n  surroundingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }],\n  onEnterRules: [{\n    beforeText: new RegExp('^\\\\s*(?:def|class|for|if|elif|else|while|try|with|finally|except|async).*?:\\\\s*$'),\n    action: {\n      indentAction: languages.IndentAction.Indent\n    }\n  }],\n  folding: {\n    offSide: true,\n    markers: {\n      start: new RegExp('^\\\\s*#region\\\\b'),\n      end: new RegExp('^\\\\s*#endregion\\\\b')\n    }\n  }\n};\nexport var language = {\n  defaultToken: '',\n  tokenPostfix: '.python',\n  keywords: [// This section is the result of running\n  // `for k in keyword.kwlist: print('  \"' + k + '\",')` in a Python REPL,\n  // though note that the output from Python 3 is not a strict superset of the\n  // output from Python 2.\n  'False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'exec', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'print', 'raise', 'return', 'try', 'while', 'with', 'yield', 'int', 'float', 'long', 'complex', 'hex', 'abs', 'all', 'any', 'apply', 'basestring', 'bin', 'bool', 'buffer', 'bytearray', 'callable', 'chr', 'classmethod', 'cmp', 'coerce', 'compile', 'complex', 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'execfile', 'file', 'filter', 'format', 'frozenset', 'getattr', 'globals', 'hasattr', 'hash', 'help', 'id', 'input', 'intern', 'isinstance', 'issubclass', 'iter', 'len', 'locals', 'list', 'map', 'max', 'memoryview', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property', 'reversed', 'range', 'raw_input', 'reduce', 'reload', 'repr', 'reversed', 'round', 'self', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'unichr', 'unicode', 'vars', 'xrange', 'zip', '__dict__', '__methods__', '__members__', '__class__', '__bases__', '__name__', '__mro__', '__subclasses__', '__init__', '__import__'],\n  brackets: [{\n    open: '{',\n    close: '}',\n    token: 'delimiter.curly'\n  }, {\n    open: '[',\n    close: ']',\n    token: 'delimiter.bracket'\n  }, {\n    open: '(',\n    close: ')',\n    token: 'delimiter.parenthesis'\n  }],\n  tokenizer: {\n    root: [{\n      include: '@whitespace'\n    }, {\n      include: '@numbers'\n    }, {\n      include: '@strings'\n    }, [/[,:;]/, 'delimiter'], [/[{}\\[\\]()]/, '@brackets'], [/@[a-zA-Z_]\\w*/, 'tag'], [/[a-zA-Z_]\\w*/, {\n      cases: {\n        '@keywords': 'keyword',\n        '@default': 'identifier'\n      }\n    }]],\n    // Deal with white space, including single and multi-line comments\n    whitespace: [[/\\s+/, 'white'], [/(^#.*$)/, 'comment'], [/'''/, 'string', '@endDocString'], [/\"\"\"/, 'string', '@endDblDocString']],\n    endDocString: [[/[^']+/, 'string'], [/\\\\'/, 'string'], [/'''/, 'string', '@popall'], [/'/, 'string']],\n    endDblDocString: [[/[^\"]+/, 'string'], [/\\\\\"/, 'string'], [/\"\"\"/, 'string', '@popall'], [/\"/, 'string']],\n    // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation\n    numbers: [[/-?0x([abcdef]|[ABCDEF]|\\d)+[lL]?/, 'number.hex'], [/-?(\\d*\\.)?\\d+([eE][+\\-]?\\d+)?[jJ]?[lL]?/, 'number']],\n    // Recognize strings, including those broken across lines with \\ (but not without)\n    strings: [[/'$/, 'string.escape', '@popall'], [/'/, 'string.escape', '@stringBody'], [/\"$/, 'string.escape', '@popall'], [/\"/, 'string.escape', '@dblStringBody']],\n    stringBody: [[/[^\\\\']+$/, 'string', '@popall'], [/[^\\\\']+/, 'string'], [/\\\\./, 'string'], [/'/, 'string.escape', '@popall'], [/\\\\$/, 'string']],\n    dblStringBody: [[/[^\\\\\"]+$/, 'string', '@popall'], [/[^\\\\\"]+/, 'string'], [/\\\\./, 'string'], [/\"/, 'string.escape', '@popall'], [/\\\\$/, 'string']]\n  }\n};","map":{"version":3,"sources":["/home/umut/Documents/cs/cs410/Project2Group14/node_modules/monaco-editor/esm/vs/basic-languages/python/python.js"],"names":["languages","conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","onEnterRules","beforeText","RegExp","action","indentAction","IndentAction","Indent","folding","offSide","markers","start","end","language","defaultToken","tokenPostfix","keywords","token","tokenizer","root","include","cases","whitespace","endDocString","endDblDocString","numbers","strings","stringBody","dblStringBody"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,SAAT,QAA0B,kCAA1B;AACA,OAAO,IAAIC,IAAI,GAAG;AACdC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,WAAW,EAAE,GADP;AAENC,IAAAA,YAAY,EAAE,CAAC,KAAD,EAAQ,KAAR;AAFR,GADI;AAKdC,EAAAA,QAAQ,EAAE,CACN,CAAC,GAAD,EAAM,GAAN,CADM,EAEN,CAAC,GAAD,EAAM,GAAN,CAFM,EAGN,CAAC,GAAD,EAAM,GAAN,CAHM,CALI;AAUdC,EAAAA,gBAAgB,EAAE,CACd;AAAEC,IAAAA,IAAI,EAAE,GAAR;AAAaC,IAAAA,KAAK,EAAE;AAApB,GADc,EAEd;AAAED,IAAAA,IAAI,EAAE,GAAR;AAAaC,IAAAA,KAAK,EAAE;AAApB,GAFc,EAGd;AAAED,IAAAA,IAAI,EAAE,GAAR;AAAaC,IAAAA,KAAK,EAAE;AAApB,GAHc,EAId;AAAED,IAAAA,IAAI,EAAE,GAAR;AAAaC,IAAAA,KAAK,EAAE,GAApB;AAAyBC,IAAAA,KAAK,EAAE,CAAC,QAAD;AAAhC,GAJc,EAKd;AAAEF,IAAAA,IAAI,EAAE,GAAR;AAAaC,IAAAA,KAAK,EAAE,GAApB;AAAyBC,IAAAA,KAAK,EAAE,CAAC,QAAD,EAAW,SAAX;AAAhC,GALc,CAVJ;AAiBdC,EAAAA,gBAAgB,EAAE,CACd;AAAEH,IAAAA,IAAI,EAAE,GAAR;AAAaC,IAAAA,KAAK,EAAE;AAApB,GADc,EAEd;AAAED,IAAAA,IAAI,EAAE,GAAR;AAAaC,IAAAA,KAAK,EAAE;AAApB,GAFc,EAGd;AAAED,IAAAA,IAAI,EAAE,GAAR;AAAaC,IAAAA,KAAK,EAAE;AAApB,GAHc,EAId;AAAED,IAAAA,IAAI,EAAE,GAAR;AAAaC,IAAAA,KAAK,EAAE;AAApB,GAJc,EAKd;AAAED,IAAAA,IAAI,EAAE,GAAR;AAAaC,IAAAA,KAAK,EAAE;AAApB,GALc,CAjBJ;AAwBdG,EAAAA,YAAY,EAAE,CACV;AACIC,IAAAA,UAAU,EAAE,IAAIC,MAAJ,CAAW,kFAAX,CADhB;AAEIC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,YAAY,EAAEf,SAAS,CAACgB,YAAV,CAAuBC;AAAvC;AAFZ,GADU,CAxBA;AA8BdC,EAAAA,OAAO,EAAE;AACLC,IAAAA,OAAO,EAAE,IADJ;AAELC,IAAAA,OAAO,EAAE;AACLC,MAAAA,KAAK,EAAE,IAAIR,MAAJ,CAAW,iBAAX,CADF;AAELS,MAAAA,GAAG,EAAE,IAAIT,MAAJ,CAAW,oBAAX;AAFA;AAFJ;AA9BK,CAAX;AAsCP,OAAO,IAAIU,QAAQ,GAAG;AAClBC,EAAAA,YAAY,EAAE,EADI;AAElBC,EAAAA,YAAY,EAAE,SAFI;AAGlBC,EAAAA,QAAQ,EAAE,CACN;AACA;AACA;AACA;AACA,SALM,EAMN,MANM,EAON,MAPM,EAQN,KARM,EASN,IATM,EAUN,QAVM,EAWN,OAXM,EAYN,OAZM,EAaN,OAbM,EAcN,OAdM,EAeN,UAfM,EAgBN,KAhBM,EAiBN,KAjBM,EAkBN,MAlBM,EAmBN,MAnBM,EAoBN,QApBM,EAqBN,MArBM,EAsBN,SAtBM,EAuBN,KAvBM,EAwBN,MAxBM,EAyBN,QAzBM,EA0BN,IA1BM,EA2BN,QA3BM,EA4BN,IA5BM,EA6BN,IA7BM,EA8BN,QA9BM,EA+BN,UA/BM,EAgCN,KAhCM,EAiCN,IAjCM,EAkCN,MAlCM,EAmCN,OAnCM,EAoCN,OApCM,EAqCN,QArCM,EAsCN,KAtCM,EAuCN,OAvCM,EAwCN,MAxCM,EAyCN,OAzCM,EA0CN,KA1CM,EA2CN,OA3CM,EA4CN,MA5CM,EA6CN,SA7CM,EA8CN,KA9CM,EA+CN,KA/CM,EAgDN,KAhDM,EAiDN,KAjDM,EAkDN,OAlDM,EAmDN,YAnDM,EAoDN,KApDM,EAqDN,MArDM,EAsDN,QAtDM,EAuDN,WAvDM,EAwDN,UAxDM,EAyDN,KAzDM,EA0DN,aA1DM,EA2DN,KA3DM,EA4DN,QA5DM,EA6DN,SA7DM,EA8DN,SA9DM,EA+DN,SA/DM,EAgEN,MAhEM,EAiEN,KAjEM,EAkEN,QAlEM,EAmEN,WAnEM,EAoEN,MApEM,EAqEN,UArEM,EAsEN,MAtEM,EAuEN,QAvEM,EAwEN,QAxEM,EAyEN,WAzEM,EA0EN,SA1EM,EA2EN,SA3EM,EA4EN,SA5EM,EA6EN,MA7EM,EA8EN,MA9EM,EA+EN,IA/EM,EAgFN,OAhFM,EAiFN,QAjFM,EAkFN,YAlFM,EAmFN,YAnFM,EAoFN,MApFM,EAqFN,KArFM,EAsFN,QAtFM,EAuFN,MAvFM,EAwFN,KAxFM,EAyFN,KAzFM,EA0FN,YA1FM,EA2FN,KA3FM,EA4FN,MA5FM,EA6FN,QA7FM,EA8FN,KA9FM,EA+FN,MA/FM,EAgGN,KAhGM,EAiGN,KAjGM,EAkGN,OAlGM,EAmGN,UAnGM,EAoGN,UApGM,EAqGN,OArGM,EAsGN,WAtGM,EAuGN,QAvGM,EAwGN,QAxGM,EAyGN,MAzGM,EA0GN,UA1GM,EA2GN,OA3GM,EA4GN,MA5GM,EA6GN,KA7GM,EA8GN,SA9GM,EA+GN,OA/GM,EAgHN,QAhHM,EAiHN,cAjHM,EAkHN,KAlHM,EAmHN,KAnHM,EAoHN,OApHM,EAqHN,OArHM,EAsHN,MAtHM,EAuHN,QAvHM,EAwHN,SAxHM,EAyHN,MAzHM,EA0HN,QA1HM,EA2HN,KA3HM,EA4HN,UA5HM,EA6HN,aA7HM,EA8HN,aA9HM,EA+HN,WA/HM,EAgIN,WAhIM,EAiIN,UAjIM,EAkIN,SAlIM,EAmIN,gBAnIM,EAoIN,UApIM,EAqIN,YArIM,CAHQ;AA0IlBrB,EAAAA,QAAQ,EAAE,CACN;AAAEE,IAAAA,IAAI,EAAE,GAAR;AAAaC,IAAAA,KAAK,EAAE,GAApB;AAAyBmB,IAAAA,KAAK,EAAE;AAAhC,GADM,EAEN;AAAEpB,IAAAA,IAAI,EAAE,GAAR;AAAaC,IAAAA,KAAK,EAAE,GAApB;AAAyBmB,IAAAA,KAAK,EAAE;AAAhC,GAFM,EAGN;AAAEpB,IAAAA,IAAI,EAAE,GAAR;AAAaC,IAAAA,KAAK,EAAE,GAApB;AAAyBmB,IAAAA,KAAK,EAAE;AAAhC,GAHM,CA1IQ;AA+IlBC,EAAAA,SAAS,EAAE;AACPC,IAAAA,IAAI,EAAE,CACF;AAAEC,MAAAA,OAAO,EAAE;AAAX,KADE,EAEF;AAAEA,MAAAA,OAAO,EAAE;AAAX,KAFE,EAGF;AAAEA,MAAAA,OAAO,EAAE;AAAX,KAHE,EAIF,CAAC,OAAD,EAAU,WAAV,CAJE,EAKF,CAAC,YAAD,EAAe,WAAf,CALE,EAMF,CAAC,eAAD,EAAkB,KAAlB,CANE,EAOF,CACI,cADJ,EAEI;AACIC,MAAAA,KAAK,EAAE;AACH,qBAAa,SADV;AAEH,oBAAY;AAFT;AADX,KAFJ,CAPE,CADC;AAkBP;AACAC,IAAAA,UAAU,EAAE,CACR,CAAC,KAAD,EAAQ,OAAR,CADQ,EAER,CAAC,SAAD,EAAY,SAAZ,CAFQ,EAGR,CAAC,KAAD,EAAQ,QAAR,EAAkB,eAAlB,CAHQ,EAIR,CAAC,KAAD,EAAQ,QAAR,EAAkB,kBAAlB,CAJQ,CAnBL;AAyBPC,IAAAA,YAAY,EAAE,CACV,CAAC,OAAD,EAAU,QAAV,CADU,EAEV,CAAC,KAAD,EAAQ,QAAR,CAFU,EAGV,CAAC,KAAD,EAAQ,QAAR,EAAkB,SAAlB,CAHU,EAIV,CAAC,GAAD,EAAM,QAAN,CAJU,CAzBP;AA+BPC,IAAAA,eAAe,EAAE,CACb,CAAC,OAAD,EAAU,QAAV,CADa,EAEb,CAAC,KAAD,EAAQ,QAAR,CAFa,EAGb,CAAC,KAAD,EAAQ,QAAR,EAAkB,SAAlB,CAHa,EAIb,CAAC,GAAD,EAAM,QAAN,CAJa,CA/BV;AAqCP;AACAC,IAAAA,OAAO,EAAE,CACL,CAAC,kCAAD,EAAqC,YAArC,CADK,EAEL,CAAC,yCAAD,EAA4C,QAA5C,CAFK,CAtCF;AA0CP;AACAC,IAAAA,OAAO,EAAE,CACL,CAAC,IAAD,EAAO,eAAP,EAAwB,SAAxB,CADK,EAEL,CAAC,GAAD,EAAM,eAAN,EAAuB,aAAvB,CAFK,EAGL,CAAC,IAAD,EAAO,eAAP,EAAwB,SAAxB,CAHK,EAIL,CAAC,GAAD,EAAM,eAAN,EAAuB,gBAAvB,CAJK,CA3CF;AAiDPC,IAAAA,UAAU,EAAE,CACR,CAAC,UAAD,EAAa,QAAb,EAAuB,SAAvB,CADQ,EAER,CAAC,SAAD,EAAY,QAAZ,CAFQ,EAGR,CAAC,KAAD,EAAQ,QAAR,CAHQ,EAIR,CAAC,GAAD,EAAM,eAAN,EAAuB,SAAvB,CAJQ,EAKR,CAAC,KAAD,EAAQ,QAAR,CALQ,CAjDL;AAwDPC,IAAAA,aAAa,EAAE,CACX,CAAC,UAAD,EAAa,QAAb,EAAuB,SAAvB,CADW,EAEX,CAAC,SAAD,EAAY,QAAZ,CAFW,EAGX,CAAC,KAAD,EAAQ,QAAR,CAHW,EAIX,CAAC,GAAD,EAAM,eAAN,EAAuB,SAAvB,CAJW,EAKX,CAAC,KAAD,EAAQ,QAAR,CALW;AAxDR;AA/IO,CAAf","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { languages } from '../fillers/monaco-editor-core.js';\nexport var conf = {\n    comments: {\n        lineComment: '#',\n        blockComment: [\"'''\", \"'''\"]\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"', notIn: ['string'] },\n        { open: \"'\", close: \"'\", notIn: ['string', 'comment'] }\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: \"'\", close: \"'\" }\n    ],\n    onEnterRules: [\n        {\n            beforeText: new RegExp('^\\\\s*(?:def|class|for|if|elif|else|while|try|with|finally|except|async).*?:\\\\s*$'),\n            action: { indentAction: languages.IndentAction.Indent }\n        }\n    ],\n    folding: {\n        offSide: true,\n        markers: {\n            start: new RegExp('^\\\\s*#region\\\\b'),\n            end: new RegExp('^\\\\s*#endregion\\\\b')\n        }\n    }\n};\nexport var language = {\n    defaultToken: '',\n    tokenPostfix: '.python',\n    keywords: [\n        // This section is the result of running\n        // `for k in keyword.kwlist: print('  \"' + k + '\",')` in a Python REPL,\n        // though note that the output from Python 3 is not a strict superset of the\n        // output from Python 2.\n        'False',\n        'None',\n        'True',\n        'and',\n        'as',\n        'assert',\n        'async',\n        'await',\n        'break',\n        'class',\n        'continue',\n        'def',\n        'del',\n        'elif',\n        'else',\n        'except',\n        'exec',\n        'finally',\n        'for',\n        'from',\n        'global',\n        'if',\n        'import',\n        'in',\n        'is',\n        'lambda',\n        'nonlocal',\n        'not',\n        'or',\n        'pass',\n        'print',\n        'raise',\n        'return',\n        'try',\n        'while',\n        'with',\n        'yield',\n        'int',\n        'float',\n        'long',\n        'complex',\n        'hex',\n        'abs',\n        'all',\n        'any',\n        'apply',\n        'basestring',\n        'bin',\n        'bool',\n        'buffer',\n        'bytearray',\n        'callable',\n        'chr',\n        'classmethod',\n        'cmp',\n        'coerce',\n        'compile',\n        'complex',\n        'delattr',\n        'dict',\n        'dir',\n        'divmod',\n        'enumerate',\n        'eval',\n        'execfile',\n        'file',\n        'filter',\n        'format',\n        'frozenset',\n        'getattr',\n        'globals',\n        'hasattr',\n        'hash',\n        'help',\n        'id',\n        'input',\n        'intern',\n        'isinstance',\n        'issubclass',\n        'iter',\n        'len',\n        'locals',\n        'list',\n        'map',\n        'max',\n        'memoryview',\n        'min',\n        'next',\n        'object',\n        'oct',\n        'open',\n        'ord',\n        'pow',\n        'print',\n        'property',\n        'reversed',\n        'range',\n        'raw_input',\n        'reduce',\n        'reload',\n        'repr',\n        'reversed',\n        'round',\n        'self',\n        'set',\n        'setattr',\n        'slice',\n        'sorted',\n        'staticmethod',\n        'str',\n        'sum',\n        'super',\n        'tuple',\n        'type',\n        'unichr',\n        'unicode',\n        'vars',\n        'xrange',\n        'zip',\n        '__dict__',\n        '__methods__',\n        '__members__',\n        '__class__',\n        '__bases__',\n        '__name__',\n        '__mro__',\n        '__subclasses__',\n        '__init__',\n        '__import__'\n    ],\n    brackets: [\n        { open: '{', close: '}', token: 'delimiter.curly' },\n        { open: '[', close: ']', token: 'delimiter.bracket' },\n        { open: '(', close: ')', token: 'delimiter.parenthesis' }\n    ],\n    tokenizer: {\n        root: [\n            { include: '@whitespace' },\n            { include: '@numbers' },\n            { include: '@strings' },\n            [/[,:;]/, 'delimiter'],\n            [/[{}\\[\\]()]/, '@brackets'],\n            [/@[a-zA-Z_]\\w*/, 'tag'],\n            [\n                /[a-zA-Z_]\\w*/,\n                {\n                    cases: {\n                        '@keywords': 'keyword',\n                        '@default': 'identifier'\n                    }\n                }\n            ]\n        ],\n        // Deal with white space, including single and multi-line comments\n        whitespace: [\n            [/\\s+/, 'white'],\n            [/(^#.*$)/, 'comment'],\n            [/'''/, 'string', '@endDocString'],\n            [/\"\"\"/, 'string', '@endDblDocString']\n        ],\n        endDocString: [\n            [/[^']+/, 'string'],\n            [/\\\\'/, 'string'],\n            [/'''/, 'string', '@popall'],\n            [/'/, 'string']\n        ],\n        endDblDocString: [\n            [/[^\"]+/, 'string'],\n            [/\\\\\"/, 'string'],\n            [/\"\"\"/, 'string', '@popall'],\n            [/\"/, 'string']\n        ],\n        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation\n        numbers: [\n            [/-?0x([abcdef]|[ABCDEF]|\\d)+[lL]?/, 'number.hex'],\n            [/-?(\\d*\\.)?\\d+([eE][+\\-]?\\d+)?[jJ]?[lL]?/, 'number']\n        ],\n        // Recognize strings, including those broken across lines with \\ (but not without)\n        strings: [\n            [/'$/, 'string.escape', '@popall'],\n            [/'/, 'string.escape', '@stringBody'],\n            [/\"$/, 'string.escape', '@popall'],\n            [/\"/, 'string.escape', '@dblStringBody']\n        ],\n        stringBody: [\n            [/[^\\\\']+$/, 'string', '@popall'],\n            [/[^\\\\']+/, 'string'],\n            [/\\\\./, 'string'],\n            [/'/, 'string.escape', '@popall'],\n            [/\\\\$/, 'string']\n        ],\n        dblStringBody: [\n            [/[^\\\\\"]+$/, 'string', '@popall'],\n            [/[^\\\\\"]+/, 'string'],\n            [/\\\\./, 'string'],\n            [/\"/, 'string.escape', '@popall'],\n            [/\\\\$/, 'string']\n        ]\n    }\n};\n"]},"metadata":{},"sourceType":"module"}