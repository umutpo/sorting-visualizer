{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { status } from '../../../base/browser/ui/aria/aria.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { KeyChord } from '../../../base/common/keyCodes.js';\nimport { Disposable, DisposableStore } from '../../../base/common/lifecycle.js';\nimport { EditorAction, registerEditorAction, registerEditorContribution } from '../../browser/editorExtensions.js';\nimport { CursorMoveCommands } from '../../common/controller/cursorMoveCommands.js';\nimport { Range } from '../../common/core/range.js';\nimport { Selection } from '../../common/core/selection.js';\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\nimport { OverviewRulerLane, MinimapPosition } from '../../common/model.js';\nimport { ModelDecorationOptions } from '../../common/model/textModel.js';\nimport { DocumentHighlightProviderRegistry } from '../../common/modes.js';\nimport { CommonFindController } from '../find/findController.js';\nimport * as nls from '../../../nls.js';\nimport { MenuId } from '../../../platform/actions/common/actions.js';\nimport { ContextKeyExpr } from '../../../platform/contextkey/common/contextkey.js';\nimport { overviewRulerSelectionHighlightForeground, minimapSelectionOccurrenceHighlight } from '../../../platform/theme/common/colorRegistry.js';\nimport { themeColorFromId } from '../../../platform/theme/common/themeService.js';\n\nfunction announceCursorChange(previousCursorState, cursorState) {\n  const cursorDiff = cursorState.filter(cs => !previousCursorState.find(pcs => pcs.equals(cs)));\n\n  if (cursorDiff.length >= 1) {\n    const cursorPositions = cursorDiff.map(cs => `line ${cs.viewState.position.lineNumber} column ${cs.viewState.position.column}`).join(', ');\n    const msg = cursorDiff.length === 1 ? nls.localize('cursorAdded', \"Cursor added: {0}\", cursorPositions) : nls.localize('cursorsAdded', \"Cursors added: {0}\", cursorPositions);\n    status(msg);\n  }\n}\n\nexport class InsertCursorAbove extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.insertCursorAbove',\n      label: nls.localize('mutlicursor.insertAbove', \"Add Cursor Above\"),\n      alias: 'Add Cursor Above',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 2048\n        /* CtrlCmd */\n        | 512\n        /* Alt */\n        | 16\n        /* UpArrow */\n        ,\n        linux: {\n          primary: 1024\n          /* Shift */\n          | 512\n          /* Alt */\n          | 16\n          /* UpArrow */\n          ,\n          secondary: [2048\n          /* CtrlCmd */\n          | 1024\n          /* Shift */\n          | 16\n          /* UpArrow */\n          ]\n        },\n        weight: 100\n        /* EditorContrib */\n\n      },\n      menuOpts: {\n        menuId: MenuId.MenubarSelectionMenu,\n        group: '3_multi',\n        title: nls.localize({\n          key: 'miInsertCursorAbove',\n          comment: ['&& denotes a mnemonic']\n        }, \"&&Add Cursor Above\"),\n        order: 2\n      }\n    });\n  }\n\n  run(accessor, editor, args) {\n    if (!editor.hasModel()) {\n      return;\n    }\n\n    let useLogicalLine = true;\n\n    if (args && args.logicalLine === false) {\n      useLogicalLine = false;\n    }\n\n    const viewModel = editor._getViewModel();\n\n    if (viewModel.cursorConfig.readOnly) {\n      return;\n    }\n\n    viewModel.pushStackElement();\n    const previousCursorState = viewModel.getCursorStates();\n    viewModel.setCursorStates(args.source, 3\n    /* Explicit */\n    , CursorMoveCommands.addCursorUp(viewModel, previousCursorState, useLogicalLine));\n    viewModel.revealTopMostCursor(args.source);\n    announceCursorChange(previousCursorState, viewModel.getCursorStates());\n  }\n\n}\nexport class InsertCursorBelow extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.insertCursorBelow',\n      label: nls.localize('mutlicursor.insertBelow', \"Add Cursor Below\"),\n      alias: 'Add Cursor Below',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 2048\n        /* CtrlCmd */\n        | 512\n        /* Alt */\n        | 18\n        /* DownArrow */\n        ,\n        linux: {\n          primary: 1024\n          /* Shift */\n          | 512\n          /* Alt */\n          | 18\n          /* DownArrow */\n          ,\n          secondary: [2048\n          /* CtrlCmd */\n          | 1024\n          /* Shift */\n          | 18\n          /* DownArrow */\n          ]\n        },\n        weight: 100\n        /* EditorContrib */\n\n      },\n      menuOpts: {\n        menuId: MenuId.MenubarSelectionMenu,\n        group: '3_multi',\n        title: nls.localize({\n          key: 'miInsertCursorBelow',\n          comment: ['&& denotes a mnemonic']\n        }, \"A&&dd Cursor Below\"),\n        order: 3\n      }\n    });\n  }\n\n  run(accessor, editor, args) {\n    if (!editor.hasModel()) {\n      return;\n    }\n\n    let useLogicalLine = true;\n\n    if (args && args.logicalLine === false) {\n      useLogicalLine = false;\n    }\n\n    const viewModel = editor._getViewModel();\n\n    if (viewModel.cursorConfig.readOnly) {\n      return;\n    }\n\n    viewModel.pushStackElement();\n    const previousCursorState = viewModel.getCursorStates();\n    viewModel.setCursorStates(args.source, 3\n    /* Explicit */\n    , CursorMoveCommands.addCursorDown(viewModel, previousCursorState, useLogicalLine));\n    viewModel.revealBottomMostCursor(args.source);\n    announceCursorChange(previousCursorState, viewModel.getCursorStates());\n  }\n\n}\n\nclass InsertCursorAtEndOfEachLineSelected extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.insertCursorAtEndOfEachLineSelected',\n      label: nls.localize('mutlicursor.insertAtEndOfEachLineSelected', \"Add Cursors to Line Ends\"),\n      alias: 'Add Cursors to Line Ends',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 1024\n        /* Shift */\n        | 512\n        /* Alt */\n        | 39\n        /* KeyI */\n        ,\n        weight: 100\n        /* EditorContrib */\n\n      },\n      menuOpts: {\n        menuId: MenuId.MenubarSelectionMenu,\n        group: '3_multi',\n        title: nls.localize({\n          key: 'miInsertCursorAtEndOfEachLineSelected',\n          comment: ['&& denotes a mnemonic']\n        }, \"Add C&&ursors to Line Ends\"),\n        order: 4\n      }\n    });\n  }\n\n  getCursorsForSelection(selection, model, result) {\n    if (selection.isEmpty()) {\n      return;\n    }\n\n    for (let i = selection.startLineNumber; i < selection.endLineNumber; i++) {\n      let currentLineMaxColumn = model.getLineMaxColumn(i);\n      result.push(new Selection(i, currentLineMaxColumn, i, currentLineMaxColumn));\n    }\n\n    if (selection.endColumn > 1) {\n      result.push(new Selection(selection.endLineNumber, selection.endColumn, selection.endLineNumber, selection.endColumn));\n    }\n  }\n\n  run(accessor, editor) {\n    if (!editor.hasModel()) {\n      return;\n    }\n\n    const model = editor.getModel();\n    const selections = editor.getSelections();\n\n    const viewModel = editor._getViewModel();\n\n    const previousCursorState = viewModel.getCursorStates();\n    let newSelections = [];\n    selections.forEach(sel => this.getCursorsForSelection(sel, model, newSelections));\n\n    if (newSelections.length > 0) {\n      editor.setSelections(newSelections);\n    }\n\n    announceCursorChange(previousCursorState, viewModel.getCursorStates());\n  }\n\n}\n\nclass InsertCursorAtEndOfLineSelected extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.addCursorsToBottom',\n      label: nls.localize('mutlicursor.addCursorsToBottom', \"Add Cursors To Bottom\"),\n      alias: 'Add Cursors To Bottom',\n      precondition: undefined\n    });\n  }\n\n  run(accessor, editor) {\n    if (!editor.hasModel()) {\n      return;\n    }\n\n    const selections = editor.getSelections();\n    const lineCount = editor.getModel().getLineCount();\n    let newSelections = [];\n\n    for (let i = selections[0].startLineNumber; i <= lineCount; i++) {\n      newSelections.push(new Selection(i, selections[0].startColumn, i, selections[0].endColumn));\n    }\n\n    const viewModel = editor._getViewModel();\n\n    const previousCursorState = viewModel.getCursorStates();\n\n    if (newSelections.length > 0) {\n      editor.setSelections(newSelections);\n    }\n\n    announceCursorChange(previousCursorState, viewModel.getCursorStates());\n  }\n\n}\n\nclass InsertCursorAtTopOfLineSelected extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.addCursorsToTop',\n      label: nls.localize('mutlicursor.addCursorsToTop', \"Add Cursors To Top\"),\n      alias: 'Add Cursors To Top',\n      precondition: undefined\n    });\n  }\n\n  run(accessor, editor) {\n    if (!editor.hasModel()) {\n      return;\n    }\n\n    const selections = editor.getSelections();\n    let newSelections = [];\n\n    for (let i = selections[0].startLineNumber; i >= 1; i--) {\n      newSelections.push(new Selection(i, selections[0].startColumn, i, selections[0].endColumn));\n    }\n\n    const viewModel = editor._getViewModel();\n\n    const previousCursorState = viewModel.getCursorStates();\n\n    if (newSelections.length > 0) {\n      editor.setSelections(newSelections);\n    }\n\n    announceCursorChange(previousCursorState, viewModel.getCursorStates());\n  }\n\n}\n\nexport class MultiCursorSessionResult {\n  constructor(selections, revealRange, revealScrollType) {\n    this.selections = selections;\n    this.revealRange = revealRange;\n    this.revealScrollType = revealScrollType;\n  }\n\n}\nexport class MultiCursorSession {\n  constructor(_editor, findController, isDisconnectedFromFindController, searchText, wholeWord, matchCase, currentMatch) {\n    this._editor = _editor;\n    this.findController = findController;\n    this.isDisconnectedFromFindController = isDisconnectedFromFindController;\n    this.searchText = searchText;\n    this.wholeWord = wholeWord;\n    this.matchCase = matchCase;\n    this.currentMatch = currentMatch;\n  }\n\n  static create(editor, findController) {\n    if (!editor.hasModel()) {\n      return null;\n    }\n\n    const findState = findController.getState(); // Find widget owns entirely what we search for if:\n    //  - focus is not in the editor (i.e. it is in the find widget)\n    //  - and the search widget is visible\n    //  - and the search string is non-empty\n\n    if (!editor.hasTextFocus() && findState.isRevealed && findState.searchString.length > 0) {\n      // Find widget owns what is searched for\n      return new MultiCursorSession(editor, findController, false, findState.searchString, findState.wholeWord, findState.matchCase, null);\n    } // Otherwise, the selection gives the search text, and the find widget gives the search settings\n    // The exception is the find state disassociation case: when beginning with a single, collapsed selection\n\n\n    let isDisconnectedFromFindController = false;\n    let wholeWord;\n    let matchCase;\n    const selections = editor.getSelections();\n\n    if (selections.length === 1 && selections[0].isEmpty()) {\n      isDisconnectedFromFindController = true;\n      wholeWord = true;\n      matchCase = true;\n    } else {\n      wholeWord = findState.wholeWord;\n      matchCase = findState.matchCase;\n    } // Selection owns what is searched for\n\n\n    const s = editor.getSelection();\n    let searchText;\n    let currentMatch = null;\n\n    if (s.isEmpty()) {\n      // selection is empty => expand to current word\n      const word = editor.getConfiguredWordAtPosition(s.getStartPosition());\n\n      if (!word) {\n        return null;\n      }\n\n      searchText = word.word;\n      currentMatch = new Selection(s.startLineNumber, word.startColumn, s.startLineNumber, word.endColumn);\n    } else {\n      searchText = editor.getModel().getValueInRange(s).replace(/\\r\\n/g, '\\n');\n    }\n\n    return new MultiCursorSession(editor, findController, isDisconnectedFromFindController, searchText, wholeWord, matchCase, currentMatch);\n  }\n\n  addSelectionToNextFindMatch() {\n    if (!this._editor.hasModel()) {\n      return null;\n    }\n\n    const nextMatch = this._getNextMatch();\n\n    if (!nextMatch) {\n      return null;\n    }\n\n    const allSelections = this._editor.getSelections();\n\n    return new MultiCursorSessionResult(allSelections.concat(nextMatch), nextMatch, 0\n    /* Smooth */\n    );\n  }\n\n  moveSelectionToNextFindMatch() {\n    if (!this._editor.hasModel()) {\n      return null;\n    }\n\n    const nextMatch = this._getNextMatch();\n\n    if (!nextMatch) {\n      return null;\n    }\n\n    const allSelections = this._editor.getSelections();\n\n    return new MultiCursorSessionResult(allSelections.slice(0, allSelections.length - 1).concat(nextMatch), nextMatch, 0\n    /* Smooth */\n    );\n  }\n\n  _getNextMatch() {\n    if (!this._editor.hasModel()) {\n      return null;\n    }\n\n    if (this.currentMatch) {\n      const result = this.currentMatch;\n      this.currentMatch = null;\n      return result;\n    }\n\n    this.findController.highlightFindOptions();\n\n    const allSelections = this._editor.getSelections();\n\n    const lastAddedSelection = allSelections[allSelections.length - 1];\n\n    const nextMatch = this._editor.getModel().findNextMatch(this.searchText, lastAddedSelection.getEndPosition(), false, this.matchCase, this.wholeWord ? this._editor.getOption(115\n    /* wordSeparators */\n    ) : null, false);\n\n    if (!nextMatch) {\n      return null;\n    }\n\n    return new Selection(nextMatch.range.startLineNumber, nextMatch.range.startColumn, nextMatch.range.endLineNumber, nextMatch.range.endColumn);\n  }\n\n  addSelectionToPreviousFindMatch() {\n    if (!this._editor.hasModel()) {\n      return null;\n    }\n\n    const previousMatch = this._getPreviousMatch();\n\n    if (!previousMatch) {\n      return null;\n    }\n\n    const allSelections = this._editor.getSelections();\n\n    return new MultiCursorSessionResult(allSelections.concat(previousMatch), previousMatch, 0\n    /* Smooth */\n    );\n  }\n\n  moveSelectionToPreviousFindMatch() {\n    if (!this._editor.hasModel()) {\n      return null;\n    }\n\n    const previousMatch = this._getPreviousMatch();\n\n    if (!previousMatch) {\n      return null;\n    }\n\n    const allSelections = this._editor.getSelections();\n\n    return new MultiCursorSessionResult(allSelections.slice(0, allSelections.length - 1).concat(previousMatch), previousMatch, 0\n    /* Smooth */\n    );\n  }\n\n  _getPreviousMatch() {\n    if (!this._editor.hasModel()) {\n      return null;\n    }\n\n    if (this.currentMatch) {\n      const result = this.currentMatch;\n      this.currentMatch = null;\n      return result;\n    }\n\n    this.findController.highlightFindOptions();\n\n    const allSelections = this._editor.getSelections();\n\n    const lastAddedSelection = allSelections[allSelections.length - 1];\n\n    const previousMatch = this._editor.getModel().findPreviousMatch(this.searchText, lastAddedSelection.getStartPosition(), false, this.matchCase, this.wholeWord ? this._editor.getOption(115\n    /* wordSeparators */\n    ) : null, false);\n\n    if (!previousMatch) {\n      return null;\n    }\n\n    return new Selection(previousMatch.range.startLineNumber, previousMatch.range.startColumn, previousMatch.range.endLineNumber, previousMatch.range.endColumn);\n  }\n\n  selectAll() {\n    if (!this._editor.hasModel()) {\n      return [];\n    }\n\n    this.findController.highlightFindOptions();\n    return this._editor.getModel().findMatches(this.searchText, true, false, this.matchCase, this.wholeWord ? this._editor.getOption(115\n    /* wordSeparators */\n    ) : null, false, 1073741824\n    /* MAX_SAFE_SMALL_INTEGER */\n    );\n  }\n\n}\nexport class MultiCursorSelectionController extends Disposable {\n  constructor(editor) {\n    super();\n    this._sessionDispose = this._register(new DisposableStore());\n    this._editor = editor;\n    this._ignoreSelectionChange = false;\n    this._session = null;\n  }\n\n  static get(editor) {\n    return editor.getContribution(MultiCursorSelectionController.ID);\n  }\n\n  dispose() {\n    this._endSession();\n\n    super.dispose();\n  }\n\n  _beginSessionIfNeeded(findController) {\n    if (!this._session) {\n      // Create a new session\n      const session = MultiCursorSession.create(this._editor, findController);\n\n      if (!session) {\n        return;\n      }\n\n      this._session = session;\n      const newState = {\n        searchString: this._session.searchText\n      };\n\n      if (this._session.isDisconnectedFromFindController) {\n        newState.wholeWordOverride = 1\n        /* True */\n        ;\n        newState.matchCaseOverride = 1\n        /* True */\n        ;\n        newState.isRegexOverride = 2\n        /* False */\n        ;\n      }\n\n      findController.getState().change(newState, false);\n\n      this._sessionDispose.add(this._editor.onDidChangeCursorSelection(e => {\n        if (this._ignoreSelectionChange) {\n          return;\n        }\n\n        this._endSession();\n      }));\n\n      this._sessionDispose.add(this._editor.onDidBlurEditorText(() => {\n        this._endSession();\n      }));\n\n      this._sessionDispose.add(findController.getState().onFindReplaceStateChange(e => {\n        if (e.matchCase || e.wholeWord) {\n          this._endSession();\n        }\n      }));\n    }\n  }\n\n  _endSession() {\n    this._sessionDispose.clear();\n\n    if (this._session && this._session.isDisconnectedFromFindController) {\n      const newState = {\n        wholeWordOverride: 0\n        /* NotSet */\n        ,\n        matchCaseOverride: 0\n        /* NotSet */\n        ,\n        isRegexOverride: 0\n        /* NotSet */\n\n      };\n\n      this._session.findController.getState().change(newState, false);\n    }\n\n    this._session = null;\n  }\n\n  _setSelections(selections) {\n    this._ignoreSelectionChange = true;\n\n    this._editor.setSelections(selections);\n\n    this._ignoreSelectionChange = false;\n  }\n\n  _expandEmptyToWord(model, selection) {\n    if (!selection.isEmpty()) {\n      return selection;\n    }\n\n    const word = this._editor.getConfiguredWordAtPosition(selection.getStartPosition());\n\n    if (!word) {\n      return selection;\n    }\n\n    return new Selection(selection.startLineNumber, word.startColumn, selection.startLineNumber, word.endColumn);\n  }\n\n  _applySessionResult(result) {\n    if (!result) {\n      return;\n    }\n\n    this._setSelections(result.selections);\n\n    if (result.revealRange) {\n      this._editor.revealRangeInCenterIfOutsideViewport(result.revealRange, result.revealScrollType);\n    }\n  }\n\n  getSession(findController) {\n    return this._session;\n  }\n\n  addSelectionToNextFindMatch(findController) {\n    if (!this._editor.hasModel()) {\n      return;\n    }\n\n    if (!this._session) {\n      // If there are multiple cursors, handle the case where they do not all select the same text.\n      const allSelections = this._editor.getSelections();\n\n      if (allSelections.length > 1) {\n        const findState = findController.getState();\n        const matchCase = findState.matchCase;\n        const selectionsContainSameText = modelRangesContainSameText(this._editor.getModel(), allSelections, matchCase);\n\n        if (!selectionsContainSameText) {\n          const model = this._editor.getModel();\n\n          let resultingSelections = [];\n\n          for (let i = 0, len = allSelections.length; i < len; i++) {\n            resultingSelections[i] = this._expandEmptyToWord(model, allSelections[i]);\n          }\n\n          this._editor.setSelections(resultingSelections);\n\n          return;\n        }\n      }\n    }\n\n    this._beginSessionIfNeeded(findController);\n\n    if (this._session) {\n      this._applySessionResult(this._session.addSelectionToNextFindMatch());\n    }\n  }\n\n  addSelectionToPreviousFindMatch(findController) {\n    this._beginSessionIfNeeded(findController);\n\n    if (this._session) {\n      this._applySessionResult(this._session.addSelectionToPreviousFindMatch());\n    }\n  }\n\n  moveSelectionToNextFindMatch(findController) {\n    this._beginSessionIfNeeded(findController);\n\n    if (this._session) {\n      this._applySessionResult(this._session.moveSelectionToNextFindMatch());\n    }\n  }\n\n  moveSelectionToPreviousFindMatch(findController) {\n    this._beginSessionIfNeeded(findController);\n\n    if (this._session) {\n      this._applySessionResult(this._session.moveSelectionToPreviousFindMatch());\n    }\n  }\n\n  selectAll(findController) {\n    if (!this._editor.hasModel()) {\n      return;\n    }\n\n    let matches = null;\n    const findState = findController.getState(); // Special case: find widget owns entirely what we search for if:\n    // - focus is not in the editor (i.e. it is in the find widget)\n    // - and the search widget is visible\n    // - and the search string is non-empty\n    // - and we're searching for a regex\n\n    if (findState.isRevealed && findState.searchString.length > 0 && findState.isRegex) {\n      matches = this._editor.getModel().findMatches(findState.searchString, true, findState.isRegex, findState.matchCase, findState.wholeWord ? this._editor.getOption(115\n      /* wordSeparators */\n      ) : null, false, 1073741824\n      /* MAX_SAFE_SMALL_INTEGER */\n      );\n    } else {\n      this._beginSessionIfNeeded(findController);\n\n      if (!this._session) {\n        return;\n      }\n\n      matches = this._session.selectAll();\n    }\n\n    if (findState.searchScope) {\n      const states = findState.searchScope;\n      let inSelection = [];\n      matches.forEach(match => {\n        states.forEach(state => {\n          if (match.range.endLineNumber <= state.endLineNumber && match.range.startLineNumber >= state.startLineNumber) {\n            inSelection.push(match);\n          }\n        });\n      });\n      matches = inSelection;\n    }\n\n    if (matches.length > 0) {\n      const editorSelection = this._editor.getSelection(); // Have the primary cursor remain the one where the action was invoked\n\n\n      for (let i = 0, len = matches.length; i < len; i++) {\n        const match = matches[i];\n        const intersection = match.range.intersectRanges(editorSelection);\n\n        if (intersection) {\n          // bingo!\n          matches[i] = matches[0];\n          matches[0] = match;\n          break;\n        }\n      }\n\n      this._setSelections(matches.map(m => new Selection(m.range.startLineNumber, m.range.startColumn, m.range.endLineNumber, m.range.endColumn)));\n    }\n  }\n\n}\nMultiCursorSelectionController.ID = 'editor.contrib.multiCursorController';\nexport class MultiCursorSelectionControllerAction extends EditorAction {\n  run(accessor, editor) {\n    const multiCursorController = MultiCursorSelectionController.get(editor);\n\n    if (!multiCursorController) {\n      return;\n    }\n\n    const findController = CommonFindController.get(editor);\n\n    if (!findController) {\n      return;\n    }\n\n    const viewModel = editor._getViewModel();\n\n    if (viewModel) {\n      const previousCursorState = viewModel.getCursorStates();\n\n      this._run(multiCursorController, findController);\n\n      announceCursorChange(previousCursorState, viewModel.getCursorStates());\n    }\n  }\n\n}\nexport class AddSelectionToNextFindMatchAction extends MultiCursorSelectionControllerAction {\n  constructor() {\n    super({\n      id: 'editor.action.addSelectionToNextFindMatch',\n      label: nls.localize('addSelectionToNextFindMatch', \"Add Selection To Next Find Match\"),\n      alias: 'Add Selection To Next Find Match',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: EditorContextKeys.focus,\n        primary: 2048\n        /* CtrlCmd */\n        | 34\n        /* KeyD */\n        ,\n        weight: 100\n        /* EditorContrib */\n\n      },\n      menuOpts: {\n        menuId: MenuId.MenubarSelectionMenu,\n        group: '3_multi',\n        title: nls.localize({\n          key: 'miAddSelectionToNextFindMatch',\n          comment: ['&& denotes a mnemonic']\n        }, \"Add &&Next Occurrence\"),\n        order: 5\n      }\n    });\n  }\n\n  _run(multiCursorController, findController) {\n    multiCursorController.addSelectionToNextFindMatch(findController);\n  }\n\n}\nexport class AddSelectionToPreviousFindMatchAction extends MultiCursorSelectionControllerAction {\n  constructor() {\n    super({\n      id: 'editor.action.addSelectionToPreviousFindMatch',\n      label: nls.localize('addSelectionToPreviousFindMatch', \"Add Selection To Previous Find Match\"),\n      alias: 'Add Selection To Previous Find Match',\n      precondition: undefined,\n      menuOpts: {\n        menuId: MenuId.MenubarSelectionMenu,\n        group: '3_multi',\n        title: nls.localize({\n          key: 'miAddSelectionToPreviousFindMatch',\n          comment: ['&& denotes a mnemonic']\n        }, \"Add P&&revious Occurrence\"),\n        order: 6\n      }\n    });\n  }\n\n  _run(multiCursorController, findController) {\n    multiCursorController.addSelectionToPreviousFindMatch(findController);\n  }\n\n}\nexport class MoveSelectionToNextFindMatchAction extends MultiCursorSelectionControllerAction {\n  constructor() {\n    super({\n      id: 'editor.action.moveSelectionToNextFindMatch',\n      label: nls.localize('moveSelectionToNextFindMatch', \"Move Last Selection To Next Find Match\"),\n      alias: 'Move Last Selection To Next Find Match',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: EditorContextKeys.focus,\n        primary: KeyChord(2048\n        /* CtrlCmd */\n        | 41\n        /* KeyK */\n        , 2048\n        /* CtrlCmd */\n        | 34\n        /* KeyD */\n        ),\n        weight: 100\n        /* EditorContrib */\n\n      }\n    });\n  }\n\n  _run(multiCursorController, findController) {\n    multiCursorController.moveSelectionToNextFindMatch(findController);\n  }\n\n}\nexport class MoveSelectionToPreviousFindMatchAction extends MultiCursorSelectionControllerAction {\n  constructor() {\n    super({\n      id: 'editor.action.moveSelectionToPreviousFindMatch',\n      label: nls.localize('moveSelectionToPreviousFindMatch', \"Move Last Selection To Previous Find Match\"),\n      alias: 'Move Last Selection To Previous Find Match',\n      precondition: undefined\n    });\n  }\n\n  _run(multiCursorController, findController) {\n    multiCursorController.moveSelectionToPreviousFindMatch(findController);\n  }\n\n}\nexport class SelectHighlightsAction extends MultiCursorSelectionControllerAction {\n  constructor() {\n    super({\n      id: 'editor.action.selectHighlights',\n      label: nls.localize('selectAllOccurrencesOfFindMatch', \"Select All Occurrences of Find Match\"),\n      alias: 'Select All Occurrences of Find Match',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: EditorContextKeys.focus,\n        primary: 2048\n        /* CtrlCmd */\n        | 1024\n        /* Shift */\n        | 42\n        /* KeyL */\n        ,\n        weight: 100\n        /* EditorContrib */\n\n      },\n      menuOpts: {\n        menuId: MenuId.MenubarSelectionMenu,\n        group: '3_multi',\n        title: nls.localize({\n          key: 'miSelectHighlights',\n          comment: ['&& denotes a mnemonic']\n        }, \"Select All &&Occurrences\"),\n        order: 7\n      }\n    });\n  }\n\n  _run(multiCursorController, findController) {\n    multiCursorController.selectAll(findController);\n  }\n\n}\nexport class CompatChangeAll extends MultiCursorSelectionControllerAction {\n  constructor() {\n    super({\n      id: 'editor.action.changeAll',\n      label: nls.localize('changeAll.label', \"Change All Occurrences\"),\n      alias: 'Change All Occurrences',\n      precondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.editorTextFocus),\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 2048\n        /* CtrlCmd */\n        | 60\n        /* F2 */\n        ,\n        weight: 100\n        /* EditorContrib */\n\n      },\n      contextMenuOpts: {\n        group: '1_modification',\n        order: 1.2\n      }\n    });\n  }\n\n  _run(multiCursorController, findController) {\n    multiCursorController.selectAll(findController);\n  }\n\n}\n\nclass SelectionHighlighterState {\n  constructor(searchText, matchCase, wordSeparators, modelVersionId) {\n    this.searchText = searchText;\n    this.matchCase = matchCase;\n    this.wordSeparators = wordSeparators;\n    this.modelVersionId = modelVersionId;\n  }\n  /**\n   * Everything equals except for `lastWordUnderCursor`\n   */\n\n\n  static softEquals(a, b) {\n    if (!a && !b) {\n      return true;\n    }\n\n    if (!a || !b) {\n      return false;\n    }\n\n    return a.searchText === b.searchText && a.matchCase === b.matchCase && a.wordSeparators === b.wordSeparators && a.modelVersionId === b.modelVersionId;\n  }\n\n}\n\nexport class SelectionHighlighter extends Disposable {\n  constructor(editor) {\n    super();\n    this.editor = editor;\n    this._isEnabled = editor.getOption(96\n    /* selectionHighlight */\n    );\n    this.decorations = [];\n    this.updateSoon = this._register(new RunOnceScheduler(() => this._update(), 300));\n    this.state = null;\n\n    this._register(editor.onDidChangeConfiguration(e => {\n      this._isEnabled = editor.getOption(96\n      /* selectionHighlight */\n      );\n    }));\n\n    this._register(editor.onDidChangeCursorSelection(e => {\n      if (!this._isEnabled) {\n        // Early exit if nothing needs to be done!\n        // Leave some form of early exit check here if you wish to continue being a cursor position change listener ;)\n        return;\n      }\n\n      if (e.selection.isEmpty()) {\n        if (e.reason === 3\n        /* Explicit */\n        ) {\n          if (this.state) {\n            // no longer valid\n            this._setState(null);\n          }\n\n          this.updateSoon.schedule();\n        } else {\n          this._setState(null);\n        }\n      } else {\n        this._update();\n      }\n    }));\n\n    this._register(editor.onDidChangeModel(e => {\n      this._setState(null);\n    }));\n\n    this._register(editor.onDidChangeModelContent(e => {\n      if (this._isEnabled) {\n        this.updateSoon.schedule();\n      }\n    }));\n\n    this._register(CommonFindController.get(editor).getState().onFindReplaceStateChange(e => {\n      this._update();\n    }));\n  }\n\n  _update() {\n    this._setState(SelectionHighlighter._createState(this._isEnabled, this.editor));\n  }\n\n  static _createState(isEnabled, editor) {\n    if (!isEnabled) {\n      return null;\n    }\n\n    if (!editor.hasModel()) {\n      return null;\n    }\n\n    const s = editor.getSelection();\n\n    if (s.startLineNumber !== s.endLineNumber) {\n      // multiline forbidden for perf reasons\n      return null;\n    }\n\n    const multiCursorController = MultiCursorSelectionController.get(editor);\n\n    if (!multiCursorController) {\n      return null;\n    }\n\n    const findController = CommonFindController.get(editor);\n\n    if (!findController) {\n      return null;\n    }\n\n    let r = multiCursorController.getSession(findController);\n\n    if (!r) {\n      const allSelections = editor.getSelections();\n\n      if (allSelections.length > 1) {\n        const findState = findController.getState();\n        const matchCase = findState.matchCase;\n        const selectionsContainSameText = modelRangesContainSameText(editor.getModel(), allSelections, matchCase);\n\n        if (!selectionsContainSameText) {\n          return null;\n        }\n      }\n\n      r = MultiCursorSession.create(editor, findController);\n    }\n\n    if (!r) {\n      return null;\n    }\n\n    if (r.currentMatch) {\n      // This is an empty selection\n      // Do not interfere with semantic word highlighting in the no selection case\n      return null;\n    }\n\n    if (/^[ \\t]+$/.test(r.searchText)) {\n      // whitespace only selection\n      return null;\n    }\n\n    if (r.searchText.length > 200) {\n      // very long selection\n      return null;\n    } // TODO: better handling of this case\n\n\n    const findState = findController.getState();\n    const caseSensitive = findState.matchCase; // Return early if the find widget shows the exact same matches\n\n    if (findState.isRevealed) {\n      let findStateSearchString = findState.searchString;\n\n      if (!caseSensitive) {\n        findStateSearchString = findStateSearchString.toLowerCase();\n      }\n\n      let mySearchString = r.searchText;\n\n      if (!caseSensitive) {\n        mySearchString = mySearchString.toLowerCase();\n      }\n\n      if (findStateSearchString === mySearchString && r.matchCase === findState.matchCase && r.wholeWord === findState.wholeWord && !findState.isRegex) {\n        return null;\n      }\n    }\n\n    return new SelectionHighlighterState(r.searchText, r.matchCase, r.wholeWord ? editor.getOption(115\n    /* wordSeparators */\n    ) : null, editor.getModel().getVersionId());\n  }\n\n  _setState(state) {\n    if (SelectionHighlighterState.softEquals(this.state, state)) {\n      this.state = state;\n      return;\n    }\n\n    this.state = state;\n\n    if (!this.state) {\n      this.decorations = this.editor.deltaDecorations(this.decorations, []);\n      return;\n    }\n\n    if (!this.editor.hasModel()) {\n      return;\n    }\n\n    const model = this.editor.getModel();\n\n    if (model.isTooLargeForTokenization()) {\n      // the file is too large, so searching word under cursor in the whole document takes is blocking the UI.\n      return;\n    }\n\n    const hasFindOccurrences = DocumentHighlightProviderRegistry.has(model) && this.editor.getOption(71\n    /* occurrencesHighlight */\n    );\n    let allMatches = model.findMatches(this.state.searchText, true, false, this.state.matchCase, this.state.wordSeparators, false).map(m => m.range);\n    allMatches.sort(Range.compareRangesUsingStarts);\n    let selections = this.editor.getSelections();\n    selections.sort(Range.compareRangesUsingStarts); // do not overlap with selection (issue #64 and #512)\n\n    let matches = [];\n\n    for (let i = 0, j = 0, len = allMatches.length, lenJ = selections.length; i < len;) {\n      const match = allMatches[i];\n\n      if (j >= lenJ) {\n        // finished all editor selections\n        matches.push(match);\n        i++;\n      } else {\n        const cmp = Range.compareRangesUsingStarts(match, selections[j]);\n\n        if (cmp < 0) {\n          // match is before sel\n          if (selections[j].isEmpty() || !Range.areIntersecting(match, selections[j])) {\n            matches.push(match);\n          }\n\n          i++;\n        } else if (cmp > 0) {\n          // sel is before match\n          j++;\n        } else {\n          // sel is equal to match\n          i++;\n          j++;\n        }\n      }\n    }\n\n    const decorations = matches.map(r => {\n      return {\n        range: r,\n        // Show in overviewRuler only if model has no semantic highlighting\n        options: hasFindOccurrences ? SelectionHighlighter._SELECTION_HIGHLIGHT : SelectionHighlighter._SELECTION_HIGHLIGHT_OVERVIEW\n      };\n    });\n    this.decorations = this.editor.deltaDecorations(this.decorations, decorations);\n  }\n\n  dispose() {\n    this._setState(null);\n\n    super.dispose();\n  }\n\n}\nSelectionHighlighter.ID = 'editor.contrib.selectionHighlighter';\nSelectionHighlighter._SELECTION_HIGHLIGHT_OVERVIEW = ModelDecorationOptions.register({\n  description: 'selection-highlight-overview',\n  stickiness: 1\n  /* NeverGrowsWhenTypingAtEdges */\n  ,\n  className: 'selectionHighlight',\n  minimap: {\n    color: themeColorFromId(minimapSelectionOccurrenceHighlight),\n    position: MinimapPosition.Inline\n  },\n  overviewRuler: {\n    color: themeColorFromId(overviewRulerSelectionHighlightForeground),\n    position: OverviewRulerLane.Center\n  }\n});\nSelectionHighlighter._SELECTION_HIGHLIGHT = ModelDecorationOptions.register({\n  description: 'selection-highlight',\n  stickiness: 1\n  /* NeverGrowsWhenTypingAtEdges */\n  ,\n  className: 'selectionHighlight'\n});\n\nfunction modelRangesContainSameText(model, ranges, matchCase) {\n  const selectedText = getValueInRange(model, ranges[0], !matchCase);\n\n  for (let i = 1, len = ranges.length; i < len; i++) {\n    const range = ranges[i];\n\n    if (range.isEmpty()) {\n      return false;\n    }\n\n    const thisSelectedText = getValueInRange(model, range, !matchCase);\n\n    if (selectedText !== thisSelectedText) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction getValueInRange(model, range, toLowerCase) {\n  const text = model.getValueInRange(range);\n  return toLowerCase ? text.toLowerCase() : text;\n}\n\nregisterEditorContribution(MultiCursorSelectionController.ID, MultiCursorSelectionController);\nregisterEditorContribution(SelectionHighlighter.ID, SelectionHighlighter);\nregisterEditorAction(InsertCursorAbove);\nregisterEditorAction(InsertCursorBelow);\nregisterEditorAction(InsertCursorAtEndOfEachLineSelected);\nregisterEditorAction(AddSelectionToNextFindMatchAction);\nregisterEditorAction(AddSelectionToPreviousFindMatchAction);\nregisterEditorAction(MoveSelectionToNextFindMatchAction);\nregisterEditorAction(MoveSelectionToPreviousFindMatchAction);\nregisterEditorAction(SelectHighlightsAction);\nregisterEditorAction(CompatChangeAll);\nregisterEditorAction(InsertCursorAtEndOfLineSelected);\nregisterEditorAction(InsertCursorAtTopOfLineSelected);","map":{"version":3,"sources":["/home/umut/Documents/cs/cs410/Project2Group14/node_modules/monaco-editor/esm/vs/editor/contrib/multicursor/multicursor.js"],"names":["status","RunOnceScheduler","KeyChord","Disposable","DisposableStore","EditorAction","registerEditorAction","registerEditorContribution","CursorMoveCommands","Range","Selection","EditorContextKeys","OverviewRulerLane","MinimapPosition","ModelDecorationOptions","DocumentHighlightProviderRegistry","CommonFindController","nls","MenuId","ContextKeyExpr","overviewRulerSelectionHighlightForeground","minimapSelectionOccurrenceHighlight","themeColorFromId","announceCursorChange","previousCursorState","cursorState","cursorDiff","filter","cs","find","pcs","equals","length","cursorPositions","map","viewState","position","lineNumber","column","join","msg","localize","InsertCursorAbove","constructor","id","label","alias","precondition","undefined","kbOpts","kbExpr","editorTextFocus","primary","linux","secondary","weight","menuOpts","menuId","MenubarSelectionMenu","group","title","key","comment","order","run","accessor","editor","args","hasModel","useLogicalLine","logicalLine","viewModel","_getViewModel","cursorConfig","readOnly","pushStackElement","getCursorStates","setCursorStates","source","addCursorUp","revealTopMostCursor","InsertCursorBelow","addCursorDown","revealBottomMostCursor","InsertCursorAtEndOfEachLineSelected","getCursorsForSelection","selection","model","result","isEmpty","i","startLineNumber","endLineNumber","currentLineMaxColumn","getLineMaxColumn","push","endColumn","getModel","selections","getSelections","newSelections","forEach","sel","setSelections","InsertCursorAtEndOfLineSelected","lineCount","getLineCount","startColumn","InsertCursorAtTopOfLineSelected","MultiCursorSessionResult","revealRange","revealScrollType","MultiCursorSession","_editor","findController","isDisconnectedFromFindController","searchText","wholeWord","matchCase","currentMatch","create","findState","getState","hasTextFocus","isRevealed","searchString","s","getSelection","word","getConfiguredWordAtPosition","getStartPosition","getValueInRange","replace","addSelectionToNextFindMatch","nextMatch","_getNextMatch","allSelections","concat","moveSelectionToNextFindMatch","slice","highlightFindOptions","lastAddedSelection","findNextMatch","getEndPosition","getOption","range","addSelectionToPreviousFindMatch","previousMatch","_getPreviousMatch","moveSelectionToPreviousFindMatch","findPreviousMatch","selectAll","findMatches","MultiCursorSelectionController","_sessionDispose","_register","_ignoreSelectionChange","_session","get","getContribution","ID","dispose","_endSession","_beginSessionIfNeeded","session","newState","wholeWordOverride","matchCaseOverride","isRegexOverride","change","add","onDidChangeCursorSelection","e","onDidBlurEditorText","onFindReplaceStateChange","clear","_setSelections","_expandEmptyToWord","_applySessionResult","revealRangeInCenterIfOutsideViewport","getSession","selectionsContainSameText","modelRangesContainSameText","resultingSelections","len","matches","isRegex","searchScope","states","inSelection","match","state","editorSelection","intersection","intersectRanges","m","MultiCursorSelectionControllerAction","multiCursorController","_run","AddSelectionToNextFindMatchAction","focus","AddSelectionToPreviousFindMatchAction","MoveSelectionToNextFindMatchAction","MoveSelectionToPreviousFindMatchAction","SelectHighlightsAction","CompatChangeAll","and","writable","contextMenuOpts","SelectionHighlighterState","wordSeparators","modelVersionId","softEquals","a","b","SelectionHighlighter","_isEnabled","decorations","updateSoon","_update","onDidChangeConfiguration","reason","_setState","schedule","onDidChangeModel","onDidChangeModelContent","_createState","isEnabled","r","test","caseSensitive","findStateSearchString","toLowerCase","mySearchString","getVersionId","deltaDecorations","isTooLargeForTokenization","hasFindOccurrences","has","allMatches","sort","compareRangesUsingStarts","j","lenJ","cmp","areIntersecting","options","_SELECTION_HIGHLIGHT","_SELECTION_HIGHLIGHT_OVERVIEW","register","description","stickiness","className","minimap","color","Inline","overviewRuler","Center","ranges","selectedText","thisSelectedText","text"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,MAAT,QAAuB,uCAAvB;AACA,SAASC,gBAAT,QAAiC,+BAAjC;AACA,SAASC,QAAT,QAAyB,kCAAzB;AACA,SAASC,UAAT,EAAqBC,eAArB,QAA4C,mCAA5C;AACA,SAASC,YAAT,EAAuBC,oBAAvB,EAA6CC,0BAA7C,QAA+E,mCAA/E;AACA,SAASC,kBAAT,QAAmC,+CAAnC;AACA,SAASC,KAAT,QAAsB,4BAAtB;AACA,SAASC,SAAT,QAA0B,gCAA1B;AACA,SAASC,iBAAT,QAAkC,mCAAlC;AACA,SAASC,iBAAT,EAA4BC,eAA5B,QAAmD,uBAAnD;AACA,SAASC,sBAAT,QAAuC,iCAAvC;AACA,SAASC,iCAAT,QAAkD,uBAAlD;AACA,SAASC,oBAAT,QAAqC,2BAArC;AACA,OAAO,KAAKC,GAAZ,MAAqB,iBAArB;AACA,SAASC,MAAT,QAAuB,6CAAvB;AACA,SAASC,cAAT,QAA+B,mDAA/B;AACA,SAASC,yCAAT,EAAoDC,mCAApD,QAA+F,iDAA/F;AACA,SAASC,gBAAT,QAAiC,gDAAjC;;AACA,SAASC,oBAAT,CAA8BC,mBAA9B,EAAmDC,WAAnD,EAAgE;AAC5D,QAAMC,UAAU,GAAGD,WAAW,CAACE,MAAZ,CAAmBC,EAAE,IAAI,CAACJ,mBAAmB,CAACK,IAApB,CAAyBC,GAAG,IAAIA,GAAG,CAACC,MAAJ,CAAWH,EAAX,CAAhC,CAA1B,CAAnB;;AACA,MAAIF,UAAU,CAACM,MAAX,IAAqB,CAAzB,EAA4B;AACxB,UAAMC,eAAe,GAAGP,UAAU,CAACQ,GAAX,CAAeN,EAAE,IAAK,QAAOA,EAAE,CAACO,SAAH,CAAaC,QAAb,CAAsBC,UAAW,WAAUT,EAAE,CAACO,SAAH,CAAaC,QAAb,CAAsBE,MAAO,EAArG,EAAwGC,IAAxG,CAA6G,IAA7G,CAAxB;AACA,UAAMC,GAAG,GAAGd,UAAU,CAACM,MAAX,KAAsB,CAAtB,GAA0Bf,GAAG,CAACwB,QAAJ,CAAa,aAAb,EAA4B,mBAA5B,EAAiDR,eAAjD,CAA1B,GAA8FhB,GAAG,CAACwB,QAAJ,CAAa,cAAb,EAA6B,oBAA7B,EAAmDR,eAAnD,CAA1G;AACAjC,IAAAA,MAAM,CAACwC,GAAD,CAAN;AACH;AACJ;;AACD,OAAO,MAAME,iBAAN,SAAgCrC,YAAhC,CAA6C;AAChDsC,EAAAA,WAAW,GAAG;AACV,UAAM;AACFC,MAAAA,EAAE,EAAE,iCADF;AAEFC,MAAAA,KAAK,EAAE5B,GAAG,CAACwB,QAAJ,CAAa,yBAAb,EAAwC,kBAAxC,CAFL;AAGFK,MAAAA,KAAK,EAAE,kBAHL;AAIFC,MAAAA,YAAY,EAAEC,SAJZ;AAKFC,MAAAA,MAAM,EAAE;AACJC,QAAAA,MAAM,EAAEvC,iBAAiB,CAACwC,eADtB;AAEJC,QAAAA,OAAO,EAAE;AAAK;AAAL,UAAqB;AAAI;AAAzB,UAAqC;AAAG;AAF7C;AAGJC,QAAAA,KAAK,EAAE;AACHD,UAAAA,OAAO,EAAE;AAAK;AAAL,YAAmB;AAAI;AAAvB,YAAmC;AAAG;AAD5C;AAEHE,UAAAA,SAAS,EAAE,CAAC;AAAK;AAAL,YAAqB;AAAK;AAA1B,YAAwC;AAAG;AAA5C;AAFR,SAHH;AAOJC,QAAAA,MAAM,EAAE;AAAI;;AAPR,OALN;AAcFC,MAAAA,QAAQ,EAAE;AACNC,QAAAA,MAAM,EAAEvC,MAAM,CAACwC,oBADT;AAENC,QAAAA,KAAK,EAAE,SAFD;AAGNC,QAAAA,KAAK,EAAE3C,GAAG,CAACwB,QAAJ,CAAa;AAAEoB,UAAAA,GAAG,EAAE,qBAAP;AAA8BC,UAAAA,OAAO,EAAE,CAAC,uBAAD;AAAvC,SAAb,EAAiF,oBAAjF,CAHD;AAINC,QAAAA,KAAK,EAAE;AAJD;AAdR,KAAN;AAqBH;;AACDC,EAAAA,GAAG,CAACC,QAAD,EAAWC,MAAX,EAAmBC,IAAnB,EAAyB;AACxB,QAAI,CAACD,MAAM,CAACE,QAAP,EAAL,EAAwB;AACpB;AACH;;AACD,QAAIC,cAAc,GAAG,IAArB;;AACA,QAAIF,IAAI,IAAIA,IAAI,CAACG,WAAL,KAAqB,KAAjC,EAAwC;AACpCD,MAAAA,cAAc,GAAG,KAAjB;AACH;;AACD,UAAME,SAAS,GAAGL,MAAM,CAACM,aAAP,EAAlB;;AACA,QAAID,SAAS,CAACE,YAAV,CAAuBC,QAA3B,EAAqC;AACjC;AACH;;AACDH,IAAAA,SAAS,CAACI,gBAAV;AACA,UAAMnD,mBAAmB,GAAG+C,SAAS,CAACK,eAAV,EAA5B;AACAL,IAAAA,SAAS,CAACM,eAAV,CAA0BV,IAAI,CAACW,MAA/B,EAAuC;AAAE;AAAzC,MAAyDtE,kBAAkB,CAACuE,WAAnB,CAA+BR,SAA/B,EAA0C/C,mBAA1C,EAA+D6C,cAA/D,CAAzD;AACAE,IAAAA,SAAS,CAACS,mBAAV,CAA8Bb,IAAI,CAACW,MAAnC;AACAvD,IAAAA,oBAAoB,CAACC,mBAAD,EAAsB+C,SAAS,CAACK,eAAV,EAAtB,CAApB;AACH;;AAzC+C;AA2CpD,OAAO,MAAMK,iBAAN,SAAgC5E,YAAhC,CAA6C;AAChDsC,EAAAA,WAAW,GAAG;AACV,UAAM;AACFC,MAAAA,EAAE,EAAE,iCADF;AAEFC,MAAAA,KAAK,EAAE5B,GAAG,CAACwB,QAAJ,CAAa,yBAAb,EAAwC,kBAAxC,CAFL;AAGFK,MAAAA,KAAK,EAAE,kBAHL;AAIFC,MAAAA,YAAY,EAAEC,SAJZ;AAKFC,MAAAA,MAAM,EAAE;AACJC,QAAAA,MAAM,EAAEvC,iBAAiB,CAACwC,eADtB;AAEJC,QAAAA,OAAO,EAAE;AAAK;AAAL,UAAqB;AAAI;AAAzB,UAAqC;AAAG;AAF7C;AAGJC,QAAAA,KAAK,EAAE;AACHD,UAAAA,OAAO,EAAE;AAAK;AAAL,YAAmB;AAAI;AAAvB,YAAmC;AAAG;AAD5C;AAEHE,UAAAA,SAAS,EAAE,CAAC;AAAK;AAAL,YAAqB;AAAK;AAA1B,YAAwC;AAAG;AAA5C;AAFR,SAHH;AAOJC,QAAAA,MAAM,EAAE;AAAI;;AAPR,OALN;AAcFC,MAAAA,QAAQ,EAAE;AACNC,QAAAA,MAAM,EAAEvC,MAAM,CAACwC,oBADT;AAENC,QAAAA,KAAK,EAAE,SAFD;AAGNC,QAAAA,KAAK,EAAE3C,GAAG,CAACwB,QAAJ,CAAa;AAAEoB,UAAAA,GAAG,EAAE,qBAAP;AAA8BC,UAAAA,OAAO,EAAE,CAAC,uBAAD;AAAvC,SAAb,EAAiF,oBAAjF,CAHD;AAINC,QAAAA,KAAK,EAAE;AAJD;AAdR,KAAN;AAqBH;;AACDC,EAAAA,GAAG,CAACC,QAAD,EAAWC,MAAX,EAAmBC,IAAnB,EAAyB;AACxB,QAAI,CAACD,MAAM,CAACE,QAAP,EAAL,EAAwB;AACpB;AACH;;AACD,QAAIC,cAAc,GAAG,IAArB;;AACA,QAAIF,IAAI,IAAIA,IAAI,CAACG,WAAL,KAAqB,KAAjC,EAAwC;AACpCD,MAAAA,cAAc,GAAG,KAAjB;AACH;;AACD,UAAME,SAAS,GAAGL,MAAM,CAACM,aAAP,EAAlB;;AACA,QAAID,SAAS,CAACE,YAAV,CAAuBC,QAA3B,EAAqC;AACjC;AACH;;AACDH,IAAAA,SAAS,CAACI,gBAAV;AACA,UAAMnD,mBAAmB,GAAG+C,SAAS,CAACK,eAAV,EAA5B;AACAL,IAAAA,SAAS,CAACM,eAAV,CAA0BV,IAAI,CAACW,MAA/B,EAAuC;AAAE;AAAzC,MAAyDtE,kBAAkB,CAAC0E,aAAnB,CAAiCX,SAAjC,EAA4C/C,mBAA5C,EAAiE6C,cAAjE,CAAzD;AACAE,IAAAA,SAAS,CAACY,sBAAV,CAAiChB,IAAI,CAACW,MAAtC;AACAvD,IAAAA,oBAAoB,CAACC,mBAAD,EAAsB+C,SAAS,CAACK,eAAV,EAAtB,CAApB;AACH;;AAzC+C;;AA2CpD,MAAMQ,mCAAN,SAAkD/E,YAAlD,CAA+D;AAC3DsC,EAAAA,WAAW,GAAG;AACV,UAAM;AACFC,MAAAA,EAAE,EAAE,mDADF;AAEFC,MAAAA,KAAK,EAAE5B,GAAG,CAACwB,QAAJ,CAAa,2CAAb,EAA0D,0BAA1D,CAFL;AAGFK,MAAAA,KAAK,EAAE,0BAHL;AAIFC,MAAAA,YAAY,EAAEC,SAJZ;AAKFC,MAAAA,MAAM,EAAE;AACJC,QAAAA,MAAM,EAAEvC,iBAAiB,CAACwC,eADtB;AAEJC,QAAAA,OAAO,EAAE;AAAK;AAAL,UAAmB;AAAI;AAAvB,UAAmC;AAAG;AAF3C;AAGJG,QAAAA,MAAM,EAAE;AAAI;;AAHR,OALN;AAUFC,MAAAA,QAAQ,EAAE;AACNC,QAAAA,MAAM,EAAEvC,MAAM,CAACwC,oBADT;AAENC,QAAAA,KAAK,EAAE,SAFD;AAGNC,QAAAA,KAAK,EAAE3C,GAAG,CAACwB,QAAJ,CAAa;AAAEoB,UAAAA,GAAG,EAAE,uCAAP;AAAgDC,UAAAA,OAAO,EAAE,CAAC,uBAAD;AAAzD,SAAb,EAAmG,4BAAnG,CAHD;AAINC,QAAAA,KAAK,EAAE;AAJD;AAVR,KAAN;AAiBH;;AACDsB,EAAAA,sBAAsB,CAACC,SAAD,EAAYC,KAAZ,EAAmBC,MAAnB,EAA2B;AAC7C,QAAIF,SAAS,CAACG,OAAV,EAAJ,EAAyB;AACrB;AACH;;AACD,SAAK,IAAIC,CAAC,GAAGJ,SAAS,CAACK,eAAvB,EAAwCD,CAAC,GAAGJ,SAAS,CAACM,aAAtD,EAAqEF,CAAC,EAAtE,EAA0E;AACtE,UAAIG,oBAAoB,GAAGN,KAAK,CAACO,gBAAN,CAAuBJ,CAAvB,CAA3B;AACAF,MAAAA,MAAM,CAACO,IAAP,CAAY,IAAIrF,SAAJ,CAAcgF,CAAd,EAAiBG,oBAAjB,EAAuCH,CAAvC,EAA0CG,oBAA1C,CAAZ;AACH;;AACD,QAAIP,SAAS,CAACU,SAAV,GAAsB,CAA1B,EAA6B;AACzBR,MAAAA,MAAM,CAACO,IAAP,CAAY,IAAIrF,SAAJ,CAAc4E,SAAS,CAACM,aAAxB,EAAuCN,SAAS,CAACU,SAAjD,EAA4DV,SAAS,CAACM,aAAtE,EAAqFN,SAAS,CAACU,SAA/F,CAAZ;AACH;AACJ;;AACDhC,EAAAA,GAAG,CAACC,QAAD,EAAWC,MAAX,EAAmB;AAClB,QAAI,CAACA,MAAM,CAACE,QAAP,EAAL,EAAwB;AACpB;AACH;;AACD,UAAMmB,KAAK,GAAGrB,MAAM,CAAC+B,QAAP,EAAd;AACA,UAAMC,UAAU,GAAGhC,MAAM,CAACiC,aAAP,EAAnB;;AACA,UAAM5B,SAAS,GAAGL,MAAM,CAACM,aAAP,EAAlB;;AACA,UAAMhD,mBAAmB,GAAG+C,SAAS,CAACK,eAAV,EAA5B;AACA,QAAIwB,aAAa,GAAG,EAApB;AACAF,IAAAA,UAAU,CAACG,OAAX,CAAoBC,GAAD,IAAS,KAAKjB,sBAAL,CAA4BiB,GAA5B,EAAiCf,KAAjC,EAAwCa,aAAxC,CAA5B;;AACA,QAAIA,aAAa,CAACpE,MAAd,GAAuB,CAA3B,EAA8B;AAC1BkC,MAAAA,MAAM,CAACqC,aAAP,CAAqBH,aAArB;AACH;;AACD7E,IAAAA,oBAAoB,CAACC,mBAAD,EAAsB+C,SAAS,CAACK,eAAV,EAAtB,CAApB;AACH;;AA9C0D;;AAgD/D,MAAM4B,+BAAN,SAA8CnG,YAA9C,CAA2D;AACvDsC,EAAAA,WAAW,GAAG;AACV,UAAM;AACFC,MAAAA,EAAE,EAAE,kCADF;AAEFC,MAAAA,KAAK,EAAE5B,GAAG,CAACwB,QAAJ,CAAa,gCAAb,EAA+C,uBAA/C,CAFL;AAGFK,MAAAA,KAAK,EAAE,uBAHL;AAIFC,MAAAA,YAAY,EAAEC;AAJZ,KAAN;AAMH;;AACDgB,EAAAA,GAAG,CAACC,QAAD,EAAWC,MAAX,EAAmB;AAClB,QAAI,CAACA,MAAM,CAACE,QAAP,EAAL,EAAwB;AACpB;AACH;;AACD,UAAM8B,UAAU,GAAGhC,MAAM,CAACiC,aAAP,EAAnB;AACA,UAAMM,SAAS,GAAGvC,MAAM,CAAC+B,QAAP,GAAkBS,YAAlB,EAAlB;AACA,QAAIN,aAAa,GAAG,EAApB;;AACA,SAAK,IAAIV,CAAC,GAAGQ,UAAU,CAAC,CAAD,CAAV,CAAcP,eAA3B,EAA4CD,CAAC,IAAIe,SAAjD,EAA4Df,CAAC,EAA7D,EAAiE;AAC7DU,MAAAA,aAAa,CAACL,IAAd,CAAmB,IAAIrF,SAAJ,CAAcgF,CAAd,EAAiBQ,UAAU,CAAC,CAAD,CAAV,CAAcS,WAA/B,EAA4CjB,CAA5C,EAA+CQ,UAAU,CAAC,CAAD,CAAV,CAAcF,SAA7D,CAAnB;AACH;;AACD,UAAMzB,SAAS,GAAGL,MAAM,CAACM,aAAP,EAAlB;;AACA,UAAMhD,mBAAmB,GAAG+C,SAAS,CAACK,eAAV,EAA5B;;AACA,QAAIwB,aAAa,CAACpE,MAAd,GAAuB,CAA3B,EAA8B;AAC1BkC,MAAAA,MAAM,CAACqC,aAAP,CAAqBH,aAArB;AACH;;AACD7E,IAAAA,oBAAoB,CAACC,mBAAD,EAAsB+C,SAAS,CAACK,eAAV,EAAtB,CAApB;AACH;;AAzBsD;;AA2B3D,MAAMgC,+BAAN,SAA8CvG,YAA9C,CAA2D;AACvDsC,EAAAA,WAAW,GAAG;AACV,UAAM;AACFC,MAAAA,EAAE,EAAE,+BADF;AAEFC,MAAAA,KAAK,EAAE5B,GAAG,CAACwB,QAAJ,CAAa,6BAAb,EAA4C,oBAA5C,CAFL;AAGFK,MAAAA,KAAK,EAAE,oBAHL;AAIFC,MAAAA,YAAY,EAAEC;AAJZ,KAAN;AAMH;;AACDgB,EAAAA,GAAG,CAACC,QAAD,EAAWC,MAAX,EAAmB;AAClB,QAAI,CAACA,MAAM,CAACE,QAAP,EAAL,EAAwB;AACpB;AACH;;AACD,UAAM8B,UAAU,GAAGhC,MAAM,CAACiC,aAAP,EAAnB;AACA,QAAIC,aAAa,GAAG,EAApB;;AACA,SAAK,IAAIV,CAAC,GAAGQ,UAAU,CAAC,CAAD,CAAV,CAAcP,eAA3B,EAA4CD,CAAC,IAAI,CAAjD,EAAoDA,CAAC,EAArD,EAAyD;AACrDU,MAAAA,aAAa,CAACL,IAAd,CAAmB,IAAIrF,SAAJ,CAAcgF,CAAd,EAAiBQ,UAAU,CAAC,CAAD,CAAV,CAAcS,WAA/B,EAA4CjB,CAA5C,EAA+CQ,UAAU,CAAC,CAAD,CAAV,CAAcF,SAA7D,CAAnB;AACH;;AACD,UAAMzB,SAAS,GAAGL,MAAM,CAACM,aAAP,EAAlB;;AACA,UAAMhD,mBAAmB,GAAG+C,SAAS,CAACK,eAAV,EAA5B;;AACA,QAAIwB,aAAa,CAACpE,MAAd,GAAuB,CAA3B,EAA8B;AAC1BkC,MAAAA,MAAM,CAACqC,aAAP,CAAqBH,aAArB;AACH;;AACD7E,IAAAA,oBAAoB,CAACC,mBAAD,EAAsB+C,SAAS,CAACK,eAAV,EAAtB,CAApB;AACH;;AAxBsD;;AA0B3D,OAAO,MAAMiC,wBAAN,CAA+B;AAClClE,EAAAA,WAAW,CAACuD,UAAD,EAAaY,WAAb,EAA0BC,gBAA1B,EAA4C;AACnD,SAAKb,UAAL,GAAkBA,UAAlB;AACA,SAAKY,WAAL,GAAmBA,WAAnB;AACA,SAAKC,gBAAL,GAAwBA,gBAAxB;AACH;;AALiC;AAOtC,OAAO,MAAMC,kBAAN,CAAyB;AAC5BrE,EAAAA,WAAW,CAACsE,OAAD,EAAUC,cAAV,EAA0BC,gCAA1B,EAA4DC,UAA5D,EAAwEC,SAAxE,EAAmFC,SAAnF,EAA8FC,YAA9F,EAA4G;AACnH,SAAKN,OAAL,GAAeA,OAAf;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACA,SAAKC,gCAAL,GAAwCA,gCAAxC;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACH;;AACY,SAANC,MAAM,CAACtD,MAAD,EAASgD,cAAT,EAAyB;AAClC,QAAI,CAAChD,MAAM,CAACE,QAAP,EAAL,EAAwB;AACpB,aAAO,IAAP;AACH;;AACD,UAAMqD,SAAS,GAAGP,cAAc,CAACQ,QAAf,EAAlB,CAJkC,CAKlC;AACA;AACA;AACA;;AACA,QAAI,CAACxD,MAAM,CAACyD,YAAP,EAAD,IAA0BF,SAAS,CAACG,UAApC,IAAkDH,SAAS,CAACI,YAAV,CAAuB7F,MAAvB,GAAgC,CAAtF,EAAyF;AACrF;AACA,aAAO,IAAIgF,kBAAJ,CAAuB9C,MAAvB,EAA+BgD,cAA/B,EAA+C,KAA/C,EAAsDO,SAAS,CAACI,YAAhE,EAA8EJ,SAAS,CAACJ,SAAxF,EAAmGI,SAAS,CAACH,SAA7G,EAAwH,IAAxH,CAAP;AACH,KAZiC,CAalC;AACA;;;AACA,QAAIH,gCAAgC,GAAG,KAAvC;AACA,QAAIE,SAAJ;AACA,QAAIC,SAAJ;AACA,UAAMpB,UAAU,GAAGhC,MAAM,CAACiC,aAAP,EAAnB;;AACA,QAAID,UAAU,CAAClE,MAAX,KAAsB,CAAtB,IAA2BkE,UAAU,CAAC,CAAD,CAAV,CAAcT,OAAd,EAA/B,EAAwD;AACpD0B,MAAAA,gCAAgC,GAAG,IAAnC;AACAE,MAAAA,SAAS,GAAG,IAAZ;AACAC,MAAAA,SAAS,GAAG,IAAZ;AACH,KAJD,MAKK;AACDD,MAAAA,SAAS,GAAGI,SAAS,CAACJ,SAAtB;AACAC,MAAAA,SAAS,GAAGG,SAAS,CAACH,SAAtB;AACH,KA3BiC,CA4BlC;;;AACA,UAAMQ,CAAC,GAAG5D,MAAM,CAAC6D,YAAP,EAAV;AACA,QAAIX,UAAJ;AACA,QAAIG,YAAY,GAAG,IAAnB;;AACA,QAAIO,CAAC,CAACrC,OAAF,EAAJ,EAAiB;AACb;AACA,YAAMuC,IAAI,GAAG9D,MAAM,CAAC+D,2BAAP,CAAmCH,CAAC,CAACI,gBAAF,EAAnC,CAAb;;AACA,UAAI,CAACF,IAAL,EAAW;AACP,eAAO,IAAP;AACH;;AACDZ,MAAAA,UAAU,GAAGY,IAAI,CAACA,IAAlB;AACAT,MAAAA,YAAY,GAAG,IAAI7G,SAAJ,CAAcoH,CAAC,CAACnC,eAAhB,EAAiCqC,IAAI,CAACrB,WAAtC,EAAmDmB,CAAC,CAACnC,eAArD,EAAsEqC,IAAI,CAAChC,SAA3E,CAAf;AACH,KARD,MASK;AACDoB,MAAAA,UAAU,GAAGlD,MAAM,CAAC+B,QAAP,GAAkBkC,eAAlB,CAAkCL,CAAlC,EAAqCM,OAArC,CAA6C,OAA7C,EAAsD,IAAtD,CAAb;AACH;;AACD,WAAO,IAAIpB,kBAAJ,CAAuB9C,MAAvB,EAA+BgD,cAA/B,EAA+CC,gCAA/C,EAAiFC,UAAjF,EAA6FC,SAA7F,EAAwGC,SAAxG,EAAmHC,YAAnH,CAAP;AACH;;AACDc,EAAAA,2BAA2B,GAAG;AAC1B,QAAI,CAAC,KAAKpB,OAAL,CAAa7C,QAAb,EAAL,EAA8B;AAC1B,aAAO,IAAP;AACH;;AACD,UAAMkE,SAAS,GAAG,KAAKC,aAAL,EAAlB;;AACA,QAAI,CAACD,SAAL,EAAgB;AACZ,aAAO,IAAP;AACH;;AACD,UAAME,aAAa,GAAG,KAAKvB,OAAL,CAAad,aAAb,EAAtB;;AACA,WAAO,IAAIU,wBAAJ,CAA6B2B,aAAa,CAACC,MAAd,CAAqBH,SAArB,CAA7B,EAA8DA,SAA9D,EAAyE;AAAE;AAA3E,KAAP;AACH;;AACDI,EAAAA,4BAA4B,GAAG;AAC3B,QAAI,CAAC,KAAKzB,OAAL,CAAa7C,QAAb,EAAL,EAA8B;AAC1B,aAAO,IAAP;AACH;;AACD,UAAMkE,SAAS,GAAG,KAAKC,aAAL,EAAlB;;AACA,QAAI,CAACD,SAAL,EAAgB;AACZ,aAAO,IAAP;AACH;;AACD,UAAME,aAAa,GAAG,KAAKvB,OAAL,CAAad,aAAb,EAAtB;;AACA,WAAO,IAAIU,wBAAJ,CAA6B2B,aAAa,CAACG,KAAd,CAAoB,CAApB,EAAuBH,aAAa,CAACxG,MAAd,GAAuB,CAA9C,EAAiDyG,MAAjD,CAAwDH,SAAxD,CAA7B,EAAiGA,SAAjG,EAA4G;AAAE;AAA9G,KAAP;AACH;;AACDC,EAAAA,aAAa,GAAG;AACZ,QAAI,CAAC,KAAKtB,OAAL,CAAa7C,QAAb,EAAL,EAA8B;AAC1B,aAAO,IAAP;AACH;;AACD,QAAI,KAAKmD,YAAT,EAAuB;AACnB,YAAM/B,MAAM,GAAG,KAAK+B,YAApB;AACA,WAAKA,YAAL,GAAoB,IAApB;AACA,aAAO/B,MAAP;AACH;;AACD,SAAK0B,cAAL,CAAoB0B,oBAApB;;AACA,UAAMJ,aAAa,GAAG,KAAKvB,OAAL,CAAad,aAAb,EAAtB;;AACA,UAAM0C,kBAAkB,GAAGL,aAAa,CAACA,aAAa,CAACxG,MAAd,GAAuB,CAAxB,CAAxC;;AACA,UAAMsG,SAAS,GAAG,KAAKrB,OAAL,CAAahB,QAAb,GAAwB6C,aAAxB,CAAsC,KAAK1B,UAA3C,EAAuDyB,kBAAkB,CAACE,cAAnB,EAAvD,EAA4F,KAA5F,EAAmG,KAAKzB,SAAxG,EAAmH,KAAKD,SAAL,GAAiB,KAAKJ,OAAL,CAAa+B,SAAb,CAAuB;AAAI;AAA3B,KAAjB,GAAoE,IAAvL,EAA6L,KAA7L,CAAlB;;AACA,QAAI,CAACV,SAAL,EAAgB;AACZ,aAAO,IAAP;AACH;;AACD,WAAO,IAAI5H,SAAJ,CAAc4H,SAAS,CAACW,KAAV,CAAgBtD,eAA9B,EAA+C2C,SAAS,CAACW,KAAV,CAAgBtC,WAA/D,EAA4E2B,SAAS,CAACW,KAAV,CAAgBrD,aAA5F,EAA2G0C,SAAS,CAACW,KAAV,CAAgBjD,SAA3H,CAAP;AACH;;AACDkD,EAAAA,+BAA+B,GAAG;AAC9B,QAAI,CAAC,KAAKjC,OAAL,CAAa7C,QAAb,EAAL,EAA8B;AAC1B,aAAO,IAAP;AACH;;AACD,UAAM+E,aAAa,GAAG,KAAKC,iBAAL,EAAtB;;AACA,QAAI,CAACD,aAAL,EAAoB;AAChB,aAAO,IAAP;AACH;;AACD,UAAMX,aAAa,GAAG,KAAKvB,OAAL,CAAad,aAAb,EAAtB;;AACA,WAAO,IAAIU,wBAAJ,CAA6B2B,aAAa,CAACC,MAAd,CAAqBU,aAArB,CAA7B,EAAkEA,aAAlE,EAAiF;AAAE;AAAnF,KAAP;AACH;;AACDE,EAAAA,gCAAgC,GAAG;AAC/B,QAAI,CAAC,KAAKpC,OAAL,CAAa7C,QAAb,EAAL,EAA8B;AAC1B,aAAO,IAAP;AACH;;AACD,UAAM+E,aAAa,GAAG,KAAKC,iBAAL,EAAtB;;AACA,QAAI,CAACD,aAAL,EAAoB;AAChB,aAAO,IAAP;AACH;;AACD,UAAMX,aAAa,GAAG,KAAKvB,OAAL,CAAad,aAAb,EAAtB;;AACA,WAAO,IAAIU,wBAAJ,CAA6B2B,aAAa,CAACG,KAAd,CAAoB,CAApB,EAAuBH,aAAa,CAACxG,MAAd,GAAuB,CAA9C,EAAiDyG,MAAjD,CAAwDU,aAAxD,CAA7B,EAAqGA,aAArG,EAAoH;AAAE;AAAtH,KAAP;AACH;;AACDC,EAAAA,iBAAiB,GAAG;AAChB,QAAI,CAAC,KAAKnC,OAAL,CAAa7C,QAAb,EAAL,EAA8B;AAC1B,aAAO,IAAP;AACH;;AACD,QAAI,KAAKmD,YAAT,EAAuB;AACnB,YAAM/B,MAAM,GAAG,KAAK+B,YAApB;AACA,WAAKA,YAAL,GAAoB,IAApB;AACA,aAAO/B,MAAP;AACH;;AACD,SAAK0B,cAAL,CAAoB0B,oBAApB;;AACA,UAAMJ,aAAa,GAAG,KAAKvB,OAAL,CAAad,aAAb,EAAtB;;AACA,UAAM0C,kBAAkB,GAAGL,aAAa,CAACA,aAAa,CAACxG,MAAd,GAAuB,CAAxB,CAAxC;;AACA,UAAMmH,aAAa,GAAG,KAAKlC,OAAL,CAAahB,QAAb,GAAwBqD,iBAAxB,CAA0C,KAAKlC,UAA/C,EAA2DyB,kBAAkB,CAACX,gBAAnB,EAA3D,EAAkG,KAAlG,EAAyG,KAAKZ,SAA9G,EAAyH,KAAKD,SAAL,GAAiB,KAAKJ,OAAL,CAAa+B,SAAb,CAAuB;AAAI;AAA3B,KAAjB,GAAoE,IAA7L,EAAmM,KAAnM,CAAtB;;AACA,QAAI,CAACG,aAAL,EAAoB;AAChB,aAAO,IAAP;AACH;;AACD,WAAO,IAAIzI,SAAJ,CAAcyI,aAAa,CAACF,KAAd,CAAoBtD,eAAlC,EAAmDwD,aAAa,CAACF,KAAd,CAAoBtC,WAAvE,EAAoFwC,aAAa,CAACF,KAAd,CAAoBrD,aAAxG,EAAuHuD,aAAa,CAACF,KAAd,CAAoBjD,SAA3I,CAAP;AACH;;AACDuD,EAAAA,SAAS,GAAG;AACR,QAAI,CAAC,KAAKtC,OAAL,CAAa7C,QAAb,EAAL,EAA8B;AAC1B,aAAO,EAAP;AACH;;AACD,SAAK8C,cAAL,CAAoB0B,oBAApB;AACA,WAAO,KAAK3B,OAAL,CAAahB,QAAb,GAAwBuD,WAAxB,CAAoC,KAAKpC,UAAzC,EAAqD,IAArD,EAA2D,KAA3D,EAAkE,KAAKE,SAAvE,EAAkF,KAAKD,SAAL,GAAiB,KAAKJ,OAAL,CAAa+B,SAAb,CAAuB;AAAI;AAA3B,KAAjB,GAAoE,IAAtJ,EAA4J,KAA5J,EAAmK;AAAW;AAA9K,KAAP;AACH;;AA9I2B;AAgJhC,OAAO,MAAMS,8BAAN,SAA6CtJ,UAA7C,CAAwD;AAC3DwC,EAAAA,WAAW,CAACuB,MAAD,EAAS;AAChB;AACA,SAAKwF,eAAL,GAAuB,KAAKC,SAAL,CAAe,IAAIvJ,eAAJ,EAAf,CAAvB;AACA,SAAK6G,OAAL,GAAe/C,MAAf;AACA,SAAK0F,sBAAL,GAA8B,KAA9B;AACA,SAAKC,QAAL,GAAgB,IAAhB;AACH;;AACS,SAAHC,GAAG,CAAC5F,MAAD,EAAS;AACf,WAAOA,MAAM,CAAC6F,eAAP,CAAuBN,8BAA8B,CAACO,EAAtD,CAAP;AACH;;AACDC,EAAAA,OAAO,GAAG;AACN,SAAKC,WAAL;;AACA,UAAMD,OAAN;AACH;;AACDE,EAAAA,qBAAqB,CAACjD,cAAD,EAAiB;AAClC,QAAI,CAAC,KAAK2C,QAAV,EAAoB;AAChB;AACA,YAAMO,OAAO,GAAGpD,kBAAkB,CAACQ,MAAnB,CAA0B,KAAKP,OAA/B,EAAwCC,cAAxC,CAAhB;;AACA,UAAI,CAACkD,OAAL,EAAc;AACV;AACH;;AACD,WAAKP,QAAL,GAAgBO,OAAhB;AACA,YAAMC,QAAQ,GAAG;AAAExC,QAAAA,YAAY,EAAE,KAAKgC,QAAL,CAAczC;AAA9B,OAAjB;;AACA,UAAI,KAAKyC,QAAL,CAAc1C,gCAAlB,EAAoD;AAChDkD,QAAAA,QAAQ,CAACC,iBAAT,GAA6B;AAAE;AAA/B;AACAD,QAAAA,QAAQ,CAACE,iBAAT,GAA6B;AAAE;AAA/B;AACAF,QAAAA,QAAQ,CAACG,eAAT,GAA2B;AAAE;AAA7B;AACH;;AACDtD,MAAAA,cAAc,CAACQ,QAAf,GAA0B+C,MAA1B,CAAiCJ,QAAjC,EAA2C,KAA3C;;AACA,WAAKX,eAAL,CAAqBgB,GAArB,CAAyB,KAAKzD,OAAL,CAAa0D,0BAAb,CAAyCC,CAAD,IAAO;AACpE,YAAI,KAAKhB,sBAAT,EAAiC;AAC7B;AACH;;AACD,aAAKM,WAAL;AACH,OALwB,CAAzB;;AAMA,WAAKR,eAAL,CAAqBgB,GAArB,CAAyB,KAAKzD,OAAL,CAAa4D,mBAAb,CAAiC,MAAM;AAC5D,aAAKX,WAAL;AACH,OAFwB,CAAzB;;AAGA,WAAKR,eAAL,CAAqBgB,GAArB,CAAyBxD,cAAc,CAACQ,QAAf,GAA0BoD,wBAA1B,CAAoDF,CAAD,IAAO;AAC/E,YAAIA,CAAC,CAACtD,SAAF,IAAesD,CAAC,CAACvD,SAArB,EAAgC;AAC5B,eAAK6C,WAAL;AACH;AACJ,OAJwB,CAAzB;AAKH;AACJ;;AACDA,EAAAA,WAAW,GAAG;AACV,SAAKR,eAAL,CAAqBqB,KAArB;;AACA,QAAI,KAAKlB,QAAL,IAAiB,KAAKA,QAAL,CAAc1C,gCAAnC,EAAqE;AACjE,YAAMkD,QAAQ,GAAG;AACbC,QAAAA,iBAAiB,EAAE;AAAE;AADR;AAEbC,QAAAA,iBAAiB,EAAE;AAAE;AAFR;AAGbC,QAAAA,eAAe,EAAE;AAAE;;AAHN,OAAjB;;AAKA,WAAKX,QAAL,CAAc3C,cAAd,CAA6BQ,QAA7B,GAAwC+C,MAAxC,CAA+CJ,QAA/C,EAAyD,KAAzD;AACH;;AACD,SAAKR,QAAL,GAAgB,IAAhB;AACH;;AACDmB,EAAAA,cAAc,CAAC9E,UAAD,EAAa;AACvB,SAAK0D,sBAAL,GAA8B,IAA9B;;AACA,SAAK3C,OAAL,CAAaV,aAAb,CAA2BL,UAA3B;;AACA,SAAK0D,sBAAL,GAA8B,KAA9B;AACH;;AACDqB,EAAAA,kBAAkB,CAAC1F,KAAD,EAAQD,SAAR,EAAmB;AACjC,QAAI,CAACA,SAAS,CAACG,OAAV,EAAL,EAA0B;AACtB,aAAOH,SAAP;AACH;;AACD,UAAM0C,IAAI,GAAG,KAAKf,OAAL,CAAagB,2BAAb,CAAyC3C,SAAS,CAAC4C,gBAAV,EAAzC,CAAb;;AACA,QAAI,CAACF,IAAL,EAAW;AACP,aAAO1C,SAAP;AACH;;AACD,WAAO,IAAI5E,SAAJ,CAAc4E,SAAS,CAACK,eAAxB,EAAyCqC,IAAI,CAACrB,WAA9C,EAA2DrB,SAAS,CAACK,eAArE,EAAsFqC,IAAI,CAAChC,SAA3F,CAAP;AACH;;AACDkF,EAAAA,mBAAmB,CAAC1F,MAAD,EAAS;AACxB,QAAI,CAACA,MAAL,EAAa;AACT;AACH;;AACD,SAAKwF,cAAL,CAAoBxF,MAAM,CAACU,UAA3B;;AACA,QAAIV,MAAM,CAACsB,WAAX,EAAwB;AACpB,WAAKG,OAAL,CAAakE,oCAAb,CAAkD3F,MAAM,CAACsB,WAAzD,EAAsEtB,MAAM,CAACuB,gBAA7E;AACH;AACJ;;AACDqE,EAAAA,UAAU,CAAClE,cAAD,EAAiB;AACvB,WAAO,KAAK2C,QAAZ;AACH;;AACDxB,EAAAA,2BAA2B,CAACnB,cAAD,EAAiB;AACxC,QAAI,CAAC,KAAKD,OAAL,CAAa7C,QAAb,EAAL,EAA8B;AAC1B;AACH;;AACD,QAAI,CAAC,KAAKyF,QAAV,EAAoB;AAChB;AACA,YAAMrB,aAAa,GAAG,KAAKvB,OAAL,CAAad,aAAb,EAAtB;;AACA,UAAIqC,aAAa,CAACxG,MAAd,GAAuB,CAA3B,EAA8B;AAC1B,cAAMyF,SAAS,GAAGP,cAAc,CAACQ,QAAf,EAAlB;AACA,cAAMJ,SAAS,GAAGG,SAAS,CAACH,SAA5B;AACA,cAAM+D,yBAAyB,GAAGC,0BAA0B,CAAC,KAAKrE,OAAL,CAAahB,QAAb,EAAD,EAA0BuC,aAA1B,EAAyClB,SAAzC,CAA5D;;AACA,YAAI,CAAC+D,yBAAL,EAAgC;AAC5B,gBAAM9F,KAAK,GAAG,KAAK0B,OAAL,CAAahB,QAAb,EAAd;;AACA,cAAIsF,mBAAmB,GAAG,EAA1B;;AACA,eAAK,IAAI7F,CAAC,GAAG,CAAR,EAAW8F,GAAG,GAAGhD,aAAa,CAACxG,MAApC,EAA4C0D,CAAC,GAAG8F,GAAhD,EAAqD9F,CAAC,EAAtD,EAA0D;AACtD6F,YAAAA,mBAAmB,CAAC7F,CAAD,CAAnB,GAAyB,KAAKuF,kBAAL,CAAwB1F,KAAxB,EAA+BiD,aAAa,CAAC9C,CAAD,CAA5C,CAAzB;AACH;;AACD,eAAKuB,OAAL,CAAaV,aAAb,CAA2BgF,mBAA3B;;AACA;AACH;AACJ;AACJ;;AACD,SAAKpB,qBAAL,CAA2BjD,cAA3B;;AACA,QAAI,KAAK2C,QAAT,EAAmB;AACf,WAAKqB,mBAAL,CAAyB,KAAKrB,QAAL,CAAcxB,2BAAd,EAAzB;AACH;AACJ;;AACDa,EAAAA,+BAA+B,CAAChC,cAAD,EAAiB;AAC5C,SAAKiD,qBAAL,CAA2BjD,cAA3B;;AACA,QAAI,KAAK2C,QAAT,EAAmB;AACf,WAAKqB,mBAAL,CAAyB,KAAKrB,QAAL,CAAcX,+BAAd,EAAzB;AACH;AACJ;;AACDR,EAAAA,4BAA4B,CAACxB,cAAD,EAAiB;AACzC,SAAKiD,qBAAL,CAA2BjD,cAA3B;;AACA,QAAI,KAAK2C,QAAT,EAAmB;AACf,WAAKqB,mBAAL,CAAyB,KAAKrB,QAAL,CAAcnB,4BAAd,EAAzB;AACH;AACJ;;AACDW,EAAAA,gCAAgC,CAACnC,cAAD,EAAiB;AAC7C,SAAKiD,qBAAL,CAA2BjD,cAA3B;;AACA,QAAI,KAAK2C,QAAT,EAAmB;AACf,WAAKqB,mBAAL,CAAyB,KAAKrB,QAAL,CAAcR,gCAAd,EAAzB;AACH;AACJ;;AACDE,EAAAA,SAAS,CAACrC,cAAD,EAAiB;AACtB,QAAI,CAAC,KAAKD,OAAL,CAAa7C,QAAb,EAAL,EAA8B;AAC1B;AACH;;AACD,QAAIqH,OAAO,GAAG,IAAd;AACA,UAAMhE,SAAS,GAAGP,cAAc,CAACQ,QAAf,EAAlB,CALsB,CAMtB;AACA;AACA;AACA;AACA;;AACA,QAAID,SAAS,CAACG,UAAV,IAAwBH,SAAS,CAACI,YAAV,CAAuB7F,MAAvB,GAAgC,CAAxD,IAA6DyF,SAAS,CAACiE,OAA3E,EAAoF;AAChFD,MAAAA,OAAO,GAAG,KAAKxE,OAAL,CAAahB,QAAb,GAAwBuD,WAAxB,CAAoC/B,SAAS,CAACI,YAA9C,EAA4D,IAA5D,EAAkEJ,SAAS,CAACiE,OAA5E,EAAqFjE,SAAS,CAACH,SAA/F,EAA0GG,SAAS,CAACJ,SAAV,GAAsB,KAAKJ,OAAL,CAAa+B,SAAb,CAAuB;AAAI;AAA3B,OAAtB,GAAyE,IAAnL,EAAyL,KAAzL,EAAgM;AAAW;AAA3M,OAAV;AACH,KAFD,MAGK;AACD,WAAKmB,qBAAL,CAA2BjD,cAA3B;;AACA,UAAI,CAAC,KAAK2C,QAAV,EAAoB;AAChB;AACH;;AACD4B,MAAAA,OAAO,GAAG,KAAK5B,QAAL,CAAcN,SAAd,EAAV;AACH;;AACD,QAAI9B,SAAS,CAACkE,WAAd,EAA2B;AACvB,YAAMC,MAAM,GAAGnE,SAAS,CAACkE,WAAzB;AACA,UAAIE,WAAW,GAAG,EAAlB;AACAJ,MAAAA,OAAO,CAACpF,OAAR,CAAiByF,KAAD,IAAW;AACvBF,QAAAA,MAAM,CAACvF,OAAP,CAAgB0F,KAAD,IAAW;AACtB,cAAID,KAAK,CAAC7C,KAAN,CAAYrD,aAAZ,IAA6BmG,KAAK,CAACnG,aAAnC,IAAoDkG,KAAK,CAAC7C,KAAN,CAAYtD,eAAZ,IAA+BoG,KAAK,CAACpG,eAA7F,EAA8G;AAC1GkG,YAAAA,WAAW,CAAC9F,IAAZ,CAAiB+F,KAAjB;AACH;AACJ,SAJD;AAKH,OAND;AAOAL,MAAAA,OAAO,GAAGI,WAAV;AACH;;AACD,QAAIJ,OAAO,CAACzJ,MAAR,GAAiB,CAArB,EAAwB;AACpB,YAAMgK,eAAe,GAAG,KAAK/E,OAAL,CAAac,YAAb,EAAxB,CADoB,CAEpB;;;AACA,WAAK,IAAIrC,CAAC,GAAG,CAAR,EAAW8F,GAAG,GAAGC,OAAO,CAACzJ,MAA9B,EAAsC0D,CAAC,GAAG8F,GAA1C,EAA+C9F,CAAC,EAAhD,EAAoD;AAChD,cAAMoG,KAAK,GAAGL,OAAO,CAAC/F,CAAD,CAArB;AACA,cAAMuG,YAAY,GAAGH,KAAK,CAAC7C,KAAN,CAAYiD,eAAZ,CAA4BF,eAA5B,CAArB;;AACA,YAAIC,YAAJ,EAAkB;AACd;AACAR,UAAAA,OAAO,CAAC/F,CAAD,CAAP,GAAa+F,OAAO,CAAC,CAAD,CAApB;AACAA,UAAAA,OAAO,CAAC,CAAD,CAAP,GAAaK,KAAb;AACA;AACH;AACJ;;AACD,WAAKd,cAAL,CAAoBS,OAAO,CAACvJ,GAAR,CAAYiK,CAAC,IAAI,IAAIzL,SAAJ,CAAcyL,CAAC,CAAClD,KAAF,CAAQtD,eAAtB,EAAuCwG,CAAC,CAAClD,KAAF,CAAQtC,WAA/C,EAA4DwF,CAAC,CAAClD,KAAF,CAAQrD,aAApE,EAAmFuG,CAAC,CAAClD,KAAF,CAAQjD,SAA3F,CAAjB,CAApB;AACH;AACJ;;AAlL0D;AAoL/DyD,8BAA8B,CAACO,EAA/B,GAAoC,sCAApC;AACA,OAAO,MAAMoC,oCAAN,SAAmD/L,YAAnD,CAAgE;AACnE2D,EAAAA,GAAG,CAACC,QAAD,EAAWC,MAAX,EAAmB;AAClB,UAAMmI,qBAAqB,GAAG5C,8BAA8B,CAACK,GAA/B,CAAmC5F,MAAnC,CAA9B;;AACA,QAAI,CAACmI,qBAAL,EAA4B;AACxB;AACH;;AACD,UAAMnF,cAAc,GAAGlG,oBAAoB,CAAC8I,GAArB,CAAyB5F,MAAzB,CAAvB;;AACA,QAAI,CAACgD,cAAL,EAAqB;AACjB;AACH;;AACD,UAAM3C,SAAS,GAAGL,MAAM,CAACM,aAAP,EAAlB;;AACA,QAAID,SAAJ,EAAe;AACX,YAAM/C,mBAAmB,GAAG+C,SAAS,CAACK,eAAV,EAA5B;;AACA,WAAK0H,IAAL,CAAUD,qBAAV,EAAiCnF,cAAjC;;AACA3F,MAAAA,oBAAoB,CAACC,mBAAD,EAAsB+C,SAAS,CAACK,eAAV,EAAtB,CAApB;AACH;AACJ;;AAhBkE;AAkBvE,OAAO,MAAM2H,iCAAN,SAAgDH,oCAAhD,CAAqF;AACxFzJ,EAAAA,WAAW,GAAG;AACV,UAAM;AACFC,MAAAA,EAAE,EAAE,2CADF;AAEFC,MAAAA,KAAK,EAAE5B,GAAG,CAACwB,QAAJ,CAAa,6BAAb,EAA4C,kCAA5C,CAFL;AAGFK,MAAAA,KAAK,EAAE,kCAHL;AAIFC,MAAAA,YAAY,EAAEC,SAJZ;AAKFC,MAAAA,MAAM,EAAE;AACJC,QAAAA,MAAM,EAAEvC,iBAAiB,CAAC6L,KADtB;AAEJpJ,QAAAA,OAAO,EAAE;AAAK;AAAL,UAAqB;AAAG;AAF7B;AAGJG,QAAAA,MAAM,EAAE;AAAI;;AAHR,OALN;AAUFC,MAAAA,QAAQ,EAAE;AACNC,QAAAA,MAAM,EAAEvC,MAAM,CAACwC,oBADT;AAENC,QAAAA,KAAK,EAAE,SAFD;AAGNC,QAAAA,KAAK,EAAE3C,GAAG,CAACwB,QAAJ,CAAa;AAAEoB,UAAAA,GAAG,EAAE,+BAAP;AAAwCC,UAAAA,OAAO,EAAE,CAAC,uBAAD;AAAjD,SAAb,EAA2F,uBAA3F,CAHD;AAINC,QAAAA,KAAK,EAAE;AAJD;AAVR,KAAN;AAiBH;;AACDuI,EAAAA,IAAI,CAACD,qBAAD,EAAwBnF,cAAxB,EAAwC;AACxCmF,IAAAA,qBAAqB,CAAChE,2BAAtB,CAAkDnB,cAAlD;AACH;;AAtBuF;AAwB5F,OAAO,MAAMuF,qCAAN,SAAoDL,oCAApD,CAAyF;AAC5FzJ,EAAAA,WAAW,GAAG;AACV,UAAM;AACFC,MAAAA,EAAE,EAAE,+CADF;AAEFC,MAAAA,KAAK,EAAE5B,GAAG,CAACwB,QAAJ,CAAa,iCAAb,EAAgD,sCAAhD,CAFL;AAGFK,MAAAA,KAAK,EAAE,sCAHL;AAIFC,MAAAA,YAAY,EAAEC,SAJZ;AAKFQ,MAAAA,QAAQ,EAAE;AACNC,QAAAA,MAAM,EAAEvC,MAAM,CAACwC,oBADT;AAENC,QAAAA,KAAK,EAAE,SAFD;AAGNC,QAAAA,KAAK,EAAE3C,GAAG,CAACwB,QAAJ,CAAa;AAAEoB,UAAAA,GAAG,EAAE,mCAAP;AAA4CC,UAAAA,OAAO,EAAE,CAAC,uBAAD;AAArD,SAAb,EAA+F,2BAA/F,CAHD;AAINC,QAAAA,KAAK,EAAE;AAJD;AALR,KAAN;AAYH;;AACDuI,EAAAA,IAAI,CAACD,qBAAD,EAAwBnF,cAAxB,EAAwC;AACxCmF,IAAAA,qBAAqB,CAACnD,+BAAtB,CAAsDhC,cAAtD;AACH;;AAjB2F;AAmBhG,OAAO,MAAMwF,kCAAN,SAAiDN,oCAAjD,CAAsF;AACzFzJ,EAAAA,WAAW,GAAG;AACV,UAAM;AACFC,MAAAA,EAAE,EAAE,4CADF;AAEFC,MAAAA,KAAK,EAAE5B,GAAG,CAACwB,QAAJ,CAAa,8BAAb,EAA6C,wCAA7C,CAFL;AAGFK,MAAAA,KAAK,EAAE,wCAHL;AAIFC,MAAAA,YAAY,EAAEC,SAJZ;AAKFC,MAAAA,MAAM,EAAE;AACJC,QAAAA,MAAM,EAAEvC,iBAAiB,CAAC6L,KADtB;AAEJpJ,QAAAA,OAAO,EAAElD,QAAQ,CAAC;AAAK;AAAL,UAAqB;AAAG;AAAzB,UAAqC;AAAK;AAAL,UAAqB;AAAG;AAA7D,SAFb;AAGJqD,QAAAA,MAAM,EAAE;AAAI;;AAHR;AALN,KAAN;AAWH;;AACD+I,EAAAA,IAAI,CAACD,qBAAD,EAAwBnF,cAAxB,EAAwC;AACxCmF,IAAAA,qBAAqB,CAAC3D,4BAAtB,CAAmDxB,cAAnD;AACH;;AAhBwF;AAkB7F,OAAO,MAAMyF,sCAAN,SAAqDP,oCAArD,CAA0F;AAC7FzJ,EAAAA,WAAW,GAAG;AACV,UAAM;AACFC,MAAAA,EAAE,EAAE,gDADF;AAEFC,MAAAA,KAAK,EAAE5B,GAAG,CAACwB,QAAJ,CAAa,kCAAb,EAAiD,4CAAjD,CAFL;AAGFK,MAAAA,KAAK,EAAE,4CAHL;AAIFC,MAAAA,YAAY,EAAEC;AAJZ,KAAN;AAMH;;AACDsJ,EAAAA,IAAI,CAACD,qBAAD,EAAwBnF,cAAxB,EAAwC;AACxCmF,IAAAA,qBAAqB,CAAChD,gCAAtB,CAAuDnC,cAAvD;AACH;;AAX4F;AAajG,OAAO,MAAM0F,sBAAN,SAAqCR,oCAArC,CAA0E;AAC7EzJ,EAAAA,WAAW,GAAG;AACV,UAAM;AACFC,MAAAA,EAAE,EAAE,gCADF;AAEFC,MAAAA,KAAK,EAAE5B,GAAG,CAACwB,QAAJ,CAAa,iCAAb,EAAgD,sCAAhD,CAFL;AAGFK,MAAAA,KAAK,EAAE,sCAHL;AAIFC,MAAAA,YAAY,EAAEC,SAJZ;AAKFC,MAAAA,MAAM,EAAE;AACJC,QAAAA,MAAM,EAAEvC,iBAAiB,CAAC6L,KADtB;AAEJpJ,QAAAA,OAAO,EAAE;AAAK;AAAL,UAAqB;AAAK;AAA1B,UAAwC;AAAG;AAFhD;AAGJG,QAAAA,MAAM,EAAE;AAAI;;AAHR,OALN;AAUFC,MAAAA,QAAQ,EAAE;AACNC,QAAAA,MAAM,EAAEvC,MAAM,CAACwC,oBADT;AAENC,QAAAA,KAAK,EAAE,SAFD;AAGNC,QAAAA,KAAK,EAAE3C,GAAG,CAACwB,QAAJ,CAAa;AAAEoB,UAAAA,GAAG,EAAE,oBAAP;AAA6BC,UAAAA,OAAO,EAAE,CAAC,uBAAD;AAAtC,SAAb,EAAgF,0BAAhF,CAHD;AAINC,QAAAA,KAAK,EAAE;AAJD;AAVR,KAAN;AAiBH;;AACDuI,EAAAA,IAAI,CAACD,qBAAD,EAAwBnF,cAAxB,EAAwC;AACxCmF,IAAAA,qBAAqB,CAAC9C,SAAtB,CAAgCrC,cAAhC;AACH;;AAtB4E;AAwBjF,OAAO,MAAM2F,eAAN,SAA8BT,oCAA9B,CAAmE;AACtEzJ,EAAAA,WAAW,GAAG;AACV,UAAM;AACFC,MAAAA,EAAE,EAAE,yBADF;AAEFC,MAAAA,KAAK,EAAE5B,GAAG,CAACwB,QAAJ,CAAa,iBAAb,EAAgC,wBAAhC,CAFL;AAGFK,MAAAA,KAAK,EAAE,wBAHL;AAIFC,MAAAA,YAAY,EAAE5B,cAAc,CAAC2L,GAAf,CAAmBnM,iBAAiB,CAACoM,QAArC,EAA+CpM,iBAAiB,CAACwC,eAAjE,CAJZ;AAKFF,MAAAA,MAAM,EAAE;AACJC,QAAAA,MAAM,EAAEvC,iBAAiB,CAACwC,eADtB;AAEJC,QAAAA,OAAO,EAAE;AAAK;AAAL,UAAqB;AAAG;AAF7B;AAGJG,QAAAA,MAAM,EAAE;AAAI;;AAHR,OALN;AAUFyJ,MAAAA,eAAe,EAAE;AACbrJ,QAAAA,KAAK,EAAE,gBADM;AAEbI,QAAAA,KAAK,EAAE;AAFM;AAVf,KAAN;AAeH;;AACDuI,EAAAA,IAAI,CAACD,qBAAD,EAAwBnF,cAAxB,EAAwC;AACxCmF,IAAAA,qBAAqB,CAAC9C,SAAtB,CAAgCrC,cAAhC;AACH;;AApBqE;;AAsB1E,MAAM+F,yBAAN,CAAgC;AAC5BtK,EAAAA,WAAW,CAACyE,UAAD,EAAaE,SAAb,EAAwB4F,cAAxB,EAAwCC,cAAxC,EAAwD;AAC/D,SAAK/F,UAAL,GAAkBA,UAAlB;AACA,SAAKE,SAAL,GAAiBA,SAAjB;AACA,SAAK4F,cAAL,GAAsBA,cAAtB;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACH;AACD;AACJ;AACA;;;AACqB,SAAVC,UAAU,CAACC,CAAD,EAAIC,CAAJ,EAAO;AACpB,QAAI,CAACD,CAAD,IAAM,CAACC,CAAX,EAAc;AACV,aAAO,IAAP;AACH;;AACD,QAAI,CAACD,CAAD,IAAM,CAACC,CAAX,EAAc;AACV,aAAO,KAAP;AACH;;AACD,WAAQD,CAAC,CAACjG,UAAF,KAAiBkG,CAAC,CAAClG,UAAnB,IACDiG,CAAC,CAAC/F,SAAF,KAAgBgG,CAAC,CAAChG,SADjB,IAED+F,CAAC,CAACH,cAAF,KAAqBI,CAAC,CAACJ,cAFtB,IAGDG,CAAC,CAACF,cAAF,KAAqBG,CAAC,CAACH,cAH9B;AAIH;;AArB2B;;AAuBhC,OAAO,MAAMI,oBAAN,SAAmCpN,UAAnC,CAA8C;AACjDwC,EAAAA,WAAW,CAACuB,MAAD,EAAS;AAChB;AACA,SAAKA,MAAL,GAAcA,MAAd;AACA,SAAKsJ,UAAL,GAAkBtJ,MAAM,CAAC8E,SAAP,CAAiB;AAAG;AAApB,KAAlB;AACA,SAAKyE,WAAL,GAAmB,EAAnB;AACA,SAAKC,UAAL,GAAkB,KAAK/D,SAAL,CAAe,IAAI1J,gBAAJ,CAAqB,MAAM,KAAK0N,OAAL,EAA3B,EAA2C,GAA3C,CAAf,CAAlB;AACA,SAAK5B,KAAL,GAAa,IAAb;;AACA,SAAKpC,SAAL,CAAezF,MAAM,CAAC0J,wBAAP,CAAiChD,CAAD,IAAO;AAClD,WAAK4C,UAAL,GAAkBtJ,MAAM,CAAC8E,SAAP,CAAiB;AAAG;AAApB,OAAlB;AACH,KAFc,CAAf;;AAGA,SAAKW,SAAL,CAAezF,MAAM,CAACyG,0BAAP,CAAmCC,CAAD,IAAO;AACpD,UAAI,CAAC,KAAK4C,UAAV,EAAsB;AAClB;AACA;AACA;AACH;;AACD,UAAI5C,CAAC,CAACtF,SAAF,CAAYG,OAAZ,EAAJ,EAA2B;AACvB,YAAImF,CAAC,CAACiD,MAAF,KAAa;AAAE;AAAnB,UAAmC;AAC/B,cAAI,KAAK9B,KAAT,EAAgB;AACZ;AACA,iBAAK+B,SAAL,CAAe,IAAf;AACH;;AACD,eAAKJ,UAAL,CAAgBK,QAAhB;AACH,SAND,MAOK;AACD,eAAKD,SAAL,CAAe,IAAf;AACH;AACJ,OAXD,MAYK;AACD,aAAKH,OAAL;AACH;AACJ,KArBc,CAAf;;AAsBA,SAAKhE,SAAL,CAAezF,MAAM,CAAC8J,gBAAP,CAAyBpD,CAAD,IAAO;AAC1C,WAAKkD,SAAL,CAAe,IAAf;AACH,KAFc,CAAf;;AAGA,SAAKnE,SAAL,CAAezF,MAAM,CAAC+J,uBAAP,CAAgCrD,CAAD,IAAO;AACjD,UAAI,KAAK4C,UAAT,EAAqB;AACjB,aAAKE,UAAL,CAAgBK,QAAhB;AACH;AACJ,KAJc,CAAf;;AAKA,SAAKpE,SAAL,CAAe3I,oBAAoB,CAAC8I,GAArB,CAAyB5F,MAAzB,EAAiCwD,QAAjC,GAA4CoD,wBAA5C,CAAsEF,CAAD,IAAO;AACvF,WAAK+C,OAAL;AACH,KAFc,CAAf;AAGH;;AACDA,EAAAA,OAAO,GAAG;AACN,SAAKG,SAAL,CAAeP,oBAAoB,CAACW,YAArB,CAAkC,KAAKV,UAAvC,EAAmD,KAAKtJ,MAAxD,CAAf;AACH;;AACkB,SAAZgK,YAAY,CAACC,SAAD,EAAYjK,MAAZ,EAAoB;AACnC,QAAI,CAACiK,SAAL,EAAgB;AACZ,aAAO,IAAP;AACH;;AACD,QAAI,CAACjK,MAAM,CAACE,QAAP,EAAL,EAAwB;AACpB,aAAO,IAAP;AACH;;AACD,UAAM0D,CAAC,GAAG5D,MAAM,CAAC6D,YAAP,EAAV;;AACA,QAAID,CAAC,CAACnC,eAAF,KAAsBmC,CAAC,CAAClC,aAA5B,EAA2C;AACvC;AACA,aAAO,IAAP;AACH;;AACD,UAAMyG,qBAAqB,GAAG5C,8BAA8B,CAACK,GAA/B,CAAmC5F,MAAnC,CAA9B;;AACA,QAAI,CAACmI,qBAAL,EAA4B;AACxB,aAAO,IAAP;AACH;;AACD,UAAMnF,cAAc,GAAGlG,oBAAoB,CAAC8I,GAArB,CAAyB5F,MAAzB,CAAvB;;AACA,QAAI,CAACgD,cAAL,EAAqB;AACjB,aAAO,IAAP;AACH;;AACD,QAAIkH,CAAC,GAAG/B,qBAAqB,CAACjB,UAAtB,CAAiClE,cAAjC,CAAR;;AACA,QAAI,CAACkH,CAAL,EAAQ;AACJ,YAAM5F,aAAa,GAAGtE,MAAM,CAACiC,aAAP,EAAtB;;AACA,UAAIqC,aAAa,CAACxG,MAAd,GAAuB,CAA3B,EAA8B;AAC1B,cAAMyF,SAAS,GAAGP,cAAc,CAACQ,QAAf,EAAlB;AACA,cAAMJ,SAAS,GAAGG,SAAS,CAACH,SAA5B;AACA,cAAM+D,yBAAyB,GAAGC,0BAA0B,CAACpH,MAAM,CAAC+B,QAAP,EAAD,EAAoBuC,aAApB,EAAmClB,SAAnC,CAA5D;;AACA,YAAI,CAAC+D,yBAAL,EAAgC;AAC5B,iBAAO,IAAP;AACH;AACJ;;AACD+C,MAAAA,CAAC,GAAGpH,kBAAkB,CAACQ,MAAnB,CAA0BtD,MAA1B,EAAkCgD,cAAlC,CAAJ;AACH;;AACD,QAAI,CAACkH,CAAL,EAAQ;AACJ,aAAO,IAAP;AACH;;AACD,QAAIA,CAAC,CAAC7G,YAAN,EAAoB;AAChB;AACA;AACA,aAAO,IAAP;AACH;;AACD,QAAI,WAAW8G,IAAX,CAAgBD,CAAC,CAAChH,UAAlB,CAAJ,EAAmC;AAC/B;AACA,aAAO,IAAP;AACH;;AACD,QAAIgH,CAAC,CAAChH,UAAF,CAAapF,MAAb,GAAsB,GAA1B,EAA+B;AAC3B;AACA,aAAO,IAAP;AACH,KAhDkC,CAiDnC;;;AACA,UAAMyF,SAAS,GAAGP,cAAc,CAACQ,QAAf,EAAlB;AACA,UAAM4G,aAAa,GAAG7G,SAAS,CAACH,SAAhC,CAnDmC,CAoDnC;;AACA,QAAIG,SAAS,CAACG,UAAd,EAA0B;AACtB,UAAI2G,qBAAqB,GAAG9G,SAAS,CAACI,YAAtC;;AACA,UAAI,CAACyG,aAAL,EAAoB;AAChBC,QAAAA,qBAAqB,GAAGA,qBAAqB,CAACC,WAAtB,EAAxB;AACH;;AACD,UAAIC,cAAc,GAAGL,CAAC,CAAChH,UAAvB;;AACA,UAAI,CAACkH,aAAL,EAAoB;AAChBG,QAAAA,cAAc,GAAGA,cAAc,CAACD,WAAf,EAAjB;AACH;;AACD,UAAID,qBAAqB,KAAKE,cAA1B,IAA4CL,CAAC,CAAC9G,SAAF,KAAgBG,SAAS,CAACH,SAAtE,IAAmF8G,CAAC,CAAC/G,SAAF,KAAgBI,SAAS,CAACJ,SAA7G,IAA0H,CAACI,SAAS,CAACiE,OAAzI,EAAkJ;AAC9I,eAAO,IAAP;AACH;AACJ;;AACD,WAAO,IAAIuB,yBAAJ,CAA8BmB,CAAC,CAAChH,UAAhC,EAA4CgH,CAAC,CAAC9G,SAA9C,EAAyD8G,CAAC,CAAC/G,SAAF,GAAcnD,MAAM,CAAC8E,SAAP,CAAiB;AAAI;AAArB,KAAd,GAA2D,IAApH,EAA0H9E,MAAM,CAAC+B,QAAP,GAAkByI,YAAlB,EAA1H,CAAP;AACH;;AACDZ,EAAAA,SAAS,CAAC/B,KAAD,EAAQ;AACb,QAAIkB,yBAAyB,CAACG,UAA1B,CAAqC,KAAKrB,KAA1C,EAAiDA,KAAjD,CAAJ,EAA6D;AACzD,WAAKA,KAAL,GAAaA,KAAb;AACA;AACH;;AACD,SAAKA,KAAL,GAAaA,KAAb;;AACA,QAAI,CAAC,KAAKA,KAAV,EAAiB;AACb,WAAK0B,WAAL,GAAmB,KAAKvJ,MAAL,CAAYyK,gBAAZ,CAA6B,KAAKlB,WAAlC,EAA+C,EAA/C,CAAnB;AACA;AACH;;AACD,QAAI,CAAC,KAAKvJ,MAAL,CAAYE,QAAZ,EAAL,EAA6B;AACzB;AACH;;AACD,UAAMmB,KAAK,GAAG,KAAKrB,MAAL,CAAY+B,QAAZ,EAAd;;AACA,QAAIV,KAAK,CAACqJ,yBAAN,EAAJ,EAAuC;AACnC;AACA;AACH;;AACD,UAAMC,kBAAkB,GAAG9N,iCAAiC,CAAC+N,GAAlC,CAAsCvJ,KAAtC,KAAgD,KAAKrB,MAAL,CAAY8E,SAAZ,CAAsB;AAAG;AAAzB,KAA3E;AACA,QAAI+F,UAAU,GAAGxJ,KAAK,CAACiE,WAAN,CAAkB,KAAKuC,KAAL,CAAW3E,UAA7B,EAAyC,IAAzC,EAA+C,KAA/C,EAAsD,KAAK2E,KAAL,CAAWzE,SAAjE,EAA4E,KAAKyE,KAAL,CAAWmB,cAAvF,EAAuG,KAAvG,EAA8GhL,GAA9G,CAAkHiK,CAAC,IAAIA,CAAC,CAAClD,KAAzH,CAAjB;AACA8F,IAAAA,UAAU,CAACC,IAAX,CAAgBvO,KAAK,CAACwO,wBAAtB;AACA,QAAI/I,UAAU,GAAG,KAAKhC,MAAL,CAAYiC,aAAZ,EAAjB;AACAD,IAAAA,UAAU,CAAC8I,IAAX,CAAgBvO,KAAK,CAACwO,wBAAtB,EAtBa,CAuBb;;AACA,QAAIxD,OAAO,GAAG,EAAd;;AACA,SAAK,IAAI/F,CAAC,GAAG,CAAR,EAAWwJ,CAAC,GAAG,CAAf,EAAkB1D,GAAG,GAAGuD,UAAU,CAAC/M,MAAnC,EAA2CmN,IAAI,GAAGjJ,UAAU,CAAClE,MAAlE,EAA0E0D,CAAC,GAAG8F,GAA9E,GAAoF;AAChF,YAAMM,KAAK,GAAGiD,UAAU,CAACrJ,CAAD,CAAxB;;AACA,UAAIwJ,CAAC,IAAIC,IAAT,EAAe;AACX;AACA1D,QAAAA,OAAO,CAAC1F,IAAR,CAAa+F,KAAb;AACApG,QAAAA,CAAC;AACJ,OAJD,MAKK;AACD,cAAM0J,GAAG,GAAG3O,KAAK,CAACwO,wBAAN,CAA+BnD,KAA/B,EAAsC5F,UAAU,CAACgJ,CAAD,CAAhD,CAAZ;;AACA,YAAIE,GAAG,GAAG,CAAV,EAAa;AACT;AACA,cAAIlJ,UAAU,CAACgJ,CAAD,CAAV,CAAczJ,OAAd,MAA2B,CAAChF,KAAK,CAAC4O,eAAN,CAAsBvD,KAAtB,EAA6B5F,UAAU,CAACgJ,CAAD,CAAvC,CAAhC,EAA6E;AACzEzD,YAAAA,OAAO,CAAC1F,IAAR,CAAa+F,KAAb;AACH;;AACDpG,UAAAA,CAAC;AACJ,SAND,MAOK,IAAI0J,GAAG,GAAG,CAAV,EAAa;AACd;AACAF,UAAAA,CAAC;AACJ,SAHI,MAIA;AACD;AACAxJ,UAAAA,CAAC;AACDwJ,UAAAA,CAAC;AACJ;AACJ;AACJ;;AACD,UAAMzB,WAAW,GAAGhC,OAAO,CAACvJ,GAAR,CAAYkM,CAAC,IAAI;AACjC,aAAO;AACHnF,QAAAA,KAAK,EAAEmF,CADJ;AAEH;AACAkB,QAAAA,OAAO,EAAGT,kBAAkB,GAAGtB,oBAAoB,CAACgC,oBAAxB,GAA+ChC,oBAAoB,CAACiC;AAH7F,OAAP;AAKH,KANmB,CAApB;AAOA,SAAK/B,WAAL,GAAmB,KAAKvJ,MAAL,CAAYyK,gBAAZ,CAA6B,KAAKlB,WAAlC,EAA+CA,WAA/C,CAAnB;AACH;;AACDxD,EAAAA,OAAO,GAAG;AACN,SAAK6D,SAAL,CAAe,IAAf;;AACA,UAAM7D,OAAN;AACH;;AApLgD;AAsLrDsD,oBAAoB,CAACvD,EAArB,GAA0B,qCAA1B;AACAuD,oBAAoB,CAACiC,6BAArB,GAAqD1O,sBAAsB,CAAC2O,QAAvB,CAAgC;AACjFC,EAAAA,WAAW,EAAE,8BADoE;AAEjFC,EAAAA,UAAU,EAAE;AAAE;AAFmE;AAGjFC,EAAAA,SAAS,EAAE,oBAHsE;AAIjFC,EAAAA,OAAO,EAAE;AACLC,IAAAA,KAAK,EAAExO,gBAAgB,CAACD,mCAAD,CADlB;AAELe,IAAAA,QAAQ,EAAEvB,eAAe,CAACkP;AAFrB,GAJwE;AAQjFC,EAAAA,aAAa,EAAE;AACXF,IAAAA,KAAK,EAAExO,gBAAgB,CAACF,yCAAD,CADZ;AAEXgB,IAAAA,QAAQ,EAAExB,iBAAiB,CAACqP;AAFjB;AARkE,CAAhC,CAArD;AAaA1C,oBAAoB,CAACgC,oBAArB,GAA4CzO,sBAAsB,CAAC2O,QAAvB,CAAgC;AACxEC,EAAAA,WAAW,EAAE,qBAD2D;AAExEC,EAAAA,UAAU,EAAE;AAAE;AAF0D;AAGxEC,EAAAA,SAAS,EAAE;AAH6D,CAAhC,CAA5C;;AAKA,SAAStE,0BAAT,CAAoC/F,KAApC,EAA2C2K,MAA3C,EAAmD5I,SAAnD,EAA8D;AAC1D,QAAM6I,YAAY,GAAGhI,eAAe,CAAC5C,KAAD,EAAQ2K,MAAM,CAAC,CAAD,CAAd,EAAmB,CAAC5I,SAApB,CAApC;;AACA,OAAK,IAAI5B,CAAC,GAAG,CAAR,EAAW8F,GAAG,GAAG0E,MAAM,CAAClO,MAA7B,EAAqC0D,CAAC,GAAG8F,GAAzC,EAA8C9F,CAAC,EAA/C,EAAmD;AAC/C,UAAMuD,KAAK,GAAGiH,MAAM,CAACxK,CAAD,CAApB;;AACA,QAAIuD,KAAK,CAACxD,OAAN,EAAJ,EAAqB;AACjB,aAAO,KAAP;AACH;;AACD,UAAM2K,gBAAgB,GAAGjI,eAAe,CAAC5C,KAAD,EAAQ0D,KAAR,EAAe,CAAC3B,SAAhB,CAAxC;;AACA,QAAI6I,YAAY,KAAKC,gBAArB,EAAuC;AACnC,aAAO,KAAP;AACH;AACJ;;AACD,SAAO,IAAP;AACH;;AACD,SAASjI,eAAT,CAAyB5C,KAAzB,EAAgC0D,KAAhC,EAAuCuF,WAAvC,EAAoD;AAChD,QAAM6B,IAAI,GAAG9K,KAAK,CAAC4C,eAAN,CAAsBc,KAAtB,CAAb;AACA,SAAQuF,WAAW,GAAG6B,IAAI,CAAC7B,WAAL,EAAH,GAAwB6B,IAA3C;AACH;;AACD9P,0BAA0B,CAACkJ,8BAA8B,CAACO,EAAhC,EAAoCP,8BAApC,CAA1B;AACAlJ,0BAA0B,CAACgN,oBAAoB,CAACvD,EAAtB,EAA0BuD,oBAA1B,CAA1B;AACAjN,oBAAoB,CAACoC,iBAAD,CAApB;AACApC,oBAAoB,CAAC2E,iBAAD,CAApB;AACA3E,oBAAoB,CAAC8E,mCAAD,CAApB;AACA9E,oBAAoB,CAACiM,iCAAD,CAApB;AACAjM,oBAAoB,CAACmM,qCAAD,CAApB;AACAnM,oBAAoB,CAACoM,kCAAD,CAApB;AACApM,oBAAoB,CAACqM,sCAAD,CAApB;AACArM,oBAAoB,CAACsM,sBAAD,CAApB;AACAtM,oBAAoB,CAACuM,eAAD,CAApB;AACAvM,oBAAoB,CAACkG,+BAAD,CAApB;AACAlG,oBAAoB,CAACsG,+BAAD,CAApB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { status } from '../../../base/browser/ui/aria/aria.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { KeyChord } from '../../../base/common/keyCodes.js';\nimport { Disposable, DisposableStore } from '../../../base/common/lifecycle.js';\nimport { EditorAction, registerEditorAction, registerEditorContribution } from '../../browser/editorExtensions.js';\nimport { CursorMoveCommands } from '../../common/controller/cursorMoveCommands.js';\nimport { Range } from '../../common/core/range.js';\nimport { Selection } from '../../common/core/selection.js';\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\nimport { OverviewRulerLane, MinimapPosition } from '../../common/model.js';\nimport { ModelDecorationOptions } from '../../common/model/textModel.js';\nimport { DocumentHighlightProviderRegistry } from '../../common/modes.js';\nimport { CommonFindController } from '../find/findController.js';\nimport * as nls from '../../../nls.js';\nimport { MenuId } from '../../../platform/actions/common/actions.js';\nimport { ContextKeyExpr } from '../../../platform/contextkey/common/contextkey.js';\nimport { overviewRulerSelectionHighlightForeground, minimapSelectionOccurrenceHighlight } from '../../../platform/theme/common/colorRegistry.js';\nimport { themeColorFromId } from '../../../platform/theme/common/themeService.js';\nfunction announceCursorChange(previousCursorState, cursorState) {\n    const cursorDiff = cursorState.filter(cs => !previousCursorState.find(pcs => pcs.equals(cs)));\n    if (cursorDiff.length >= 1) {\n        const cursorPositions = cursorDiff.map(cs => `line ${cs.viewState.position.lineNumber} column ${cs.viewState.position.column}`).join(', ');\n        const msg = cursorDiff.length === 1 ? nls.localize('cursorAdded', \"Cursor added: {0}\", cursorPositions) : nls.localize('cursorsAdded', \"Cursors added: {0}\", cursorPositions);\n        status(msg);\n    }\n}\nexport class InsertCursorAbove extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.insertCursorAbove',\n            label: nls.localize('mutlicursor.insertAbove', \"Add Cursor Above\"),\n            alias: 'Add Cursor Above',\n            precondition: undefined,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 2048 /* CtrlCmd */ | 512 /* Alt */ | 16 /* UpArrow */,\n                linux: {\n                    primary: 1024 /* Shift */ | 512 /* Alt */ | 16 /* UpArrow */,\n                    secondary: [2048 /* CtrlCmd */ | 1024 /* Shift */ | 16 /* UpArrow */]\n                },\n                weight: 100 /* EditorContrib */\n            },\n            menuOpts: {\n                menuId: MenuId.MenubarSelectionMenu,\n                group: '3_multi',\n                title: nls.localize({ key: 'miInsertCursorAbove', comment: ['&& denotes a mnemonic'] }, \"&&Add Cursor Above\"),\n                order: 2\n            }\n        });\n    }\n    run(accessor, editor, args) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        let useLogicalLine = true;\n        if (args && args.logicalLine === false) {\n            useLogicalLine = false;\n        }\n        const viewModel = editor._getViewModel();\n        if (viewModel.cursorConfig.readOnly) {\n            return;\n        }\n        viewModel.pushStackElement();\n        const previousCursorState = viewModel.getCursorStates();\n        viewModel.setCursorStates(args.source, 3 /* Explicit */, CursorMoveCommands.addCursorUp(viewModel, previousCursorState, useLogicalLine));\n        viewModel.revealTopMostCursor(args.source);\n        announceCursorChange(previousCursorState, viewModel.getCursorStates());\n    }\n}\nexport class InsertCursorBelow extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.insertCursorBelow',\n            label: nls.localize('mutlicursor.insertBelow', \"Add Cursor Below\"),\n            alias: 'Add Cursor Below',\n            precondition: undefined,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 2048 /* CtrlCmd */ | 512 /* Alt */ | 18 /* DownArrow */,\n                linux: {\n                    primary: 1024 /* Shift */ | 512 /* Alt */ | 18 /* DownArrow */,\n                    secondary: [2048 /* CtrlCmd */ | 1024 /* Shift */ | 18 /* DownArrow */]\n                },\n                weight: 100 /* EditorContrib */\n            },\n            menuOpts: {\n                menuId: MenuId.MenubarSelectionMenu,\n                group: '3_multi',\n                title: nls.localize({ key: 'miInsertCursorBelow', comment: ['&& denotes a mnemonic'] }, \"A&&dd Cursor Below\"),\n                order: 3\n            }\n        });\n    }\n    run(accessor, editor, args) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        let useLogicalLine = true;\n        if (args && args.logicalLine === false) {\n            useLogicalLine = false;\n        }\n        const viewModel = editor._getViewModel();\n        if (viewModel.cursorConfig.readOnly) {\n            return;\n        }\n        viewModel.pushStackElement();\n        const previousCursorState = viewModel.getCursorStates();\n        viewModel.setCursorStates(args.source, 3 /* Explicit */, CursorMoveCommands.addCursorDown(viewModel, previousCursorState, useLogicalLine));\n        viewModel.revealBottomMostCursor(args.source);\n        announceCursorChange(previousCursorState, viewModel.getCursorStates());\n    }\n}\nclass InsertCursorAtEndOfEachLineSelected extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.insertCursorAtEndOfEachLineSelected',\n            label: nls.localize('mutlicursor.insertAtEndOfEachLineSelected', \"Add Cursors to Line Ends\"),\n            alias: 'Add Cursors to Line Ends',\n            precondition: undefined,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 1024 /* Shift */ | 512 /* Alt */ | 39 /* KeyI */,\n                weight: 100 /* EditorContrib */\n            },\n            menuOpts: {\n                menuId: MenuId.MenubarSelectionMenu,\n                group: '3_multi',\n                title: nls.localize({ key: 'miInsertCursorAtEndOfEachLineSelected', comment: ['&& denotes a mnemonic'] }, \"Add C&&ursors to Line Ends\"),\n                order: 4\n            }\n        });\n    }\n    getCursorsForSelection(selection, model, result) {\n        if (selection.isEmpty()) {\n            return;\n        }\n        for (let i = selection.startLineNumber; i < selection.endLineNumber; i++) {\n            let currentLineMaxColumn = model.getLineMaxColumn(i);\n            result.push(new Selection(i, currentLineMaxColumn, i, currentLineMaxColumn));\n        }\n        if (selection.endColumn > 1) {\n            result.push(new Selection(selection.endLineNumber, selection.endColumn, selection.endLineNumber, selection.endColumn));\n        }\n    }\n    run(accessor, editor) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        const model = editor.getModel();\n        const selections = editor.getSelections();\n        const viewModel = editor._getViewModel();\n        const previousCursorState = viewModel.getCursorStates();\n        let newSelections = [];\n        selections.forEach((sel) => this.getCursorsForSelection(sel, model, newSelections));\n        if (newSelections.length > 0) {\n            editor.setSelections(newSelections);\n        }\n        announceCursorChange(previousCursorState, viewModel.getCursorStates());\n    }\n}\nclass InsertCursorAtEndOfLineSelected extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.addCursorsToBottom',\n            label: nls.localize('mutlicursor.addCursorsToBottom', \"Add Cursors To Bottom\"),\n            alias: 'Add Cursors To Bottom',\n            precondition: undefined\n        });\n    }\n    run(accessor, editor) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        const selections = editor.getSelections();\n        const lineCount = editor.getModel().getLineCount();\n        let newSelections = [];\n        for (let i = selections[0].startLineNumber; i <= lineCount; i++) {\n            newSelections.push(new Selection(i, selections[0].startColumn, i, selections[0].endColumn));\n        }\n        const viewModel = editor._getViewModel();\n        const previousCursorState = viewModel.getCursorStates();\n        if (newSelections.length > 0) {\n            editor.setSelections(newSelections);\n        }\n        announceCursorChange(previousCursorState, viewModel.getCursorStates());\n    }\n}\nclass InsertCursorAtTopOfLineSelected extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.addCursorsToTop',\n            label: nls.localize('mutlicursor.addCursorsToTop', \"Add Cursors To Top\"),\n            alias: 'Add Cursors To Top',\n            precondition: undefined\n        });\n    }\n    run(accessor, editor) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        const selections = editor.getSelections();\n        let newSelections = [];\n        for (let i = selections[0].startLineNumber; i >= 1; i--) {\n            newSelections.push(new Selection(i, selections[0].startColumn, i, selections[0].endColumn));\n        }\n        const viewModel = editor._getViewModel();\n        const previousCursorState = viewModel.getCursorStates();\n        if (newSelections.length > 0) {\n            editor.setSelections(newSelections);\n        }\n        announceCursorChange(previousCursorState, viewModel.getCursorStates());\n    }\n}\nexport class MultiCursorSessionResult {\n    constructor(selections, revealRange, revealScrollType) {\n        this.selections = selections;\n        this.revealRange = revealRange;\n        this.revealScrollType = revealScrollType;\n    }\n}\nexport class MultiCursorSession {\n    constructor(_editor, findController, isDisconnectedFromFindController, searchText, wholeWord, matchCase, currentMatch) {\n        this._editor = _editor;\n        this.findController = findController;\n        this.isDisconnectedFromFindController = isDisconnectedFromFindController;\n        this.searchText = searchText;\n        this.wholeWord = wholeWord;\n        this.matchCase = matchCase;\n        this.currentMatch = currentMatch;\n    }\n    static create(editor, findController) {\n        if (!editor.hasModel()) {\n            return null;\n        }\n        const findState = findController.getState();\n        // Find widget owns entirely what we search for if:\n        //  - focus is not in the editor (i.e. it is in the find widget)\n        //  - and the search widget is visible\n        //  - and the search string is non-empty\n        if (!editor.hasTextFocus() && findState.isRevealed && findState.searchString.length > 0) {\n            // Find widget owns what is searched for\n            return new MultiCursorSession(editor, findController, false, findState.searchString, findState.wholeWord, findState.matchCase, null);\n        }\n        // Otherwise, the selection gives the search text, and the find widget gives the search settings\n        // The exception is the find state disassociation case: when beginning with a single, collapsed selection\n        let isDisconnectedFromFindController = false;\n        let wholeWord;\n        let matchCase;\n        const selections = editor.getSelections();\n        if (selections.length === 1 && selections[0].isEmpty()) {\n            isDisconnectedFromFindController = true;\n            wholeWord = true;\n            matchCase = true;\n        }\n        else {\n            wholeWord = findState.wholeWord;\n            matchCase = findState.matchCase;\n        }\n        // Selection owns what is searched for\n        const s = editor.getSelection();\n        let searchText;\n        let currentMatch = null;\n        if (s.isEmpty()) {\n            // selection is empty => expand to current word\n            const word = editor.getConfiguredWordAtPosition(s.getStartPosition());\n            if (!word) {\n                return null;\n            }\n            searchText = word.word;\n            currentMatch = new Selection(s.startLineNumber, word.startColumn, s.startLineNumber, word.endColumn);\n        }\n        else {\n            searchText = editor.getModel().getValueInRange(s).replace(/\\r\\n/g, '\\n');\n        }\n        return new MultiCursorSession(editor, findController, isDisconnectedFromFindController, searchText, wholeWord, matchCase, currentMatch);\n    }\n    addSelectionToNextFindMatch() {\n        if (!this._editor.hasModel()) {\n            return null;\n        }\n        const nextMatch = this._getNextMatch();\n        if (!nextMatch) {\n            return null;\n        }\n        const allSelections = this._editor.getSelections();\n        return new MultiCursorSessionResult(allSelections.concat(nextMatch), nextMatch, 0 /* Smooth */);\n    }\n    moveSelectionToNextFindMatch() {\n        if (!this._editor.hasModel()) {\n            return null;\n        }\n        const nextMatch = this._getNextMatch();\n        if (!nextMatch) {\n            return null;\n        }\n        const allSelections = this._editor.getSelections();\n        return new MultiCursorSessionResult(allSelections.slice(0, allSelections.length - 1).concat(nextMatch), nextMatch, 0 /* Smooth */);\n    }\n    _getNextMatch() {\n        if (!this._editor.hasModel()) {\n            return null;\n        }\n        if (this.currentMatch) {\n            const result = this.currentMatch;\n            this.currentMatch = null;\n            return result;\n        }\n        this.findController.highlightFindOptions();\n        const allSelections = this._editor.getSelections();\n        const lastAddedSelection = allSelections[allSelections.length - 1];\n        const nextMatch = this._editor.getModel().findNextMatch(this.searchText, lastAddedSelection.getEndPosition(), false, this.matchCase, this.wholeWord ? this._editor.getOption(115 /* wordSeparators */) : null, false);\n        if (!nextMatch) {\n            return null;\n        }\n        return new Selection(nextMatch.range.startLineNumber, nextMatch.range.startColumn, nextMatch.range.endLineNumber, nextMatch.range.endColumn);\n    }\n    addSelectionToPreviousFindMatch() {\n        if (!this._editor.hasModel()) {\n            return null;\n        }\n        const previousMatch = this._getPreviousMatch();\n        if (!previousMatch) {\n            return null;\n        }\n        const allSelections = this._editor.getSelections();\n        return new MultiCursorSessionResult(allSelections.concat(previousMatch), previousMatch, 0 /* Smooth */);\n    }\n    moveSelectionToPreviousFindMatch() {\n        if (!this._editor.hasModel()) {\n            return null;\n        }\n        const previousMatch = this._getPreviousMatch();\n        if (!previousMatch) {\n            return null;\n        }\n        const allSelections = this._editor.getSelections();\n        return new MultiCursorSessionResult(allSelections.slice(0, allSelections.length - 1).concat(previousMatch), previousMatch, 0 /* Smooth */);\n    }\n    _getPreviousMatch() {\n        if (!this._editor.hasModel()) {\n            return null;\n        }\n        if (this.currentMatch) {\n            const result = this.currentMatch;\n            this.currentMatch = null;\n            return result;\n        }\n        this.findController.highlightFindOptions();\n        const allSelections = this._editor.getSelections();\n        const lastAddedSelection = allSelections[allSelections.length - 1];\n        const previousMatch = this._editor.getModel().findPreviousMatch(this.searchText, lastAddedSelection.getStartPosition(), false, this.matchCase, this.wholeWord ? this._editor.getOption(115 /* wordSeparators */) : null, false);\n        if (!previousMatch) {\n            return null;\n        }\n        return new Selection(previousMatch.range.startLineNumber, previousMatch.range.startColumn, previousMatch.range.endLineNumber, previousMatch.range.endColumn);\n    }\n    selectAll() {\n        if (!this._editor.hasModel()) {\n            return [];\n        }\n        this.findController.highlightFindOptions();\n        return this._editor.getModel().findMatches(this.searchText, true, false, this.matchCase, this.wholeWord ? this._editor.getOption(115 /* wordSeparators */) : null, false, 1073741824 /* MAX_SAFE_SMALL_INTEGER */);\n    }\n}\nexport class MultiCursorSelectionController extends Disposable {\n    constructor(editor) {\n        super();\n        this._sessionDispose = this._register(new DisposableStore());\n        this._editor = editor;\n        this._ignoreSelectionChange = false;\n        this._session = null;\n    }\n    static get(editor) {\n        return editor.getContribution(MultiCursorSelectionController.ID);\n    }\n    dispose() {\n        this._endSession();\n        super.dispose();\n    }\n    _beginSessionIfNeeded(findController) {\n        if (!this._session) {\n            // Create a new session\n            const session = MultiCursorSession.create(this._editor, findController);\n            if (!session) {\n                return;\n            }\n            this._session = session;\n            const newState = { searchString: this._session.searchText };\n            if (this._session.isDisconnectedFromFindController) {\n                newState.wholeWordOverride = 1 /* True */;\n                newState.matchCaseOverride = 1 /* True */;\n                newState.isRegexOverride = 2 /* False */;\n            }\n            findController.getState().change(newState, false);\n            this._sessionDispose.add(this._editor.onDidChangeCursorSelection((e) => {\n                if (this._ignoreSelectionChange) {\n                    return;\n                }\n                this._endSession();\n            }));\n            this._sessionDispose.add(this._editor.onDidBlurEditorText(() => {\n                this._endSession();\n            }));\n            this._sessionDispose.add(findController.getState().onFindReplaceStateChange((e) => {\n                if (e.matchCase || e.wholeWord) {\n                    this._endSession();\n                }\n            }));\n        }\n    }\n    _endSession() {\n        this._sessionDispose.clear();\n        if (this._session && this._session.isDisconnectedFromFindController) {\n            const newState = {\n                wholeWordOverride: 0 /* NotSet */,\n                matchCaseOverride: 0 /* NotSet */,\n                isRegexOverride: 0 /* NotSet */,\n            };\n            this._session.findController.getState().change(newState, false);\n        }\n        this._session = null;\n    }\n    _setSelections(selections) {\n        this._ignoreSelectionChange = true;\n        this._editor.setSelections(selections);\n        this._ignoreSelectionChange = false;\n    }\n    _expandEmptyToWord(model, selection) {\n        if (!selection.isEmpty()) {\n            return selection;\n        }\n        const word = this._editor.getConfiguredWordAtPosition(selection.getStartPosition());\n        if (!word) {\n            return selection;\n        }\n        return new Selection(selection.startLineNumber, word.startColumn, selection.startLineNumber, word.endColumn);\n    }\n    _applySessionResult(result) {\n        if (!result) {\n            return;\n        }\n        this._setSelections(result.selections);\n        if (result.revealRange) {\n            this._editor.revealRangeInCenterIfOutsideViewport(result.revealRange, result.revealScrollType);\n        }\n    }\n    getSession(findController) {\n        return this._session;\n    }\n    addSelectionToNextFindMatch(findController) {\n        if (!this._editor.hasModel()) {\n            return;\n        }\n        if (!this._session) {\n            // If there are multiple cursors, handle the case where they do not all select the same text.\n            const allSelections = this._editor.getSelections();\n            if (allSelections.length > 1) {\n                const findState = findController.getState();\n                const matchCase = findState.matchCase;\n                const selectionsContainSameText = modelRangesContainSameText(this._editor.getModel(), allSelections, matchCase);\n                if (!selectionsContainSameText) {\n                    const model = this._editor.getModel();\n                    let resultingSelections = [];\n                    for (let i = 0, len = allSelections.length; i < len; i++) {\n                        resultingSelections[i] = this._expandEmptyToWord(model, allSelections[i]);\n                    }\n                    this._editor.setSelections(resultingSelections);\n                    return;\n                }\n            }\n        }\n        this._beginSessionIfNeeded(findController);\n        if (this._session) {\n            this._applySessionResult(this._session.addSelectionToNextFindMatch());\n        }\n    }\n    addSelectionToPreviousFindMatch(findController) {\n        this._beginSessionIfNeeded(findController);\n        if (this._session) {\n            this._applySessionResult(this._session.addSelectionToPreviousFindMatch());\n        }\n    }\n    moveSelectionToNextFindMatch(findController) {\n        this._beginSessionIfNeeded(findController);\n        if (this._session) {\n            this._applySessionResult(this._session.moveSelectionToNextFindMatch());\n        }\n    }\n    moveSelectionToPreviousFindMatch(findController) {\n        this._beginSessionIfNeeded(findController);\n        if (this._session) {\n            this._applySessionResult(this._session.moveSelectionToPreviousFindMatch());\n        }\n    }\n    selectAll(findController) {\n        if (!this._editor.hasModel()) {\n            return;\n        }\n        let matches = null;\n        const findState = findController.getState();\n        // Special case: find widget owns entirely what we search for if:\n        // - focus is not in the editor (i.e. it is in the find widget)\n        // - and the search widget is visible\n        // - and the search string is non-empty\n        // - and we're searching for a regex\n        if (findState.isRevealed && findState.searchString.length > 0 && findState.isRegex) {\n            matches = this._editor.getModel().findMatches(findState.searchString, true, findState.isRegex, findState.matchCase, findState.wholeWord ? this._editor.getOption(115 /* wordSeparators */) : null, false, 1073741824 /* MAX_SAFE_SMALL_INTEGER */);\n        }\n        else {\n            this._beginSessionIfNeeded(findController);\n            if (!this._session) {\n                return;\n            }\n            matches = this._session.selectAll();\n        }\n        if (findState.searchScope) {\n            const states = findState.searchScope;\n            let inSelection = [];\n            matches.forEach((match) => {\n                states.forEach((state) => {\n                    if (match.range.endLineNumber <= state.endLineNumber && match.range.startLineNumber >= state.startLineNumber) {\n                        inSelection.push(match);\n                    }\n                });\n            });\n            matches = inSelection;\n        }\n        if (matches.length > 0) {\n            const editorSelection = this._editor.getSelection();\n            // Have the primary cursor remain the one where the action was invoked\n            for (let i = 0, len = matches.length; i < len; i++) {\n                const match = matches[i];\n                const intersection = match.range.intersectRanges(editorSelection);\n                if (intersection) {\n                    // bingo!\n                    matches[i] = matches[0];\n                    matches[0] = match;\n                    break;\n                }\n            }\n            this._setSelections(matches.map(m => new Selection(m.range.startLineNumber, m.range.startColumn, m.range.endLineNumber, m.range.endColumn)));\n        }\n    }\n}\nMultiCursorSelectionController.ID = 'editor.contrib.multiCursorController';\nexport class MultiCursorSelectionControllerAction extends EditorAction {\n    run(accessor, editor) {\n        const multiCursorController = MultiCursorSelectionController.get(editor);\n        if (!multiCursorController) {\n            return;\n        }\n        const findController = CommonFindController.get(editor);\n        if (!findController) {\n            return;\n        }\n        const viewModel = editor._getViewModel();\n        if (viewModel) {\n            const previousCursorState = viewModel.getCursorStates();\n            this._run(multiCursorController, findController);\n            announceCursorChange(previousCursorState, viewModel.getCursorStates());\n        }\n    }\n}\nexport class AddSelectionToNextFindMatchAction extends MultiCursorSelectionControllerAction {\n    constructor() {\n        super({\n            id: 'editor.action.addSelectionToNextFindMatch',\n            label: nls.localize('addSelectionToNextFindMatch', \"Add Selection To Next Find Match\"),\n            alias: 'Add Selection To Next Find Match',\n            precondition: undefined,\n            kbOpts: {\n                kbExpr: EditorContextKeys.focus,\n                primary: 2048 /* CtrlCmd */ | 34 /* KeyD */,\n                weight: 100 /* EditorContrib */\n            },\n            menuOpts: {\n                menuId: MenuId.MenubarSelectionMenu,\n                group: '3_multi',\n                title: nls.localize({ key: 'miAddSelectionToNextFindMatch', comment: ['&& denotes a mnemonic'] }, \"Add &&Next Occurrence\"),\n                order: 5\n            }\n        });\n    }\n    _run(multiCursorController, findController) {\n        multiCursorController.addSelectionToNextFindMatch(findController);\n    }\n}\nexport class AddSelectionToPreviousFindMatchAction extends MultiCursorSelectionControllerAction {\n    constructor() {\n        super({\n            id: 'editor.action.addSelectionToPreviousFindMatch',\n            label: nls.localize('addSelectionToPreviousFindMatch', \"Add Selection To Previous Find Match\"),\n            alias: 'Add Selection To Previous Find Match',\n            precondition: undefined,\n            menuOpts: {\n                menuId: MenuId.MenubarSelectionMenu,\n                group: '3_multi',\n                title: nls.localize({ key: 'miAddSelectionToPreviousFindMatch', comment: ['&& denotes a mnemonic'] }, \"Add P&&revious Occurrence\"),\n                order: 6\n            }\n        });\n    }\n    _run(multiCursorController, findController) {\n        multiCursorController.addSelectionToPreviousFindMatch(findController);\n    }\n}\nexport class MoveSelectionToNextFindMatchAction extends MultiCursorSelectionControllerAction {\n    constructor() {\n        super({\n            id: 'editor.action.moveSelectionToNextFindMatch',\n            label: nls.localize('moveSelectionToNextFindMatch', \"Move Last Selection To Next Find Match\"),\n            alias: 'Move Last Selection To Next Find Match',\n            precondition: undefined,\n            kbOpts: {\n                kbExpr: EditorContextKeys.focus,\n                primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KeyK */, 2048 /* CtrlCmd */ | 34 /* KeyD */),\n                weight: 100 /* EditorContrib */\n            }\n        });\n    }\n    _run(multiCursorController, findController) {\n        multiCursorController.moveSelectionToNextFindMatch(findController);\n    }\n}\nexport class MoveSelectionToPreviousFindMatchAction extends MultiCursorSelectionControllerAction {\n    constructor() {\n        super({\n            id: 'editor.action.moveSelectionToPreviousFindMatch',\n            label: nls.localize('moveSelectionToPreviousFindMatch', \"Move Last Selection To Previous Find Match\"),\n            alias: 'Move Last Selection To Previous Find Match',\n            precondition: undefined\n        });\n    }\n    _run(multiCursorController, findController) {\n        multiCursorController.moveSelectionToPreviousFindMatch(findController);\n    }\n}\nexport class SelectHighlightsAction extends MultiCursorSelectionControllerAction {\n    constructor() {\n        super({\n            id: 'editor.action.selectHighlights',\n            label: nls.localize('selectAllOccurrencesOfFindMatch', \"Select All Occurrences of Find Match\"),\n            alias: 'Select All Occurrences of Find Match',\n            precondition: undefined,\n            kbOpts: {\n                kbExpr: EditorContextKeys.focus,\n                primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 42 /* KeyL */,\n                weight: 100 /* EditorContrib */\n            },\n            menuOpts: {\n                menuId: MenuId.MenubarSelectionMenu,\n                group: '3_multi',\n                title: nls.localize({ key: 'miSelectHighlights', comment: ['&& denotes a mnemonic'] }, \"Select All &&Occurrences\"),\n                order: 7\n            }\n        });\n    }\n    _run(multiCursorController, findController) {\n        multiCursorController.selectAll(findController);\n    }\n}\nexport class CompatChangeAll extends MultiCursorSelectionControllerAction {\n    constructor() {\n        super({\n            id: 'editor.action.changeAll',\n            label: nls.localize('changeAll.label', \"Change All Occurrences\"),\n            alias: 'Change All Occurrences',\n            precondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.editorTextFocus),\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 2048 /* CtrlCmd */ | 60 /* F2 */,\n                weight: 100 /* EditorContrib */\n            },\n            contextMenuOpts: {\n                group: '1_modification',\n                order: 1.2\n            }\n        });\n    }\n    _run(multiCursorController, findController) {\n        multiCursorController.selectAll(findController);\n    }\n}\nclass SelectionHighlighterState {\n    constructor(searchText, matchCase, wordSeparators, modelVersionId) {\n        this.searchText = searchText;\n        this.matchCase = matchCase;\n        this.wordSeparators = wordSeparators;\n        this.modelVersionId = modelVersionId;\n    }\n    /**\n     * Everything equals except for `lastWordUnderCursor`\n     */\n    static softEquals(a, b) {\n        if (!a && !b) {\n            return true;\n        }\n        if (!a || !b) {\n            return false;\n        }\n        return (a.searchText === b.searchText\n            && a.matchCase === b.matchCase\n            && a.wordSeparators === b.wordSeparators\n            && a.modelVersionId === b.modelVersionId);\n    }\n}\nexport class SelectionHighlighter extends Disposable {\n    constructor(editor) {\n        super();\n        this.editor = editor;\n        this._isEnabled = editor.getOption(96 /* selectionHighlight */);\n        this.decorations = [];\n        this.updateSoon = this._register(new RunOnceScheduler(() => this._update(), 300));\n        this.state = null;\n        this._register(editor.onDidChangeConfiguration((e) => {\n            this._isEnabled = editor.getOption(96 /* selectionHighlight */);\n        }));\n        this._register(editor.onDidChangeCursorSelection((e) => {\n            if (!this._isEnabled) {\n                // Early exit if nothing needs to be done!\n                // Leave some form of early exit check here if you wish to continue being a cursor position change listener ;)\n                return;\n            }\n            if (e.selection.isEmpty()) {\n                if (e.reason === 3 /* Explicit */) {\n                    if (this.state) {\n                        // no longer valid\n                        this._setState(null);\n                    }\n                    this.updateSoon.schedule();\n                }\n                else {\n                    this._setState(null);\n                }\n            }\n            else {\n                this._update();\n            }\n        }));\n        this._register(editor.onDidChangeModel((e) => {\n            this._setState(null);\n        }));\n        this._register(editor.onDidChangeModelContent((e) => {\n            if (this._isEnabled) {\n                this.updateSoon.schedule();\n            }\n        }));\n        this._register(CommonFindController.get(editor).getState().onFindReplaceStateChange((e) => {\n            this._update();\n        }));\n    }\n    _update() {\n        this._setState(SelectionHighlighter._createState(this._isEnabled, this.editor));\n    }\n    static _createState(isEnabled, editor) {\n        if (!isEnabled) {\n            return null;\n        }\n        if (!editor.hasModel()) {\n            return null;\n        }\n        const s = editor.getSelection();\n        if (s.startLineNumber !== s.endLineNumber) {\n            // multiline forbidden for perf reasons\n            return null;\n        }\n        const multiCursorController = MultiCursorSelectionController.get(editor);\n        if (!multiCursorController) {\n            return null;\n        }\n        const findController = CommonFindController.get(editor);\n        if (!findController) {\n            return null;\n        }\n        let r = multiCursorController.getSession(findController);\n        if (!r) {\n            const allSelections = editor.getSelections();\n            if (allSelections.length > 1) {\n                const findState = findController.getState();\n                const matchCase = findState.matchCase;\n                const selectionsContainSameText = modelRangesContainSameText(editor.getModel(), allSelections, matchCase);\n                if (!selectionsContainSameText) {\n                    return null;\n                }\n            }\n            r = MultiCursorSession.create(editor, findController);\n        }\n        if (!r) {\n            return null;\n        }\n        if (r.currentMatch) {\n            // This is an empty selection\n            // Do not interfere with semantic word highlighting in the no selection case\n            return null;\n        }\n        if (/^[ \\t]+$/.test(r.searchText)) {\n            // whitespace only selection\n            return null;\n        }\n        if (r.searchText.length > 200) {\n            // very long selection\n            return null;\n        }\n        // TODO: better handling of this case\n        const findState = findController.getState();\n        const caseSensitive = findState.matchCase;\n        // Return early if the find widget shows the exact same matches\n        if (findState.isRevealed) {\n            let findStateSearchString = findState.searchString;\n            if (!caseSensitive) {\n                findStateSearchString = findStateSearchString.toLowerCase();\n            }\n            let mySearchString = r.searchText;\n            if (!caseSensitive) {\n                mySearchString = mySearchString.toLowerCase();\n            }\n            if (findStateSearchString === mySearchString && r.matchCase === findState.matchCase && r.wholeWord === findState.wholeWord && !findState.isRegex) {\n                return null;\n            }\n        }\n        return new SelectionHighlighterState(r.searchText, r.matchCase, r.wholeWord ? editor.getOption(115 /* wordSeparators */) : null, editor.getModel().getVersionId());\n    }\n    _setState(state) {\n        if (SelectionHighlighterState.softEquals(this.state, state)) {\n            this.state = state;\n            return;\n        }\n        this.state = state;\n        if (!this.state) {\n            this.decorations = this.editor.deltaDecorations(this.decorations, []);\n            return;\n        }\n        if (!this.editor.hasModel()) {\n            return;\n        }\n        const model = this.editor.getModel();\n        if (model.isTooLargeForTokenization()) {\n            // the file is too large, so searching word under cursor in the whole document takes is blocking the UI.\n            return;\n        }\n        const hasFindOccurrences = DocumentHighlightProviderRegistry.has(model) && this.editor.getOption(71 /* occurrencesHighlight */);\n        let allMatches = model.findMatches(this.state.searchText, true, false, this.state.matchCase, this.state.wordSeparators, false).map(m => m.range);\n        allMatches.sort(Range.compareRangesUsingStarts);\n        let selections = this.editor.getSelections();\n        selections.sort(Range.compareRangesUsingStarts);\n        // do not overlap with selection (issue #64 and #512)\n        let matches = [];\n        for (let i = 0, j = 0, len = allMatches.length, lenJ = selections.length; i < len;) {\n            const match = allMatches[i];\n            if (j >= lenJ) {\n                // finished all editor selections\n                matches.push(match);\n                i++;\n            }\n            else {\n                const cmp = Range.compareRangesUsingStarts(match, selections[j]);\n                if (cmp < 0) {\n                    // match is before sel\n                    if (selections[j].isEmpty() || !Range.areIntersecting(match, selections[j])) {\n                        matches.push(match);\n                    }\n                    i++;\n                }\n                else if (cmp > 0) {\n                    // sel is before match\n                    j++;\n                }\n                else {\n                    // sel is equal to match\n                    i++;\n                    j++;\n                }\n            }\n        }\n        const decorations = matches.map(r => {\n            return {\n                range: r,\n                // Show in overviewRuler only if model has no semantic highlighting\n                options: (hasFindOccurrences ? SelectionHighlighter._SELECTION_HIGHLIGHT : SelectionHighlighter._SELECTION_HIGHLIGHT_OVERVIEW)\n            };\n        });\n        this.decorations = this.editor.deltaDecorations(this.decorations, decorations);\n    }\n    dispose() {\n        this._setState(null);\n        super.dispose();\n    }\n}\nSelectionHighlighter.ID = 'editor.contrib.selectionHighlighter';\nSelectionHighlighter._SELECTION_HIGHLIGHT_OVERVIEW = ModelDecorationOptions.register({\n    description: 'selection-highlight-overview',\n    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */,\n    className: 'selectionHighlight',\n    minimap: {\n        color: themeColorFromId(minimapSelectionOccurrenceHighlight),\n        position: MinimapPosition.Inline\n    },\n    overviewRuler: {\n        color: themeColorFromId(overviewRulerSelectionHighlightForeground),\n        position: OverviewRulerLane.Center\n    }\n});\nSelectionHighlighter._SELECTION_HIGHLIGHT = ModelDecorationOptions.register({\n    description: 'selection-highlight',\n    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */,\n    className: 'selectionHighlight',\n});\nfunction modelRangesContainSameText(model, ranges, matchCase) {\n    const selectedText = getValueInRange(model, ranges[0], !matchCase);\n    for (let i = 1, len = ranges.length; i < len; i++) {\n        const range = ranges[i];\n        if (range.isEmpty()) {\n            return false;\n        }\n        const thisSelectedText = getValueInRange(model, range, !matchCase);\n        if (selectedText !== thisSelectedText) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction getValueInRange(model, range, toLowerCase) {\n    const text = model.getValueInRange(range);\n    return (toLowerCase ? text.toLowerCase() : text);\n}\nregisterEditorContribution(MultiCursorSelectionController.ID, MultiCursorSelectionController);\nregisterEditorContribution(SelectionHighlighter.ID, SelectionHighlighter);\nregisterEditorAction(InsertCursorAbove);\nregisterEditorAction(InsertCursorBelow);\nregisterEditorAction(InsertCursorAtEndOfEachLineSelected);\nregisterEditorAction(AddSelectionToNextFindMatchAction);\nregisterEditorAction(AddSelectionToPreviousFindMatchAction);\nregisterEditorAction(MoveSelectionToNextFindMatchAction);\nregisterEditorAction(MoveSelectionToPreviousFindMatchAction);\nregisterEditorAction(SelectHighlightsAction);\nregisterEditorAction(CompatChangeAll);\nregisterEditorAction(InsertCursorAtEndOfLineSelected);\nregisterEditorAction(InsertCursorAtTopOfLineSelected);\n"]},"metadata":{},"sourceType":"module"}