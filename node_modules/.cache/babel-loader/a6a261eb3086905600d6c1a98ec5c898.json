{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Disposable } from '../../../base/common/lifecycle.js';\nexport class ElementSizeObserver extends Disposable {\n  constructor(referenceDomElement, dimension, changeCallback) {\n    super();\n    this.referenceDomElement = referenceDomElement;\n    this.changeCallback = changeCallback;\n    this.width = -1;\n    this.height = -1;\n    this.resizeObserver = null;\n    this.measureReferenceDomElementToken = -1;\n    this.measureReferenceDomElement(false, dimension);\n  }\n\n  dispose() {\n    this.stopObserving();\n    super.dispose();\n  }\n\n  getWidth() {\n    return this.width;\n  }\n\n  getHeight() {\n    return this.height;\n  }\n\n  startObserving() {\n    if (typeof ResizeObserver !== 'undefined') {\n      if (!this.resizeObserver && this.referenceDomElement) {\n        this.resizeObserver = new ResizeObserver(entries => {\n          if (entries && entries[0] && entries[0].contentRect) {\n            this.observe({\n              width: entries[0].contentRect.width,\n              height: entries[0].contentRect.height\n            });\n          } else {\n            this.observe();\n          }\n        });\n        this.resizeObserver.observe(this.referenceDomElement);\n      }\n    } else {\n      if (this.measureReferenceDomElementToken === -1) {\n        // setInterval type defaults to NodeJS.Timeout instead of number, so specify it as a number\n        this.measureReferenceDomElementToken = setInterval(() => this.observe(), 100);\n      }\n    }\n  }\n\n  stopObserving() {\n    if (this.resizeObserver) {\n      this.resizeObserver.disconnect();\n      this.resizeObserver = null;\n    }\n\n    if (this.measureReferenceDomElementToken !== -1) {\n      clearInterval(this.measureReferenceDomElementToken);\n      this.measureReferenceDomElementToken = -1;\n    }\n  }\n\n  observe(dimension) {\n    this.measureReferenceDomElement(true, dimension);\n  }\n\n  measureReferenceDomElement(callChangeCallback, dimension) {\n    let observedWidth = 0;\n    let observedHeight = 0;\n\n    if (dimension) {\n      observedWidth = dimension.width;\n      observedHeight = dimension.height;\n    } else if (this.referenceDomElement) {\n      observedWidth = this.referenceDomElement.clientWidth;\n      observedHeight = this.referenceDomElement.clientHeight;\n    }\n\n    observedWidth = Math.max(5, observedWidth);\n    observedHeight = Math.max(5, observedHeight);\n\n    if (this.width !== observedWidth || this.height !== observedHeight) {\n      this.width = observedWidth;\n      this.height = observedHeight;\n\n      if (callChangeCallback) {\n        this.changeCallback();\n      }\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/umut/Documents/cs/cs410/Project2Group14/node_modules/monaco-editor/esm/vs/editor/browser/config/elementSizeObserver.js"],"names":["Disposable","ElementSizeObserver","constructor","referenceDomElement","dimension","changeCallback","width","height","resizeObserver","measureReferenceDomElementToken","measureReferenceDomElement","dispose","stopObserving","getWidth","getHeight","startObserving","ResizeObserver","entries","contentRect","observe","setInterval","disconnect","clearInterval","callChangeCallback","observedWidth","observedHeight","clientWidth","clientHeight","Math","max"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,UAAT,QAA2B,mCAA3B;AACA,OAAO,MAAMC,mBAAN,SAAkCD,UAAlC,CAA6C;AAChDE,EAAAA,WAAW,CAACC,mBAAD,EAAsBC,SAAtB,EAAiCC,cAAjC,EAAiD;AACxD;AACA,SAAKF,mBAAL,GAA2BA,mBAA3B;AACA,SAAKE,cAAL,GAAsBA,cAAtB;AACA,SAAKC,KAAL,GAAa,CAAC,CAAd;AACA,SAAKC,MAAL,GAAc,CAAC,CAAf;AACA,SAAKC,cAAL,GAAsB,IAAtB;AACA,SAAKC,+BAAL,GAAuC,CAAC,CAAxC;AACA,SAAKC,0BAAL,CAAgC,KAAhC,EAAuCN,SAAvC;AACH;;AACDO,EAAAA,OAAO,GAAG;AACN,SAAKC,aAAL;AACA,UAAMD,OAAN;AACH;;AACDE,EAAAA,QAAQ,GAAG;AACP,WAAO,KAAKP,KAAZ;AACH;;AACDQ,EAAAA,SAAS,GAAG;AACR,WAAO,KAAKP,MAAZ;AACH;;AACDQ,EAAAA,cAAc,GAAG;AACb,QAAI,OAAOC,cAAP,KAA0B,WAA9B,EAA2C;AACvC,UAAI,CAAC,KAAKR,cAAN,IAAwB,KAAKL,mBAAjC,EAAsD;AAClD,aAAKK,cAAL,GAAsB,IAAIQ,cAAJ,CAAoBC,OAAD,IAAa;AAClD,cAAIA,OAAO,IAAIA,OAAO,CAAC,CAAD,CAAlB,IAAyBA,OAAO,CAAC,CAAD,CAAP,CAAWC,WAAxC,EAAqD;AACjD,iBAAKC,OAAL,CAAa;AAAEb,cAAAA,KAAK,EAAEW,OAAO,CAAC,CAAD,CAAP,CAAWC,WAAX,CAAuBZ,KAAhC;AAAuCC,cAAAA,MAAM,EAAEU,OAAO,CAAC,CAAD,CAAP,CAAWC,WAAX,CAAuBX;AAAtE,aAAb;AACH,WAFD,MAGK;AACD,iBAAKY,OAAL;AACH;AACJ,SAPqB,CAAtB;AAQA,aAAKX,cAAL,CAAoBW,OAApB,CAA4B,KAAKhB,mBAAjC;AACH;AACJ,KAZD,MAaK;AACD,UAAI,KAAKM,+BAAL,KAAyC,CAAC,CAA9C,EAAiD;AAC7C;AACA,aAAKA,+BAAL,GAAuCW,WAAW,CAAC,MAAM,KAAKD,OAAL,EAAP,EAAuB,GAAvB,CAAlD;AACH;AACJ;AACJ;;AACDP,EAAAA,aAAa,GAAG;AACZ,QAAI,KAAKJ,cAAT,EAAyB;AACrB,WAAKA,cAAL,CAAoBa,UAApB;AACA,WAAKb,cAAL,GAAsB,IAAtB;AACH;;AACD,QAAI,KAAKC,+BAAL,KAAyC,CAAC,CAA9C,EAAiD;AAC7Ca,MAAAA,aAAa,CAAC,KAAKb,+BAAN,CAAb;AACA,WAAKA,+BAAL,GAAuC,CAAC,CAAxC;AACH;AACJ;;AACDU,EAAAA,OAAO,CAACf,SAAD,EAAY;AACf,SAAKM,0BAAL,CAAgC,IAAhC,EAAsCN,SAAtC;AACH;;AACDM,EAAAA,0BAA0B,CAACa,kBAAD,EAAqBnB,SAArB,EAAgC;AACtD,QAAIoB,aAAa,GAAG,CAApB;AACA,QAAIC,cAAc,GAAG,CAArB;;AACA,QAAIrB,SAAJ,EAAe;AACXoB,MAAAA,aAAa,GAAGpB,SAAS,CAACE,KAA1B;AACAmB,MAAAA,cAAc,GAAGrB,SAAS,CAACG,MAA3B;AACH,KAHD,MAIK,IAAI,KAAKJ,mBAAT,EAA8B;AAC/BqB,MAAAA,aAAa,GAAG,KAAKrB,mBAAL,CAAyBuB,WAAzC;AACAD,MAAAA,cAAc,GAAG,KAAKtB,mBAAL,CAAyBwB,YAA1C;AACH;;AACDH,IAAAA,aAAa,GAAGI,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYL,aAAZ,CAAhB;AACAC,IAAAA,cAAc,GAAGG,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYJ,cAAZ,CAAjB;;AACA,QAAI,KAAKnB,KAAL,KAAekB,aAAf,IAAgC,KAAKjB,MAAL,KAAgBkB,cAApD,EAAoE;AAChE,WAAKnB,KAAL,GAAakB,aAAb;AACA,WAAKjB,MAAL,GAAckB,cAAd;;AACA,UAAIF,kBAAJ,EAAwB;AACpB,aAAKlB,cAAL;AACH;AACJ;AACJ;;AA3E+C","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Disposable } from '../../../base/common/lifecycle.js';\nexport class ElementSizeObserver extends Disposable {\n    constructor(referenceDomElement, dimension, changeCallback) {\n        super();\n        this.referenceDomElement = referenceDomElement;\n        this.changeCallback = changeCallback;\n        this.width = -1;\n        this.height = -1;\n        this.resizeObserver = null;\n        this.measureReferenceDomElementToken = -1;\n        this.measureReferenceDomElement(false, dimension);\n    }\n    dispose() {\n        this.stopObserving();\n        super.dispose();\n    }\n    getWidth() {\n        return this.width;\n    }\n    getHeight() {\n        return this.height;\n    }\n    startObserving() {\n        if (typeof ResizeObserver !== 'undefined') {\n            if (!this.resizeObserver && this.referenceDomElement) {\n                this.resizeObserver = new ResizeObserver((entries) => {\n                    if (entries && entries[0] && entries[0].contentRect) {\n                        this.observe({ width: entries[0].contentRect.width, height: entries[0].contentRect.height });\n                    }\n                    else {\n                        this.observe();\n                    }\n                });\n                this.resizeObserver.observe(this.referenceDomElement);\n            }\n        }\n        else {\n            if (this.measureReferenceDomElementToken === -1) {\n                // setInterval type defaults to NodeJS.Timeout instead of number, so specify it as a number\n                this.measureReferenceDomElementToken = setInterval(() => this.observe(), 100);\n            }\n        }\n    }\n    stopObserving() {\n        if (this.resizeObserver) {\n            this.resizeObserver.disconnect();\n            this.resizeObserver = null;\n        }\n        if (this.measureReferenceDomElementToken !== -1) {\n            clearInterval(this.measureReferenceDomElementToken);\n            this.measureReferenceDomElementToken = -1;\n        }\n    }\n    observe(dimension) {\n        this.measureReferenceDomElement(true, dimension);\n    }\n    measureReferenceDomElement(callChangeCallback, dimension) {\n        let observedWidth = 0;\n        let observedHeight = 0;\n        if (dimension) {\n            observedWidth = dimension.width;\n            observedHeight = dimension.height;\n        }\n        else if (this.referenceDomElement) {\n            observedWidth = this.referenceDomElement.clientWidth;\n            observedHeight = this.referenceDomElement.clientHeight;\n        }\n        observedWidth = Math.max(5, observedWidth);\n        observedHeight = Math.max(5, observedHeight);\n        if (this.width !== observedWidth || this.height !== observedHeight) {\n            this.width = observedWidth;\n            this.height = observedHeight;\n            if (callChangeCallback) {\n                this.changeCallback();\n            }\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}