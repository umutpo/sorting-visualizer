{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { languages } from './fillers/monaco-editor-core.js';\nvar languageDefinitions = {};\nvar lazyLanguageLoaders = {};\n\nvar LazyLanguageLoader =\n/** @class */\nfunction () {\n  function LazyLanguageLoader(languageId) {\n    var _this = this;\n\n    this._languageId = languageId;\n    this._loadingTriggered = false;\n    this._lazyLoadPromise = new Promise(function (resolve, reject) {\n      _this._lazyLoadPromiseResolve = resolve;\n      _this._lazyLoadPromiseReject = reject;\n    });\n  }\n\n  LazyLanguageLoader.getOrCreate = function (languageId) {\n    if (!lazyLanguageLoaders[languageId]) {\n      lazyLanguageLoaders[languageId] = new LazyLanguageLoader(languageId);\n    }\n\n    return lazyLanguageLoaders[languageId];\n  };\n\n  LazyLanguageLoader.prototype.whenLoaded = function () {\n    return this._lazyLoadPromise;\n  };\n\n  LazyLanguageLoader.prototype.load = function () {\n    var _this = this;\n\n    if (!this._loadingTriggered) {\n      this._loadingTriggered = true;\n\n      languageDefinitions[this._languageId].loader().then(function (mod) {\n        return _this._lazyLoadPromiseResolve(mod);\n      }, function (err) {\n        return _this._lazyLoadPromiseReject(err);\n      });\n    }\n\n    return this._lazyLoadPromise;\n  };\n\n  return LazyLanguageLoader;\n}();\n\nexport function loadLanguage(languageId) {\n  return LazyLanguageLoader.getOrCreate(languageId).load();\n}\nexport function registerLanguage(def) {\n  var languageId = def.id;\n  languageDefinitions[languageId] = def;\n  languages.register(def);\n  var lazyLanguageLoader = LazyLanguageLoader.getOrCreate(languageId);\n  languages.setMonarchTokensProvider(languageId, lazyLanguageLoader.whenLoaded().then(function (mod) {\n    return mod.language;\n  }));\n  languages.onLanguage(languageId, function () {\n    lazyLanguageLoader.load().then(function (mod) {\n      languages.setLanguageConfiguration(languageId, mod.conf);\n    });\n  });\n}","map":{"version":3,"sources":["/home/umut/Documents/cs/cs410/Project2Group14/node_modules/monaco-editor/esm/vs/basic-languages/_.contribution.js"],"names":["languages","languageDefinitions","lazyLanguageLoaders","LazyLanguageLoader","languageId","_this","_languageId","_loadingTriggered","_lazyLoadPromise","Promise","resolve","reject","_lazyLoadPromiseResolve","_lazyLoadPromiseReject","getOrCreate","prototype","whenLoaded","load","loader","then","mod","err","loadLanguage","registerLanguage","def","id","register","lazyLanguageLoader","setMonarchTokensProvider","language","onLanguage","setLanguageConfiguration","conf"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,SAAT,QAA0B,iCAA1B;AACA,IAAIC,mBAAmB,GAAG,EAA1B;AACA,IAAIC,mBAAmB,GAAG,EAA1B;;AACA,IAAIC,kBAAkB;AAAG;AAAe,YAAY;AAChD,WAASA,kBAAT,CAA4BC,UAA5B,EAAwC;AACpC,QAAIC,KAAK,GAAG,IAAZ;;AACA,SAAKC,WAAL,GAAmBF,UAAnB;AACA,SAAKG,iBAAL,GAAyB,KAAzB;AACA,SAAKC,gBAAL,GAAwB,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC3DN,MAAAA,KAAK,CAACO,uBAAN,GAAgCF,OAAhC;AACAL,MAAAA,KAAK,CAACQ,sBAAN,GAA+BF,MAA/B;AACH,KAHuB,CAAxB;AAIH;;AACDR,EAAAA,kBAAkB,CAACW,WAAnB,GAAiC,UAAUV,UAAV,EAAsB;AACnD,QAAI,CAACF,mBAAmB,CAACE,UAAD,CAAxB,EAAsC;AAClCF,MAAAA,mBAAmB,CAACE,UAAD,CAAnB,GAAkC,IAAID,kBAAJ,CAAuBC,UAAvB,CAAlC;AACH;;AACD,WAAOF,mBAAmB,CAACE,UAAD,CAA1B;AACH,GALD;;AAMAD,EAAAA,kBAAkB,CAACY,SAAnB,CAA6BC,UAA7B,GAA0C,YAAY;AAClD,WAAO,KAAKR,gBAAZ;AACH,GAFD;;AAGAL,EAAAA,kBAAkB,CAACY,SAAnB,CAA6BE,IAA7B,GAAoC,YAAY;AAC5C,QAAIZ,KAAK,GAAG,IAAZ;;AACA,QAAI,CAAC,KAAKE,iBAAV,EAA6B;AACzB,WAAKA,iBAAL,GAAyB,IAAzB;;AACAN,MAAAA,mBAAmB,CAAC,KAAKK,WAAN,CAAnB,CAAsCY,MAAtC,GAA+CC,IAA/C,CAAoD,UAAUC,GAAV,EAAe;AAAE,eAAOf,KAAK,CAACO,uBAAN,CAA8BQ,GAA9B,CAAP;AAA4C,OAAjH,EAAmH,UAAUC,GAAV,EAAe;AAAE,eAAOhB,KAAK,CAACQ,sBAAN,CAA6BQ,GAA7B,CAAP;AAA2C,OAA/K;AACH;;AACD,WAAO,KAAKb,gBAAZ;AACH,GAPD;;AAQA,SAAOL,kBAAP;AACH,CA5BuC,EAAxC;;AA6BA,OAAO,SAASmB,YAAT,CAAsBlB,UAAtB,EAAkC;AACrC,SAAOD,kBAAkB,CAACW,WAAnB,CAA+BV,UAA/B,EAA2Ca,IAA3C,EAAP;AACH;AACD,OAAO,SAASM,gBAAT,CAA0BC,GAA1B,EAA+B;AAClC,MAAIpB,UAAU,GAAGoB,GAAG,CAACC,EAArB;AACAxB,EAAAA,mBAAmB,CAACG,UAAD,CAAnB,GAAkCoB,GAAlC;AACAxB,EAAAA,SAAS,CAAC0B,QAAV,CAAmBF,GAAnB;AACA,MAAIG,kBAAkB,GAAGxB,kBAAkB,CAACW,WAAnB,CAA+BV,UAA/B,CAAzB;AACAJ,EAAAA,SAAS,CAAC4B,wBAAV,CAAmCxB,UAAnC,EAA+CuB,kBAAkB,CAACX,UAAnB,GAAgCG,IAAhC,CAAqC,UAAUC,GAAV,EAAe;AAAE,WAAOA,GAAG,CAACS,QAAX;AAAsB,GAA5E,CAA/C;AACA7B,EAAAA,SAAS,CAAC8B,UAAV,CAAqB1B,UAArB,EAAiC,YAAY;AACzCuB,IAAAA,kBAAkB,CAACV,IAAnB,GAA0BE,IAA1B,CAA+B,UAAUC,GAAV,EAAe;AAC1CpB,MAAAA,SAAS,CAAC+B,wBAAV,CAAmC3B,UAAnC,EAA+CgB,GAAG,CAACY,IAAnD;AACH,KAFD;AAGH,GAJD;AAKH","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { languages } from './fillers/monaco-editor-core.js';\nvar languageDefinitions = {};\nvar lazyLanguageLoaders = {};\nvar LazyLanguageLoader = /** @class */ (function () {\n    function LazyLanguageLoader(languageId) {\n        var _this = this;\n        this._languageId = languageId;\n        this._loadingTriggered = false;\n        this._lazyLoadPromise = new Promise(function (resolve, reject) {\n            _this._lazyLoadPromiseResolve = resolve;\n            _this._lazyLoadPromiseReject = reject;\n        });\n    }\n    LazyLanguageLoader.getOrCreate = function (languageId) {\n        if (!lazyLanguageLoaders[languageId]) {\n            lazyLanguageLoaders[languageId] = new LazyLanguageLoader(languageId);\n        }\n        return lazyLanguageLoaders[languageId];\n    };\n    LazyLanguageLoader.prototype.whenLoaded = function () {\n        return this._lazyLoadPromise;\n    };\n    LazyLanguageLoader.prototype.load = function () {\n        var _this = this;\n        if (!this._loadingTriggered) {\n            this._loadingTriggered = true;\n            languageDefinitions[this._languageId].loader().then(function (mod) { return _this._lazyLoadPromiseResolve(mod); }, function (err) { return _this._lazyLoadPromiseReject(err); });\n        }\n        return this._lazyLoadPromise;\n    };\n    return LazyLanguageLoader;\n}());\nexport function loadLanguage(languageId) {\n    return LazyLanguageLoader.getOrCreate(languageId).load();\n}\nexport function registerLanguage(def) {\n    var languageId = def.id;\n    languageDefinitions[languageId] = def;\n    languages.register(def);\n    var lazyLanguageLoader = LazyLanguageLoader.getOrCreate(languageId);\n    languages.setMonarchTokensProvider(languageId, lazyLanguageLoader.whenLoaded().then(function (mod) { return mod.language; }));\n    languages.onLanguage(languageId, function () {\n        lazyLanguageLoader.load().then(function (mod) {\n            languages.setLanguageConfiguration(languageId, mod.conf);\n        });\n    });\n}\n"]},"metadata":{},"sourceType":"module"}