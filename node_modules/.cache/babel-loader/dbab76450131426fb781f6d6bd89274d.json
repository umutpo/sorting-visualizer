{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { isSafari } from '../../../base/browser/browser.js';\nimport { EDITOR_FONT_DEFAULTS } from '../../common/config/editorOptions.js';\nexport class CharWidthRequest {\n  constructor(chr, type) {\n    this.chr = chr;\n    this.type = type;\n    this.width = 0;\n  }\n\n  fulfill(width) {\n    this.width = width;\n  }\n\n}\n\nclass DomCharWidthReader {\n  constructor(bareFontInfo, requests) {\n    this._bareFontInfo = bareFontInfo;\n    this._requests = requests;\n    this._container = null;\n    this._testElements = null;\n  }\n\n  read() {\n    // Create a test container with all these test elements\n    this._createDomElements(); // Add the container to the DOM\n\n\n    document.body.appendChild(this._container); // Read character widths\n\n    this._readFromDomElements(); // Remove the container from the DOM\n\n\n    document.body.removeChild(this._container);\n    this._container = null;\n    this._testElements = null;\n  }\n\n  _createDomElements() {\n    const fontFamily = this._bareFontInfo.getMassagedFontFamily(isSafari ? EDITOR_FONT_DEFAULTS.fontFamily : null);\n\n    const container = document.createElement('div');\n    container.style.position = 'absolute';\n    container.style.top = '-50000px';\n    container.style.width = '50000px';\n    const regularDomNode = document.createElement('div');\n    regularDomNode.style.fontFamily = fontFamily;\n    regularDomNode.style.fontWeight = this._bareFontInfo.fontWeight;\n    regularDomNode.style.fontSize = this._bareFontInfo.fontSize + 'px';\n    regularDomNode.style.fontFeatureSettings = this._bareFontInfo.fontFeatureSettings;\n    regularDomNode.style.lineHeight = this._bareFontInfo.lineHeight + 'px';\n    regularDomNode.style.letterSpacing = this._bareFontInfo.letterSpacing + 'px';\n    container.appendChild(regularDomNode);\n    const boldDomNode = document.createElement('div');\n    boldDomNode.style.fontFamily = fontFamily;\n    boldDomNode.style.fontWeight = 'bold';\n    boldDomNode.style.fontSize = this._bareFontInfo.fontSize + 'px';\n    boldDomNode.style.fontFeatureSettings = this._bareFontInfo.fontFeatureSettings;\n    boldDomNode.style.lineHeight = this._bareFontInfo.lineHeight + 'px';\n    boldDomNode.style.letterSpacing = this._bareFontInfo.letterSpacing + 'px';\n    container.appendChild(boldDomNode);\n    const italicDomNode = document.createElement('div');\n    italicDomNode.style.fontFamily = fontFamily;\n    italicDomNode.style.fontWeight = this._bareFontInfo.fontWeight;\n    italicDomNode.style.fontSize = this._bareFontInfo.fontSize + 'px';\n    italicDomNode.style.fontFeatureSettings = this._bareFontInfo.fontFeatureSettings;\n    italicDomNode.style.lineHeight = this._bareFontInfo.lineHeight + 'px';\n    italicDomNode.style.letterSpacing = this._bareFontInfo.letterSpacing + 'px';\n    italicDomNode.style.fontStyle = 'italic';\n    container.appendChild(italicDomNode);\n    const testElements = [];\n\n    for (const request of this._requests) {\n      let parent;\n\n      if (request.type === 0\n      /* Regular */\n      ) {\n        parent = regularDomNode;\n      }\n\n      if (request.type === 2\n      /* Bold */\n      ) {\n        parent = boldDomNode;\n      }\n\n      if (request.type === 1\n      /* Italic */\n      ) {\n        parent = italicDomNode;\n      }\n\n      parent.appendChild(document.createElement('br'));\n      const testElement = document.createElement('span');\n\n      DomCharWidthReader._render(testElement, request);\n\n      parent.appendChild(testElement);\n      testElements.push(testElement);\n    }\n\n    this._container = container;\n    this._testElements = testElements;\n  }\n\n  static _render(testElement, request) {\n    if (request.chr === ' ') {\n      let htmlString = '\\u00a0'; // Repeat character 256 (2^8) times\n\n      for (let i = 0; i < 8; i++) {\n        htmlString += htmlString;\n      }\n\n      testElement.innerText = htmlString;\n    } else {\n      let testString = request.chr; // Repeat character 256 (2^8) times\n\n      for (let i = 0; i < 8; i++) {\n        testString += testString;\n      }\n\n      testElement.textContent = testString;\n    }\n  }\n\n  _readFromDomElements() {\n    for (let i = 0, len = this._requests.length; i < len; i++) {\n      const request = this._requests[i];\n      const testElement = this._testElements[i];\n      request.fulfill(testElement.offsetWidth / 256);\n    }\n  }\n\n}\n\nexport function readCharWidths(bareFontInfo, requests) {\n  const reader = new DomCharWidthReader(bareFontInfo, requests);\n  reader.read();\n}","map":{"version":3,"sources":["/home/umut/Documents/cs/cs410/Project2Group14/node_modules/monaco-editor/esm/vs/editor/browser/config/charWidthReader.js"],"names":["isSafari","EDITOR_FONT_DEFAULTS","CharWidthRequest","constructor","chr","type","width","fulfill","DomCharWidthReader","bareFontInfo","requests","_bareFontInfo","_requests","_container","_testElements","read","_createDomElements","document","body","appendChild","_readFromDomElements","removeChild","fontFamily","getMassagedFontFamily","container","createElement","style","position","top","regularDomNode","fontWeight","fontSize","fontFeatureSettings","lineHeight","letterSpacing","boldDomNode","italicDomNode","fontStyle","testElements","request","parent","testElement","_render","push","htmlString","i","innerText","testString","textContent","len","length","offsetWidth","readCharWidths","reader"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,QAAT,QAAyB,kCAAzB;AACA,SAASC,oBAAT,QAAqC,sCAArC;AACA,OAAO,MAAMC,gBAAN,CAAuB;AAC1BC,EAAAA,WAAW,CAACC,GAAD,EAAMC,IAAN,EAAY;AACnB,SAAKD,GAAL,GAAWA,GAAX;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,KAAL,GAAa,CAAb;AACH;;AACDC,EAAAA,OAAO,CAACD,KAAD,EAAQ;AACX,SAAKA,KAAL,GAAaA,KAAb;AACH;;AARyB;;AAU9B,MAAME,kBAAN,CAAyB;AACrBL,EAAAA,WAAW,CAACM,YAAD,EAAeC,QAAf,EAAyB;AAChC,SAAKC,aAAL,GAAqBF,YAArB;AACA,SAAKG,SAAL,GAAiBF,QAAjB;AACA,SAAKG,UAAL,GAAkB,IAAlB;AACA,SAAKC,aAAL,GAAqB,IAArB;AACH;;AACDC,EAAAA,IAAI,GAAG;AACH;AACA,SAAKC,kBAAL,GAFG,CAGH;;;AACAC,IAAAA,QAAQ,CAACC,IAAT,CAAcC,WAAd,CAA0B,KAAKN,UAA/B,EAJG,CAKH;;AACA,SAAKO,oBAAL,GANG,CAOH;;;AACAH,IAAAA,QAAQ,CAACC,IAAT,CAAcG,WAAd,CAA0B,KAAKR,UAA/B;AACA,SAAKA,UAAL,GAAkB,IAAlB;AACA,SAAKC,aAAL,GAAqB,IAArB;AACH;;AACDE,EAAAA,kBAAkB,GAAG;AACjB,UAAMM,UAAU,GAAG,KAAKX,aAAL,CAAmBY,qBAAnB,CAAyCvB,QAAQ,GAAGC,oBAAoB,CAACqB,UAAxB,GAAqC,IAAtF,CAAnB;;AACA,UAAME,SAAS,GAAGP,QAAQ,CAACQ,aAAT,CAAuB,KAAvB,CAAlB;AACAD,IAAAA,SAAS,CAACE,KAAV,CAAgBC,QAAhB,GAA2B,UAA3B;AACAH,IAAAA,SAAS,CAACE,KAAV,CAAgBE,GAAhB,GAAsB,UAAtB;AACAJ,IAAAA,SAAS,CAACE,KAAV,CAAgBpB,KAAhB,GAAwB,SAAxB;AACA,UAAMuB,cAAc,GAAGZ,QAAQ,CAACQ,aAAT,CAAuB,KAAvB,CAAvB;AACAI,IAAAA,cAAc,CAACH,KAAf,CAAqBJ,UAArB,GAAkCA,UAAlC;AACAO,IAAAA,cAAc,CAACH,KAAf,CAAqBI,UAArB,GAAkC,KAAKnB,aAAL,CAAmBmB,UAArD;AACAD,IAAAA,cAAc,CAACH,KAAf,CAAqBK,QAArB,GAAgC,KAAKpB,aAAL,CAAmBoB,QAAnB,GAA8B,IAA9D;AACAF,IAAAA,cAAc,CAACH,KAAf,CAAqBM,mBAArB,GAA2C,KAAKrB,aAAL,CAAmBqB,mBAA9D;AACAH,IAAAA,cAAc,CAACH,KAAf,CAAqBO,UAArB,GAAkC,KAAKtB,aAAL,CAAmBsB,UAAnB,GAAgC,IAAlE;AACAJ,IAAAA,cAAc,CAACH,KAAf,CAAqBQ,aAArB,GAAqC,KAAKvB,aAAL,CAAmBuB,aAAnB,GAAmC,IAAxE;AACAV,IAAAA,SAAS,CAACL,WAAV,CAAsBU,cAAtB;AACA,UAAMM,WAAW,GAAGlB,QAAQ,CAACQ,aAAT,CAAuB,KAAvB,CAApB;AACAU,IAAAA,WAAW,CAACT,KAAZ,CAAkBJ,UAAlB,GAA+BA,UAA/B;AACAa,IAAAA,WAAW,CAACT,KAAZ,CAAkBI,UAAlB,GAA+B,MAA/B;AACAK,IAAAA,WAAW,CAACT,KAAZ,CAAkBK,QAAlB,GAA6B,KAAKpB,aAAL,CAAmBoB,QAAnB,GAA8B,IAA3D;AACAI,IAAAA,WAAW,CAACT,KAAZ,CAAkBM,mBAAlB,GAAwC,KAAKrB,aAAL,CAAmBqB,mBAA3D;AACAG,IAAAA,WAAW,CAACT,KAAZ,CAAkBO,UAAlB,GAA+B,KAAKtB,aAAL,CAAmBsB,UAAnB,GAAgC,IAA/D;AACAE,IAAAA,WAAW,CAACT,KAAZ,CAAkBQ,aAAlB,GAAkC,KAAKvB,aAAL,CAAmBuB,aAAnB,GAAmC,IAArE;AACAV,IAAAA,SAAS,CAACL,WAAV,CAAsBgB,WAAtB;AACA,UAAMC,aAAa,GAAGnB,QAAQ,CAACQ,aAAT,CAAuB,KAAvB,CAAtB;AACAW,IAAAA,aAAa,CAACV,KAAd,CAAoBJ,UAApB,GAAiCA,UAAjC;AACAc,IAAAA,aAAa,CAACV,KAAd,CAAoBI,UAApB,GAAiC,KAAKnB,aAAL,CAAmBmB,UAApD;AACAM,IAAAA,aAAa,CAACV,KAAd,CAAoBK,QAApB,GAA+B,KAAKpB,aAAL,CAAmBoB,QAAnB,GAA8B,IAA7D;AACAK,IAAAA,aAAa,CAACV,KAAd,CAAoBM,mBAApB,GAA0C,KAAKrB,aAAL,CAAmBqB,mBAA7D;AACAI,IAAAA,aAAa,CAACV,KAAd,CAAoBO,UAApB,GAAiC,KAAKtB,aAAL,CAAmBsB,UAAnB,GAAgC,IAAjE;AACAG,IAAAA,aAAa,CAACV,KAAd,CAAoBQ,aAApB,GAAoC,KAAKvB,aAAL,CAAmBuB,aAAnB,GAAmC,IAAvE;AACAE,IAAAA,aAAa,CAACV,KAAd,CAAoBW,SAApB,GAAgC,QAAhC;AACAb,IAAAA,SAAS,CAACL,WAAV,CAAsBiB,aAAtB;AACA,UAAME,YAAY,GAAG,EAArB;;AACA,SAAK,MAAMC,OAAX,IAAsB,KAAK3B,SAA3B,EAAsC;AAClC,UAAI4B,MAAJ;;AACA,UAAID,OAAO,CAAClC,IAAR,KAAiB;AAAE;AAAvB,QAAsC;AAClCmC,QAAAA,MAAM,GAAGX,cAAT;AACH;;AACD,UAAIU,OAAO,CAAClC,IAAR,KAAiB;AAAE;AAAvB,QAAmC;AAC/BmC,QAAAA,MAAM,GAAGL,WAAT;AACH;;AACD,UAAII,OAAO,CAAClC,IAAR,KAAiB;AAAE;AAAvB,QAAqC;AACjCmC,QAAAA,MAAM,GAAGJ,aAAT;AACH;;AACDI,MAAAA,MAAM,CAACrB,WAAP,CAAmBF,QAAQ,CAACQ,aAAT,CAAuB,IAAvB,CAAnB;AACA,YAAMgB,WAAW,GAAGxB,QAAQ,CAACQ,aAAT,CAAuB,MAAvB,CAApB;;AACAjB,MAAAA,kBAAkB,CAACkC,OAAnB,CAA2BD,WAA3B,EAAwCF,OAAxC;;AACAC,MAAAA,MAAM,CAACrB,WAAP,CAAmBsB,WAAnB;AACAH,MAAAA,YAAY,CAACK,IAAb,CAAkBF,WAAlB;AACH;;AACD,SAAK5B,UAAL,GAAkBW,SAAlB;AACA,SAAKV,aAAL,GAAqBwB,YAArB;AACH;;AACa,SAAPI,OAAO,CAACD,WAAD,EAAcF,OAAd,EAAuB;AACjC,QAAIA,OAAO,CAACnC,GAAR,KAAgB,GAApB,EAAyB;AACrB,UAAIwC,UAAU,GAAG,QAAjB,CADqB,CAErB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxBD,QAAAA,UAAU,IAAIA,UAAd;AACH;;AACDH,MAAAA,WAAW,CAACK,SAAZ,GAAwBF,UAAxB;AACH,KAPD,MAQK;AACD,UAAIG,UAAU,GAAGR,OAAO,CAACnC,GAAzB,CADC,CAED;;AACA,WAAK,IAAIyC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxBE,QAAAA,UAAU,IAAIA,UAAd;AACH;;AACDN,MAAAA,WAAW,CAACO,WAAZ,GAA0BD,UAA1B;AACH;AACJ;;AACD3B,EAAAA,oBAAoB,GAAG;AACnB,SAAK,IAAIyB,CAAC,GAAG,CAAR,EAAWI,GAAG,GAAG,KAAKrC,SAAL,CAAesC,MAArC,EAA6CL,CAAC,GAAGI,GAAjD,EAAsDJ,CAAC,EAAvD,EAA2D;AACvD,YAAMN,OAAO,GAAG,KAAK3B,SAAL,CAAeiC,CAAf,CAAhB;AACA,YAAMJ,WAAW,GAAG,KAAK3B,aAAL,CAAmB+B,CAAnB,CAApB;AACAN,MAAAA,OAAO,CAAChC,OAAR,CAAgBkC,WAAW,CAACU,WAAZ,GAA0B,GAA1C;AACH;AACJ;;AA/FoB;;AAiGzB,OAAO,SAASC,cAAT,CAAwB3C,YAAxB,EAAsCC,QAAtC,EAAgD;AACnD,QAAM2C,MAAM,GAAG,IAAI7C,kBAAJ,CAAuBC,YAAvB,EAAqCC,QAArC,CAAf;AACA2C,EAAAA,MAAM,CAACtC,IAAP;AACH","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { isSafari } from '../../../base/browser/browser.js';\nimport { EDITOR_FONT_DEFAULTS } from '../../common/config/editorOptions.js';\nexport class CharWidthRequest {\n    constructor(chr, type) {\n        this.chr = chr;\n        this.type = type;\n        this.width = 0;\n    }\n    fulfill(width) {\n        this.width = width;\n    }\n}\nclass DomCharWidthReader {\n    constructor(bareFontInfo, requests) {\n        this._bareFontInfo = bareFontInfo;\n        this._requests = requests;\n        this._container = null;\n        this._testElements = null;\n    }\n    read() {\n        // Create a test container with all these test elements\n        this._createDomElements();\n        // Add the container to the DOM\n        document.body.appendChild(this._container);\n        // Read character widths\n        this._readFromDomElements();\n        // Remove the container from the DOM\n        document.body.removeChild(this._container);\n        this._container = null;\n        this._testElements = null;\n    }\n    _createDomElements() {\n        const fontFamily = this._bareFontInfo.getMassagedFontFamily(isSafari ? EDITOR_FONT_DEFAULTS.fontFamily : null);\n        const container = document.createElement('div');\n        container.style.position = 'absolute';\n        container.style.top = '-50000px';\n        container.style.width = '50000px';\n        const regularDomNode = document.createElement('div');\n        regularDomNode.style.fontFamily = fontFamily;\n        regularDomNode.style.fontWeight = this._bareFontInfo.fontWeight;\n        regularDomNode.style.fontSize = this._bareFontInfo.fontSize + 'px';\n        regularDomNode.style.fontFeatureSettings = this._bareFontInfo.fontFeatureSettings;\n        regularDomNode.style.lineHeight = this._bareFontInfo.lineHeight + 'px';\n        regularDomNode.style.letterSpacing = this._bareFontInfo.letterSpacing + 'px';\n        container.appendChild(regularDomNode);\n        const boldDomNode = document.createElement('div');\n        boldDomNode.style.fontFamily = fontFamily;\n        boldDomNode.style.fontWeight = 'bold';\n        boldDomNode.style.fontSize = this._bareFontInfo.fontSize + 'px';\n        boldDomNode.style.fontFeatureSettings = this._bareFontInfo.fontFeatureSettings;\n        boldDomNode.style.lineHeight = this._bareFontInfo.lineHeight + 'px';\n        boldDomNode.style.letterSpacing = this._bareFontInfo.letterSpacing + 'px';\n        container.appendChild(boldDomNode);\n        const italicDomNode = document.createElement('div');\n        italicDomNode.style.fontFamily = fontFamily;\n        italicDomNode.style.fontWeight = this._bareFontInfo.fontWeight;\n        italicDomNode.style.fontSize = this._bareFontInfo.fontSize + 'px';\n        italicDomNode.style.fontFeatureSettings = this._bareFontInfo.fontFeatureSettings;\n        italicDomNode.style.lineHeight = this._bareFontInfo.lineHeight + 'px';\n        italicDomNode.style.letterSpacing = this._bareFontInfo.letterSpacing + 'px';\n        italicDomNode.style.fontStyle = 'italic';\n        container.appendChild(italicDomNode);\n        const testElements = [];\n        for (const request of this._requests) {\n            let parent;\n            if (request.type === 0 /* Regular */) {\n                parent = regularDomNode;\n            }\n            if (request.type === 2 /* Bold */) {\n                parent = boldDomNode;\n            }\n            if (request.type === 1 /* Italic */) {\n                parent = italicDomNode;\n            }\n            parent.appendChild(document.createElement('br'));\n            const testElement = document.createElement('span');\n            DomCharWidthReader._render(testElement, request);\n            parent.appendChild(testElement);\n            testElements.push(testElement);\n        }\n        this._container = container;\n        this._testElements = testElements;\n    }\n    static _render(testElement, request) {\n        if (request.chr === ' ') {\n            let htmlString = '\\u00a0';\n            // Repeat character 256 (2^8) times\n            for (let i = 0; i < 8; i++) {\n                htmlString += htmlString;\n            }\n            testElement.innerText = htmlString;\n        }\n        else {\n            let testString = request.chr;\n            // Repeat character 256 (2^8) times\n            for (let i = 0; i < 8; i++) {\n                testString += testString;\n            }\n            testElement.textContent = testString;\n        }\n    }\n    _readFromDomElements() {\n        for (let i = 0, len = this._requests.length; i < len; i++) {\n            const request = this._requests[i];\n            const testElement = this._testElements[i];\n            request.fulfill(testElement.offsetWidth / 256);\n        }\n    }\n}\nexport function readCharWidths(bareFontInfo, requests) {\n    const reader = new DomCharWidthReader(bareFontInfo, requests);\n    reader.read();\n}\n"]},"metadata":{},"sourceType":"module"}