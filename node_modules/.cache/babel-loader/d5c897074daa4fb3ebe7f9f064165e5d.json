{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/**\n * Describes what to do with the indentation when pressing Enter.\n */\nexport var IndentAction;\n\n(function (IndentAction) {\n  /**\n   * Insert new line and copy the previous line's indentation.\n   */\n  IndentAction[IndentAction[\"None\"] = 0] = \"None\";\n  /**\n   * Insert new line and indent once (relative to the previous line's indentation).\n   */\n\n  IndentAction[IndentAction[\"Indent\"] = 1] = \"Indent\";\n  /**\n   * Insert two new lines:\n   *  - the first one indented which will hold the cursor\n   *  - the second one at the same indentation level\n   */\n\n  IndentAction[IndentAction[\"IndentOutdent\"] = 2] = \"IndentOutdent\";\n  /**\n   * Insert new line and outdent once (relative to the previous line's indentation).\n   */\n\n  IndentAction[IndentAction[\"Outdent\"] = 3] = \"Outdent\";\n})(IndentAction || (IndentAction = {}));\n/**\n * @internal\n */\n\n\nexport class StandardAutoClosingPairConditional {\n  constructor(source) {\n    this._standardAutoClosingPairConditionalBrand = undefined;\n    this.open = source.open;\n    this.close = source.close; // initially allowed in all tokens\n\n    this._standardTokenMask = 0;\n\n    if (Array.isArray(source.notIn)) {\n      for (let i = 0, len = source.notIn.length; i < len; i++) {\n        const notIn = source.notIn[i];\n\n        switch (notIn) {\n          case 'string':\n            this._standardTokenMask |= 2\n            /* String */\n            ;\n            break;\n\n          case 'comment':\n            this._standardTokenMask |= 1\n            /* Comment */\n            ;\n            break;\n\n          case 'regex':\n            this._standardTokenMask |= 4\n            /* RegEx */\n            ;\n            break;\n        }\n      }\n    }\n  }\n\n  isOK(standardToken) {\n    return (this._standardTokenMask & standardToken) === 0;\n  }\n\n}\n/**\n * @internal\n */\n\nexport class AutoClosingPairs {\n  constructor(autoClosingPairs) {\n    this.autoClosingPairsOpenByStart = new Map();\n    this.autoClosingPairsOpenByEnd = new Map();\n    this.autoClosingPairsCloseByStart = new Map();\n    this.autoClosingPairsCloseByEnd = new Map();\n    this.autoClosingPairsCloseSingleChar = new Map();\n\n    for (const pair of autoClosingPairs) {\n      appendEntry(this.autoClosingPairsOpenByStart, pair.open.charAt(0), pair);\n      appendEntry(this.autoClosingPairsOpenByEnd, pair.open.charAt(pair.open.length - 1), pair);\n      appendEntry(this.autoClosingPairsCloseByStart, pair.close.charAt(0), pair);\n      appendEntry(this.autoClosingPairsCloseByEnd, pair.close.charAt(pair.close.length - 1), pair);\n\n      if (pair.close.length === 1 && pair.open.length === 1) {\n        appendEntry(this.autoClosingPairsCloseSingleChar, pair.close, pair);\n      }\n    }\n  }\n\n}\n\nfunction appendEntry(target, key, value) {\n  if (target.has(key)) {\n    target.get(key).push(value);\n  } else {\n    target.set(key, [value]);\n  }\n}","map":{"version":3,"sources":["/home/umut/Documents/cs/cs410/Project2Group14/node_modules/monaco-editor/esm/vs/editor/common/modes/languageConfiguration.js"],"names":["IndentAction","StandardAutoClosingPairConditional","constructor","source","_standardAutoClosingPairConditionalBrand","undefined","open","close","_standardTokenMask","Array","isArray","notIn","i","len","length","isOK","standardToken","AutoClosingPairs","autoClosingPairs","autoClosingPairsOpenByStart","Map","autoClosingPairsOpenByEnd","autoClosingPairsCloseByStart","autoClosingPairsCloseByEnd","autoClosingPairsCloseSingleChar","pair","appendEntry","charAt","target","key","value","has","get","push","set"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * Describes what to do with the indentation when pressing Enter.\n */\nexport var IndentAction;\n(function (IndentAction) {\n    /**\n     * Insert new line and copy the previous line's indentation.\n     */\n    IndentAction[IndentAction[\"None\"] = 0] = \"None\";\n    /**\n     * Insert new line and indent once (relative to the previous line's indentation).\n     */\n    IndentAction[IndentAction[\"Indent\"] = 1] = \"Indent\";\n    /**\n     * Insert two new lines:\n     *  - the first one indented which will hold the cursor\n     *  - the second one at the same indentation level\n     */\n    IndentAction[IndentAction[\"IndentOutdent\"] = 2] = \"IndentOutdent\";\n    /**\n     * Insert new line and outdent once (relative to the previous line's indentation).\n     */\n    IndentAction[IndentAction[\"Outdent\"] = 3] = \"Outdent\";\n})(IndentAction || (IndentAction = {}));\n/**\n * @internal\n */\nexport class StandardAutoClosingPairConditional {\n    constructor(source) {\n        this._standardAutoClosingPairConditionalBrand = undefined;\n        this.open = source.open;\n        this.close = source.close;\n        // initially allowed in all tokens\n        this._standardTokenMask = 0;\n        if (Array.isArray(source.notIn)) {\n            for (let i = 0, len = source.notIn.length; i < len; i++) {\n                const notIn = source.notIn[i];\n                switch (notIn) {\n                    case 'string':\n                        this._standardTokenMask |= 2 /* String */;\n                        break;\n                    case 'comment':\n                        this._standardTokenMask |= 1 /* Comment */;\n                        break;\n                    case 'regex':\n                        this._standardTokenMask |= 4 /* RegEx */;\n                        break;\n                }\n            }\n        }\n    }\n    isOK(standardToken) {\n        return (this._standardTokenMask & standardToken) === 0;\n    }\n}\n/**\n * @internal\n */\nexport class AutoClosingPairs {\n    constructor(autoClosingPairs) {\n        this.autoClosingPairsOpenByStart = new Map();\n        this.autoClosingPairsOpenByEnd = new Map();\n        this.autoClosingPairsCloseByStart = new Map();\n        this.autoClosingPairsCloseByEnd = new Map();\n        this.autoClosingPairsCloseSingleChar = new Map();\n        for (const pair of autoClosingPairs) {\n            appendEntry(this.autoClosingPairsOpenByStart, pair.open.charAt(0), pair);\n            appendEntry(this.autoClosingPairsOpenByEnd, pair.open.charAt(pair.open.length - 1), pair);\n            appendEntry(this.autoClosingPairsCloseByStart, pair.close.charAt(0), pair);\n            appendEntry(this.autoClosingPairsCloseByEnd, pair.close.charAt(pair.close.length - 1), pair);\n            if (pair.close.length === 1 && pair.open.length === 1) {\n                appendEntry(this.autoClosingPairsCloseSingleChar, pair.close, pair);\n            }\n        }\n    }\n}\nfunction appendEntry(target, key, value) {\n    if (target.has(key)) {\n        target.get(key).push(value);\n    }\n    else {\n        target.set(key, [value]);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}