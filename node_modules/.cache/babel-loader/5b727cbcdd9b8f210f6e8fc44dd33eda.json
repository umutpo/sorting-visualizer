{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as arrays from '../../../base/common/arrays.js';\nimport { ResourceMap } from '../../../base/common/map.js';\nimport * as objects from '../../../base/common/objects.js';\nimport * as types from '../../../base/common/types.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { addToValueTree, getConfigurationKeys, getConfigurationValue, getDefaultValues, removeFromValueTree, toValuesTree } from './configuration.js';\nimport { overrideIdentifierFromKey, OVERRIDE_PROPERTY_PATTERN } from './configurationRegistry.js';\nexport class ConfigurationModel {\n  constructor() {\n    let _contents = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    let _keys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    let _overrides = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n    this._contents = _contents;\n    this._keys = _keys;\n    this._overrides = _overrides;\n    this.isFrozen = false;\n    this.overrideConfigurations = new Map();\n  }\n\n  get contents() {\n    return this.checkAndFreeze(this._contents);\n  }\n\n  get overrides() {\n    return this.checkAndFreeze(this._overrides);\n  }\n\n  get keys() {\n    return this.checkAndFreeze(this._keys);\n  }\n\n  isEmpty() {\n    return this._keys.length === 0 && Object.keys(this._contents).length === 0 && this._overrides.length === 0;\n  }\n\n  getValue(section) {\n    return section ? getConfigurationValue(this.contents, section) : this.contents;\n  }\n\n  override(identifier) {\n    let overrideConfigurationModel = this.overrideConfigurations.get(identifier);\n\n    if (!overrideConfigurationModel) {\n      overrideConfigurationModel = this.createOverrideConfigurationModel(identifier);\n      this.overrideConfigurations.set(identifier, overrideConfigurationModel);\n    }\n\n    return overrideConfigurationModel;\n  }\n\n  merge() {\n    const contents = objects.deepClone(this.contents);\n    const overrides = objects.deepClone(this.overrides);\n    const keys = [...this.keys];\n\n    for (var _len = arguments.length, others = new Array(_len), _key = 0; _key < _len; _key++) {\n      others[_key] = arguments[_key];\n    }\n\n    for (const other of others) {\n      this.mergeContents(contents, other.contents);\n\n      for (const otherOverride of other.overrides) {\n        const [override] = overrides.filter(o => arrays.equals(o.identifiers, otherOverride.identifiers));\n\n        if (override) {\n          this.mergeContents(override.contents, otherOverride.contents);\n        } else {\n          overrides.push(objects.deepClone(otherOverride));\n        }\n      }\n\n      for (const key of other.keys) {\n        if (keys.indexOf(key) === -1) {\n          keys.push(key);\n        }\n      }\n    }\n\n    return new ConfigurationModel(contents, keys, overrides);\n  }\n\n  freeze() {\n    this.isFrozen = true;\n    return this;\n  }\n\n  createOverrideConfigurationModel(identifier) {\n    const overrideContents = this.getContentsForOverrideIdentifer(identifier);\n\n    if (!overrideContents || typeof overrideContents !== 'object' || !Object.keys(overrideContents).length) {\n      // If there are no valid overrides, return self\n      return this;\n    }\n\n    let contents = {};\n\n    for (const key of arrays.distinct([...Object.keys(this.contents), ...Object.keys(overrideContents)])) {\n      let contentsForKey = this.contents[key];\n      let overrideContentsForKey = overrideContents[key]; // If there are override contents for the key, clone and merge otherwise use base contents\n\n      if (overrideContentsForKey) {\n        // Clone and merge only if base contents and override contents are of type object otherwise just override\n        if (typeof contentsForKey === 'object' && typeof overrideContentsForKey === 'object') {\n          contentsForKey = objects.deepClone(contentsForKey);\n          this.mergeContents(contentsForKey, overrideContentsForKey);\n        } else {\n          contentsForKey = overrideContentsForKey;\n        }\n      }\n\n      contents[key] = contentsForKey;\n    }\n\n    return new ConfigurationModel(contents, this.keys, this.overrides);\n  }\n\n  mergeContents(source, target) {\n    for (const key of Object.keys(target)) {\n      if (key in source) {\n        if (types.isObject(source[key]) && types.isObject(target[key])) {\n          this.mergeContents(source[key], target[key]);\n          continue;\n        }\n      }\n\n      source[key] = objects.deepClone(target[key]);\n    }\n  }\n\n  checkAndFreeze(data) {\n    if (this.isFrozen && !Object.isFrozen(data)) {\n      return objects.deepFreeze(data);\n    }\n\n    return data;\n  }\n\n  getContentsForOverrideIdentifer(identifier) {\n    for (const override of this.overrides) {\n      if (override.identifiers.indexOf(identifier) !== -1) {\n        return override.contents;\n      }\n    }\n\n    return null;\n  }\n\n  toJSON() {\n    return {\n      contents: this.contents,\n      overrides: this.overrides,\n      keys: this.keys\n    };\n  } // Update methods\n\n\n  setValue(key, value) {\n    this.addKey(key);\n    addToValueTree(this.contents, key, value, e => {\n      throw new Error(e);\n    });\n  }\n\n  removeValue(key) {\n    if (this.removeKey(key)) {\n      removeFromValueTree(this.contents, key);\n    }\n  }\n\n  addKey(key) {\n    let index = this.keys.length;\n\n    for (let i = 0; i < index; i++) {\n      if (key.indexOf(this.keys[i]) === 0) {\n        index = i;\n      }\n    }\n\n    this.keys.splice(index, 1, key);\n  }\n\n  removeKey(key) {\n    let index = this.keys.indexOf(key);\n\n    if (index !== -1) {\n      this.keys.splice(index, 1);\n      return true;\n    }\n\n    return false;\n  }\n\n}\nexport class DefaultConfigurationModel extends ConfigurationModel {\n  constructor() {\n    const contents = getDefaultValues();\n    const keys = getConfigurationKeys();\n    const overrides = [];\n\n    for (const key of Object.keys(contents)) {\n      if (OVERRIDE_PROPERTY_PATTERN.test(key)) {\n        overrides.push({\n          identifiers: [overrideIdentifierFromKey(key).trim()],\n          keys: Object.keys(contents[key]),\n          contents: toValuesTree(contents[key], message => console.error(`Conflict in default settings file: ${message}`))\n        });\n      }\n    }\n\n    super(contents, keys, overrides);\n  }\n\n}\nexport class Configuration {\n  constructor(_defaultConfiguration, _localUserConfiguration) {\n    let _remoteUserConfiguration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new ConfigurationModel();\n\n    let _workspaceConfiguration = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new ConfigurationModel();\n\n    let _folderConfigurations = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : new ResourceMap();\n\n    let _memoryConfiguration = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : new ConfigurationModel();\n\n    let _memoryConfigurationByResource = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ResourceMap();\n\n    let _freeze = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : true;\n\n    this._defaultConfiguration = _defaultConfiguration;\n    this._localUserConfiguration = _localUserConfiguration;\n    this._remoteUserConfiguration = _remoteUserConfiguration;\n    this._workspaceConfiguration = _workspaceConfiguration;\n    this._folderConfigurations = _folderConfigurations;\n    this._memoryConfiguration = _memoryConfiguration;\n    this._memoryConfigurationByResource = _memoryConfigurationByResource;\n    this._freeze = _freeze;\n    this._workspaceConsolidatedConfiguration = null;\n    this._foldersConsolidatedConfigurations = new ResourceMap();\n    this._userConfiguration = null;\n  }\n\n  getValue(section, overrides, workspace) {\n    const consolidateConfigurationModel = this.getConsolidateConfigurationModel(overrides, workspace);\n    return consolidateConfigurationModel.getValue(section);\n  }\n\n  updateValue(key, value) {\n    let overrides = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let memoryConfiguration;\n\n    if (overrides.resource) {\n      memoryConfiguration = this._memoryConfigurationByResource.get(overrides.resource);\n\n      if (!memoryConfiguration) {\n        memoryConfiguration = new ConfigurationModel();\n\n        this._memoryConfigurationByResource.set(overrides.resource, memoryConfiguration);\n      }\n    } else {\n      memoryConfiguration = this._memoryConfiguration;\n    }\n\n    if (value === undefined) {\n      memoryConfiguration.removeValue(key);\n    } else {\n      memoryConfiguration.setValue(key, value);\n    }\n\n    if (!overrides.resource) {\n      this._workspaceConsolidatedConfiguration = null;\n    }\n  }\n\n  get userConfiguration() {\n    if (!this._userConfiguration) {\n      this._userConfiguration = this._remoteUserConfiguration.isEmpty() ? this._localUserConfiguration : this._localUserConfiguration.merge(this._remoteUserConfiguration);\n\n      if (this._freeze) {\n        this._userConfiguration.freeze();\n      }\n    }\n\n    return this._userConfiguration;\n  }\n\n  getConsolidateConfigurationModel(overrides, workspace) {\n    let configurationModel = this.getConsolidatedConfigurationModelForResource(overrides, workspace);\n    return overrides.overrideIdentifier ? configurationModel.override(overrides.overrideIdentifier) : configurationModel;\n  }\n\n  getConsolidatedConfigurationModelForResource(_ref, workspace) {\n    let {\n      resource\n    } = _ref;\n    let consolidateConfiguration = this.getWorkspaceConsolidatedConfiguration();\n\n    if (workspace && resource) {\n      const root = workspace.getFolder(resource);\n\n      if (root) {\n        consolidateConfiguration = this.getFolderConsolidatedConfiguration(root.uri) || consolidateConfiguration;\n      }\n\n      const memoryConfigurationForResource = this._memoryConfigurationByResource.get(resource);\n\n      if (memoryConfigurationForResource) {\n        consolidateConfiguration = consolidateConfiguration.merge(memoryConfigurationForResource);\n      }\n    }\n\n    return consolidateConfiguration;\n  }\n\n  getWorkspaceConsolidatedConfiguration() {\n    if (!this._workspaceConsolidatedConfiguration) {\n      this._workspaceConsolidatedConfiguration = this._defaultConfiguration.merge(this.userConfiguration, this._workspaceConfiguration, this._memoryConfiguration);\n\n      if (this._freeze) {\n        this._workspaceConfiguration = this._workspaceConfiguration.freeze();\n      }\n    }\n\n    return this._workspaceConsolidatedConfiguration;\n  }\n\n  getFolderConsolidatedConfiguration(folder) {\n    let folderConsolidatedConfiguration = this._foldersConsolidatedConfigurations.get(folder);\n\n    if (!folderConsolidatedConfiguration) {\n      const workspaceConsolidateConfiguration = this.getWorkspaceConsolidatedConfiguration();\n\n      const folderConfiguration = this._folderConfigurations.get(folder);\n\n      if (folderConfiguration) {\n        folderConsolidatedConfiguration = workspaceConsolidateConfiguration.merge(folderConfiguration);\n\n        if (this._freeze) {\n          folderConsolidatedConfiguration = folderConsolidatedConfiguration.freeze();\n        }\n\n        this._foldersConsolidatedConfigurations.set(folder, folderConsolidatedConfiguration);\n      } else {\n        folderConsolidatedConfiguration = workspaceConsolidateConfiguration;\n      }\n    }\n\n    return folderConsolidatedConfiguration;\n  }\n\n  toData() {\n    return {\n      defaults: {\n        contents: this._defaultConfiguration.contents,\n        overrides: this._defaultConfiguration.overrides,\n        keys: this._defaultConfiguration.keys\n      },\n      user: {\n        contents: this.userConfiguration.contents,\n        overrides: this.userConfiguration.overrides,\n        keys: this.userConfiguration.keys\n      },\n      workspace: {\n        contents: this._workspaceConfiguration.contents,\n        overrides: this._workspaceConfiguration.overrides,\n        keys: this._workspaceConfiguration.keys\n      },\n      folders: [...this._folderConfigurations.keys()].reduce((result, folder) => {\n        const {\n          contents,\n          overrides,\n          keys\n        } = this._folderConfigurations.get(folder);\n\n        result.push([folder, {\n          contents,\n          overrides,\n          keys\n        }]);\n        return result;\n      }, [])\n    };\n  }\n\n  static parse(data) {\n    const defaultConfiguration = this.parseConfigurationModel(data.defaults);\n    const userConfiguration = this.parseConfigurationModel(data.user);\n    const workspaceConfiguration = this.parseConfigurationModel(data.workspace);\n    const folders = data.folders.reduce((result, value) => {\n      result.set(URI.revive(value[0]), this.parseConfigurationModel(value[1]));\n      return result;\n    }, new ResourceMap());\n    return new Configuration(defaultConfiguration, userConfiguration, new ConfigurationModel(), workspaceConfiguration, folders, new ConfigurationModel(), new ResourceMap(), false);\n  }\n\n  static parseConfigurationModel(model) {\n    return new ConfigurationModel(model.contents, model.keys, model.overrides).freeze();\n  }\n\n}\nexport class ConfigurationChangeEvent {\n  constructor(change, previous, currentConfiguraiton, currentWorkspace) {\n    this.change = change;\n    this.previous = previous;\n    this.currentConfiguraiton = currentConfiguraiton;\n    this.currentWorkspace = currentWorkspace;\n    this._previousConfiguration = undefined;\n    const keysSet = new Set();\n    change.keys.forEach(key => keysSet.add(key));\n    change.overrides.forEach(_ref2 => {\n      let [, keys] = _ref2;\n      return keys.forEach(key => keysSet.add(key));\n    });\n    this.affectedKeys = [...keysSet.values()];\n    const configurationModel = new ConfigurationModel();\n    this.affectedKeys.forEach(key => configurationModel.setValue(key, {}));\n    this.affectedKeysTree = configurationModel.contents;\n  }\n\n  get previousConfiguration() {\n    if (!this._previousConfiguration && this.previous) {\n      this._previousConfiguration = Configuration.parse(this.previous.data);\n    }\n\n    return this._previousConfiguration;\n  }\n\n  affectsConfiguration(section, overrides) {\n    var _a;\n\n    if (this.doesAffectedKeysTreeContains(this.affectedKeysTree, section)) {\n      if (overrides) {\n        const value1 = this.previousConfiguration ? this.previousConfiguration.getValue(section, overrides, (_a = this.previous) === null || _a === void 0 ? void 0 : _a.workspace) : undefined;\n        const value2 = this.currentConfiguraiton.getValue(section, overrides, this.currentWorkspace);\n        return !objects.equals(value1, value2);\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  doesAffectedKeysTreeContains(affectedKeysTree, section) {\n    let requestedTree = toValuesTree({\n      [section]: true\n    }, () => {});\n    let key;\n\n    while (typeof requestedTree === 'object' && (key = Object.keys(requestedTree)[0])) {\n      // Only one key should present, since we added only one property\n      affectedKeysTree = affectedKeysTree[key];\n\n      if (!affectedKeysTree) {\n        return false; // Requested tree is not found\n      }\n\n      requestedTree = requestedTree[key];\n    }\n\n    return true;\n  }\n\n}","map":{"version":3,"sources":["/home/umut/Documents/cs/cs410/Project2Group14/node_modules/monaco-editor/esm/vs/platform/configuration/common/configurationModels.js"],"names":["arrays","ResourceMap","objects","types","URI","addToValueTree","getConfigurationKeys","getConfigurationValue","getDefaultValues","removeFromValueTree","toValuesTree","overrideIdentifierFromKey","OVERRIDE_PROPERTY_PATTERN","ConfigurationModel","constructor","_contents","_keys","_overrides","isFrozen","overrideConfigurations","Map","contents","checkAndFreeze","overrides","keys","isEmpty","length","Object","getValue","section","override","identifier","overrideConfigurationModel","get","createOverrideConfigurationModel","set","merge","deepClone","others","other","mergeContents","otherOverride","filter","o","equals","identifiers","push","key","indexOf","freeze","overrideContents","getContentsForOverrideIdentifer","distinct","contentsForKey","overrideContentsForKey","source","target","isObject","data","deepFreeze","toJSON","setValue","value","addKey","e","Error","removeValue","removeKey","index","i","splice","DefaultConfigurationModel","test","trim","message","console","error","Configuration","_defaultConfiguration","_localUserConfiguration","_remoteUserConfiguration","_workspaceConfiguration","_folderConfigurations","_memoryConfiguration","_memoryConfigurationByResource","_freeze","_workspaceConsolidatedConfiguration","_foldersConsolidatedConfigurations","_userConfiguration","workspace","consolidateConfigurationModel","getConsolidateConfigurationModel","updateValue","memoryConfiguration","resource","undefined","userConfiguration","configurationModel","getConsolidatedConfigurationModelForResource","overrideIdentifier","consolidateConfiguration","getWorkspaceConsolidatedConfiguration","root","getFolder","getFolderConsolidatedConfiguration","uri","memoryConfigurationForResource","folder","folderConsolidatedConfiguration","workspaceConsolidateConfiguration","folderConfiguration","toData","defaults","user","folders","reduce","result","parse","defaultConfiguration","parseConfigurationModel","workspaceConfiguration","revive","model","ConfigurationChangeEvent","change","previous","currentConfiguraiton","currentWorkspace","_previousConfiguration","keysSet","Set","forEach","add","affectedKeys","values","affectedKeysTree","previousConfiguration","affectsConfiguration","_a","doesAffectedKeysTreeContains","value1","value2","requestedTree"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,KAAKA,MAAZ,MAAwB,gCAAxB;AACA,SAASC,WAAT,QAA4B,6BAA5B;AACA,OAAO,KAAKC,OAAZ,MAAyB,iCAAzB;AACA,OAAO,KAAKC,KAAZ,MAAuB,+BAAvB;AACA,SAASC,GAAT,QAAoB,6BAApB;AACA,SAASC,cAAT,EAAyBC,oBAAzB,EAA+CC,qBAA/C,EAAsEC,gBAAtE,EAAwFC,mBAAxF,EAA6GC,YAA7G,QAAiI,oBAAjI;AACA,SAASC,yBAAT,EAAoCC,yBAApC,QAAqE,4BAArE;AACA,OAAO,MAAMC,kBAAN,CAAyB;AAC5BC,EAAAA,WAAW,GAA8C;AAAA,QAA7CC,SAA6C,uEAAjC,EAAiC;;AAAA,QAA7BC,KAA6B,uEAArB,EAAqB;;AAAA,QAAjBC,UAAiB,uEAAJ,EAAI;;AACrD,SAAKF,SAAL,GAAiBA,SAAjB;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,QAAL,GAAgB,KAAhB;AACA,SAAKC,sBAAL,GAA8B,IAAIC,GAAJ,EAA9B;AACH;;AACW,MAARC,QAAQ,GAAG;AACX,WAAO,KAAKC,cAAL,CAAoB,KAAKP,SAAzB,CAAP;AACH;;AACY,MAATQ,SAAS,GAAG;AACZ,WAAO,KAAKD,cAAL,CAAoB,KAAKL,UAAzB,CAAP;AACH;;AACO,MAAJO,IAAI,GAAG;AACP,WAAO,KAAKF,cAAL,CAAoB,KAAKN,KAAzB,CAAP;AACH;;AACDS,EAAAA,OAAO,GAAG;AACN,WAAO,KAAKT,KAAL,CAAWU,MAAX,KAAsB,CAAtB,IAA2BC,MAAM,CAACH,IAAP,CAAY,KAAKT,SAAjB,EAA4BW,MAA5B,KAAuC,CAAlE,IAAuE,KAAKT,UAAL,CAAgBS,MAAhB,KAA2B,CAAzG;AACH;;AACDE,EAAAA,QAAQ,CAACC,OAAD,EAAU;AACd,WAAOA,OAAO,GAAGtB,qBAAqB,CAAC,KAAKc,QAAN,EAAgBQ,OAAhB,CAAxB,GAAmD,KAAKR,QAAtE;AACH;;AACDS,EAAAA,QAAQ,CAACC,UAAD,EAAa;AACjB,QAAIC,0BAA0B,GAAG,KAAKb,sBAAL,CAA4Bc,GAA5B,CAAgCF,UAAhC,CAAjC;;AACA,QAAI,CAACC,0BAAL,EAAiC;AAC7BA,MAAAA,0BAA0B,GAAG,KAAKE,gCAAL,CAAsCH,UAAtC,CAA7B;AACA,WAAKZ,sBAAL,CAA4BgB,GAA5B,CAAgCJ,UAAhC,EAA4CC,0BAA5C;AACH;;AACD,WAAOA,0BAAP;AACH;;AACDI,EAAAA,KAAK,GAAY;AACb,UAAMf,QAAQ,GAAGnB,OAAO,CAACmC,SAAR,CAAkB,KAAKhB,QAAvB,CAAjB;AACA,UAAME,SAAS,GAAGrB,OAAO,CAACmC,SAAR,CAAkB,KAAKd,SAAvB,CAAlB;AACA,UAAMC,IAAI,GAAG,CAAC,GAAG,KAAKA,IAAT,CAAb;;AAHa,sCAARc,MAAQ;AAARA,MAAAA,MAAQ;AAAA;;AAIb,SAAK,MAAMC,KAAX,IAAoBD,MAApB,EAA4B;AACxB,WAAKE,aAAL,CAAmBnB,QAAnB,EAA6BkB,KAAK,CAAClB,QAAnC;;AACA,WAAK,MAAMoB,aAAX,IAA4BF,KAAK,CAAChB,SAAlC,EAA6C;AACzC,cAAM,CAACO,QAAD,IAAaP,SAAS,CAACmB,MAAV,CAAiBC,CAAC,IAAI3C,MAAM,CAAC4C,MAAP,CAAcD,CAAC,CAACE,WAAhB,EAA6BJ,aAAa,CAACI,WAA3C,CAAtB,CAAnB;;AACA,YAAIf,QAAJ,EAAc;AACV,eAAKU,aAAL,CAAmBV,QAAQ,CAACT,QAA5B,EAAsCoB,aAAa,CAACpB,QAApD;AACH,SAFD,MAGK;AACDE,UAAAA,SAAS,CAACuB,IAAV,CAAe5C,OAAO,CAACmC,SAAR,CAAkBI,aAAlB,CAAf;AACH;AACJ;;AACD,WAAK,MAAMM,GAAX,IAAkBR,KAAK,CAACf,IAAxB,EAA8B;AAC1B,YAAIA,IAAI,CAACwB,OAAL,CAAaD,GAAb,MAAsB,CAAC,CAA3B,EAA8B;AAC1BvB,UAAAA,IAAI,CAACsB,IAAL,CAAUC,GAAV;AACH;AACJ;AACJ;;AACD,WAAO,IAAIlC,kBAAJ,CAAuBQ,QAAvB,EAAiCG,IAAjC,EAAuCD,SAAvC,CAAP;AACH;;AACD0B,EAAAA,MAAM,GAAG;AACL,SAAK/B,QAAL,GAAgB,IAAhB;AACA,WAAO,IAAP;AACH;;AACDgB,EAAAA,gCAAgC,CAACH,UAAD,EAAa;AACzC,UAAMmB,gBAAgB,GAAG,KAAKC,+BAAL,CAAqCpB,UAArC,CAAzB;;AACA,QAAI,CAACmB,gBAAD,IAAqB,OAAOA,gBAAP,KAA4B,QAAjD,IAA6D,CAACvB,MAAM,CAACH,IAAP,CAAY0B,gBAAZ,EAA8BxB,MAAhG,EAAwG;AACpG;AACA,aAAO,IAAP;AACH;;AACD,QAAIL,QAAQ,GAAG,EAAf;;AACA,SAAK,MAAM0B,GAAX,IAAkB/C,MAAM,CAACoD,QAAP,CAAgB,CAAC,GAAGzB,MAAM,CAACH,IAAP,CAAY,KAAKH,QAAjB,CAAJ,EAAgC,GAAGM,MAAM,CAACH,IAAP,CAAY0B,gBAAZ,CAAnC,CAAhB,CAAlB,EAAsG;AAClG,UAAIG,cAAc,GAAG,KAAKhC,QAAL,CAAc0B,GAAd,CAArB;AACA,UAAIO,sBAAsB,GAAGJ,gBAAgB,CAACH,GAAD,CAA7C,CAFkG,CAGlG;;AACA,UAAIO,sBAAJ,EAA4B;AACxB;AACA,YAAI,OAAOD,cAAP,KAA0B,QAA1B,IAAsC,OAAOC,sBAAP,KAAkC,QAA5E,EAAsF;AAClFD,UAAAA,cAAc,GAAGnD,OAAO,CAACmC,SAAR,CAAkBgB,cAAlB,CAAjB;AACA,eAAKb,aAAL,CAAmBa,cAAnB,EAAmCC,sBAAnC;AACH,SAHD,MAIK;AACDD,UAAAA,cAAc,GAAGC,sBAAjB;AACH;AACJ;;AACDjC,MAAAA,QAAQ,CAAC0B,GAAD,CAAR,GAAgBM,cAAhB;AACH;;AACD,WAAO,IAAIxC,kBAAJ,CAAuBQ,QAAvB,EAAiC,KAAKG,IAAtC,EAA4C,KAAKD,SAAjD,CAAP;AACH;;AACDiB,EAAAA,aAAa,CAACe,MAAD,EAASC,MAAT,EAAiB;AAC1B,SAAK,MAAMT,GAAX,IAAkBpB,MAAM,CAACH,IAAP,CAAYgC,MAAZ,CAAlB,EAAuC;AACnC,UAAIT,GAAG,IAAIQ,MAAX,EAAmB;AACf,YAAIpD,KAAK,CAACsD,QAAN,CAAeF,MAAM,CAACR,GAAD,CAArB,KAA+B5C,KAAK,CAACsD,QAAN,CAAeD,MAAM,CAACT,GAAD,CAArB,CAAnC,EAAgE;AAC5D,eAAKP,aAAL,CAAmBe,MAAM,CAACR,GAAD,CAAzB,EAAgCS,MAAM,CAACT,GAAD,CAAtC;AACA;AACH;AACJ;;AACDQ,MAAAA,MAAM,CAACR,GAAD,CAAN,GAAc7C,OAAO,CAACmC,SAAR,CAAkBmB,MAAM,CAACT,GAAD,CAAxB,CAAd;AACH;AACJ;;AACDzB,EAAAA,cAAc,CAACoC,IAAD,EAAO;AACjB,QAAI,KAAKxC,QAAL,IAAiB,CAACS,MAAM,CAACT,QAAP,CAAgBwC,IAAhB,CAAtB,EAA6C;AACzC,aAAOxD,OAAO,CAACyD,UAAR,CAAmBD,IAAnB,CAAP;AACH;;AACD,WAAOA,IAAP;AACH;;AACDP,EAAAA,+BAA+B,CAACpB,UAAD,EAAa;AACxC,SAAK,MAAMD,QAAX,IAAuB,KAAKP,SAA5B,EAAuC;AACnC,UAAIO,QAAQ,CAACe,WAAT,CAAqBG,OAArB,CAA6BjB,UAA7B,MAA6C,CAAC,CAAlD,EAAqD;AACjD,eAAOD,QAAQ,CAACT,QAAhB;AACH;AACJ;;AACD,WAAO,IAAP;AACH;;AACDuC,EAAAA,MAAM,GAAG;AACL,WAAO;AACHvC,MAAAA,QAAQ,EAAE,KAAKA,QADZ;AAEHE,MAAAA,SAAS,EAAE,KAAKA,SAFb;AAGHC,MAAAA,IAAI,EAAE,KAAKA;AAHR,KAAP;AAKH,GAlH2B,CAmH5B;;;AACAqC,EAAAA,QAAQ,CAACd,GAAD,EAAMe,KAAN,EAAa;AACjB,SAAKC,MAAL,CAAYhB,GAAZ;AACA1C,IAAAA,cAAc,CAAC,KAAKgB,QAAN,EAAgB0B,GAAhB,EAAqBe,KAArB,EAA4BE,CAAC,IAAI;AAAE,YAAM,IAAIC,KAAJ,CAAUD,CAAV,CAAN;AAAqB,KAAxD,CAAd;AACH;;AACDE,EAAAA,WAAW,CAACnB,GAAD,EAAM;AACb,QAAI,KAAKoB,SAAL,CAAepB,GAAf,CAAJ,EAAyB;AACrBtC,MAAAA,mBAAmB,CAAC,KAAKY,QAAN,EAAgB0B,GAAhB,CAAnB;AACH;AACJ;;AACDgB,EAAAA,MAAM,CAAChB,GAAD,EAAM;AACR,QAAIqB,KAAK,GAAG,KAAK5C,IAAL,CAAUE,MAAtB;;AACA,SAAK,IAAI2C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAApB,EAA2BC,CAAC,EAA5B,EAAgC;AAC5B,UAAItB,GAAG,CAACC,OAAJ,CAAY,KAAKxB,IAAL,CAAU6C,CAAV,CAAZ,MAA8B,CAAlC,EAAqC;AACjCD,QAAAA,KAAK,GAAGC,CAAR;AACH;AACJ;;AACD,SAAK7C,IAAL,CAAU8C,MAAV,CAAiBF,KAAjB,EAAwB,CAAxB,EAA2BrB,GAA3B;AACH;;AACDoB,EAAAA,SAAS,CAACpB,GAAD,EAAM;AACX,QAAIqB,KAAK,GAAG,KAAK5C,IAAL,CAAUwB,OAAV,CAAkBD,GAAlB,CAAZ;;AACA,QAAIqB,KAAK,KAAK,CAAC,CAAf,EAAkB;AACd,WAAK5C,IAAL,CAAU8C,MAAV,CAAiBF,KAAjB,EAAwB,CAAxB;AACA,aAAO,IAAP;AACH;;AACD,WAAO,KAAP;AACH;;AA7I2B;AA+IhC,OAAO,MAAMG,yBAAN,SAAwC1D,kBAAxC,CAA2D;AAC9DC,EAAAA,WAAW,GAAG;AACV,UAAMO,QAAQ,GAAGb,gBAAgB,EAAjC;AACA,UAAMgB,IAAI,GAAGlB,oBAAoB,EAAjC;AACA,UAAMiB,SAAS,GAAG,EAAlB;;AACA,SAAK,MAAMwB,GAAX,IAAkBpB,MAAM,CAACH,IAAP,CAAYH,QAAZ,CAAlB,EAAyC;AACrC,UAAIT,yBAAyB,CAAC4D,IAA1B,CAA+BzB,GAA/B,CAAJ,EAAyC;AACrCxB,QAAAA,SAAS,CAACuB,IAAV,CAAe;AACXD,UAAAA,WAAW,EAAE,CAAClC,yBAAyB,CAACoC,GAAD,CAAzB,CAA+B0B,IAA/B,EAAD,CADF;AAEXjD,UAAAA,IAAI,EAAEG,MAAM,CAACH,IAAP,CAAYH,QAAQ,CAAC0B,GAAD,CAApB,CAFK;AAGX1B,UAAAA,QAAQ,EAAEX,YAAY,CAACW,QAAQ,CAAC0B,GAAD,CAAT,EAAgB2B,OAAO,IAAIC,OAAO,CAACC,KAAR,CAAe,sCAAqCF,OAAQ,EAA5D,CAA3B;AAHX,SAAf;AAKH;AACJ;;AACD,UAAMrD,QAAN,EAAgBG,IAAhB,EAAsBD,SAAtB;AACH;;AAf6D;AAiBlE,OAAO,MAAMsD,aAAN,CAAoB;AACvB/D,EAAAA,WAAW,CAACgE,qBAAD,EAAwBC,uBAAxB,EAA0T;AAAA,QAAzQC,wBAAyQ,uEAA9O,IAAInE,kBAAJ,EAA8O;;AAAA,QAApNoE,uBAAoN,uEAA1L,IAAIpE,kBAAJ,EAA0L;;AAAA,QAAhKqE,qBAAgK,uEAAxI,IAAIjF,WAAJ,EAAwI;;AAAA,QAArHkF,oBAAqH,uEAA9F,IAAItE,kBAAJ,EAA8F;;AAAA,QAApEuE,8BAAoE,uEAAnC,IAAInF,WAAJ,EAAmC;;AAAA,QAAhBoF,OAAgB,uEAAN,IAAM;;AACjU,SAAKP,qBAAL,GAA6BA,qBAA7B;AACA,SAAKC,uBAAL,GAA+BA,uBAA/B;AACA,SAAKC,wBAAL,GAAgCA,wBAAhC;AACA,SAAKC,uBAAL,GAA+BA,uBAA/B;AACA,SAAKC,qBAAL,GAA6BA,qBAA7B;AACA,SAAKC,oBAAL,GAA4BA,oBAA5B;AACA,SAAKC,8BAAL,GAAsCA,8BAAtC;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,mCAAL,GAA2C,IAA3C;AACA,SAAKC,kCAAL,GAA0C,IAAItF,WAAJ,EAA1C;AACA,SAAKuF,kBAAL,GAA0B,IAA1B;AACH;;AACD5D,EAAAA,QAAQ,CAACC,OAAD,EAAUN,SAAV,EAAqBkE,SAArB,EAAgC;AACpC,UAAMC,6BAA6B,GAAG,KAAKC,gCAAL,CAAsCpE,SAAtC,EAAiDkE,SAAjD,CAAtC;AACA,WAAOC,6BAA6B,CAAC9D,QAA9B,CAAuCC,OAAvC,CAAP;AACH;;AACD+D,EAAAA,WAAW,CAAC7C,GAAD,EAAMe,KAAN,EAA6B;AAAA,QAAhBvC,SAAgB,uEAAJ,EAAI;AACpC,QAAIsE,mBAAJ;;AACA,QAAItE,SAAS,CAACuE,QAAd,EAAwB;AACpBD,MAAAA,mBAAmB,GAAG,KAAKT,8BAAL,CAAoCnD,GAApC,CAAwCV,SAAS,CAACuE,QAAlD,CAAtB;;AACA,UAAI,CAACD,mBAAL,EAA0B;AACtBA,QAAAA,mBAAmB,GAAG,IAAIhF,kBAAJ,EAAtB;;AACA,aAAKuE,8BAAL,CAAoCjD,GAApC,CAAwCZ,SAAS,CAACuE,QAAlD,EAA4DD,mBAA5D;AACH;AACJ,KAND,MAOK;AACDA,MAAAA,mBAAmB,GAAG,KAAKV,oBAA3B;AACH;;AACD,QAAIrB,KAAK,KAAKiC,SAAd,EAAyB;AACrBF,MAAAA,mBAAmB,CAAC3B,WAApB,CAAgCnB,GAAhC;AACH,KAFD,MAGK;AACD8C,MAAAA,mBAAmB,CAAChC,QAApB,CAA6Bd,GAA7B,EAAkCe,KAAlC;AACH;;AACD,QAAI,CAACvC,SAAS,CAACuE,QAAf,EAAyB;AACrB,WAAKR,mCAAL,GAA2C,IAA3C;AACH;AACJ;;AACoB,MAAjBU,iBAAiB,GAAG;AACpB,QAAI,CAAC,KAAKR,kBAAV,EAA8B;AAC1B,WAAKA,kBAAL,GAA0B,KAAKR,wBAAL,CAA8BvD,OAA9B,KAA0C,KAAKsD,uBAA/C,GAAyE,KAAKA,uBAAL,CAA6B3C,KAA7B,CAAmC,KAAK4C,wBAAxC,CAAnG;;AACA,UAAI,KAAKK,OAAT,EAAkB;AACd,aAAKG,kBAAL,CAAwBvC,MAAxB;AACH;AACJ;;AACD,WAAO,KAAKuC,kBAAZ;AACH;;AACDG,EAAAA,gCAAgC,CAACpE,SAAD,EAAYkE,SAAZ,EAAuB;AACnD,QAAIQ,kBAAkB,GAAG,KAAKC,4CAAL,CAAkD3E,SAAlD,EAA6DkE,SAA7D,CAAzB;AACA,WAAOlE,SAAS,CAAC4E,kBAAV,GAA+BF,kBAAkB,CAACnE,QAAnB,CAA4BP,SAAS,CAAC4E,kBAAtC,CAA/B,GAA2FF,kBAAlG;AACH;;AACDC,EAAAA,4CAA4C,OAAeT,SAAf,EAA0B;AAAA,QAAzB;AAAEK,MAAAA;AAAF,KAAyB;AAClE,QAAIM,wBAAwB,GAAG,KAAKC,qCAAL,EAA/B;;AACA,QAAIZ,SAAS,IAAIK,QAAjB,EAA2B;AACvB,YAAMQ,IAAI,GAAGb,SAAS,CAACc,SAAV,CAAoBT,QAApB,CAAb;;AACA,UAAIQ,IAAJ,EAAU;AACNF,QAAAA,wBAAwB,GAAG,KAAKI,kCAAL,CAAwCF,IAAI,CAACG,GAA7C,KAAqDL,wBAAhF;AACH;;AACD,YAAMM,8BAA8B,GAAG,KAAKtB,8BAAL,CAAoCnD,GAApC,CAAwC6D,QAAxC,CAAvC;;AACA,UAAIY,8BAAJ,EAAoC;AAChCN,QAAAA,wBAAwB,GAAGA,wBAAwB,CAAChE,KAAzB,CAA+BsE,8BAA/B,CAA3B;AACH;AACJ;;AACD,WAAON,wBAAP;AACH;;AACDC,EAAAA,qCAAqC,GAAG;AACpC,QAAI,CAAC,KAAKf,mCAAV,EAA+C;AAC3C,WAAKA,mCAAL,GAA2C,KAAKR,qBAAL,CAA2B1C,KAA3B,CAAiC,KAAK4D,iBAAtC,EAAyD,KAAKf,uBAA9D,EAAuF,KAAKE,oBAA5F,CAA3C;;AACA,UAAI,KAAKE,OAAT,EAAkB;AACd,aAAKJ,uBAAL,GAA+B,KAAKA,uBAAL,CAA6BhC,MAA7B,EAA/B;AACH;AACJ;;AACD,WAAO,KAAKqC,mCAAZ;AACH;;AACDkB,EAAAA,kCAAkC,CAACG,MAAD,EAAS;AACvC,QAAIC,+BAA+B,GAAG,KAAKrB,kCAAL,CAAwCtD,GAAxC,CAA4C0E,MAA5C,CAAtC;;AACA,QAAI,CAACC,+BAAL,EAAsC;AAClC,YAAMC,iCAAiC,GAAG,KAAKR,qCAAL,EAA1C;;AACA,YAAMS,mBAAmB,GAAG,KAAK5B,qBAAL,CAA2BjD,GAA3B,CAA+B0E,MAA/B,CAA5B;;AACA,UAAIG,mBAAJ,EAAyB;AACrBF,QAAAA,+BAA+B,GAAGC,iCAAiC,CAACzE,KAAlC,CAAwC0E,mBAAxC,CAAlC;;AACA,YAAI,KAAKzB,OAAT,EAAkB;AACduB,UAAAA,+BAA+B,GAAGA,+BAA+B,CAAC3D,MAAhC,EAAlC;AACH;;AACD,aAAKsC,kCAAL,CAAwCpD,GAAxC,CAA4CwE,MAA5C,EAAoDC,+BAApD;AACH,OAND,MAOK;AACDA,QAAAA,+BAA+B,GAAGC,iCAAlC;AACH;AACJ;;AACD,WAAOD,+BAAP;AACH;;AACDG,EAAAA,MAAM,GAAG;AACL,WAAO;AACHC,MAAAA,QAAQ,EAAE;AACN3F,QAAAA,QAAQ,EAAE,KAAKyD,qBAAL,CAA2BzD,QAD/B;AAENE,QAAAA,SAAS,EAAE,KAAKuD,qBAAL,CAA2BvD,SAFhC;AAGNC,QAAAA,IAAI,EAAE,KAAKsD,qBAAL,CAA2BtD;AAH3B,OADP;AAMHyF,MAAAA,IAAI,EAAE;AACF5F,QAAAA,QAAQ,EAAE,KAAK2E,iBAAL,CAAuB3E,QAD/B;AAEFE,QAAAA,SAAS,EAAE,KAAKyE,iBAAL,CAAuBzE,SAFhC;AAGFC,QAAAA,IAAI,EAAE,KAAKwE,iBAAL,CAAuBxE;AAH3B,OANH;AAWHiE,MAAAA,SAAS,EAAE;AACPpE,QAAAA,QAAQ,EAAE,KAAK4D,uBAAL,CAA6B5D,QADhC;AAEPE,QAAAA,SAAS,EAAE,KAAK0D,uBAAL,CAA6B1D,SAFjC;AAGPC,QAAAA,IAAI,EAAE,KAAKyD,uBAAL,CAA6BzD;AAH5B,OAXR;AAgBH0F,MAAAA,OAAO,EAAE,CAAC,GAAG,KAAKhC,qBAAL,CAA2B1D,IAA3B,EAAJ,EAAuC2F,MAAvC,CAA8C,CAACC,MAAD,EAAST,MAAT,KAAoB;AACvE,cAAM;AAAEtF,UAAAA,QAAF;AAAYE,UAAAA,SAAZ;AAAuBC,UAAAA;AAAvB,YAAgC,KAAK0D,qBAAL,CAA2BjD,GAA3B,CAA+B0E,MAA/B,CAAtC;;AACAS,QAAAA,MAAM,CAACtE,IAAP,CAAY,CAAC6D,MAAD,EAAS;AAAEtF,UAAAA,QAAF;AAAYE,UAAAA,SAAZ;AAAuBC,UAAAA;AAAvB,SAAT,CAAZ;AACA,eAAO4F,MAAP;AACH,OAJQ,EAIN,EAJM;AAhBN,KAAP;AAsBH;;AACW,SAALC,KAAK,CAAC3D,IAAD,EAAO;AACf,UAAM4D,oBAAoB,GAAG,KAAKC,uBAAL,CAA6B7D,IAAI,CAACsD,QAAlC,CAA7B;AACA,UAAMhB,iBAAiB,GAAG,KAAKuB,uBAAL,CAA6B7D,IAAI,CAACuD,IAAlC,CAA1B;AACA,UAAMO,sBAAsB,GAAG,KAAKD,uBAAL,CAA6B7D,IAAI,CAAC+B,SAAlC,CAA/B;AACA,UAAMyB,OAAO,GAAGxD,IAAI,CAACwD,OAAL,CAAaC,MAAb,CAAoB,CAACC,MAAD,EAAStD,KAAT,KAAmB;AACnDsD,MAAAA,MAAM,CAACjF,GAAP,CAAW/B,GAAG,CAACqH,MAAJ,CAAW3D,KAAK,CAAC,CAAD,CAAhB,CAAX,EAAiC,KAAKyD,uBAAL,CAA6BzD,KAAK,CAAC,CAAD,CAAlC,CAAjC;AACA,aAAOsD,MAAP;AACH,KAHe,EAGb,IAAInH,WAAJ,EAHa,CAAhB;AAIA,WAAO,IAAI4E,aAAJ,CAAkByC,oBAAlB,EAAwCtB,iBAAxC,EAA2D,IAAInF,kBAAJ,EAA3D,EAAqF2G,sBAArF,EAA6GN,OAA7G,EAAsH,IAAIrG,kBAAJ,EAAtH,EAAgJ,IAAIZ,WAAJ,EAAhJ,EAAmK,KAAnK,CAAP;AACH;;AAC6B,SAAvBsH,uBAAuB,CAACG,KAAD,EAAQ;AAClC,WAAO,IAAI7G,kBAAJ,CAAuB6G,KAAK,CAACrG,QAA7B,EAAuCqG,KAAK,CAAClG,IAA7C,EAAmDkG,KAAK,CAACnG,SAAzD,EAAoE0B,MAApE,EAAP;AACH;;AAlIsB;AAoI3B,OAAO,MAAM0E,wBAAN,CAA+B;AAClC7G,EAAAA,WAAW,CAAC8G,MAAD,EAASC,QAAT,EAAmBC,oBAAnB,EAAyCC,gBAAzC,EAA2D;AAClE,SAAKH,MAAL,GAAcA,MAAd;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,oBAAL,GAA4BA,oBAA5B;AACA,SAAKC,gBAAL,GAAwBA,gBAAxB;AACA,SAAKC,sBAAL,GAA8BjC,SAA9B;AACA,UAAMkC,OAAO,GAAG,IAAIC,GAAJ,EAAhB;AACAN,IAAAA,MAAM,CAACpG,IAAP,CAAY2G,OAAZ,CAAoBpF,GAAG,IAAIkF,OAAO,CAACG,GAAR,CAAYrF,GAAZ,CAA3B;AACA6E,IAAAA,MAAM,CAACrG,SAAP,CAAiB4G,OAAjB,CAAyB;AAAA,UAAC,GAAG3G,IAAH,CAAD;AAAA,aAAcA,IAAI,CAAC2G,OAAL,CAAapF,GAAG,IAAIkF,OAAO,CAACG,GAAR,CAAYrF,GAAZ,CAApB,CAAd;AAAA,KAAzB;AACA,SAAKsF,YAAL,GAAoB,CAAC,GAAGJ,OAAO,CAACK,MAAR,EAAJ,CAApB;AACA,UAAMrC,kBAAkB,GAAG,IAAIpF,kBAAJ,EAA3B;AACA,SAAKwH,YAAL,CAAkBF,OAAlB,CAA0BpF,GAAG,IAAIkD,kBAAkB,CAACpC,QAAnB,CAA4Bd,GAA5B,EAAiC,EAAjC,CAAjC;AACA,SAAKwF,gBAAL,GAAwBtC,kBAAkB,CAAC5E,QAA3C;AACH;;AACwB,MAArBmH,qBAAqB,GAAG;AACxB,QAAI,CAAC,KAAKR,sBAAN,IAAgC,KAAKH,QAAzC,EAAmD;AAC/C,WAAKG,sBAAL,GAA8BnD,aAAa,CAACwC,KAAd,CAAoB,KAAKQ,QAAL,CAAcnE,IAAlC,CAA9B;AACH;;AACD,WAAO,KAAKsE,sBAAZ;AACH;;AACDS,EAAAA,oBAAoB,CAAC5G,OAAD,EAAUN,SAAV,EAAqB;AACrC,QAAImH,EAAJ;;AACA,QAAI,KAAKC,4BAAL,CAAkC,KAAKJ,gBAAvC,EAAyD1G,OAAzD,CAAJ,EAAuE;AACnE,UAAIN,SAAJ,EAAe;AACX,cAAMqH,MAAM,GAAG,KAAKJ,qBAAL,GAA6B,KAAKA,qBAAL,CAA2B5G,QAA3B,CAAoCC,OAApC,EAA6CN,SAA7C,EAAwD,CAACmH,EAAE,GAAG,KAAKb,QAAX,MAAyB,IAAzB,IAAiCa,EAAE,KAAK,KAAK,CAA7C,GAAiD,KAAK,CAAtD,GAA0DA,EAAE,CAACjD,SAArH,CAA7B,GAA+JM,SAA9K;AACA,cAAM8C,MAAM,GAAG,KAAKf,oBAAL,CAA0BlG,QAA1B,CAAmCC,OAAnC,EAA4CN,SAA5C,EAAuD,KAAKwG,gBAA5D,CAAf;AACA,eAAO,CAAC7H,OAAO,CAAC0C,MAAR,CAAegG,MAAf,EAAuBC,MAAvB,CAAR;AACH;;AACD,aAAO,IAAP;AACH;;AACD,WAAO,KAAP;AACH;;AACDF,EAAAA,4BAA4B,CAACJ,gBAAD,EAAmB1G,OAAnB,EAA4B;AACpD,QAAIiH,aAAa,GAAGpI,YAAY,CAAC;AAAE,OAACmB,OAAD,GAAW;AAAb,KAAD,EAAsB,MAAM,CAAG,CAA/B,CAAhC;AACA,QAAIkB,GAAJ;;AACA,WAAO,OAAO+F,aAAP,KAAyB,QAAzB,KAAsC/F,GAAG,GAAGpB,MAAM,CAACH,IAAP,CAAYsH,aAAZ,EAA2B,CAA3B,CAA5C,CAAP,EAAmF;AAAE;AACjFP,MAAAA,gBAAgB,GAAGA,gBAAgB,CAACxF,GAAD,CAAnC;;AACA,UAAI,CAACwF,gBAAL,EAAuB;AACnB,eAAO,KAAP,CADmB,CACL;AACjB;;AACDO,MAAAA,aAAa,GAAGA,aAAa,CAAC/F,GAAD,CAA7B;AACH;;AACD,WAAO,IAAP;AACH;;AA5CiC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as arrays from '../../../base/common/arrays.js';\nimport { ResourceMap } from '../../../base/common/map.js';\nimport * as objects from '../../../base/common/objects.js';\nimport * as types from '../../../base/common/types.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { addToValueTree, getConfigurationKeys, getConfigurationValue, getDefaultValues, removeFromValueTree, toValuesTree } from './configuration.js';\nimport { overrideIdentifierFromKey, OVERRIDE_PROPERTY_PATTERN } from './configurationRegistry.js';\nexport class ConfigurationModel {\n    constructor(_contents = {}, _keys = [], _overrides = []) {\n        this._contents = _contents;\n        this._keys = _keys;\n        this._overrides = _overrides;\n        this.isFrozen = false;\n        this.overrideConfigurations = new Map();\n    }\n    get contents() {\n        return this.checkAndFreeze(this._contents);\n    }\n    get overrides() {\n        return this.checkAndFreeze(this._overrides);\n    }\n    get keys() {\n        return this.checkAndFreeze(this._keys);\n    }\n    isEmpty() {\n        return this._keys.length === 0 && Object.keys(this._contents).length === 0 && this._overrides.length === 0;\n    }\n    getValue(section) {\n        return section ? getConfigurationValue(this.contents, section) : this.contents;\n    }\n    override(identifier) {\n        let overrideConfigurationModel = this.overrideConfigurations.get(identifier);\n        if (!overrideConfigurationModel) {\n            overrideConfigurationModel = this.createOverrideConfigurationModel(identifier);\n            this.overrideConfigurations.set(identifier, overrideConfigurationModel);\n        }\n        return overrideConfigurationModel;\n    }\n    merge(...others) {\n        const contents = objects.deepClone(this.contents);\n        const overrides = objects.deepClone(this.overrides);\n        const keys = [...this.keys];\n        for (const other of others) {\n            this.mergeContents(contents, other.contents);\n            for (const otherOverride of other.overrides) {\n                const [override] = overrides.filter(o => arrays.equals(o.identifiers, otherOverride.identifiers));\n                if (override) {\n                    this.mergeContents(override.contents, otherOverride.contents);\n                }\n                else {\n                    overrides.push(objects.deepClone(otherOverride));\n                }\n            }\n            for (const key of other.keys) {\n                if (keys.indexOf(key) === -1) {\n                    keys.push(key);\n                }\n            }\n        }\n        return new ConfigurationModel(contents, keys, overrides);\n    }\n    freeze() {\n        this.isFrozen = true;\n        return this;\n    }\n    createOverrideConfigurationModel(identifier) {\n        const overrideContents = this.getContentsForOverrideIdentifer(identifier);\n        if (!overrideContents || typeof overrideContents !== 'object' || !Object.keys(overrideContents).length) {\n            // If there are no valid overrides, return self\n            return this;\n        }\n        let contents = {};\n        for (const key of arrays.distinct([...Object.keys(this.contents), ...Object.keys(overrideContents)])) {\n            let contentsForKey = this.contents[key];\n            let overrideContentsForKey = overrideContents[key];\n            // If there are override contents for the key, clone and merge otherwise use base contents\n            if (overrideContentsForKey) {\n                // Clone and merge only if base contents and override contents are of type object otherwise just override\n                if (typeof contentsForKey === 'object' && typeof overrideContentsForKey === 'object') {\n                    contentsForKey = objects.deepClone(contentsForKey);\n                    this.mergeContents(contentsForKey, overrideContentsForKey);\n                }\n                else {\n                    contentsForKey = overrideContentsForKey;\n                }\n            }\n            contents[key] = contentsForKey;\n        }\n        return new ConfigurationModel(contents, this.keys, this.overrides);\n    }\n    mergeContents(source, target) {\n        for (const key of Object.keys(target)) {\n            if (key in source) {\n                if (types.isObject(source[key]) && types.isObject(target[key])) {\n                    this.mergeContents(source[key], target[key]);\n                    continue;\n                }\n            }\n            source[key] = objects.deepClone(target[key]);\n        }\n    }\n    checkAndFreeze(data) {\n        if (this.isFrozen && !Object.isFrozen(data)) {\n            return objects.deepFreeze(data);\n        }\n        return data;\n    }\n    getContentsForOverrideIdentifer(identifier) {\n        for (const override of this.overrides) {\n            if (override.identifiers.indexOf(identifier) !== -1) {\n                return override.contents;\n            }\n        }\n        return null;\n    }\n    toJSON() {\n        return {\n            contents: this.contents,\n            overrides: this.overrides,\n            keys: this.keys\n        };\n    }\n    // Update methods\n    setValue(key, value) {\n        this.addKey(key);\n        addToValueTree(this.contents, key, value, e => { throw new Error(e); });\n    }\n    removeValue(key) {\n        if (this.removeKey(key)) {\n            removeFromValueTree(this.contents, key);\n        }\n    }\n    addKey(key) {\n        let index = this.keys.length;\n        for (let i = 0; i < index; i++) {\n            if (key.indexOf(this.keys[i]) === 0) {\n                index = i;\n            }\n        }\n        this.keys.splice(index, 1, key);\n    }\n    removeKey(key) {\n        let index = this.keys.indexOf(key);\n        if (index !== -1) {\n            this.keys.splice(index, 1);\n            return true;\n        }\n        return false;\n    }\n}\nexport class DefaultConfigurationModel extends ConfigurationModel {\n    constructor() {\n        const contents = getDefaultValues();\n        const keys = getConfigurationKeys();\n        const overrides = [];\n        for (const key of Object.keys(contents)) {\n            if (OVERRIDE_PROPERTY_PATTERN.test(key)) {\n                overrides.push({\n                    identifiers: [overrideIdentifierFromKey(key).trim()],\n                    keys: Object.keys(contents[key]),\n                    contents: toValuesTree(contents[key], message => console.error(`Conflict in default settings file: ${message}`)),\n                });\n            }\n        }\n        super(contents, keys, overrides);\n    }\n}\nexport class Configuration {\n    constructor(_defaultConfiguration, _localUserConfiguration, _remoteUserConfiguration = new ConfigurationModel(), _workspaceConfiguration = new ConfigurationModel(), _folderConfigurations = new ResourceMap(), _memoryConfiguration = new ConfigurationModel(), _memoryConfigurationByResource = new ResourceMap(), _freeze = true) {\n        this._defaultConfiguration = _defaultConfiguration;\n        this._localUserConfiguration = _localUserConfiguration;\n        this._remoteUserConfiguration = _remoteUserConfiguration;\n        this._workspaceConfiguration = _workspaceConfiguration;\n        this._folderConfigurations = _folderConfigurations;\n        this._memoryConfiguration = _memoryConfiguration;\n        this._memoryConfigurationByResource = _memoryConfigurationByResource;\n        this._freeze = _freeze;\n        this._workspaceConsolidatedConfiguration = null;\n        this._foldersConsolidatedConfigurations = new ResourceMap();\n        this._userConfiguration = null;\n    }\n    getValue(section, overrides, workspace) {\n        const consolidateConfigurationModel = this.getConsolidateConfigurationModel(overrides, workspace);\n        return consolidateConfigurationModel.getValue(section);\n    }\n    updateValue(key, value, overrides = {}) {\n        let memoryConfiguration;\n        if (overrides.resource) {\n            memoryConfiguration = this._memoryConfigurationByResource.get(overrides.resource);\n            if (!memoryConfiguration) {\n                memoryConfiguration = new ConfigurationModel();\n                this._memoryConfigurationByResource.set(overrides.resource, memoryConfiguration);\n            }\n        }\n        else {\n            memoryConfiguration = this._memoryConfiguration;\n        }\n        if (value === undefined) {\n            memoryConfiguration.removeValue(key);\n        }\n        else {\n            memoryConfiguration.setValue(key, value);\n        }\n        if (!overrides.resource) {\n            this._workspaceConsolidatedConfiguration = null;\n        }\n    }\n    get userConfiguration() {\n        if (!this._userConfiguration) {\n            this._userConfiguration = this._remoteUserConfiguration.isEmpty() ? this._localUserConfiguration : this._localUserConfiguration.merge(this._remoteUserConfiguration);\n            if (this._freeze) {\n                this._userConfiguration.freeze();\n            }\n        }\n        return this._userConfiguration;\n    }\n    getConsolidateConfigurationModel(overrides, workspace) {\n        let configurationModel = this.getConsolidatedConfigurationModelForResource(overrides, workspace);\n        return overrides.overrideIdentifier ? configurationModel.override(overrides.overrideIdentifier) : configurationModel;\n    }\n    getConsolidatedConfigurationModelForResource({ resource }, workspace) {\n        let consolidateConfiguration = this.getWorkspaceConsolidatedConfiguration();\n        if (workspace && resource) {\n            const root = workspace.getFolder(resource);\n            if (root) {\n                consolidateConfiguration = this.getFolderConsolidatedConfiguration(root.uri) || consolidateConfiguration;\n            }\n            const memoryConfigurationForResource = this._memoryConfigurationByResource.get(resource);\n            if (memoryConfigurationForResource) {\n                consolidateConfiguration = consolidateConfiguration.merge(memoryConfigurationForResource);\n            }\n        }\n        return consolidateConfiguration;\n    }\n    getWorkspaceConsolidatedConfiguration() {\n        if (!this._workspaceConsolidatedConfiguration) {\n            this._workspaceConsolidatedConfiguration = this._defaultConfiguration.merge(this.userConfiguration, this._workspaceConfiguration, this._memoryConfiguration);\n            if (this._freeze) {\n                this._workspaceConfiguration = this._workspaceConfiguration.freeze();\n            }\n        }\n        return this._workspaceConsolidatedConfiguration;\n    }\n    getFolderConsolidatedConfiguration(folder) {\n        let folderConsolidatedConfiguration = this._foldersConsolidatedConfigurations.get(folder);\n        if (!folderConsolidatedConfiguration) {\n            const workspaceConsolidateConfiguration = this.getWorkspaceConsolidatedConfiguration();\n            const folderConfiguration = this._folderConfigurations.get(folder);\n            if (folderConfiguration) {\n                folderConsolidatedConfiguration = workspaceConsolidateConfiguration.merge(folderConfiguration);\n                if (this._freeze) {\n                    folderConsolidatedConfiguration = folderConsolidatedConfiguration.freeze();\n                }\n                this._foldersConsolidatedConfigurations.set(folder, folderConsolidatedConfiguration);\n            }\n            else {\n                folderConsolidatedConfiguration = workspaceConsolidateConfiguration;\n            }\n        }\n        return folderConsolidatedConfiguration;\n    }\n    toData() {\n        return {\n            defaults: {\n                contents: this._defaultConfiguration.contents,\n                overrides: this._defaultConfiguration.overrides,\n                keys: this._defaultConfiguration.keys\n            },\n            user: {\n                contents: this.userConfiguration.contents,\n                overrides: this.userConfiguration.overrides,\n                keys: this.userConfiguration.keys\n            },\n            workspace: {\n                contents: this._workspaceConfiguration.contents,\n                overrides: this._workspaceConfiguration.overrides,\n                keys: this._workspaceConfiguration.keys\n            },\n            folders: [...this._folderConfigurations.keys()].reduce((result, folder) => {\n                const { contents, overrides, keys } = this._folderConfigurations.get(folder);\n                result.push([folder, { contents, overrides, keys }]);\n                return result;\n            }, [])\n        };\n    }\n    static parse(data) {\n        const defaultConfiguration = this.parseConfigurationModel(data.defaults);\n        const userConfiguration = this.parseConfigurationModel(data.user);\n        const workspaceConfiguration = this.parseConfigurationModel(data.workspace);\n        const folders = data.folders.reduce((result, value) => {\n            result.set(URI.revive(value[0]), this.parseConfigurationModel(value[1]));\n            return result;\n        }, new ResourceMap());\n        return new Configuration(defaultConfiguration, userConfiguration, new ConfigurationModel(), workspaceConfiguration, folders, new ConfigurationModel(), new ResourceMap(), false);\n    }\n    static parseConfigurationModel(model) {\n        return new ConfigurationModel(model.contents, model.keys, model.overrides).freeze();\n    }\n}\nexport class ConfigurationChangeEvent {\n    constructor(change, previous, currentConfiguraiton, currentWorkspace) {\n        this.change = change;\n        this.previous = previous;\n        this.currentConfiguraiton = currentConfiguraiton;\n        this.currentWorkspace = currentWorkspace;\n        this._previousConfiguration = undefined;\n        const keysSet = new Set();\n        change.keys.forEach(key => keysSet.add(key));\n        change.overrides.forEach(([, keys]) => keys.forEach(key => keysSet.add(key)));\n        this.affectedKeys = [...keysSet.values()];\n        const configurationModel = new ConfigurationModel();\n        this.affectedKeys.forEach(key => configurationModel.setValue(key, {}));\n        this.affectedKeysTree = configurationModel.contents;\n    }\n    get previousConfiguration() {\n        if (!this._previousConfiguration && this.previous) {\n            this._previousConfiguration = Configuration.parse(this.previous.data);\n        }\n        return this._previousConfiguration;\n    }\n    affectsConfiguration(section, overrides) {\n        var _a;\n        if (this.doesAffectedKeysTreeContains(this.affectedKeysTree, section)) {\n            if (overrides) {\n                const value1 = this.previousConfiguration ? this.previousConfiguration.getValue(section, overrides, (_a = this.previous) === null || _a === void 0 ? void 0 : _a.workspace) : undefined;\n                const value2 = this.currentConfiguraiton.getValue(section, overrides, this.currentWorkspace);\n                return !objects.equals(value1, value2);\n            }\n            return true;\n        }\n        return false;\n    }\n    doesAffectedKeysTreeContains(affectedKeysTree, section) {\n        let requestedTree = toValuesTree({ [section]: true }, () => { });\n        let key;\n        while (typeof requestedTree === 'object' && (key = Object.keys(requestedTree)[0])) { // Only one key should present, since we added only one property\n            affectedKeysTree = affectedKeysTree[key];\n            if (!affectedKeysTree) {\n                return false; // Requested tree is not found\n            }\n            requestedTree = requestedTree[key];\n        }\n        return true;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}