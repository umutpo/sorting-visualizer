{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../base/browser/dom.js';\nimport { Color } from '../../../base/common/color.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { TokenizationRegistry, TokenMetadata } from '../../common/modes.js';\nimport { TokenTheme, generateTokensCSSForColorMap } from '../../common/modes/supports/tokenization.js';\nimport { hc_black, vs, vs_dark } from '../common/themes.js';\nimport { Registry } from '../../../platform/registry/common/platform.js';\nimport { Extensions } from '../../../platform/theme/common/colorRegistry.js';\nimport { Extensions as ThemingExtensions } from '../../../platform/theme/common/themeService.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { ColorScheme } from '../../../platform/theme/common/theme.js';\nimport { getIconsStyleSheet } from '../../../platform/theme/browser/iconsStyleSheet.js';\nconst VS_THEME_NAME = 'vs';\nconst VS_DARK_THEME_NAME = 'vs-dark';\nconst HC_BLACK_THEME_NAME = 'hc-black';\nconst colorRegistry = Registry.as(Extensions.ColorContribution);\nconst themingRegistry = Registry.as(ThemingExtensions.ThemingContribution);\n\nclass StandaloneTheme {\n  constructor(name, standaloneThemeData) {\n    this.semanticHighlighting = false;\n    this.themeData = standaloneThemeData;\n    let base = standaloneThemeData.base;\n\n    if (name.length > 0) {\n      if (isBuiltinTheme(name)) {\n        this.id = name;\n      } else {\n        this.id = base + ' ' + name;\n      }\n\n      this.themeName = name;\n    } else {\n      this.id = base;\n      this.themeName = base;\n    }\n\n    this.colors = null;\n    this.defaultColors = Object.create(null);\n    this._tokenTheme = null;\n  }\n\n  get base() {\n    return this.themeData.base;\n  }\n\n  notifyBaseUpdated() {\n    if (this.themeData.inherit) {\n      this.colors = null;\n      this._tokenTheme = null;\n    }\n  }\n\n  getColors() {\n    if (!this.colors) {\n      const colors = new Map();\n\n      for (let id in this.themeData.colors) {\n        colors.set(id, Color.fromHex(this.themeData.colors[id]));\n      }\n\n      if (this.themeData.inherit) {\n        let baseData = getBuiltinRules(this.themeData.base);\n\n        for (let id in baseData.colors) {\n          if (!colors.has(id)) {\n            colors.set(id, Color.fromHex(baseData.colors[id]));\n          }\n        }\n      }\n\n      this.colors = colors;\n    }\n\n    return this.colors;\n  }\n\n  getColor(colorId, useDefault) {\n    const color = this.getColors().get(colorId);\n\n    if (color) {\n      return color;\n    }\n\n    if (useDefault !== false) {\n      return this.getDefault(colorId);\n    }\n\n    return undefined;\n  }\n\n  getDefault(colorId) {\n    let color = this.defaultColors[colorId];\n\n    if (color) {\n      return color;\n    }\n\n    color = colorRegistry.resolveDefaultColor(colorId, this);\n    this.defaultColors[colorId] = color;\n    return color;\n  }\n\n  defines(colorId) {\n    return Object.prototype.hasOwnProperty.call(this.getColors(), colorId);\n  }\n\n  get type() {\n    switch (this.base) {\n      case VS_THEME_NAME:\n        return ColorScheme.LIGHT;\n\n      case HC_BLACK_THEME_NAME:\n        return ColorScheme.HIGH_CONTRAST;\n\n      default:\n        return ColorScheme.DARK;\n    }\n  }\n\n  get tokenTheme() {\n    if (!this._tokenTheme) {\n      let rules = [];\n      let encodedTokensColors = [];\n\n      if (this.themeData.inherit) {\n        let baseData = getBuiltinRules(this.themeData.base);\n        rules = baseData.rules;\n\n        if (baseData.encodedTokensColors) {\n          encodedTokensColors = baseData.encodedTokensColors;\n        }\n      } // Pick up default colors from `editor.foreground` and `editor.background` if available\n\n\n      const editorForeground = this.themeData.colors['editor.foreground'];\n      const editorBackground = this.themeData.colors['editor.background'];\n\n      if (editorForeground || editorBackground) {\n        const rule = {\n          token: ''\n        };\n\n        if (editorForeground) {\n          rule.foreground = editorForeground;\n        }\n\n        if (editorBackground) {\n          rule.background = editorBackground;\n        }\n\n        rules.push(rule);\n      }\n\n      rules = rules.concat(this.themeData.rules);\n\n      if (this.themeData.encodedTokensColors) {\n        encodedTokensColors = this.themeData.encodedTokensColors;\n      }\n\n      this._tokenTheme = TokenTheme.createFromRawTokenTheme(rules, encodedTokensColors);\n    }\n\n    return this._tokenTheme;\n  }\n\n  getTokenStyleMetadata(type, modifiers, modelLanguage) {\n    // use theme rules match\n    const style = this.tokenTheme._match([type].concat(modifiers).join('.'));\n\n    const metadata = style.metadata;\n    const foreground = TokenMetadata.getForeground(metadata);\n    const fontStyle = TokenMetadata.getFontStyle(metadata);\n    return {\n      foreground: foreground,\n      italic: Boolean(fontStyle & 1\n      /* Italic */\n      ),\n      bold: Boolean(fontStyle & 2\n      /* Bold */\n      ),\n      underline: Boolean(fontStyle & 4\n      /* Underline */\n      )\n    };\n  }\n\n}\n\nfunction isBuiltinTheme(themeName) {\n  return themeName === VS_THEME_NAME || themeName === VS_DARK_THEME_NAME || themeName === HC_BLACK_THEME_NAME;\n}\n\nfunction getBuiltinRules(builtinTheme) {\n  switch (builtinTheme) {\n    case VS_THEME_NAME:\n      return vs;\n\n    case VS_DARK_THEME_NAME:\n      return vs_dark;\n\n    case HC_BLACK_THEME_NAME:\n      return hc_black;\n  }\n}\n\nfunction newBuiltInTheme(builtinTheme) {\n  let themeData = getBuiltinRules(builtinTheme);\n  return new StandaloneTheme(builtinTheme, themeData);\n}\n\nexport class StandaloneThemeServiceImpl extends Disposable {\n  constructor() {\n    super();\n    this._onColorThemeChange = this._register(new Emitter());\n    this.onDidColorThemeChange = this._onColorThemeChange.event;\n    this._environment = Object.create(null);\n    this._autoDetectHighContrast = true;\n    this._knownThemes = new Map();\n\n    this._knownThemes.set(VS_THEME_NAME, newBuiltInTheme(VS_THEME_NAME));\n\n    this._knownThemes.set(VS_DARK_THEME_NAME, newBuiltInTheme(VS_DARK_THEME_NAME));\n\n    this._knownThemes.set(HC_BLACK_THEME_NAME, newBuiltInTheme(HC_BLACK_THEME_NAME));\n\n    const iconsStyleSheet = getIconsStyleSheet();\n    this._codiconCSS = iconsStyleSheet.getCSS();\n    this._themeCSS = '';\n    this._allCSS = `${this._codiconCSS}\\n${this._themeCSS}`;\n    this._globalStyleElement = null;\n    this._styleElements = [];\n    this._colorMapOverride = null;\n    this.setTheme(VS_THEME_NAME);\n    iconsStyleSheet.onDidChange(() => {\n      this._codiconCSS = iconsStyleSheet.getCSS();\n\n      this._updateCSS();\n    });\n    dom.addMatchMediaChangeListener('(forced-colors: active)', () => {\n      this._updateActualTheme();\n    });\n  }\n\n  registerEditorContainer(domNode) {\n    if (dom.isInShadowDOM(domNode)) {\n      return this._registerShadowDomContainer(domNode);\n    }\n\n    return this._registerRegularEditorContainer();\n  }\n\n  _registerRegularEditorContainer() {\n    if (!this._globalStyleElement) {\n      this._globalStyleElement = dom.createStyleSheet();\n      this._globalStyleElement.className = 'monaco-colors';\n      this._globalStyleElement.textContent = this._allCSS;\n\n      this._styleElements.push(this._globalStyleElement);\n    }\n\n    return Disposable.None;\n  }\n\n  _registerShadowDomContainer(domNode) {\n    const styleElement = dom.createStyleSheet(domNode);\n    styleElement.className = 'monaco-colors';\n    styleElement.textContent = this._allCSS;\n\n    this._styleElements.push(styleElement);\n\n    return {\n      dispose: () => {\n        for (let i = 0; i < this._styleElements.length; i++) {\n          if (this._styleElements[i] === styleElement) {\n            this._styleElements.splice(i, 1);\n\n            return;\n          }\n        }\n      }\n    };\n  }\n\n  defineTheme(themeName, themeData) {\n    if (!/^[a-z0-9\\-]+$/i.test(themeName)) {\n      throw new Error('Illegal theme name!');\n    }\n\n    if (!isBuiltinTheme(themeData.base) && !isBuiltinTheme(themeName)) {\n      throw new Error('Illegal theme base!');\n    } // set or replace theme\n\n\n    this._knownThemes.set(themeName, new StandaloneTheme(themeName, themeData));\n\n    if (isBuiltinTheme(themeName)) {\n      this._knownThemes.forEach(theme => {\n        if (theme.base === themeName) {\n          theme.notifyBaseUpdated();\n        }\n      });\n    }\n\n    if (this._theme.themeName === themeName) {\n      this.setTheme(themeName); // refresh theme\n    }\n  }\n\n  getColorTheme() {\n    return this._theme;\n  }\n\n  setColorMapOverride(colorMapOverride) {\n    this._colorMapOverride = colorMapOverride;\n\n    this._updateThemeOrColorMap();\n  }\n\n  setTheme(themeName) {\n    let theme;\n\n    if (this._knownThemes.has(themeName)) {\n      theme = this._knownThemes.get(themeName);\n    } else {\n      theme = this._knownThemes.get(VS_THEME_NAME);\n    }\n\n    this._desiredTheme = theme;\n\n    this._updateActualTheme();\n  }\n\n  _updateActualTheme() {\n    const theme = this._autoDetectHighContrast && window.matchMedia(`(forced-colors: active)`).matches ? this._knownThemes.get(HC_BLACK_THEME_NAME) : this._desiredTheme;\n\n    if (this._theme === theme) {\n      // Nothing to do\n      return;\n    }\n\n    this._theme = theme;\n\n    this._updateThemeOrColorMap();\n  }\n\n  setAutoDetectHighContrast(autoDetectHighContrast) {\n    this._autoDetectHighContrast = autoDetectHighContrast;\n\n    this._updateActualTheme();\n  }\n\n  _updateThemeOrColorMap() {\n    let cssRules = [];\n    let hasRule = {};\n    let ruleCollector = {\n      addRule: rule => {\n        if (!hasRule[rule]) {\n          cssRules.push(rule);\n          hasRule[rule] = true;\n        }\n      }\n    };\n    themingRegistry.getThemingParticipants().forEach(p => p(this._theme, ruleCollector, this._environment));\n\n    const colorMap = this._colorMapOverride || this._theme.tokenTheme.getColorMap();\n\n    ruleCollector.addRule(generateTokensCSSForColorMap(colorMap));\n    this._themeCSS = cssRules.join('\\n');\n\n    this._updateCSS();\n\n    TokenizationRegistry.setColorMap(colorMap);\n\n    this._onColorThemeChange.fire(this._theme);\n  }\n\n  _updateCSS() {\n    this._allCSS = `${this._codiconCSS}\\n${this._themeCSS}`;\n\n    this._styleElements.forEach(styleElement => styleElement.textContent = this._allCSS);\n  }\n\n  getFileIconTheme() {\n    return {\n      hasFileIcons: false,\n      hasFolderIcons: false,\n      hidesExplorerArrows: false\n    };\n  }\n\n}","map":{"version":3,"sources":["/home/umut/Documents/cs/cs410/Project2Group14/node_modules/monaco-editor/esm/vs/editor/standalone/browser/standaloneThemeServiceImpl.js"],"names":["dom","Color","Emitter","TokenizationRegistry","TokenMetadata","TokenTheme","generateTokensCSSForColorMap","hc_black","vs","vs_dark","Registry","Extensions","ThemingExtensions","Disposable","ColorScheme","getIconsStyleSheet","VS_THEME_NAME","VS_DARK_THEME_NAME","HC_BLACK_THEME_NAME","colorRegistry","as","ColorContribution","themingRegistry","ThemingContribution","StandaloneTheme","constructor","name","standaloneThemeData","semanticHighlighting","themeData","base","length","isBuiltinTheme","id","themeName","colors","defaultColors","Object","create","_tokenTheme","notifyBaseUpdated","inherit","getColors","Map","set","fromHex","baseData","getBuiltinRules","has","getColor","colorId","useDefault","color","get","getDefault","undefined","resolveDefaultColor","defines","prototype","hasOwnProperty","call","type","LIGHT","HIGH_CONTRAST","DARK","tokenTheme","rules","encodedTokensColors","editorForeground","editorBackground","rule","token","foreground","background","push","concat","createFromRawTokenTheme","getTokenStyleMetadata","modifiers","modelLanguage","style","_match","join","metadata","getForeground","fontStyle","getFontStyle","italic","Boolean","bold","underline","builtinTheme","newBuiltInTheme","StandaloneThemeServiceImpl","_onColorThemeChange","_register","onDidColorThemeChange","event","_environment","_autoDetectHighContrast","_knownThemes","iconsStyleSheet","_codiconCSS","getCSS","_themeCSS","_allCSS","_globalStyleElement","_styleElements","_colorMapOverride","setTheme","onDidChange","_updateCSS","addMatchMediaChangeListener","_updateActualTheme","registerEditorContainer","domNode","isInShadowDOM","_registerShadowDomContainer","_registerRegularEditorContainer","createStyleSheet","className","textContent","None","styleElement","dispose","i","splice","defineTheme","test","Error","forEach","theme","_theme","getColorTheme","setColorMapOverride","colorMapOverride","_updateThemeOrColorMap","_desiredTheme","window","matchMedia","matches","setAutoDetectHighContrast","autoDetectHighContrast","cssRules","hasRule","ruleCollector","addRule","getThemingParticipants","p","colorMap","getColorMap","setColorMap","fire","getFileIconTheme","hasFileIcons","hasFolderIcons","hidesExplorerArrows"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,KAAKA,GAAZ,MAAqB,8BAArB;AACA,SAASC,KAAT,QAAsB,+BAAtB;AACA,SAASC,OAAT,QAAwB,+BAAxB;AACA,SAASC,oBAAT,EAA+BC,aAA/B,QAAoD,uBAApD;AACA,SAASC,UAAT,EAAqBC,4BAArB,QAAyD,6CAAzD;AACA,SAASC,QAAT,EAAmBC,EAAnB,EAAuBC,OAAvB,QAAsC,qBAAtC;AACA,SAASC,QAAT,QAAyB,+CAAzB;AACA,SAASC,UAAT,QAA2B,iDAA3B;AACA,SAASA,UAAU,IAAIC,iBAAvB,QAAgD,gDAAhD;AACA,SAASC,UAAT,QAA2B,mCAA3B;AACA,SAASC,WAAT,QAA4B,yCAA5B;AACA,SAASC,kBAAT,QAAmC,oDAAnC;AACA,MAAMC,aAAa,GAAG,IAAtB;AACA,MAAMC,kBAAkB,GAAG,SAA3B;AACA,MAAMC,mBAAmB,GAAG,UAA5B;AACA,MAAMC,aAAa,GAAGT,QAAQ,CAACU,EAAT,CAAYT,UAAU,CAACU,iBAAvB,CAAtB;AACA,MAAMC,eAAe,GAAGZ,QAAQ,CAACU,EAAT,CAAYR,iBAAiB,CAACW,mBAA9B,CAAxB;;AACA,MAAMC,eAAN,CAAsB;AAClBC,EAAAA,WAAW,CAACC,IAAD,EAAOC,mBAAP,EAA4B;AACnC,SAAKC,oBAAL,GAA4B,KAA5B;AACA,SAAKC,SAAL,GAAiBF,mBAAjB;AACA,QAAIG,IAAI,GAAGH,mBAAmB,CAACG,IAA/B;;AACA,QAAIJ,IAAI,CAACK,MAAL,GAAc,CAAlB,EAAqB;AACjB,UAAIC,cAAc,CAACN,IAAD,CAAlB,EAA0B;AACtB,aAAKO,EAAL,GAAUP,IAAV;AACH,OAFD,MAGK;AACD,aAAKO,EAAL,GAAUH,IAAI,GAAG,GAAP,GAAaJ,IAAvB;AACH;;AACD,WAAKQ,SAAL,GAAiBR,IAAjB;AACH,KARD,MASK;AACD,WAAKO,EAAL,GAAUH,IAAV;AACA,WAAKI,SAAL,GAAiBJ,IAAjB;AACH;;AACD,SAAKK,MAAL,GAAc,IAAd;AACA,SAAKC,aAAL,GAAqBC,MAAM,CAACC,MAAP,CAAc,IAAd,CAArB;AACA,SAAKC,WAAL,GAAmB,IAAnB;AACH;;AACO,MAAJT,IAAI,GAAG;AACP,WAAO,KAAKD,SAAL,CAAeC,IAAtB;AACH;;AACDU,EAAAA,iBAAiB,GAAG;AAChB,QAAI,KAAKX,SAAL,CAAeY,OAAnB,EAA4B;AACxB,WAAKN,MAAL,GAAc,IAAd;AACA,WAAKI,WAAL,GAAmB,IAAnB;AACH;AACJ;;AACDG,EAAAA,SAAS,GAAG;AACR,QAAI,CAAC,KAAKP,MAAV,EAAkB;AACd,YAAMA,MAAM,GAAG,IAAIQ,GAAJ,EAAf;;AACA,WAAK,IAAIV,EAAT,IAAe,KAAKJ,SAAL,CAAeM,MAA9B,EAAsC;AAClCA,QAAAA,MAAM,CAACS,GAAP,CAAWX,EAAX,EAAehC,KAAK,CAAC4C,OAAN,CAAc,KAAKhB,SAAL,CAAeM,MAAf,CAAsBF,EAAtB,CAAd,CAAf;AACH;;AACD,UAAI,KAAKJ,SAAL,CAAeY,OAAnB,EAA4B;AACxB,YAAIK,QAAQ,GAAGC,eAAe,CAAC,KAAKlB,SAAL,CAAeC,IAAhB,CAA9B;;AACA,aAAK,IAAIG,EAAT,IAAea,QAAQ,CAACX,MAAxB,EAAgC;AAC5B,cAAI,CAACA,MAAM,CAACa,GAAP,CAAWf,EAAX,CAAL,EAAqB;AACjBE,YAAAA,MAAM,CAACS,GAAP,CAAWX,EAAX,EAAehC,KAAK,CAAC4C,OAAN,CAAcC,QAAQ,CAACX,MAAT,CAAgBF,EAAhB,CAAd,CAAf;AACH;AACJ;AACJ;;AACD,WAAKE,MAAL,GAAcA,MAAd;AACH;;AACD,WAAO,KAAKA,MAAZ;AACH;;AACDc,EAAAA,QAAQ,CAACC,OAAD,EAAUC,UAAV,EAAsB;AAC1B,UAAMC,KAAK,GAAG,KAAKV,SAAL,GAAiBW,GAAjB,CAAqBH,OAArB,CAAd;;AACA,QAAIE,KAAJ,EAAW;AACP,aAAOA,KAAP;AACH;;AACD,QAAID,UAAU,KAAK,KAAnB,EAA0B;AACtB,aAAO,KAAKG,UAAL,CAAgBJ,OAAhB,CAAP;AACH;;AACD,WAAOK,SAAP;AACH;;AACDD,EAAAA,UAAU,CAACJ,OAAD,EAAU;AAChB,QAAIE,KAAK,GAAG,KAAKhB,aAAL,CAAmBc,OAAnB,CAAZ;;AACA,QAAIE,KAAJ,EAAW;AACP,aAAOA,KAAP;AACH;;AACDA,IAAAA,KAAK,GAAGjC,aAAa,CAACqC,mBAAd,CAAkCN,OAAlC,EAA2C,IAA3C,CAAR;AACA,SAAKd,aAAL,CAAmBc,OAAnB,IAA8BE,KAA9B;AACA,WAAOA,KAAP;AACH;;AACDK,EAAAA,OAAO,CAACP,OAAD,EAAU;AACb,WAAOb,MAAM,CAACqB,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqC,KAAKlB,SAAL,EAArC,EAAuDQ,OAAvD,CAAP;AACH;;AACO,MAAJW,IAAI,GAAG;AACP,YAAQ,KAAK/B,IAAb;AACI,WAAKd,aAAL;AAAoB,eAAOF,WAAW,CAACgD,KAAnB;;AACpB,WAAK5C,mBAAL;AAA0B,eAAOJ,WAAW,CAACiD,aAAnB;;AAC1B;AAAS,eAAOjD,WAAW,CAACkD,IAAnB;AAHb;AAKH;;AACa,MAAVC,UAAU,GAAG;AACb,QAAI,CAAC,KAAK1B,WAAV,EAAuB;AACnB,UAAI2B,KAAK,GAAG,EAAZ;AACA,UAAIC,mBAAmB,GAAG,EAA1B;;AACA,UAAI,KAAKtC,SAAL,CAAeY,OAAnB,EAA4B;AACxB,YAAIK,QAAQ,GAAGC,eAAe,CAAC,KAAKlB,SAAL,CAAeC,IAAhB,CAA9B;AACAoC,QAAAA,KAAK,GAAGpB,QAAQ,CAACoB,KAAjB;;AACA,YAAIpB,QAAQ,CAACqB,mBAAb,EAAkC;AAC9BA,UAAAA,mBAAmB,GAAGrB,QAAQ,CAACqB,mBAA/B;AACH;AACJ,OATkB,CAUnB;;;AACA,YAAMC,gBAAgB,GAAG,KAAKvC,SAAL,CAAeM,MAAf,CAAsB,mBAAtB,CAAzB;AACA,YAAMkC,gBAAgB,GAAG,KAAKxC,SAAL,CAAeM,MAAf,CAAsB,mBAAtB,CAAzB;;AACA,UAAIiC,gBAAgB,IAAIC,gBAAxB,EAA0C;AACtC,cAAMC,IAAI,GAAG;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAAb;;AACA,YAAIH,gBAAJ,EAAsB;AAClBE,UAAAA,IAAI,CAACE,UAAL,GAAkBJ,gBAAlB;AACH;;AACD,YAAIC,gBAAJ,EAAsB;AAClBC,UAAAA,IAAI,CAACG,UAAL,GAAkBJ,gBAAlB;AACH;;AACDH,QAAAA,KAAK,CAACQ,IAAN,CAAWJ,IAAX;AACH;;AACDJ,MAAAA,KAAK,GAAGA,KAAK,CAACS,MAAN,CAAa,KAAK9C,SAAL,CAAeqC,KAA5B,CAAR;;AACA,UAAI,KAAKrC,SAAL,CAAesC,mBAAnB,EAAwC;AACpCA,QAAAA,mBAAmB,GAAG,KAAKtC,SAAL,CAAesC,mBAArC;AACH;;AACD,WAAK5B,WAAL,GAAmBlC,UAAU,CAACuE,uBAAX,CAAmCV,KAAnC,EAA0CC,mBAA1C,CAAnB;AACH;;AACD,WAAO,KAAK5B,WAAZ;AACH;;AACDsC,EAAAA,qBAAqB,CAAChB,IAAD,EAAOiB,SAAP,EAAkBC,aAAlB,EAAiC;AAClD;AACA,UAAMC,KAAK,GAAG,KAAKf,UAAL,CAAgBgB,MAAhB,CAAuB,CAACpB,IAAD,EAAOc,MAAP,CAAcG,SAAd,EAAyBI,IAAzB,CAA8B,GAA9B,CAAvB,CAAd;;AACA,UAAMC,QAAQ,GAAGH,KAAK,CAACG,QAAvB;AACA,UAAMX,UAAU,GAAGpE,aAAa,CAACgF,aAAd,CAA4BD,QAA5B,CAAnB;AACA,UAAME,SAAS,GAAGjF,aAAa,CAACkF,YAAd,CAA2BH,QAA3B,CAAlB;AACA,WAAO;AACHX,MAAAA,UAAU,EAAEA,UADT;AAEHe,MAAAA,MAAM,EAAEC,OAAO,CAACH,SAAS,GAAG;AAAE;AAAf,OAFZ;AAGHI,MAAAA,IAAI,EAAED,OAAO,CAACH,SAAS,GAAG;AAAE;AAAf,OAHV;AAIHK,MAAAA,SAAS,EAAEF,OAAO,CAACH,SAAS,GAAG;AAAE;AAAf;AAJf,KAAP;AAMH;;AA1HiB;;AA4HtB,SAASrD,cAAT,CAAwBE,SAAxB,EAAmC;AAC/B,SAAQA,SAAS,KAAKlB,aAAd,IACDkB,SAAS,KAAKjB,kBADb,IAEDiB,SAAS,KAAKhB,mBAFrB;AAGH;;AACD,SAAS6B,eAAT,CAAyB4C,YAAzB,EAAuC;AACnC,UAAQA,YAAR;AACI,SAAK3E,aAAL;AACI,aAAOR,EAAP;;AACJ,SAAKS,kBAAL;AACI,aAAOR,OAAP;;AACJ,SAAKS,mBAAL;AACI,aAAOX,QAAP;AANR;AAQH;;AACD,SAASqF,eAAT,CAAyBD,YAAzB,EAAuC;AACnC,MAAI9D,SAAS,GAAGkB,eAAe,CAAC4C,YAAD,CAA/B;AACA,SAAO,IAAInE,eAAJ,CAAoBmE,YAApB,EAAkC9D,SAAlC,CAAP;AACH;;AACD,OAAO,MAAMgE,0BAAN,SAAyChF,UAAzC,CAAoD;AACvDY,EAAAA,WAAW,GAAG;AACV;AACA,SAAKqE,mBAAL,GAA2B,KAAKC,SAAL,CAAe,IAAI7F,OAAJ,EAAf,CAA3B;AACA,SAAK8F,qBAAL,GAA6B,KAAKF,mBAAL,CAAyBG,KAAtD;AACA,SAAKC,YAAL,GAAoB7D,MAAM,CAACC,MAAP,CAAc,IAAd,CAApB;AACA,SAAK6D,uBAAL,GAA+B,IAA/B;AACA,SAAKC,YAAL,GAAoB,IAAIzD,GAAJ,EAApB;;AACA,SAAKyD,YAAL,CAAkBxD,GAAlB,CAAsB5B,aAAtB,EAAqC4E,eAAe,CAAC5E,aAAD,CAApD;;AACA,SAAKoF,YAAL,CAAkBxD,GAAlB,CAAsB3B,kBAAtB,EAA0C2E,eAAe,CAAC3E,kBAAD,CAAzD;;AACA,SAAKmF,YAAL,CAAkBxD,GAAlB,CAAsB1B,mBAAtB,EAA2C0E,eAAe,CAAC1E,mBAAD,CAA1D;;AACA,UAAMmF,eAAe,GAAGtF,kBAAkB,EAA1C;AACA,SAAKuF,WAAL,GAAmBD,eAAe,CAACE,MAAhB,EAAnB;AACA,SAAKC,SAAL,GAAiB,EAAjB;AACA,SAAKC,OAAL,GAAgB,GAAE,KAAKH,WAAY,KAAI,KAAKE,SAAU,EAAtD;AACA,SAAKE,mBAAL,GAA2B,IAA3B;AACA,SAAKC,cAAL,GAAsB,EAAtB;AACA,SAAKC,iBAAL,GAAyB,IAAzB;AACA,SAAKC,QAAL,CAAc7F,aAAd;AACAqF,IAAAA,eAAe,CAACS,WAAhB,CAA4B,MAAM;AAC9B,WAAKR,WAAL,GAAmBD,eAAe,CAACE,MAAhB,EAAnB;;AACA,WAAKQ,UAAL;AACH,KAHD;AAIA/G,IAAAA,GAAG,CAACgH,2BAAJ,CAAgC,yBAAhC,EAA2D,MAAM;AAC7D,WAAKC,kBAAL;AACH,KAFD;AAGH;;AACDC,EAAAA,uBAAuB,CAACC,OAAD,EAAU;AAC7B,QAAInH,GAAG,CAACoH,aAAJ,CAAkBD,OAAlB,CAAJ,EAAgC;AAC5B,aAAO,KAAKE,2BAAL,CAAiCF,OAAjC,CAAP;AACH;;AACD,WAAO,KAAKG,+BAAL,EAAP;AACH;;AACDA,EAAAA,+BAA+B,GAAG;AAC9B,QAAI,CAAC,KAAKZ,mBAAV,EAA+B;AAC3B,WAAKA,mBAAL,GAA2B1G,GAAG,CAACuH,gBAAJ,EAA3B;AACA,WAAKb,mBAAL,CAAyBc,SAAzB,GAAqC,eAArC;AACA,WAAKd,mBAAL,CAAyBe,WAAzB,GAAuC,KAAKhB,OAA5C;;AACA,WAAKE,cAAL,CAAoBjC,IAApB,CAAyB,KAAKgC,mBAA9B;AACH;;AACD,WAAO7F,UAAU,CAAC6G,IAAlB;AACH;;AACDL,EAAAA,2BAA2B,CAACF,OAAD,EAAU;AACjC,UAAMQ,YAAY,GAAG3H,GAAG,CAACuH,gBAAJ,CAAqBJ,OAArB,CAArB;AACAQ,IAAAA,YAAY,CAACH,SAAb,GAAyB,eAAzB;AACAG,IAAAA,YAAY,CAACF,WAAb,GAA2B,KAAKhB,OAAhC;;AACA,SAAKE,cAAL,CAAoBjC,IAApB,CAAyBiD,YAAzB;;AACA,WAAO;AACHC,MAAAA,OAAO,EAAE,MAAM;AACX,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKlB,cAAL,CAAoB5E,MAAxC,EAAgD8F,CAAC,EAAjD,EAAqD;AACjD,cAAI,KAAKlB,cAAL,CAAoBkB,CAApB,MAA2BF,YAA/B,EAA6C;AACzC,iBAAKhB,cAAL,CAAoBmB,MAApB,CAA2BD,CAA3B,EAA8B,CAA9B;;AACA;AACH;AACJ;AACJ;AARE,KAAP;AAUH;;AACDE,EAAAA,WAAW,CAAC7F,SAAD,EAAYL,SAAZ,EAAuB;AAC9B,QAAI,CAAC,iBAAiBmG,IAAjB,CAAsB9F,SAAtB,CAAL,EAAuC;AACnC,YAAM,IAAI+F,KAAJ,CAAU,qBAAV,CAAN;AACH;;AACD,QAAI,CAACjG,cAAc,CAACH,SAAS,CAACC,IAAX,CAAf,IAAmC,CAACE,cAAc,CAACE,SAAD,CAAtD,EAAmE;AAC/D,YAAM,IAAI+F,KAAJ,CAAU,qBAAV,CAAN;AACH,KAN6B,CAO9B;;;AACA,SAAK7B,YAAL,CAAkBxD,GAAlB,CAAsBV,SAAtB,EAAiC,IAAIV,eAAJ,CAAoBU,SAApB,EAA+BL,SAA/B,CAAjC;;AACA,QAAIG,cAAc,CAACE,SAAD,CAAlB,EAA+B;AAC3B,WAAKkE,YAAL,CAAkB8B,OAAlB,CAA0BC,KAAK,IAAI;AAC/B,YAAIA,KAAK,CAACrG,IAAN,KAAeI,SAAnB,EAA8B;AAC1BiG,UAAAA,KAAK,CAAC3F,iBAAN;AACH;AACJ,OAJD;AAKH;;AACD,QAAI,KAAK4F,MAAL,CAAYlG,SAAZ,KAA0BA,SAA9B,EAAyC;AACrC,WAAK2E,QAAL,CAAc3E,SAAd,EADqC,CACX;AAC7B;AACJ;;AACDmG,EAAAA,aAAa,GAAG;AACZ,WAAO,KAAKD,MAAZ;AACH;;AACDE,EAAAA,mBAAmB,CAACC,gBAAD,EAAmB;AAClC,SAAK3B,iBAAL,GAAyB2B,gBAAzB;;AACA,SAAKC,sBAAL;AACH;;AACD3B,EAAAA,QAAQ,CAAC3E,SAAD,EAAY;AAChB,QAAIiG,KAAJ;;AACA,QAAI,KAAK/B,YAAL,CAAkBpD,GAAlB,CAAsBd,SAAtB,CAAJ,EAAsC;AAClCiG,MAAAA,KAAK,GAAG,KAAK/B,YAAL,CAAkB/C,GAAlB,CAAsBnB,SAAtB,CAAR;AACH,KAFD,MAGK;AACDiG,MAAAA,KAAK,GAAG,KAAK/B,YAAL,CAAkB/C,GAAlB,CAAsBrC,aAAtB,CAAR;AACH;;AACD,SAAKyH,aAAL,GAAqBN,KAArB;;AACA,SAAKlB,kBAAL;AACH;;AACDA,EAAAA,kBAAkB,GAAG;AACjB,UAAMkB,KAAK,GAAI,KAAKhC,uBAAL,IAAgCuC,MAAM,CAACC,UAAP,CAAmB,yBAAnB,EAA6CC,OAA7E,GACT,KAAKxC,YAAL,CAAkB/C,GAAlB,CAAsBnC,mBAAtB,CADS,GAET,KAAKuH,aAFX;;AAGA,QAAI,KAAKL,MAAL,KAAgBD,KAApB,EAA2B;AACvB;AACA;AACH;;AACD,SAAKC,MAAL,GAAcD,KAAd;;AACA,SAAKK,sBAAL;AACH;;AACDK,EAAAA,yBAAyB,CAACC,sBAAD,EAAyB;AAC9C,SAAK3C,uBAAL,GAA+B2C,sBAA/B;;AACA,SAAK7B,kBAAL;AACH;;AACDuB,EAAAA,sBAAsB,GAAG;AACrB,QAAIO,QAAQ,GAAG,EAAf;AACA,QAAIC,OAAO,GAAG,EAAd;AACA,QAAIC,aAAa,GAAG;AAChBC,MAAAA,OAAO,EAAG5E,IAAD,IAAU;AACf,YAAI,CAAC0E,OAAO,CAAC1E,IAAD,CAAZ,EAAoB;AAChByE,UAAAA,QAAQ,CAACrE,IAAT,CAAcJ,IAAd;AACA0E,UAAAA,OAAO,CAAC1E,IAAD,CAAP,GAAgB,IAAhB;AACH;AACJ;AANe,KAApB;AAQAhD,IAAAA,eAAe,CAAC6H,sBAAhB,GAAyCjB,OAAzC,CAAiDkB,CAAC,IAAIA,CAAC,CAAC,KAAKhB,MAAN,EAAca,aAAd,EAA6B,KAAK/C,YAAlC,CAAvD;;AACA,UAAMmD,QAAQ,GAAG,KAAKzC,iBAAL,IAA0B,KAAKwB,MAAL,CAAYnE,UAAZ,CAAuBqF,WAAvB,EAA3C;;AACAL,IAAAA,aAAa,CAACC,OAAd,CAAsB5I,4BAA4B,CAAC+I,QAAD,CAAlD;AACA,SAAK7C,SAAL,GAAiBuC,QAAQ,CAAC7D,IAAT,CAAc,IAAd,CAAjB;;AACA,SAAK6B,UAAL;;AACA5G,IAAAA,oBAAoB,CAACoJ,WAArB,CAAiCF,QAAjC;;AACA,SAAKvD,mBAAL,CAAyB0D,IAAzB,CAA8B,KAAKpB,MAAnC;AACH;;AACDrB,EAAAA,UAAU,GAAG;AACT,SAAKN,OAAL,GAAgB,GAAE,KAAKH,WAAY,KAAI,KAAKE,SAAU,EAAtD;;AACA,SAAKG,cAAL,CAAoBuB,OAApB,CAA4BP,YAAY,IAAIA,YAAY,CAACF,WAAb,GAA2B,KAAKhB,OAA5E;AACH;;AACDgD,EAAAA,gBAAgB,GAAG;AACf,WAAO;AACHC,MAAAA,YAAY,EAAE,KADX;AAEHC,MAAAA,cAAc,EAAE,KAFb;AAGHC,MAAAA,mBAAmB,EAAE;AAHlB,KAAP;AAKH;;AA5IsD","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../base/browser/dom.js';\nimport { Color } from '../../../base/common/color.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { TokenizationRegistry, TokenMetadata } from '../../common/modes.js';\nimport { TokenTheme, generateTokensCSSForColorMap } from '../../common/modes/supports/tokenization.js';\nimport { hc_black, vs, vs_dark } from '../common/themes.js';\nimport { Registry } from '../../../platform/registry/common/platform.js';\nimport { Extensions } from '../../../platform/theme/common/colorRegistry.js';\nimport { Extensions as ThemingExtensions } from '../../../platform/theme/common/themeService.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { ColorScheme } from '../../../platform/theme/common/theme.js';\nimport { getIconsStyleSheet } from '../../../platform/theme/browser/iconsStyleSheet.js';\nconst VS_THEME_NAME = 'vs';\nconst VS_DARK_THEME_NAME = 'vs-dark';\nconst HC_BLACK_THEME_NAME = 'hc-black';\nconst colorRegistry = Registry.as(Extensions.ColorContribution);\nconst themingRegistry = Registry.as(ThemingExtensions.ThemingContribution);\nclass StandaloneTheme {\n    constructor(name, standaloneThemeData) {\n        this.semanticHighlighting = false;\n        this.themeData = standaloneThemeData;\n        let base = standaloneThemeData.base;\n        if (name.length > 0) {\n            if (isBuiltinTheme(name)) {\n                this.id = name;\n            }\n            else {\n                this.id = base + ' ' + name;\n            }\n            this.themeName = name;\n        }\n        else {\n            this.id = base;\n            this.themeName = base;\n        }\n        this.colors = null;\n        this.defaultColors = Object.create(null);\n        this._tokenTheme = null;\n    }\n    get base() {\n        return this.themeData.base;\n    }\n    notifyBaseUpdated() {\n        if (this.themeData.inherit) {\n            this.colors = null;\n            this._tokenTheme = null;\n        }\n    }\n    getColors() {\n        if (!this.colors) {\n            const colors = new Map();\n            for (let id in this.themeData.colors) {\n                colors.set(id, Color.fromHex(this.themeData.colors[id]));\n            }\n            if (this.themeData.inherit) {\n                let baseData = getBuiltinRules(this.themeData.base);\n                for (let id in baseData.colors) {\n                    if (!colors.has(id)) {\n                        colors.set(id, Color.fromHex(baseData.colors[id]));\n                    }\n                }\n            }\n            this.colors = colors;\n        }\n        return this.colors;\n    }\n    getColor(colorId, useDefault) {\n        const color = this.getColors().get(colorId);\n        if (color) {\n            return color;\n        }\n        if (useDefault !== false) {\n            return this.getDefault(colorId);\n        }\n        return undefined;\n    }\n    getDefault(colorId) {\n        let color = this.defaultColors[colorId];\n        if (color) {\n            return color;\n        }\n        color = colorRegistry.resolveDefaultColor(colorId, this);\n        this.defaultColors[colorId] = color;\n        return color;\n    }\n    defines(colorId) {\n        return Object.prototype.hasOwnProperty.call(this.getColors(), colorId);\n    }\n    get type() {\n        switch (this.base) {\n            case VS_THEME_NAME: return ColorScheme.LIGHT;\n            case HC_BLACK_THEME_NAME: return ColorScheme.HIGH_CONTRAST;\n            default: return ColorScheme.DARK;\n        }\n    }\n    get tokenTheme() {\n        if (!this._tokenTheme) {\n            let rules = [];\n            let encodedTokensColors = [];\n            if (this.themeData.inherit) {\n                let baseData = getBuiltinRules(this.themeData.base);\n                rules = baseData.rules;\n                if (baseData.encodedTokensColors) {\n                    encodedTokensColors = baseData.encodedTokensColors;\n                }\n            }\n            // Pick up default colors from `editor.foreground` and `editor.background` if available\n            const editorForeground = this.themeData.colors['editor.foreground'];\n            const editorBackground = this.themeData.colors['editor.background'];\n            if (editorForeground || editorBackground) {\n                const rule = { token: '' };\n                if (editorForeground) {\n                    rule.foreground = editorForeground;\n                }\n                if (editorBackground) {\n                    rule.background = editorBackground;\n                }\n                rules.push(rule);\n            }\n            rules = rules.concat(this.themeData.rules);\n            if (this.themeData.encodedTokensColors) {\n                encodedTokensColors = this.themeData.encodedTokensColors;\n            }\n            this._tokenTheme = TokenTheme.createFromRawTokenTheme(rules, encodedTokensColors);\n        }\n        return this._tokenTheme;\n    }\n    getTokenStyleMetadata(type, modifiers, modelLanguage) {\n        // use theme rules match\n        const style = this.tokenTheme._match([type].concat(modifiers).join('.'));\n        const metadata = style.metadata;\n        const foreground = TokenMetadata.getForeground(metadata);\n        const fontStyle = TokenMetadata.getFontStyle(metadata);\n        return {\n            foreground: foreground,\n            italic: Boolean(fontStyle & 1 /* Italic */),\n            bold: Boolean(fontStyle & 2 /* Bold */),\n            underline: Boolean(fontStyle & 4 /* Underline */)\n        };\n    }\n}\nfunction isBuiltinTheme(themeName) {\n    return (themeName === VS_THEME_NAME\n        || themeName === VS_DARK_THEME_NAME\n        || themeName === HC_BLACK_THEME_NAME);\n}\nfunction getBuiltinRules(builtinTheme) {\n    switch (builtinTheme) {\n        case VS_THEME_NAME:\n            return vs;\n        case VS_DARK_THEME_NAME:\n            return vs_dark;\n        case HC_BLACK_THEME_NAME:\n            return hc_black;\n    }\n}\nfunction newBuiltInTheme(builtinTheme) {\n    let themeData = getBuiltinRules(builtinTheme);\n    return new StandaloneTheme(builtinTheme, themeData);\n}\nexport class StandaloneThemeServiceImpl extends Disposable {\n    constructor() {\n        super();\n        this._onColorThemeChange = this._register(new Emitter());\n        this.onDidColorThemeChange = this._onColorThemeChange.event;\n        this._environment = Object.create(null);\n        this._autoDetectHighContrast = true;\n        this._knownThemes = new Map();\n        this._knownThemes.set(VS_THEME_NAME, newBuiltInTheme(VS_THEME_NAME));\n        this._knownThemes.set(VS_DARK_THEME_NAME, newBuiltInTheme(VS_DARK_THEME_NAME));\n        this._knownThemes.set(HC_BLACK_THEME_NAME, newBuiltInTheme(HC_BLACK_THEME_NAME));\n        const iconsStyleSheet = getIconsStyleSheet();\n        this._codiconCSS = iconsStyleSheet.getCSS();\n        this._themeCSS = '';\n        this._allCSS = `${this._codiconCSS}\\n${this._themeCSS}`;\n        this._globalStyleElement = null;\n        this._styleElements = [];\n        this._colorMapOverride = null;\n        this.setTheme(VS_THEME_NAME);\n        iconsStyleSheet.onDidChange(() => {\n            this._codiconCSS = iconsStyleSheet.getCSS();\n            this._updateCSS();\n        });\n        dom.addMatchMediaChangeListener('(forced-colors: active)', () => {\n            this._updateActualTheme();\n        });\n    }\n    registerEditorContainer(domNode) {\n        if (dom.isInShadowDOM(domNode)) {\n            return this._registerShadowDomContainer(domNode);\n        }\n        return this._registerRegularEditorContainer();\n    }\n    _registerRegularEditorContainer() {\n        if (!this._globalStyleElement) {\n            this._globalStyleElement = dom.createStyleSheet();\n            this._globalStyleElement.className = 'monaco-colors';\n            this._globalStyleElement.textContent = this._allCSS;\n            this._styleElements.push(this._globalStyleElement);\n        }\n        return Disposable.None;\n    }\n    _registerShadowDomContainer(domNode) {\n        const styleElement = dom.createStyleSheet(domNode);\n        styleElement.className = 'monaco-colors';\n        styleElement.textContent = this._allCSS;\n        this._styleElements.push(styleElement);\n        return {\n            dispose: () => {\n                for (let i = 0; i < this._styleElements.length; i++) {\n                    if (this._styleElements[i] === styleElement) {\n                        this._styleElements.splice(i, 1);\n                        return;\n                    }\n                }\n            }\n        };\n    }\n    defineTheme(themeName, themeData) {\n        if (!/^[a-z0-9\\-]+$/i.test(themeName)) {\n            throw new Error('Illegal theme name!');\n        }\n        if (!isBuiltinTheme(themeData.base) && !isBuiltinTheme(themeName)) {\n            throw new Error('Illegal theme base!');\n        }\n        // set or replace theme\n        this._knownThemes.set(themeName, new StandaloneTheme(themeName, themeData));\n        if (isBuiltinTheme(themeName)) {\n            this._knownThemes.forEach(theme => {\n                if (theme.base === themeName) {\n                    theme.notifyBaseUpdated();\n                }\n            });\n        }\n        if (this._theme.themeName === themeName) {\n            this.setTheme(themeName); // refresh theme\n        }\n    }\n    getColorTheme() {\n        return this._theme;\n    }\n    setColorMapOverride(colorMapOverride) {\n        this._colorMapOverride = colorMapOverride;\n        this._updateThemeOrColorMap();\n    }\n    setTheme(themeName) {\n        let theme;\n        if (this._knownThemes.has(themeName)) {\n            theme = this._knownThemes.get(themeName);\n        }\n        else {\n            theme = this._knownThemes.get(VS_THEME_NAME);\n        }\n        this._desiredTheme = theme;\n        this._updateActualTheme();\n    }\n    _updateActualTheme() {\n        const theme = (this._autoDetectHighContrast && window.matchMedia(`(forced-colors: active)`).matches\n            ? this._knownThemes.get(HC_BLACK_THEME_NAME)\n            : this._desiredTheme);\n        if (this._theme === theme) {\n            // Nothing to do\n            return;\n        }\n        this._theme = theme;\n        this._updateThemeOrColorMap();\n    }\n    setAutoDetectHighContrast(autoDetectHighContrast) {\n        this._autoDetectHighContrast = autoDetectHighContrast;\n        this._updateActualTheme();\n    }\n    _updateThemeOrColorMap() {\n        let cssRules = [];\n        let hasRule = {};\n        let ruleCollector = {\n            addRule: (rule) => {\n                if (!hasRule[rule]) {\n                    cssRules.push(rule);\n                    hasRule[rule] = true;\n                }\n            }\n        };\n        themingRegistry.getThemingParticipants().forEach(p => p(this._theme, ruleCollector, this._environment));\n        const colorMap = this._colorMapOverride || this._theme.tokenTheme.getColorMap();\n        ruleCollector.addRule(generateTokensCSSForColorMap(colorMap));\n        this._themeCSS = cssRules.join('\\n');\n        this._updateCSS();\n        TokenizationRegistry.setColorMap(colorMap);\n        this._onColorThemeChange.fire(this._theme);\n    }\n    _updateCSS() {\n        this._allCSS = `${this._codiconCSS}\\n${this._themeCSS}`;\n        this._styleElements.forEach(styleElement => styleElement.textContent = this._allCSS);\n    }\n    getFileIconTheme() {\n        return {\n            hasFileIcons: false,\n            hasFolderIcons: false,\n            hidesExplorerArrows: false\n        };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}