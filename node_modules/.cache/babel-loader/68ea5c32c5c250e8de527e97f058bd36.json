{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { NULL_MODE_ID } from '../modes/nullMode.js';\nimport { LanguagesRegistry } from './languagesRegistry.js';\nimport { firstOrDefault } from '../../../base/common/arrays.js';\n\nclass LanguageSelection {\n  constructor(onLanguagesMaybeChanged, selector) {\n    this._selector = selector;\n    this.languageId = this._selector();\n    let listener;\n    this._onDidChange = new Emitter({\n      onFirstListenerAdd: () => {\n        listener = onLanguagesMaybeChanged(() => this._evaluate());\n      },\n      onLastListenerRemove: () => {\n        listener.dispose();\n      }\n    });\n    this.onDidChange = this._onDidChange.event;\n  }\n\n  _evaluate() {\n    const languageId = this._selector();\n\n    if (languageId === this.languageId) {\n      // no change\n      return;\n    }\n\n    this.languageId = languageId;\n\n    this._onDidChange.fire(this.languageId);\n  }\n\n}\n\nexport class ModeServiceImpl extends Disposable {\n  constructor() {\n    let warnOnOverwrite = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    super();\n    this._onDidEncounterLanguage = this._register(new Emitter());\n    this.onDidEncounterLanguage = this._onDidEncounterLanguage.event;\n    this._onLanguagesMaybeChanged = this._register(new Emitter({\n      leakWarningThreshold: 200\n      /* https://github.com/microsoft/vscode/issues/119968 */\n\n    }));\n    this.onLanguagesMaybeChanged = this._onLanguagesMaybeChanged.event;\n    ModeServiceImpl.instanceCount++;\n    this._encounteredLanguages = new Set();\n    this._registry = this._register(new LanguagesRegistry(true, warnOnOverwrite));\n    this.languageIdCodec = this._registry.languageIdCodec;\n\n    this._register(this._registry.onDidChange(() => this._onLanguagesMaybeChanged.fire()));\n  }\n\n  dispose() {\n    ModeServiceImpl.instanceCount--;\n    super.dispose();\n  }\n\n  isRegisteredMode(mimetypeOrModeId) {\n    return this._registry.isRegisteredMode(mimetypeOrModeId);\n  }\n\n  getModeIdForLanguageName(alias) {\n    return this._registry.getModeIdForLanguageNameLowercase(alias);\n  }\n\n  getModeIdByFilepathOrFirstLine(resource, firstLine) {\n    const modeIds = this._registry.getModeIdsFromFilepathOrFirstLine(resource, firstLine);\n\n    return firstOrDefault(modeIds, null);\n  }\n\n  getModeId(commaSeparatedMimetypesOrCommaSeparatedIds) {\n    const modeIds = this._registry.extractModeIds(commaSeparatedMimetypesOrCommaSeparatedIds);\n\n    return firstOrDefault(modeIds, null);\n  }\n\n  validateLanguageId(languageId) {\n    return this._registry.validateLanguageId(languageId);\n  } // --- instantiation\n\n\n  create(commaSeparatedMimetypesOrCommaSeparatedIds) {\n    return new LanguageSelection(this.onLanguagesMaybeChanged, () => {\n      const languageId = this.getModeId(commaSeparatedMimetypesOrCommaSeparatedIds);\n      return this._createModeAndGetLanguageIdentifier(languageId);\n    });\n  }\n\n  createByFilepathOrFirstLine(resource, firstLine) {\n    return new LanguageSelection(this.onLanguagesMaybeChanged, () => {\n      const languageId = this.getModeIdByFilepathOrFirstLine(resource, firstLine);\n      return this._createModeAndGetLanguageIdentifier(languageId);\n    });\n  }\n\n  _createModeAndGetLanguageIdentifier(languageId) {\n    // Fall back to plain text if no mode was found\n    const validLanguageId = this.validateLanguageId(languageId || 'plaintext') || NULL_MODE_ID;\n\n    this._getOrCreateMode(validLanguageId);\n\n    return validLanguageId;\n  }\n\n  triggerMode(commaSeparatedMimetypesOrCommaSeparatedIds) {\n    const languageId = this.getModeId(commaSeparatedMimetypesOrCommaSeparatedIds); // Fall back to plain text if no mode was found\n\n    this._getOrCreateMode(languageId || 'plaintext');\n  }\n\n  _getOrCreateMode(languageId) {\n    if (!this._encounteredLanguages.has(languageId)) {\n      this._encounteredLanguages.add(languageId);\n\n      const validLanguageId = this.validateLanguageId(languageId) || NULL_MODE_ID;\n\n      this._onDidEncounterLanguage.fire(validLanguageId);\n    }\n  }\n\n}\nModeServiceImpl.instanceCount = 0;","map":{"version":3,"sources":["/home/umut/Documents/cs/cs410/Project2Group14/node_modules/monaco-editor/esm/vs/editor/common/services/modeServiceImpl.js"],"names":["Emitter","Disposable","NULL_MODE_ID","LanguagesRegistry","firstOrDefault","LanguageSelection","constructor","onLanguagesMaybeChanged","selector","_selector","languageId","listener","_onDidChange","onFirstListenerAdd","_evaluate","onLastListenerRemove","dispose","onDidChange","event","fire","ModeServiceImpl","warnOnOverwrite","_onDidEncounterLanguage","_register","onDidEncounterLanguage","_onLanguagesMaybeChanged","leakWarningThreshold","instanceCount","_encounteredLanguages","Set","_registry","languageIdCodec","isRegisteredMode","mimetypeOrModeId","getModeIdForLanguageName","alias","getModeIdForLanguageNameLowercase","getModeIdByFilepathOrFirstLine","resource","firstLine","modeIds","getModeIdsFromFilepathOrFirstLine","getModeId","commaSeparatedMimetypesOrCommaSeparatedIds","extractModeIds","validateLanguageId","create","_createModeAndGetLanguageIdentifier","createByFilepathOrFirstLine","validLanguageId","_getOrCreateMode","triggerMode","has","add"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { NULL_MODE_ID } from '../modes/nullMode.js';\nimport { LanguagesRegistry } from './languagesRegistry.js';\nimport { firstOrDefault } from '../../../base/common/arrays.js';\nclass LanguageSelection {\n    constructor(onLanguagesMaybeChanged, selector) {\n        this._selector = selector;\n        this.languageId = this._selector();\n        let listener;\n        this._onDidChange = new Emitter({\n            onFirstListenerAdd: () => {\n                listener = onLanguagesMaybeChanged(() => this._evaluate());\n            },\n            onLastListenerRemove: () => {\n                listener.dispose();\n            }\n        });\n        this.onDidChange = this._onDidChange.event;\n    }\n    _evaluate() {\n        const languageId = this._selector();\n        if (languageId === this.languageId) {\n            // no change\n            return;\n        }\n        this.languageId = languageId;\n        this._onDidChange.fire(this.languageId);\n    }\n}\nexport class ModeServiceImpl extends Disposable {\n    constructor(warnOnOverwrite = false) {\n        super();\n        this._onDidEncounterLanguage = this._register(new Emitter());\n        this.onDidEncounterLanguage = this._onDidEncounterLanguage.event;\n        this._onLanguagesMaybeChanged = this._register(new Emitter({ leakWarningThreshold: 200 /* https://github.com/microsoft/vscode/issues/119968 */ }));\n        this.onLanguagesMaybeChanged = this._onLanguagesMaybeChanged.event;\n        ModeServiceImpl.instanceCount++;\n        this._encounteredLanguages = new Set();\n        this._registry = this._register(new LanguagesRegistry(true, warnOnOverwrite));\n        this.languageIdCodec = this._registry.languageIdCodec;\n        this._register(this._registry.onDidChange(() => this._onLanguagesMaybeChanged.fire()));\n    }\n    dispose() {\n        ModeServiceImpl.instanceCount--;\n        super.dispose();\n    }\n    isRegisteredMode(mimetypeOrModeId) {\n        return this._registry.isRegisteredMode(mimetypeOrModeId);\n    }\n    getModeIdForLanguageName(alias) {\n        return this._registry.getModeIdForLanguageNameLowercase(alias);\n    }\n    getModeIdByFilepathOrFirstLine(resource, firstLine) {\n        const modeIds = this._registry.getModeIdsFromFilepathOrFirstLine(resource, firstLine);\n        return firstOrDefault(modeIds, null);\n    }\n    getModeId(commaSeparatedMimetypesOrCommaSeparatedIds) {\n        const modeIds = this._registry.extractModeIds(commaSeparatedMimetypesOrCommaSeparatedIds);\n        return firstOrDefault(modeIds, null);\n    }\n    validateLanguageId(languageId) {\n        return this._registry.validateLanguageId(languageId);\n    }\n    // --- instantiation\n    create(commaSeparatedMimetypesOrCommaSeparatedIds) {\n        return new LanguageSelection(this.onLanguagesMaybeChanged, () => {\n            const languageId = this.getModeId(commaSeparatedMimetypesOrCommaSeparatedIds);\n            return this._createModeAndGetLanguageIdentifier(languageId);\n        });\n    }\n    createByFilepathOrFirstLine(resource, firstLine) {\n        return new LanguageSelection(this.onLanguagesMaybeChanged, () => {\n            const languageId = this.getModeIdByFilepathOrFirstLine(resource, firstLine);\n            return this._createModeAndGetLanguageIdentifier(languageId);\n        });\n    }\n    _createModeAndGetLanguageIdentifier(languageId) {\n        // Fall back to plain text if no mode was found\n        const validLanguageId = this.validateLanguageId(languageId || 'plaintext') || NULL_MODE_ID;\n        this._getOrCreateMode(validLanguageId);\n        return validLanguageId;\n    }\n    triggerMode(commaSeparatedMimetypesOrCommaSeparatedIds) {\n        const languageId = this.getModeId(commaSeparatedMimetypesOrCommaSeparatedIds);\n        // Fall back to plain text if no mode was found\n        this._getOrCreateMode(languageId || 'plaintext');\n    }\n    _getOrCreateMode(languageId) {\n        if (!this._encounteredLanguages.has(languageId)) {\n            this._encounteredLanguages.add(languageId);\n            const validLanguageId = this.validateLanguageId(languageId) || NULL_MODE_ID;\n            this._onDidEncounterLanguage.fire(validLanguageId);\n        }\n    }\n}\nModeServiceImpl.instanceCount = 0;\n"]},"metadata":{},"sourceType":"module"}