{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { LanguageConfigurationRegistry } from './languageConfigurationRegistry.js';\nimport { Registry } from '../../../platform/registry/common/platform.js';\nimport { Mimes } from '../../../base/common/mime.js'; // Define extension point ids\n\nexport const Extensions = {\n  ModesRegistry: 'editor.modesRegistry'\n};\nexport class EditorModesRegistry {\n  constructor() {\n    this._onDidChangeLanguages = new Emitter();\n    this.onDidChangeLanguages = this._onDidChangeLanguages.event;\n    this._languages = [];\n    this._dynamicLanguages = [];\n  } // --- languages\n\n\n  registerLanguage(def) {\n    this._languages.push(def);\n\n    this._onDidChangeLanguages.fire(undefined);\n\n    return {\n      dispose: () => {\n        for (let i = 0, len = this._languages.length; i < len; i++) {\n          if (this._languages[i] === def) {\n            this._languages.splice(i, 1);\n\n            return;\n          }\n        }\n      }\n    };\n  }\n\n  getLanguages() {\n    return [].concat(this._languages).concat(this._dynamicLanguages);\n  }\n\n}\nexport const ModesRegistry = new EditorModesRegistry();\nRegistry.add(Extensions.ModesRegistry, ModesRegistry);\nexport const PLAINTEXT_MODE_ID = 'plaintext';\nexport const PLAINTEXT_EXTENSION = '.txt';\nModesRegistry.registerLanguage({\n  id: PLAINTEXT_MODE_ID,\n  extensions: [PLAINTEXT_EXTENSION],\n  aliases: [nls.localize('plainText.alias', \"Plain Text\"), 'text'],\n  mimetypes: [Mimes.text]\n});\nLanguageConfigurationRegistry.register(PLAINTEXT_MODE_ID, {\n  brackets: [['(', ')'], ['[', ']'], ['{', '}']],\n  surroundingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '<',\n    close: '>'\n  }, {\n    open: '\\\"',\n    close: '\\\"'\n  }, {\n    open: '\\'',\n    close: '\\''\n  }, {\n    open: '`',\n    close: '`'\n  }],\n  colorizedBracketPairs: [],\n  folding: {\n    offSide: true\n  }\n}, 0);","map":{"version":3,"sources":["/home/umut/Documents/cs/cs410/Project2Group14/node_modules/monaco-editor/esm/vs/editor/common/modes/modesRegistry.js"],"names":["nls","Emitter","LanguageConfigurationRegistry","Registry","Mimes","Extensions","ModesRegistry","EditorModesRegistry","constructor","_onDidChangeLanguages","onDidChangeLanguages","event","_languages","_dynamicLanguages","registerLanguage","def","push","fire","undefined","dispose","i","len","length","splice","getLanguages","concat","add","PLAINTEXT_MODE_ID","PLAINTEXT_EXTENSION","id","extensions","aliases","localize","mimetypes","text","register","brackets","surroundingPairs","open","close","colorizedBracketPairs","folding","offSide"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { LanguageConfigurationRegistry } from './languageConfigurationRegistry.js';\nimport { Registry } from '../../../platform/registry/common/platform.js';\nimport { Mimes } from '../../../base/common/mime.js';\n// Define extension point ids\nexport const Extensions = {\n    ModesRegistry: 'editor.modesRegistry'\n};\nexport class EditorModesRegistry {\n    constructor() {\n        this._onDidChangeLanguages = new Emitter();\n        this.onDidChangeLanguages = this._onDidChangeLanguages.event;\n        this._languages = [];\n        this._dynamicLanguages = [];\n    }\n    // --- languages\n    registerLanguage(def) {\n        this._languages.push(def);\n        this._onDidChangeLanguages.fire(undefined);\n        return {\n            dispose: () => {\n                for (let i = 0, len = this._languages.length; i < len; i++) {\n                    if (this._languages[i] === def) {\n                        this._languages.splice(i, 1);\n                        return;\n                    }\n                }\n            }\n        };\n    }\n    getLanguages() {\n        return [].concat(this._languages).concat(this._dynamicLanguages);\n    }\n}\nexport const ModesRegistry = new EditorModesRegistry();\nRegistry.add(Extensions.ModesRegistry, ModesRegistry);\nexport const PLAINTEXT_MODE_ID = 'plaintext';\nexport const PLAINTEXT_EXTENSION = '.txt';\nModesRegistry.registerLanguage({\n    id: PLAINTEXT_MODE_ID,\n    extensions: [PLAINTEXT_EXTENSION],\n    aliases: [nls.localize('plainText.alias', \"Plain Text\"), 'text'],\n    mimetypes: [Mimes.text]\n});\nLanguageConfigurationRegistry.register(PLAINTEXT_MODE_ID, {\n    brackets: [\n        ['(', ')'],\n        ['[', ']'],\n        ['{', '}'],\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '<', close: '>' },\n        { open: '\\\"', close: '\\\"' },\n        { open: '\\'', close: '\\'' },\n        { open: '`', close: '`' },\n    ],\n    colorizedBracketPairs: [],\n    folding: {\n        offSide: true\n    }\n}, 0);\n"]},"metadata":{},"sourceType":"module"}