{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { onUnexpectedExternalError } from '../../../base/common/errors.js';\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\nimport { FoldingRegions, MAX_LINE_NUMBER } from './foldingRanges.js';\nconst MAX_FOLDING_REGIONS = 5000;\nconst foldingContext = {};\nexport const ID_SYNTAX_PROVIDER = 'syntax';\nexport class SyntaxRangeProvider {\n  constructor(editorModel, providers, handleFoldingRangesChange) {\n    let limit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : MAX_FOLDING_REGIONS;\n    this.editorModel = editorModel;\n    this.providers = providers;\n    this.limit = limit;\n    this.id = ID_SYNTAX_PROVIDER;\n\n    for (const provider of providers) {\n      if (typeof provider.onDidChange === 'function') {\n        if (!this.disposables) {\n          this.disposables = new DisposableStore();\n        }\n\n        this.disposables.add(provider.onDidChange(handleFoldingRangesChange));\n      }\n    }\n  }\n\n  compute(cancellationToken) {\n    return collectSyntaxRanges(this.providers, this.editorModel, cancellationToken).then(ranges => {\n      if (ranges) {\n        let res = sanitizeRanges(ranges, this.limit);\n        return res;\n      }\n\n      return null;\n    });\n  }\n\n  dispose() {\n    var _a;\n\n    (_a = this.disposables) === null || _a === void 0 ? void 0 : _a.dispose();\n  }\n\n}\n\nfunction collectSyntaxRanges(providers, model, cancellationToken) {\n  let rangeData = null;\n  let promises = providers.map((provider, i) => {\n    return Promise.resolve(provider.provideFoldingRanges(model, foldingContext, cancellationToken)).then(ranges => {\n      if (cancellationToken.isCancellationRequested) {\n        return;\n      }\n\n      if (Array.isArray(ranges)) {\n        if (!Array.isArray(rangeData)) {\n          rangeData = [];\n        }\n\n        let nLines = model.getLineCount();\n\n        for (let r of ranges) {\n          if (r.start > 0 && r.end > r.start && r.end <= nLines) {\n            rangeData.push({\n              start: r.start,\n              end: r.end,\n              rank: i,\n              kind: r.kind\n            });\n          }\n        }\n      }\n    }, onUnexpectedExternalError);\n  });\n  return Promise.all(promises).then(_ => {\n    return rangeData;\n  });\n}\n\nexport class RangesCollector {\n  constructor(foldingRangesLimit) {\n    this._startIndexes = [];\n    this._endIndexes = [];\n    this._nestingLevels = [];\n    this._nestingLevelCounts = [];\n    this._types = [];\n    this._length = 0;\n    this._foldingRangesLimit = foldingRangesLimit;\n  }\n\n  add(startLineNumber, endLineNumber, type, nestingLevel) {\n    if (startLineNumber > MAX_LINE_NUMBER || endLineNumber > MAX_LINE_NUMBER) {\n      return;\n    }\n\n    let index = this._length;\n    this._startIndexes[index] = startLineNumber;\n    this._endIndexes[index] = endLineNumber;\n    this._nestingLevels[index] = nestingLevel;\n    this._types[index] = type;\n    this._length++;\n\n    if (nestingLevel < 30) {\n      this._nestingLevelCounts[nestingLevel] = (this._nestingLevelCounts[nestingLevel] || 0) + 1;\n    }\n  }\n\n  toIndentRanges() {\n    if (this._length <= this._foldingRangesLimit) {\n      let startIndexes = new Uint32Array(this._length);\n      let endIndexes = new Uint32Array(this._length);\n\n      for (let i = 0; i < this._length; i++) {\n        startIndexes[i] = this._startIndexes[i];\n        endIndexes[i] = this._endIndexes[i];\n      }\n\n      return new FoldingRegions(startIndexes, endIndexes, this._types);\n    } else {\n      let entries = 0;\n      let maxLevel = this._nestingLevelCounts.length;\n\n      for (let i = 0; i < this._nestingLevelCounts.length; i++) {\n        let n = this._nestingLevelCounts[i];\n\n        if (n) {\n          if (n + entries > this._foldingRangesLimit) {\n            maxLevel = i;\n            break;\n          }\n\n          entries += n;\n        }\n      }\n\n      let startIndexes = new Uint32Array(this._foldingRangesLimit);\n      let endIndexes = new Uint32Array(this._foldingRangesLimit);\n      let types = [];\n\n      for (let i = 0, k = 0; i < this._length; i++) {\n        let level = this._nestingLevels[i];\n\n        if (level < maxLevel || level === maxLevel && entries++ < this._foldingRangesLimit) {\n          startIndexes[k] = this._startIndexes[i];\n          endIndexes[k] = this._endIndexes[i];\n          types[k] = this._types[i];\n          k++;\n        }\n      }\n\n      return new FoldingRegions(startIndexes, endIndexes, types);\n    }\n  }\n\n}\nexport function sanitizeRanges(rangeData, limit) {\n  let sorted = rangeData.sort((d1, d2) => {\n    let diff = d1.start - d2.start;\n\n    if (diff === 0) {\n      diff = d1.rank - d2.rank;\n    }\n\n    return diff;\n  });\n  let collector = new RangesCollector(limit);\n  let top = undefined;\n  let previous = [];\n\n  for (let entry of sorted) {\n    if (!top) {\n      top = entry;\n      collector.add(entry.start, entry.end, entry.kind && entry.kind.value, previous.length);\n    } else {\n      if (entry.start > top.start) {\n        if (entry.end <= top.end) {\n          previous.push(top);\n          top = entry;\n          collector.add(entry.start, entry.end, entry.kind && entry.kind.value, previous.length);\n        } else {\n          if (entry.start > top.end) {\n            do {\n              top = previous.pop();\n            } while (top && entry.start > top.end);\n\n            if (top) {\n              previous.push(top);\n            }\n\n            top = entry;\n          }\n\n          collector.add(entry.start, entry.end, entry.kind && entry.kind.value, previous.length);\n        }\n      }\n    }\n  }\n\n  return collector.toIndentRanges();\n}","map":{"version":3,"sources":["/home/umut/Documents/cs/cs410/Project2Group14/node_modules/monaco-editor/esm/vs/editor/contrib/folding/syntaxRangeProvider.js"],"names":["onUnexpectedExternalError","DisposableStore","FoldingRegions","MAX_LINE_NUMBER","MAX_FOLDING_REGIONS","foldingContext","ID_SYNTAX_PROVIDER","SyntaxRangeProvider","constructor","editorModel","providers","handleFoldingRangesChange","limit","id","provider","onDidChange","disposables","add","compute","cancellationToken","collectSyntaxRanges","then","ranges","res","sanitizeRanges","dispose","_a","model","rangeData","promises","map","i","Promise","resolve","provideFoldingRanges","isCancellationRequested","Array","isArray","nLines","getLineCount","r","start","end","push","rank","kind","all","_","RangesCollector","foldingRangesLimit","_startIndexes","_endIndexes","_nestingLevels","_nestingLevelCounts","_types","_length","_foldingRangesLimit","startLineNumber","endLineNumber","type","nestingLevel","index","toIndentRanges","startIndexes","Uint32Array","endIndexes","entries","maxLevel","length","n","types","k","level","sorted","sort","d1","d2","diff","collector","top","undefined","previous","entry","value","pop"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { onUnexpectedExternalError } from '../../../base/common/errors.js';\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\nimport { FoldingRegions, MAX_LINE_NUMBER } from './foldingRanges.js';\nconst MAX_FOLDING_REGIONS = 5000;\nconst foldingContext = {};\nexport const ID_SYNTAX_PROVIDER = 'syntax';\nexport class SyntaxRangeProvider {\n    constructor(editorModel, providers, handleFoldingRangesChange, limit = MAX_FOLDING_REGIONS) {\n        this.editorModel = editorModel;\n        this.providers = providers;\n        this.limit = limit;\n        this.id = ID_SYNTAX_PROVIDER;\n        for (const provider of providers) {\n            if (typeof provider.onDidChange === 'function') {\n                if (!this.disposables) {\n                    this.disposables = new DisposableStore();\n                }\n                this.disposables.add(provider.onDidChange(handleFoldingRangesChange));\n            }\n        }\n    }\n    compute(cancellationToken) {\n        return collectSyntaxRanges(this.providers, this.editorModel, cancellationToken).then(ranges => {\n            if (ranges) {\n                let res = sanitizeRanges(ranges, this.limit);\n                return res;\n            }\n            return null;\n        });\n    }\n    dispose() {\n        var _a;\n        (_a = this.disposables) === null || _a === void 0 ? void 0 : _a.dispose();\n    }\n}\nfunction collectSyntaxRanges(providers, model, cancellationToken) {\n    let rangeData = null;\n    let promises = providers.map((provider, i) => {\n        return Promise.resolve(provider.provideFoldingRanges(model, foldingContext, cancellationToken)).then(ranges => {\n            if (cancellationToken.isCancellationRequested) {\n                return;\n            }\n            if (Array.isArray(ranges)) {\n                if (!Array.isArray(rangeData)) {\n                    rangeData = [];\n                }\n                let nLines = model.getLineCount();\n                for (let r of ranges) {\n                    if (r.start > 0 && r.end > r.start && r.end <= nLines) {\n                        rangeData.push({ start: r.start, end: r.end, rank: i, kind: r.kind });\n                    }\n                }\n            }\n        }, onUnexpectedExternalError);\n    });\n    return Promise.all(promises).then(_ => {\n        return rangeData;\n    });\n}\nexport class RangesCollector {\n    constructor(foldingRangesLimit) {\n        this._startIndexes = [];\n        this._endIndexes = [];\n        this._nestingLevels = [];\n        this._nestingLevelCounts = [];\n        this._types = [];\n        this._length = 0;\n        this._foldingRangesLimit = foldingRangesLimit;\n    }\n    add(startLineNumber, endLineNumber, type, nestingLevel) {\n        if (startLineNumber > MAX_LINE_NUMBER || endLineNumber > MAX_LINE_NUMBER) {\n            return;\n        }\n        let index = this._length;\n        this._startIndexes[index] = startLineNumber;\n        this._endIndexes[index] = endLineNumber;\n        this._nestingLevels[index] = nestingLevel;\n        this._types[index] = type;\n        this._length++;\n        if (nestingLevel < 30) {\n            this._nestingLevelCounts[nestingLevel] = (this._nestingLevelCounts[nestingLevel] || 0) + 1;\n        }\n    }\n    toIndentRanges() {\n        if (this._length <= this._foldingRangesLimit) {\n            let startIndexes = new Uint32Array(this._length);\n            let endIndexes = new Uint32Array(this._length);\n            for (let i = 0; i < this._length; i++) {\n                startIndexes[i] = this._startIndexes[i];\n                endIndexes[i] = this._endIndexes[i];\n            }\n            return new FoldingRegions(startIndexes, endIndexes, this._types);\n        }\n        else {\n            let entries = 0;\n            let maxLevel = this._nestingLevelCounts.length;\n            for (let i = 0; i < this._nestingLevelCounts.length; i++) {\n                let n = this._nestingLevelCounts[i];\n                if (n) {\n                    if (n + entries > this._foldingRangesLimit) {\n                        maxLevel = i;\n                        break;\n                    }\n                    entries += n;\n                }\n            }\n            let startIndexes = new Uint32Array(this._foldingRangesLimit);\n            let endIndexes = new Uint32Array(this._foldingRangesLimit);\n            let types = [];\n            for (let i = 0, k = 0; i < this._length; i++) {\n                let level = this._nestingLevels[i];\n                if (level < maxLevel || (level === maxLevel && entries++ < this._foldingRangesLimit)) {\n                    startIndexes[k] = this._startIndexes[i];\n                    endIndexes[k] = this._endIndexes[i];\n                    types[k] = this._types[i];\n                    k++;\n                }\n            }\n            return new FoldingRegions(startIndexes, endIndexes, types);\n        }\n    }\n}\nexport function sanitizeRanges(rangeData, limit) {\n    let sorted = rangeData.sort((d1, d2) => {\n        let diff = d1.start - d2.start;\n        if (diff === 0) {\n            diff = d1.rank - d2.rank;\n        }\n        return diff;\n    });\n    let collector = new RangesCollector(limit);\n    let top = undefined;\n    let previous = [];\n    for (let entry of sorted) {\n        if (!top) {\n            top = entry;\n            collector.add(entry.start, entry.end, entry.kind && entry.kind.value, previous.length);\n        }\n        else {\n            if (entry.start > top.start) {\n                if (entry.end <= top.end) {\n                    previous.push(top);\n                    top = entry;\n                    collector.add(entry.start, entry.end, entry.kind && entry.kind.value, previous.length);\n                }\n                else {\n                    if (entry.start > top.end) {\n                        do {\n                            top = previous.pop();\n                        } while (top && entry.start > top.end);\n                        if (top) {\n                            previous.push(top);\n                        }\n                        top = entry;\n                    }\n                    collector.add(entry.start, entry.end, entry.kind && entry.kind.value, previous.length);\n                }\n            }\n        }\n    }\n    return collector.toIndentRanges();\n}\n"]},"metadata":{},"sourceType":"module"}