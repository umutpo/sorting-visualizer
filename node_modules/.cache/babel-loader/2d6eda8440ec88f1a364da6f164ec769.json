{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../base/browser/dom.js';\nimport { StandardWheelEvent } from '../../../base/browser/mouseEvent.js';\nimport { TimeoutTimer } from '../../../base/common/async.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport * as platform from '../../../base/common/platform.js';\nimport { HitTestContext, MouseTarget, MouseTargetFactory } from './mouseTarget.js';\nimport { ClientCoordinates, EditorMouseEventFactory, GlobalEditorMouseMoveMonitor, createEditorPagePosition } from '../editorDom.js';\nimport { EditorZoom } from '../../common/config/editorZoom.js';\nimport { Position } from '../../common/core/position.js';\nimport { Selection } from '../../common/core/selection.js';\nimport { ViewEventHandler } from '../../common/viewModel/viewEventHandler.js';\n/**\n * Merges mouse events when mouse move events are throttled\n */\n\nexport function createMouseMoveEventMerger(mouseTargetFactory) {\n  return function (lastEvent, currentEvent) {\n    let targetIsWidget = false;\n\n    if (mouseTargetFactory) {\n      targetIsWidget = mouseTargetFactory.mouseTargetIsWidget(currentEvent);\n    }\n\n    if (!targetIsWidget) {\n      currentEvent.preventDefault();\n    }\n\n    return currentEvent;\n  };\n}\nexport class MouseHandler extends ViewEventHandler {\n  constructor(context, viewController, viewHelper) {\n    super();\n    this._context = context;\n    this.viewController = viewController;\n    this.viewHelper = viewHelper;\n    this.mouseTargetFactory = new MouseTargetFactory(this._context, viewHelper);\n    this._mouseDownOperation = this._register(new MouseDownOperation(this._context, this.viewController, this.viewHelper, (e, testEventTarget) => this._createMouseTarget(e, testEventTarget), e => this._getMouseColumn(e)));\n    this.lastMouseLeaveTime = -1;\n    this._height = this._context.configuration.options.get(129\n    /* layoutInfo */\n    ).height;\n    const mouseEvents = new EditorMouseEventFactory(this.viewHelper.viewDomNode);\n\n    this._register(mouseEvents.onContextMenu(this.viewHelper.viewDomNode, e => this._onContextMenu(e, true)));\n\n    this._register(mouseEvents.onMouseMoveThrottled(this.viewHelper.viewDomNode, e => this._onMouseMove(e), createMouseMoveEventMerger(this.mouseTargetFactory), MouseHandler.MOUSE_MOVE_MINIMUM_TIME));\n\n    this._register(mouseEvents.onMouseUp(this.viewHelper.viewDomNode, e => this._onMouseUp(e)));\n\n    this._register(mouseEvents.onMouseLeave(this.viewHelper.viewDomNode, e => this._onMouseLeave(e)));\n\n    this._register(mouseEvents.onMouseDown(this.viewHelper.viewDomNode, e => this._onMouseDown(e)));\n\n    const onMouseWheel = browserEvent => {\n      this.viewController.emitMouseWheel(browserEvent);\n\n      if (!this._context.configuration.options.get(67\n      /* mouseWheelZoom */\n      )) {\n        return;\n      }\n\n      const e = new StandardWheelEvent(browserEvent);\n      const doMouseWheelZoom = platform.isMacintosh // on macOS we support cmd + two fingers scroll (`metaKey` set)\n      // and also the two fingers pinch gesture (`ctrKey` set)\n      ? (browserEvent.metaKey || browserEvent.ctrlKey) && !browserEvent.shiftKey && !browserEvent.altKey : browserEvent.ctrlKey && !browserEvent.metaKey && !browserEvent.shiftKey && !browserEvent.altKey;\n\n      if (doMouseWheelZoom) {\n        const zoomLevel = EditorZoom.getZoomLevel();\n        const delta = e.deltaY > 0 ? 1 : -1;\n        EditorZoom.setZoomLevel(zoomLevel + delta);\n        e.preventDefault();\n        e.stopPropagation();\n      }\n    };\n\n    this._register(dom.addDisposableListener(this.viewHelper.viewDomNode, dom.EventType.MOUSE_WHEEL, onMouseWheel, {\n      capture: true,\n      passive: false\n    }));\n\n    this._context.addEventHandler(this);\n  }\n\n  dispose() {\n    this._context.removeEventHandler(this);\n\n    super.dispose();\n  } // --- begin event handlers\n\n\n  onConfigurationChanged(e) {\n    if (e.hasChanged(129\n    /* layoutInfo */\n    )) {\n      // layout change\n      const height = this._context.configuration.options.get(129\n      /* layoutInfo */\n      ).height;\n\n      if (this._height !== height) {\n        this._height = height;\n\n        this._mouseDownOperation.onHeightChanged();\n      }\n    }\n\n    return false;\n  }\n\n  onCursorStateChanged(e) {\n    this._mouseDownOperation.onCursorStateChanged(e);\n\n    return false;\n  }\n\n  onFocusChanged(e) {\n    return false;\n  }\n\n  onScrollChanged(e) {\n    this._mouseDownOperation.onScrollChanged();\n\n    return false;\n  } // --- end event handlers\n\n\n  getTargetAtClientPoint(clientX, clientY) {\n    const clientPos = new ClientCoordinates(clientX, clientY);\n    const pos = clientPos.toPageCoordinates();\n    const editorPos = createEditorPagePosition(this.viewHelper.viewDomNode);\n\n    if (pos.y < editorPos.y || pos.y > editorPos.y + editorPos.height || pos.x < editorPos.x || pos.x > editorPos.x + editorPos.width) {\n      return null;\n    }\n\n    return this.mouseTargetFactory.createMouseTarget(this.viewHelper.getLastRenderData(), editorPos, pos, null);\n  }\n\n  _createMouseTarget(e, testEventTarget) {\n    let target = e.target;\n\n    if (!this.viewHelper.viewDomNode.contains(target)) {\n      const shadowRoot = dom.getShadowRoot(this.viewHelper.viewDomNode);\n\n      if (shadowRoot) {\n        target = shadowRoot.elementsFromPoint(e.posx, e.posy).find(el => this.viewHelper.viewDomNode.contains(el));\n      }\n    }\n\n    return this.mouseTargetFactory.createMouseTarget(this.viewHelper.getLastRenderData(), e.editorPos, e.pos, testEventTarget ? target : null);\n  }\n\n  _getMouseColumn(e) {\n    return this.mouseTargetFactory.getMouseColumn(e.editorPos, e.pos);\n  }\n\n  _onContextMenu(e, testEventTarget) {\n    this.viewController.emitContextMenu({\n      event: e,\n      target: this._createMouseTarget(e, testEventTarget)\n    });\n  }\n\n  _onMouseMove(e) {\n    if (this._mouseDownOperation.isActive()) {\n      // In selection/drag operation\n      return;\n    }\n\n    const actualMouseMoveTime = e.timestamp;\n\n    if (actualMouseMoveTime < this.lastMouseLeaveTime) {\n      // Due to throttling, this event occurred before the mouse left the editor, therefore ignore it.\n      return;\n    }\n\n    this.viewController.emitMouseMove({\n      event: e,\n      target: this._createMouseTarget(e, true)\n    });\n  }\n\n  _onMouseLeave(e) {\n    this.lastMouseLeaveTime = new Date().getTime();\n    this.viewController.emitMouseLeave({\n      event: e,\n      target: null\n    });\n  }\n\n  _onMouseUp(e) {\n    this.viewController.emitMouseUp({\n      event: e,\n      target: this._createMouseTarget(e, true)\n    });\n  }\n\n  _onMouseDown(e) {\n    const t = this._createMouseTarget(e, true);\n\n    const targetIsContent = t.type === 6\n    /* CONTENT_TEXT */\n    || t.type === 7\n    /* CONTENT_EMPTY */\n    ;\n    const targetIsGutter = t.type === 2\n    /* GUTTER_GLYPH_MARGIN */\n    || t.type === 3\n    /* GUTTER_LINE_NUMBERS */\n    || t.type === 4\n    /* GUTTER_LINE_DECORATIONS */\n    ;\n    const targetIsLineNumbers = t.type === 3\n    /* GUTTER_LINE_NUMBERS */\n    ;\n\n    const selectOnLineNumbers = this._context.configuration.options.get(97\n    /* selectOnLineNumbers */\n    );\n\n    const targetIsViewZone = t.type === 8\n    /* CONTENT_VIEW_ZONE */\n    || t.type === 5\n    /* GUTTER_VIEW_ZONE */\n    ;\n    const targetIsWidget = t.type === 9\n    /* CONTENT_WIDGET */\n    ;\n    let shouldHandle = e.leftButton || e.middleButton;\n\n    if (platform.isMacintosh && e.leftButton && e.ctrlKey) {\n      shouldHandle = false;\n    }\n\n    const focus = () => {\n      e.preventDefault();\n      this.viewHelper.focusTextArea();\n    };\n\n    if (shouldHandle && (targetIsContent || targetIsLineNumbers && selectOnLineNumbers)) {\n      focus();\n\n      this._mouseDownOperation.start(t.type, e);\n    } else if (targetIsGutter) {\n      // Do not steal focus\n      e.preventDefault();\n    } else if (targetIsViewZone) {\n      const viewZoneData = t.detail;\n\n      if (this.viewHelper.shouldSuppressMouseDownOnViewZone(viewZoneData.viewZoneId)) {\n        focus();\n\n        this._mouseDownOperation.start(t.type, e);\n\n        e.preventDefault();\n      }\n    } else if (targetIsWidget && this.viewHelper.shouldSuppressMouseDownOnWidget(t.detail)) {\n      focus();\n      e.preventDefault();\n    }\n\n    this.viewController.emitMouseDown({\n      event: e,\n      target: t\n    });\n  }\n\n}\nMouseHandler.MOUSE_MOVE_MINIMUM_TIME = 100; // ms\n\nclass MouseDownOperation extends Disposable {\n  constructor(context, viewController, viewHelper, createMouseTarget, getMouseColumn) {\n    super();\n    this._context = context;\n    this._viewController = viewController;\n    this._viewHelper = viewHelper;\n    this._createMouseTarget = createMouseTarget;\n    this._getMouseColumn = getMouseColumn;\n    this._mouseMoveMonitor = this._register(new GlobalEditorMouseMoveMonitor(this._viewHelper.viewDomNode));\n    this._onScrollTimeout = this._register(new TimeoutTimer());\n    this._mouseState = new MouseDownState();\n    this._currentSelection = new Selection(1, 1, 1, 1);\n    this._isActive = false;\n    this._lastMouseEvent = null;\n  }\n\n  dispose() {\n    super.dispose();\n  }\n\n  isActive() {\n    return this._isActive;\n  }\n\n  _onMouseDownThenMove(e) {\n    this._lastMouseEvent = e;\n\n    this._mouseState.setModifiers(e);\n\n    const position = this._findMousePosition(e, true);\n\n    if (!position) {\n      // Ignoring because position is unknown\n      return;\n    }\n\n    if (this._mouseState.isDragAndDrop) {\n      this._viewController.emitMouseDrag({\n        event: e,\n        target: position\n      });\n    } else {\n      this._dispatchMouse(position, true);\n    }\n  }\n\n  start(targetType, e) {\n    this._lastMouseEvent = e;\n\n    this._mouseState.setStartedOnLineNumbers(targetType === 3\n    /* GUTTER_LINE_NUMBERS */\n    );\n\n    this._mouseState.setStartButtons(e);\n\n    this._mouseState.setModifiers(e);\n\n    const position = this._findMousePosition(e, true);\n\n    if (!position || !position.position) {\n      // Ignoring because position is unknown\n      return;\n    }\n\n    this._mouseState.trySetCount(e.detail, position.position); // Overwrite the detail of the MouseEvent, as it will be sent out in an event and contributions might rely on it.\n\n\n    e.detail = this._mouseState.count;\n    const options = this._context.configuration.options;\n\n    if (!options.get(80\n    /* readOnly */\n    ) && options.get(31\n    /* dragAndDrop */\n    ) && !options.get(18\n    /* columnSelection */\n    ) && !this._mouseState.altKey // we don't support multiple mouse\n    && e.detail < 2 // only single click on a selection can work\n    && !this._isActive // the mouse is not down yet\n    && !this._currentSelection.isEmpty() // we don't drag single cursor\n    && position.type === 6\n    /* CONTENT_TEXT */\n    // single click on text\n    && position.position && this._currentSelection.containsPosition(position.position) // single click on a selection\n    ) {\n      this._mouseState.isDragAndDrop = true;\n      this._isActive = true;\n\n      this._mouseMoveMonitor.startMonitoring(e.target, e.buttons, createMouseMoveEventMerger(null), e => this._onMouseDownThenMove(e), browserEvent => {\n        const position = this._findMousePosition(this._lastMouseEvent, true);\n\n        if (browserEvent && browserEvent instanceof KeyboardEvent) {\n          // cancel\n          this._viewController.emitMouseDropCanceled();\n        } else {\n          this._viewController.emitMouseDrop({\n            event: this._lastMouseEvent,\n            target: position ? this._createMouseTarget(this._lastMouseEvent, true) : null // Ignoring because position is unknown, e.g., Content View Zone\n\n          });\n        }\n\n        this._stop();\n      });\n\n      return;\n    }\n\n    this._mouseState.isDragAndDrop = false;\n\n    this._dispatchMouse(position, e.shiftKey);\n\n    if (!this._isActive) {\n      this._isActive = true;\n\n      this._mouseMoveMonitor.startMonitoring(e.target, e.buttons, createMouseMoveEventMerger(null), e => this._onMouseDownThenMove(e), () => this._stop());\n    }\n  }\n\n  _stop() {\n    this._isActive = false;\n\n    this._onScrollTimeout.cancel();\n  }\n\n  onHeightChanged() {\n    this._mouseMoveMonitor.stopMonitoring();\n  }\n\n  onScrollChanged() {\n    if (!this._isActive) {\n      return;\n    }\n\n    this._onScrollTimeout.setIfNotSet(() => {\n      if (!this._lastMouseEvent) {\n        return;\n      }\n\n      const position = this._findMousePosition(this._lastMouseEvent, false);\n\n      if (!position) {\n        // Ignoring because position is unknown\n        return;\n      }\n\n      if (this._mouseState.isDragAndDrop) {\n        // Ignoring because users are dragging the text\n        return;\n      }\n\n      this._dispatchMouse(position, true);\n    }, 10);\n  }\n\n  onCursorStateChanged(e) {\n    this._currentSelection = e.selections[0];\n  }\n\n  _getPositionOutsideEditor(e) {\n    const editorContent = e.editorPos;\n    const model = this._context.model;\n    const viewLayout = this._context.viewLayout;\n\n    const mouseColumn = this._getMouseColumn(e);\n\n    if (e.posy < editorContent.y) {\n      const verticalOffset = Math.max(viewLayout.getCurrentScrollTop() - (editorContent.y - e.posy), 0);\n      const viewZoneData = HitTestContext.getZoneAtCoord(this._context, verticalOffset);\n\n      if (viewZoneData) {\n        const newPosition = this._helpPositionJumpOverViewZone(viewZoneData);\n\n        if (newPosition) {\n          return new MouseTarget(null, 13\n          /* OUTSIDE_EDITOR */\n          , mouseColumn, newPosition);\n        }\n      }\n\n      const aboveLineNumber = viewLayout.getLineNumberAtVerticalOffset(verticalOffset);\n      return new MouseTarget(null, 13\n      /* OUTSIDE_EDITOR */\n      , mouseColumn, new Position(aboveLineNumber, 1));\n    }\n\n    if (e.posy > editorContent.y + editorContent.height) {\n      const verticalOffset = viewLayout.getCurrentScrollTop() + (e.posy - editorContent.y);\n      const viewZoneData = HitTestContext.getZoneAtCoord(this._context, verticalOffset);\n\n      if (viewZoneData) {\n        const newPosition = this._helpPositionJumpOverViewZone(viewZoneData);\n\n        if (newPosition) {\n          return new MouseTarget(null, 13\n          /* OUTSIDE_EDITOR */\n          , mouseColumn, newPosition);\n        }\n      }\n\n      const belowLineNumber = viewLayout.getLineNumberAtVerticalOffset(verticalOffset);\n      return new MouseTarget(null, 13\n      /* OUTSIDE_EDITOR */\n      , mouseColumn, new Position(belowLineNumber, model.getLineMaxColumn(belowLineNumber)));\n    }\n\n    const possibleLineNumber = viewLayout.getLineNumberAtVerticalOffset(viewLayout.getCurrentScrollTop() + (e.posy - editorContent.y));\n\n    if (e.posx < editorContent.x) {\n      return new MouseTarget(null, 13\n      /* OUTSIDE_EDITOR */\n      , mouseColumn, new Position(possibleLineNumber, 1));\n    }\n\n    if (e.posx > editorContent.x + editorContent.width) {\n      return new MouseTarget(null, 13\n      /* OUTSIDE_EDITOR */\n      , mouseColumn, new Position(possibleLineNumber, model.getLineMaxColumn(possibleLineNumber)));\n    }\n\n    return null;\n  }\n\n  _findMousePosition(e, testEventTarget) {\n    const positionOutsideEditor = this._getPositionOutsideEditor(e);\n\n    if (positionOutsideEditor) {\n      return positionOutsideEditor;\n    }\n\n    const t = this._createMouseTarget(e, testEventTarget);\n\n    const hintedPosition = t.position;\n\n    if (!hintedPosition) {\n      return null;\n    }\n\n    if (t.type === 8\n    /* CONTENT_VIEW_ZONE */\n    || t.type === 5\n    /* GUTTER_VIEW_ZONE */\n    ) {\n      const newPosition = this._helpPositionJumpOverViewZone(t.detail);\n\n      if (newPosition) {\n        return new MouseTarget(t.element, t.type, t.mouseColumn, newPosition, null, t.detail);\n      }\n    }\n\n    return t;\n  }\n\n  _helpPositionJumpOverViewZone(viewZoneData) {\n    // Force position on view zones to go above or below depending on where selection started from\n    const selectionStart = new Position(this._currentSelection.selectionStartLineNumber, this._currentSelection.selectionStartColumn);\n    const positionBefore = viewZoneData.positionBefore;\n    const positionAfter = viewZoneData.positionAfter;\n\n    if (positionBefore && positionAfter) {\n      if (positionBefore.isBefore(selectionStart)) {\n        return positionBefore;\n      } else {\n        return positionAfter;\n      }\n    }\n\n    return null;\n  }\n\n  _dispatchMouse(position, inSelectionMode) {\n    if (!position.position) {\n      return;\n    }\n\n    this._viewController.dispatchMouse({\n      position: position.position,\n      mouseColumn: position.mouseColumn,\n      startedOnLineNumbers: this._mouseState.startedOnLineNumbers,\n      inSelectionMode: inSelectionMode,\n      mouseDownCount: this._mouseState.count,\n      altKey: this._mouseState.altKey,\n      ctrlKey: this._mouseState.ctrlKey,\n      metaKey: this._mouseState.metaKey,\n      shiftKey: this._mouseState.shiftKey,\n      leftButton: this._mouseState.leftButton,\n      middleButton: this._mouseState.middleButton\n    });\n  }\n\n}\n\nclass MouseDownState {\n  constructor() {\n    this._altKey = false;\n    this._ctrlKey = false;\n    this._metaKey = false;\n    this._shiftKey = false;\n    this._leftButton = false;\n    this._middleButton = false;\n    this._startedOnLineNumbers = false;\n    this._lastMouseDownPosition = null;\n    this._lastMouseDownPositionEqualCount = 0;\n    this._lastMouseDownCount = 0;\n    this._lastSetMouseDownCountTime = 0;\n    this.isDragAndDrop = false;\n  }\n\n  get altKey() {\n    return this._altKey;\n  }\n\n  get ctrlKey() {\n    return this._ctrlKey;\n  }\n\n  get metaKey() {\n    return this._metaKey;\n  }\n\n  get shiftKey() {\n    return this._shiftKey;\n  }\n\n  get leftButton() {\n    return this._leftButton;\n  }\n\n  get middleButton() {\n    return this._middleButton;\n  }\n\n  get startedOnLineNumbers() {\n    return this._startedOnLineNumbers;\n  }\n\n  get count() {\n    return this._lastMouseDownCount;\n  }\n\n  setModifiers(source) {\n    this._altKey = source.altKey;\n    this._ctrlKey = source.ctrlKey;\n    this._metaKey = source.metaKey;\n    this._shiftKey = source.shiftKey;\n  }\n\n  setStartButtons(source) {\n    this._leftButton = source.leftButton;\n    this._middleButton = source.middleButton;\n  }\n\n  setStartedOnLineNumbers(startedOnLineNumbers) {\n    this._startedOnLineNumbers = startedOnLineNumbers;\n  }\n\n  trySetCount(setMouseDownCount, newMouseDownPosition) {\n    // a. Invalidate multiple clicking if too much time has passed (will be hit by IE because the detail field of mouse events contains garbage in IE10)\n    const currentTime = new Date().getTime();\n\n    if (currentTime - this._lastSetMouseDownCountTime > MouseDownState.CLEAR_MOUSE_DOWN_COUNT_TIME) {\n      setMouseDownCount = 1;\n    }\n\n    this._lastSetMouseDownCountTime = currentTime; // b. Ensure that we don't jump from single click to triple click in one go (will be hit by IE because the detail field of mouse events contains garbage in IE10)\n\n    if (setMouseDownCount > this._lastMouseDownCount + 1) {\n      setMouseDownCount = this._lastMouseDownCount + 1;\n    } // c. Invalidate multiple clicking if the logical position is different\n\n\n    if (this._lastMouseDownPosition && this._lastMouseDownPosition.equals(newMouseDownPosition)) {\n      this._lastMouseDownPositionEqualCount++;\n    } else {\n      this._lastMouseDownPositionEqualCount = 1;\n    }\n\n    this._lastMouseDownPosition = newMouseDownPosition; // Finally set the lastMouseDownCount\n\n    this._lastMouseDownCount = Math.min(setMouseDownCount, this._lastMouseDownPositionEqualCount);\n  }\n\n}\n\nMouseDownState.CLEAR_MOUSE_DOWN_COUNT_TIME = 400; // ms","map":{"version":3,"sources":["/home/umut/Documents/cs/cs410/Project2Group14/node_modules/monaco-editor/esm/vs/editor/browser/controller/mouseHandler.js"],"names":["dom","StandardWheelEvent","TimeoutTimer","Disposable","platform","HitTestContext","MouseTarget","MouseTargetFactory","ClientCoordinates","EditorMouseEventFactory","GlobalEditorMouseMoveMonitor","createEditorPagePosition","EditorZoom","Position","Selection","ViewEventHandler","createMouseMoveEventMerger","mouseTargetFactory","lastEvent","currentEvent","targetIsWidget","mouseTargetIsWidget","preventDefault","MouseHandler","constructor","context","viewController","viewHelper","_context","_mouseDownOperation","_register","MouseDownOperation","e","testEventTarget","_createMouseTarget","_getMouseColumn","lastMouseLeaveTime","_height","configuration","options","get","height","mouseEvents","viewDomNode","onContextMenu","_onContextMenu","onMouseMoveThrottled","_onMouseMove","MOUSE_MOVE_MINIMUM_TIME","onMouseUp","_onMouseUp","onMouseLeave","_onMouseLeave","onMouseDown","_onMouseDown","onMouseWheel","browserEvent","emitMouseWheel","doMouseWheelZoom","isMacintosh","metaKey","ctrlKey","shiftKey","altKey","zoomLevel","getZoomLevel","delta","deltaY","setZoomLevel","stopPropagation","addDisposableListener","EventType","MOUSE_WHEEL","capture","passive","addEventHandler","dispose","removeEventHandler","onConfigurationChanged","hasChanged","onHeightChanged","onCursorStateChanged","onFocusChanged","onScrollChanged","getTargetAtClientPoint","clientX","clientY","clientPos","pos","toPageCoordinates","editorPos","y","x","width","createMouseTarget","getLastRenderData","target","contains","shadowRoot","getShadowRoot","elementsFromPoint","posx","posy","find","el","getMouseColumn","emitContextMenu","event","isActive","actualMouseMoveTime","timestamp","emitMouseMove","Date","getTime","emitMouseLeave","emitMouseUp","t","targetIsContent","type","targetIsGutter","targetIsLineNumbers","selectOnLineNumbers","targetIsViewZone","shouldHandle","leftButton","middleButton","focus","focusTextArea","start","viewZoneData","detail","shouldSuppressMouseDownOnViewZone","viewZoneId","shouldSuppressMouseDownOnWidget","emitMouseDown","_viewController","_viewHelper","_mouseMoveMonitor","_onScrollTimeout","_mouseState","MouseDownState","_currentSelection","_isActive","_lastMouseEvent","_onMouseDownThenMove","setModifiers","position","_findMousePosition","isDragAndDrop","emitMouseDrag","_dispatchMouse","targetType","setStartedOnLineNumbers","setStartButtons","trySetCount","count","isEmpty","containsPosition","startMonitoring","buttons","KeyboardEvent","emitMouseDropCanceled","emitMouseDrop","_stop","cancel","stopMonitoring","setIfNotSet","selections","_getPositionOutsideEditor","editorContent","model","viewLayout","mouseColumn","verticalOffset","Math","max","getCurrentScrollTop","getZoneAtCoord","newPosition","_helpPositionJumpOverViewZone","aboveLineNumber","getLineNumberAtVerticalOffset","belowLineNumber","getLineMaxColumn","possibleLineNumber","positionOutsideEditor","hintedPosition","element","selectionStart","selectionStartLineNumber","selectionStartColumn","positionBefore","positionAfter","isBefore","inSelectionMode","dispatchMouse","startedOnLineNumbers","mouseDownCount","_altKey","_ctrlKey","_metaKey","_shiftKey","_leftButton","_middleButton","_startedOnLineNumbers","_lastMouseDownPosition","_lastMouseDownPositionEqualCount","_lastMouseDownCount","_lastSetMouseDownCountTime","source","setMouseDownCount","newMouseDownPosition","currentTime","CLEAR_MOUSE_DOWN_COUNT_TIME","equals","min"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../base/browser/dom.js';\nimport { StandardWheelEvent } from '../../../base/browser/mouseEvent.js';\nimport { TimeoutTimer } from '../../../base/common/async.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport * as platform from '../../../base/common/platform.js';\nimport { HitTestContext, MouseTarget, MouseTargetFactory } from './mouseTarget.js';\nimport { ClientCoordinates, EditorMouseEventFactory, GlobalEditorMouseMoveMonitor, createEditorPagePosition } from '../editorDom.js';\nimport { EditorZoom } from '../../common/config/editorZoom.js';\nimport { Position } from '../../common/core/position.js';\nimport { Selection } from '../../common/core/selection.js';\nimport { ViewEventHandler } from '../../common/viewModel/viewEventHandler.js';\n/**\n * Merges mouse events when mouse move events are throttled\n */\nexport function createMouseMoveEventMerger(mouseTargetFactory) {\n    return function (lastEvent, currentEvent) {\n        let targetIsWidget = false;\n        if (mouseTargetFactory) {\n            targetIsWidget = mouseTargetFactory.mouseTargetIsWidget(currentEvent);\n        }\n        if (!targetIsWidget) {\n            currentEvent.preventDefault();\n        }\n        return currentEvent;\n    };\n}\nexport class MouseHandler extends ViewEventHandler {\n    constructor(context, viewController, viewHelper) {\n        super();\n        this._context = context;\n        this.viewController = viewController;\n        this.viewHelper = viewHelper;\n        this.mouseTargetFactory = new MouseTargetFactory(this._context, viewHelper);\n        this._mouseDownOperation = this._register(new MouseDownOperation(this._context, this.viewController, this.viewHelper, (e, testEventTarget) => this._createMouseTarget(e, testEventTarget), (e) => this._getMouseColumn(e)));\n        this.lastMouseLeaveTime = -1;\n        this._height = this._context.configuration.options.get(129 /* layoutInfo */).height;\n        const mouseEvents = new EditorMouseEventFactory(this.viewHelper.viewDomNode);\n        this._register(mouseEvents.onContextMenu(this.viewHelper.viewDomNode, (e) => this._onContextMenu(e, true)));\n        this._register(mouseEvents.onMouseMoveThrottled(this.viewHelper.viewDomNode, (e) => this._onMouseMove(e), createMouseMoveEventMerger(this.mouseTargetFactory), MouseHandler.MOUSE_MOVE_MINIMUM_TIME));\n        this._register(mouseEvents.onMouseUp(this.viewHelper.viewDomNode, (e) => this._onMouseUp(e)));\n        this._register(mouseEvents.onMouseLeave(this.viewHelper.viewDomNode, (e) => this._onMouseLeave(e)));\n        this._register(mouseEvents.onMouseDown(this.viewHelper.viewDomNode, (e) => this._onMouseDown(e)));\n        const onMouseWheel = (browserEvent) => {\n            this.viewController.emitMouseWheel(browserEvent);\n            if (!this._context.configuration.options.get(67 /* mouseWheelZoom */)) {\n                return;\n            }\n            const e = new StandardWheelEvent(browserEvent);\n            const doMouseWheelZoom = (platform.isMacintosh\n                // on macOS we support cmd + two fingers scroll (`metaKey` set)\n                // and also the two fingers pinch gesture (`ctrKey` set)\n                ? ((browserEvent.metaKey || browserEvent.ctrlKey) && !browserEvent.shiftKey && !browserEvent.altKey)\n                : (browserEvent.ctrlKey && !browserEvent.metaKey && !browserEvent.shiftKey && !browserEvent.altKey));\n            if (doMouseWheelZoom) {\n                const zoomLevel = EditorZoom.getZoomLevel();\n                const delta = e.deltaY > 0 ? 1 : -1;\n                EditorZoom.setZoomLevel(zoomLevel + delta);\n                e.preventDefault();\n                e.stopPropagation();\n            }\n        };\n        this._register(dom.addDisposableListener(this.viewHelper.viewDomNode, dom.EventType.MOUSE_WHEEL, onMouseWheel, { capture: true, passive: false }));\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        if (e.hasChanged(129 /* layoutInfo */)) {\n            // layout change\n            const height = this._context.configuration.options.get(129 /* layoutInfo */).height;\n            if (this._height !== height) {\n                this._height = height;\n                this._mouseDownOperation.onHeightChanged();\n            }\n        }\n        return false;\n    }\n    onCursorStateChanged(e) {\n        this._mouseDownOperation.onCursorStateChanged(e);\n        return false;\n    }\n    onFocusChanged(e) {\n        return false;\n    }\n    onScrollChanged(e) {\n        this._mouseDownOperation.onScrollChanged();\n        return false;\n    }\n    // --- end event handlers\n    getTargetAtClientPoint(clientX, clientY) {\n        const clientPos = new ClientCoordinates(clientX, clientY);\n        const pos = clientPos.toPageCoordinates();\n        const editorPos = createEditorPagePosition(this.viewHelper.viewDomNode);\n        if (pos.y < editorPos.y || pos.y > editorPos.y + editorPos.height || pos.x < editorPos.x || pos.x > editorPos.x + editorPos.width) {\n            return null;\n        }\n        return this.mouseTargetFactory.createMouseTarget(this.viewHelper.getLastRenderData(), editorPos, pos, null);\n    }\n    _createMouseTarget(e, testEventTarget) {\n        let target = e.target;\n        if (!this.viewHelper.viewDomNode.contains(target)) {\n            const shadowRoot = dom.getShadowRoot(this.viewHelper.viewDomNode);\n            if (shadowRoot) {\n                target = shadowRoot.elementsFromPoint(e.posx, e.posy).find((el) => this.viewHelper.viewDomNode.contains(el));\n            }\n        }\n        return this.mouseTargetFactory.createMouseTarget(this.viewHelper.getLastRenderData(), e.editorPos, e.pos, testEventTarget ? target : null);\n    }\n    _getMouseColumn(e) {\n        return this.mouseTargetFactory.getMouseColumn(e.editorPos, e.pos);\n    }\n    _onContextMenu(e, testEventTarget) {\n        this.viewController.emitContextMenu({\n            event: e,\n            target: this._createMouseTarget(e, testEventTarget)\n        });\n    }\n    _onMouseMove(e) {\n        if (this._mouseDownOperation.isActive()) {\n            // In selection/drag operation\n            return;\n        }\n        const actualMouseMoveTime = e.timestamp;\n        if (actualMouseMoveTime < this.lastMouseLeaveTime) {\n            // Due to throttling, this event occurred before the mouse left the editor, therefore ignore it.\n            return;\n        }\n        this.viewController.emitMouseMove({\n            event: e,\n            target: this._createMouseTarget(e, true)\n        });\n    }\n    _onMouseLeave(e) {\n        this.lastMouseLeaveTime = (new Date()).getTime();\n        this.viewController.emitMouseLeave({\n            event: e,\n            target: null\n        });\n    }\n    _onMouseUp(e) {\n        this.viewController.emitMouseUp({\n            event: e,\n            target: this._createMouseTarget(e, true)\n        });\n    }\n    _onMouseDown(e) {\n        const t = this._createMouseTarget(e, true);\n        const targetIsContent = (t.type === 6 /* CONTENT_TEXT */ || t.type === 7 /* CONTENT_EMPTY */);\n        const targetIsGutter = (t.type === 2 /* GUTTER_GLYPH_MARGIN */ || t.type === 3 /* GUTTER_LINE_NUMBERS */ || t.type === 4 /* GUTTER_LINE_DECORATIONS */);\n        const targetIsLineNumbers = (t.type === 3 /* GUTTER_LINE_NUMBERS */);\n        const selectOnLineNumbers = this._context.configuration.options.get(97 /* selectOnLineNumbers */);\n        const targetIsViewZone = (t.type === 8 /* CONTENT_VIEW_ZONE */ || t.type === 5 /* GUTTER_VIEW_ZONE */);\n        const targetIsWidget = (t.type === 9 /* CONTENT_WIDGET */);\n        let shouldHandle = e.leftButton || e.middleButton;\n        if (platform.isMacintosh && e.leftButton && e.ctrlKey) {\n            shouldHandle = false;\n        }\n        const focus = () => {\n            e.preventDefault();\n            this.viewHelper.focusTextArea();\n        };\n        if (shouldHandle && (targetIsContent || (targetIsLineNumbers && selectOnLineNumbers))) {\n            focus();\n            this._mouseDownOperation.start(t.type, e);\n        }\n        else if (targetIsGutter) {\n            // Do not steal focus\n            e.preventDefault();\n        }\n        else if (targetIsViewZone) {\n            const viewZoneData = t.detail;\n            if (this.viewHelper.shouldSuppressMouseDownOnViewZone(viewZoneData.viewZoneId)) {\n                focus();\n                this._mouseDownOperation.start(t.type, e);\n                e.preventDefault();\n            }\n        }\n        else if (targetIsWidget && this.viewHelper.shouldSuppressMouseDownOnWidget(t.detail)) {\n            focus();\n            e.preventDefault();\n        }\n        this.viewController.emitMouseDown({\n            event: e,\n            target: t\n        });\n    }\n}\nMouseHandler.MOUSE_MOVE_MINIMUM_TIME = 100; // ms\nclass MouseDownOperation extends Disposable {\n    constructor(context, viewController, viewHelper, createMouseTarget, getMouseColumn) {\n        super();\n        this._context = context;\n        this._viewController = viewController;\n        this._viewHelper = viewHelper;\n        this._createMouseTarget = createMouseTarget;\n        this._getMouseColumn = getMouseColumn;\n        this._mouseMoveMonitor = this._register(new GlobalEditorMouseMoveMonitor(this._viewHelper.viewDomNode));\n        this._onScrollTimeout = this._register(new TimeoutTimer());\n        this._mouseState = new MouseDownState();\n        this._currentSelection = new Selection(1, 1, 1, 1);\n        this._isActive = false;\n        this._lastMouseEvent = null;\n    }\n    dispose() {\n        super.dispose();\n    }\n    isActive() {\n        return this._isActive;\n    }\n    _onMouseDownThenMove(e) {\n        this._lastMouseEvent = e;\n        this._mouseState.setModifiers(e);\n        const position = this._findMousePosition(e, true);\n        if (!position) {\n            // Ignoring because position is unknown\n            return;\n        }\n        if (this._mouseState.isDragAndDrop) {\n            this._viewController.emitMouseDrag({\n                event: e,\n                target: position\n            });\n        }\n        else {\n            this._dispatchMouse(position, true);\n        }\n    }\n    start(targetType, e) {\n        this._lastMouseEvent = e;\n        this._mouseState.setStartedOnLineNumbers(targetType === 3 /* GUTTER_LINE_NUMBERS */);\n        this._mouseState.setStartButtons(e);\n        this._mouseState.setModifiers(e);\n        const position = this._findMousePosition(e, true);\n        if (!position || !position.position) {\n            // Ignoring because position is unknown\n            return;\n        }\n        this._mouseState.trySetCount(e.detail, position.position);\n        // Overwrite the detail of the MouseEvent, as it will be sent out in an event and contributions might rely on it.\n        e.detail = this._mouseState.count;\n        const options = this._context.configuration.options;\n        if (!options.get(80 /* readOnly */)\n            && options.get(31 /* dragAndDrop */)\n            && !options.get(18 /* columnSelection */)\n            && !this._mouseState.altKey // we don't support multiple mouse\n            && e.detail < 2 // only single click on a selection can work\n            && !this._isActive // the mouse is not down yet\n            && !this._currentSelection.isEmpty() // we don't drag single cursor\n            && (position.type === 6 /* CONTENT_TEXT */) // single click on text\n            && position.position && this._currentSelection.containsPosition(position.position) // single click on a selection\n        ) {\n            this._mouseState.isDragAndDrop = true;\n            this._isActive = true;\n            this._mouseMoveMonitor.startMonitoring(e.target, e.buttons, createMouseMoveEventMerger(null), (e) => this._onMouseDownThenMove(e), (browserEvent) => {\n                const position = this._findMousePosition(this._lastMouseEvent, true);\n                if (browserEvent && browserEvent instanceof KeyboardEvent) {\n                    // cancel\n                    this._viewController.emitMouseDropCanceled();\n                }\n                else {\n                    this._viewController.emitMouseDrop({\n                        event: this._lastMouseEvent,\n                        target: (position ? this._createMouseTarget(this._lastMouseEvent, true) : null) // Ignoring because position is unknown, e.g., Content View Zone\n                    });\n                }\n                this._stop();\n            });\n            return;\n        }\n        this._mouseState.isDragAndDrop = false;\n        this._dispatchMouse(position, e.shiftKey);\n        if (!this._isActive) {\n            this._isActive = true;\n            this._mouseMoveMonitor.startMonitoring(e.target, e.buttons, createMouseMoveEventMerger(null), (e) => this._onMouseDownThenMove(e), () => this._stop());\n        }\n    }\n    _stop() {\n        this._isActive = false;\n        this._onScrollTimeout.cancel();\n    }\n    onHeightChanged() {\n        this._mouseMoveMonitor.stopMonitoring();\n    }\n    onScrollChanged() {\n        if (!this._isActive) {\n            return;\n        }\n        this._onScrollTimeout.setIfNotSet(() => {\n            if (!this._lastMouseEvent) {\n                return;\n            }\n            const position = this._findMousePosition(this._lastMouseEvent, false);\n            if (!position) {\n                // Ignoring because position is unknown\n                return;\n            }\n            if (this._mouseState.isDragAndDrop) {\n                // Ignoring because users are dragging the text\n                return;\n            }\n            this._dispatchMouse(position, true);\n        }, 10);\n    }\n    onCursorStateChanged(e) {\n        this._currentSelection = e.selections[0];\n    }\n    _getPositionOutsideEditor(e) {\n        const editorContent = e.editorPos;\n        const model = this._context.model;\n        const viewLayout = this._context.viewLayout;\n        const mouseColumn = this._getMouseColumn(e);\n        if (e.posy < editorContent.y) {\n            const verticalOffset = Math.max(viewLayout.getCurrentScrollTop() - (editorContent.y - e.posy), 0);\n            const viewZoneData = HitTestContext.getZoneAtCoord(this._context, verticalOffset);\n            if (viewZoneData) {\n                const newPosition = this._helpPositionJumpOverViewZone(viewZoneData);\n                if (newPosition) {\n                    return new MouseTarget(null, 13 /* OUTSIDE_EDITOR */, mouseColumn, newPosition);\n                }\n            }\n            const aboveLineNumber = viewLayout.getLineNumberAtVerticalOffset(verticalOffset);\n            return new MouseTarget(null, 13 /* OUTSIDE_EDITOR */, mouseColumn, new Position(aboveLineNumber, 1));\n        }\n        if (e.posy > editorContent.y + editorContent.height) {\n            const verticalOffset = viewLayout.getCurrentScrollTop() + (e.posy - editorContent.y);\n            const viewZoneData = HitTestContext.getZoneAtCoord(this._context, verticalOffset);\n            if (viewZoneData) {\n                const newPosition = this._helpPositionJumpOverViewZone(viewZoneData);\n                if (newPosition) {\n                    return new MouseTarget(null, 13 /* OUTSIDE_EDITOR */, mouseColumn, newPosition);\n                }\n            }\n            const belowLineNumber = viewLayout.getLineNumberAtVerticalOffset(verticalOffset);\n            return new MouseTarget(null, 13 /* OUTSIDE_EDITOR */, mouseColumn, new Position(belowLineNumber, model.getLineMaxColumn(belowLineNumber)));\n        }\n        const possibleLineNumber = viewLayout.getLineNumberAtVerticalOffset(viewLayout.getCurrentScrollTop() + (e.posy - editorContent.y));\n        if (e.posx < editorContent.x) {\n            return new MouseTarget(null, 13 /* OUTSIDE_EDITOR */, mouseColumn, new Position(possibleLineNumber, 1));\n        }\n        if (e.posx > editorContent.x + editorContent.width) {\n            return new MouseTarget(null, 13 /* OUTSIDE_EDITOR */, mouseColumn, new Position(possibleLineNumber, model.getLineMaxColumn(possibleLineNumber)));\n        }\n        return null;\n    }\n    _findMousePosition(e, testEventTarget) {\n        const positionOutsideEditor = this._getPositionOutsideEditor(e);\n        if (positionOutsideEditor) {\n            return positionOutsideEditor;\n        }\n        const t = this._createMouseTarget(e, testEventTarget);\n        const hintedPosition = t.position;\n        if (!hintedPosition) {\n            return null;\n        }\n        if (t.type === 8 /* CONTENT_VIEW_ZONE */ || t.type === 5 /* GUTTER_VIEW_ZONE */) {\n            const newPosition = this._helpPositionJumpOverViewZone(t.detail);\n            if (newPosition) {\n                return new MouseTarget(t.element, t.type, t.mouseColumn, newPosition, null, t.detail);\n            }\n        }\n        return t;\n    }\n    _helpPositionJumpOverViewZone(viewZoneData) {\n        // Force position on view zones to go above or below depending on where selection started from\n        const selectionStart = new Position(this._currentSelection.selectionStartLineNumber, this._currentSelection.selectionStartColumn);\n        const positionBefore = viewZoneData.positionBefore;\n        const positionAfter = viewZoneData.positionAfter;\n        if (positionBefore && positionAfter) {\n            if (positionBefore.isBefore(selectionStart)) {\n                return positionBefore;\n            }\n            else {\n                return positionAfter;\n            }\n        }\n        return null;\n    }\n    _dispatchMouse(position, inSelectionMode) {\n        if (!position.position) {\n            return;\n        }\n        this._viewController.dispatchMouse({\n            position: position.position,\n            mouseColumn: position.mouseColumn,\n            startedOnLineNumbers: this._mouseState.startedOnLineNumbers,\n            inSelectionMode: inSelectionMode,\n            mouseDownCount: this._mouseState.count,\n            altKey: this._mouseState.altKey,\n            ctrlKey: this._mouseState.ctrlKey,\n            metaKey: this._mouseState.metaKey,\n            shiftKey: this._mouseState.shiftKey,\n            leftButton: this._mouseState.leftButton,\n            middleButton: this._mouseState.middleButton,\n        });\n    }\n}\nclass MouseDownState {\n    constructor() {\n        this._altKey = false;\n        this._ctrlKey = false;\n        this._metaKey = false;\n        this._shiftKey = false;\n        this._leftButton = false;\n        this._middleButton = false;\n        this._startedOnLineNumbers = false;\n        this._lastMouseDownPosition = null;\n        this._lastMouseDownPositionEqualCount = 0;\n        this._lastMouseDownCount = 0;\n        this._lastSetMouseDownCountTime = 0;\n        this.isDragAndDrop = false;\n    }\n    get altKey() { return this._altKey; }\n    get ctrlKey() { return this._ctrlKey; }\n    get metaKey() { return this._metaKey; }\n    get shiftKey() { return this._shiftKey; }\n    get leftButton() { return this._leftButton; }\n    get middleButton() { return this._middleButton; }\n    get startedOnLineNumbers() { return this._startedOnLineNumbers; }\n    get count() {\n        return this._lastMouseDownCount;\n    }\n    setModifiers(source) {\n        this._altKey = source.altKey;\n        this._ctrlKey = source.ctrlKey;\n        this._metaKey = source.metaKey;\n        this._shiftKey = source.shiftKey;\n    }\n    setStartButtons(source) {\n        this._leftButton = source.leftButton;\n        this._middleButton = source.middleButton;\n    }\n    setStartedOnLineNumbers(startedOnLineNumbers) {\n        this._startedOnLineNumbers = startedOnLineNumbers;\n    }\n    trySetCount(setMouseDownCount, newMouseDownPosition) {\n        // a. Invalidate multiple clicking if too much time has passed (will be hit by IE because the detail field of mouse events contains garbage in IE10)\n        const currentTime = (new Date()).getTime();\n        if (currentTime - this._lastSetMouseDownCountTime > MouseDownState.CLEAR_MOUSE_DOWN_COUNT_TIME) {\n            setMouseDownCount = 1;\n        }\n        this._lastSetMouseDownCountTime = currentTime;\n        // b. Ensure that we don't jump from single click to triple click in one go (will be hit by IE because the detail field of mouse events contains garbage in IE10)\n        if (setMouseDownCount > this._lastMouseDownCount + 1) {\n            setMouseDownCount = this._lastMouseDownCount + 1;\n        }\n        // c. Invalidate multiple clicking if the logical position is different\n        if (this._lastMouseDownPosition && this._lastMouseDownPosition.equals(newMouseDownPosition)) {\n            this._lastMouseDownPositionEqualCount++;\n        }\n        else {\n            this._lastMouseDownPositionEqualCount = 1;\n        }\n        this._lastMouseDownPosition = newMouseDownPosition;\n        // Finally set the lastMouseDownCount\n        this._lastMouseDownCount = Math.min(setMouseDownCount, this._lastMouseDownPositionEqualCount);\n    }\n}\nMouseDownState.CLEAR_MOUSE_DOWN_COUNT_TIME = 400; // ms\n"]},"metadata":{},"sourceType":"module"}