{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport * as Codicons from '../../../base/common/codicons.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { localize } from '../../../nls.js';\nimport { Extensions as JSONExtensions } from '../../jsonschemas/common/jsonContributionRegistry.js';\nimport * as platform from '../../registry/common/platform.js';\nimport { ThemeIcon } from './themeService.js'; //  ------ API types\n// icon registry\n\nexport const Extensions = {\n  IconContribution: 'base.contributions.icons'\n};\n\nclass IconRegistry {\n  constructor() {\n    this._onDidChange = new Emitter();\n    this.onDidChange = this._onDidChange.event;\n    this.iconSchema = {\n      definitions: {\n        icons: {\n          type: 'object',\n          properties: {\n            fontId: {\n              type: 'string',\n              description: localize('iconDefintion.fontId', 'The id of the font to use. If not set, the font that is defined first is used.')\n            },\n            fontCharacter: {\n              type: 'string',\n              description: localize('iconDefintion.fontCharacter', 'The font character associated with the icon definition.')\n            }\n          },\n          additionalProperties: false,\n          defaultSnippets: [{\n            body: {\n              fontCharacter: '\\\\\\\\e030'\n            }\n          }]\n        }\n      },\n      type: 'object',\n      properties: {}\n    };\n    this.iconReferenceSchema = {\n      type: 'string',\n      pattern: `^${Codicons.CSSIcon.iconNameExpression}$`,\n      enum: [],\n      enumDescriptions: []\n    };\n    this.iconsById = {};\n    this.iconFontsById = {};\n  }\n\n  registerIcon(id, defaults, description, deprecationMessage) {\n    const existing = this.iconsById[id];\n\n    if (existing) {\n      if (description && !existing.description) {\n        existing.description = description;\n        this.iconSchema.properties[id].markdownDescription = `${description} $(${id})`;\n        const enumIndex = this.iconReferenceSchema.enum.indexOf(id);\n\n        if (enumIndex !== -1) {\n          this.iconReferenceSchema.enumDescriptions[enumIndex] = description;\n        }\n\n        this._onDidChange.fire();\n      }\n\n      return existing;\n    }\n\n    let iconContribution = {\n      id,\n      description,\n      defaults,\n      deprecationMessage\n    };\n    this.iconsById[id] = iconContribution;\n    let propertySchema = {\n      $ref: '#/definitions/icons'\n    };\n\n    if (deprecationMessage) {\n      propertySchema.deprecationMessage = deprecationMessage;\n    }\n\n    if (description) {\n      propertySchema.markdownDescription = `${description}: $(${id})`;\n    }\n\n    this.iconSchema.properties[id] = propertySchema;\n    this.iconReferenceSchema.enum.push(id);\n    this.iconReferenceSchema.enumDescriptions.push(description || '');\n\n    this._onDidChange.fire();\n\n    return {\n      id\n    };\n  }\n\n  getIcons() {\n    return Object.keys(this.iconsById).map(id => this.iconsById[id]);\n  }\n\n  getIcon(id) {\n    return this.iconsById[id];\n  }\n\n  getIconSchema() {\n    return this.iconSchema;\n  }\n\n  getIconFont(id) {\n    return this.iconFontsById[id];\n  }\n\n  toString() {\n    const sorter = (i1, i2) => {\n      return i1.id.localeCompare(i2.id);\n    };\n\n    const classNames = i => {\n      while (ThemeIcon.isThemeIcon(i.defaults)) {\n        i = this.iconsById[i.defaults.id];\n      }\n\n      return `codicon codicon-${i ? i.id : ''}`;\n    };\n\n    let reference = [];\n    reference.push(`| preview     | identifier                        | default codicon ID                | description`);\n    reference.push(`| ----------- | --------------------------------- | --------------------------------- | --------------------------------- |`);\n    const contributions = Object.keys(this.iconsById).map(key => this.iconsById[key]);\n\n    for (const i of contributions.filter(i => !!i.description).sort(sorter)) {\n      reference.push(`|<i class=\"${classNames(i)}\"></i>|${i.id}|${ThemeIcon.isThemeIcon(i.defaults) ? i.defaults.id : i.id}|${i.description || ''}|`);\n    }\n\n    reference.push(`| preview     | identifier                        `);\n    reference.push(`| ----------- | --------------------------------- |`);\n\n    for (const i of contributions.filter(i => !ThemeIcon.isThemeIcon(i.defaults)).sort(sorter)) {\n      reference.push(`|<i class=\"${classNames(i)}\"></i>|${i.id}|`);\n    }\n\n    return reference.join('\\n');\n  }\n\n}\n\nconst iconRegistry = new IconRegistry();\nplatform.Registry.add(Extensions.IconContribution, iconRegistry);\nexport function registerIcon(id, defaults, description, deprecationMessage) {\n  return iconRegistry.registerIcon(id, defaults, description, deprecationMessage);\n}\nexport function getIconRegistry() {\n  return iconRegistry;\n}\n\nfunction initialize() {\n  for (const icon of Codicons.iconRegistry.all) {\n    iconRegistry.registerIcon(icon.id, icon.definition, icon.description);\n  }\n\n  Codicons.iconRegistry.onDidRegister(icon => iconRegistry.registerIcon(icon.id, icon.definition, icon.description));\n}\n\ninitialize();\nexport const iconsSchemaId = 'vscode://schemas/icons';\nlet schemaRegistry = platform.Registry.as(JSONExtensions.JSONContribution);\nschemaRegistry.registerSchema(iconsSchemaId, iconRegistry.getIconSchema());\nconst delayer = new RunOnceScheduler(() => schemaRegistry.notifySchemaChanged(iconsSchemaId), 200);\niconRegistry.onDidChange(() => {\n  if (!delayer.isScheduled()) {\n    delayer.schedule();\n  }\n}); //setTimeout(_ => console.log(iconRegistry.toString()), 5000);\n// common icons\n\nexport const widgetClose = registerIcon('widget-close', Codicons.Codicon.close, localize('widgetClose', 'Icon for the close action in widgets.'));","map":{"version":3,"sources":["/home/umut/Documents/cs/cs410/Project2Group14/node_modules/monaco-editor/esm/vs/platform/theme/common/iconRegistry.js"],"names":["RunOnceScheduler","Codicons","Emitter","localize","Extensions","JSONExtensions","platform","ThemeIcon","IconContribution","IconRegistry","constructor","_onDidChange","onDidChange","event","iconSchema","definitions","icons","type","properties","fontId","description","fontCharacter","additionalProperties","defaultSnippets","body","iconReferenceSchema","pattern","CSSIcon","iconNameExpression","enum","enumDescriptions","iconsById","iconFontsById","registerIcon","id","defaults","deprecationMessage","existing","markdownDescription","enumIndex","indexOf","fire","iconContribution","propertySchema","$ref","push","getIcons","Object","keys","map","getIcon","getIconSchema","getIconFont","toString","sorter","i1","i2","localeCompare","classNames","i","isThemeIcon","reference","contributions","key","filter","sort","join","iconRegistry","Registry","add","getIconRegistry","initialize","icon","all","definition","onDidRegister","iconsSchemaId","schemaRegistry","as","JSONContribution","registerSchema","delayer","notifySchemaChanged","isScheduled","schedule","widgetClose","Codicon","close"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport * as Codicons from '../../../base/common/codicons.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { localize } from '../../../nls.js';\nimport { Extensions as JSONExtensions } from '../../jsonschemas/common/jsonContributionRegistry.js';\nimport * as platform from '../../registry/common/platform.js';\nimport { ThemeIcon } from './themeService.js';\n//  ------ API types\n// icon registry\nexport const Extensions = {\n    IconContribution: 'base.contributions.icons'\n};\nclass IconRegistry {\n    constructor() {\n        this._onDidChange = new Emitter();\n        this.onDidChange = this._onDidChange.event;\n        this.iconSchema = {\n            definitions: {\n                icons: {\n                    type: 'object',\n                    properties: {\n                        fontId: { type: 'string', description: localize('iconDefintion.fontId', 'The id of the font to use. If not set, the font that is defined first is used.') },\n                        fontCharacter: { type: 'string', description: localize('iconDefintion.fontCharacter', 'The font character associated with the icon definition.') }\n                    },\n                    additionalProperties: false,\n                    defaultSnippets: [{ body: { fontCharacter: '\\\\\\\\e030' } }]\n                }\n            },\n            type: 'object',\n            properties: {}\n        };\n        this.iconReferenceSchema = { type: 'string', pattern: `^${Codicons.CSSIcon.iconNameExpression}$`, enum: [], enumDescriptions: [] };\n        this.iconsById = {};\n        this.iconFontsById = {};\n    }\n    registerIcon(id, defaults, description, deprecationMessage) {\n        const existing = this.iconsById[id];\n        if (existing) {\n            if (description && !existing.description) {\n                existing.description = description;\n                this.iconSchema.properties[id].markdownDescription = `${description} $(${id})`;\n                const enumIndex = this.iconReferenceSchema.enum.indexOf(id);\n                if (enumIndex !== -1) {\n                    this.iconReferenceSchema.enumDescriptions[enumIndex] = description;\n                }\n                this._onDidChange.fire();\n            }\n            return existing;\n        }\n        let iconContribution = { id, description, defaults, deprecationMessage };\n        this.iconsById[id] = iconContribution;\n        let propertySchema = { $ref: '#/definitions/icons' };\n        if (deprecationMessage) {\n            propertySchema.deprecationMessage = deprecationMessage;\n        }\n        if (description) {\n            propertySchema.markdownDescription = `${description}: $(${id})`;\n        }\n        this.iconSchema.properties[id] = propertySchema;\n        this.iconReferenceSchema.enum.push(id);\n        this.iconReferenceSchema.enumDescriptions.push(description || '');\n        this._onDidChange.fire();\n        return { id };\n    }\n    getIcons() {\n        return Object.keys(this.iconsById).map(id => this.iconsById[id]);\n    }\n    getIcon(id) {\n        return this.iconsById[id];\n    }\n    getIconSchema() {\n        return this.iconSchema;\n    }\n    getIconFont(id) {\n        return this.iconFontsById[id];\n    }\n    toString() {\n        const sorter = (i1, i2) => {\n            return i1.id.localeCompare(i2.id);\n        };\n        const classNames = (i) => {\n            while (ThemeIcon.isThemeIcon(i.defaults)) {\n                i = this.iconsById[i.defaults.id];\n            }\n            return `codicon codicon-${i ? i.id : ''}`;\n        };\n        let reference = [];\n        reference.push(`| preview     | identifier                        | default codicon ID                | description`);\n        reference.push(`| ----------- | --------------------------------- | --------------------------------- | --------------------------------- |`);\n        const contributions = Object.keys(this.iconsById).map(key => this.iconsById[key]);\n        for (const i of contributions.filter(i => !!i.description).sort(sorter)) {\n            reference.push(`|<i class=\"${classNames(i)}\"></i>|${i.id}|${ThemeIcon.isThemeIcon(i.defaults) ? i.defaults.id : i.id}|${i.description || ''}|`);\n        }\n        reference.push(`| preview     | identifier                        `);\n        reference.push(`| ----------- | --------------------------------- |`);\n        for (const i of contributions.filter(i => !ThemeIcon.isThemeIcon(i.defaults)).sort(sorter)) {\n            reference.push(`|<i class=\"${classNames(i)}\"></i>|${i.id}|`);\n        }\n        return reference.join('\\n');\n    }\n}\nconst iconRegistry = new IconRegistry();\nplatform.Registry.add(Extensions.IconContribution, iconRegistry);\nexport function registerIcon(id, defaults, description, deprecationMessage) {\n    return iconRegistry.registerIcon(id, defaults, description, deprecationMessage);\n}\nexport function getIconRegistry() {\n    return iconRegistry;\n}\nfunction initialize() {\n    for (const icon of Codicons.iconRegistry.all) {\n        iconRegistry.registerIcon(icon.id, icon.definition, icon.description);\n    }\n    Codicons.iconRegistry.onDidRegister(icon => iconRegistry.registerIcon(icon.id, icon.definition, icon.description));\n}\ninitialize();\nexport const iconsSchemaId = 'vscode://schemas/icons';\nlet schemaRegistry = platform.Registry.as(JSONExtensions.JSONContribution);\nschemaRegistry.registerSchema(iconsSchemaId, iconRegistry.getIconSchema());\nconst delayer = new RunOnceScheduler(() => schemaRegistry.notifySchemaChanged(iconsSchemaId), 200);\niconRegistry.onDidChange(() => {\n    if (!delayer.isScheduled()) {\n        delayer.schedule();\n    }\n});\n//setTimeout(_ => console.log(iconRegistry.toString()), 5000);\n// common icons\nexport const widgetClose = registerIcon('widget-close', Codicons.Codicon.close, localize('widgetClose', 'Icon for the close action in widgets.'));\n"]},"metadata":{},"sourceType":"module"}