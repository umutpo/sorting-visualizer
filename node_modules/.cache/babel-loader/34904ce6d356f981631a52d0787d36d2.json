{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './textAreaHandler.css';\nimport * as nls from '../../../nls.js';\nimport * as browser from '../../../base/browser/browser.js';\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\nimport * as platform from '../../../base/common/platform.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { Configuration } from '../config/configuration.js';\nimport { CopyOptions, TextAreaInput } from './textAreaInput.js';\nimport { PagedScreenReaderStrategy, TextAreaState, _debugComposition } from './textAreaState.js';\nimport { PartFingerprints, ViewPart } from '../view/viewPart.js';\nimport { LineNumbersOverlay } from '../viewParts/lineNumbers/lineNumbers.js';\nimport { Margin } from '../viewParts/margin/margin.js';\nimport { EditorOptions } from '../../common/config/editorOptions.js';\nimport { getMapForWordSeparators } from '../../common/controller/wordCharacterClassifier.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range } from '../../common/core/range.js';\nimport { Selection } from '../../common/core/selection.js';\nimport { MOUSE_CURSOR_TEXT_CSS_CLASS_NAME } from '../../../base/browser/ui/mouseCursor/mouseCursor.js';\n\nclass VisibleTextAreaData {\n  constructor(top, left, width) {\n    this._visibleTextAreaBrand = undefined;\n    this.top = top;\n    this.left = left;\n    this.width = width;\n  }\n\n  setWidth(width) {\n    return new VisibleTextAreaData(this.top, this.left, width);\n  }\n\n}\n\nconst canUseZeroSizeTextarea = browser.isFirefox;\nexport class TextAreaHandler extends ViewPart {\n  constructor(context, viewController, viewHelper) {\n    super(context); // --- end view API\n\n    this._primaryCursorPosition = new Position(1, 1);\n    this._primaryCursorVisibleRange = null;\n    this._viewController = viewController;\n    this._viewHelper = viewHelper;\n    this._scrollLeft = 0;\n    this._scrollTop = 0;\n    const options = this._context.configuration.options;\n    const layoutInfo = options.get(129\n    /* layoutInfo */\n    );\n\n    this._setAccessibilityOptions(options);\n\n    this._contentLeft = layoutInfo.contentLeft;\n    this._contentWidth = layoutInfo.contentWidth;\n    this._contentHeight = layoutInfo.height;\n    this._fontInfo = options.get(43\n    /* fontInfo */\n    );\n    this._lineHeight = options.get(58\n    /* lineHeight */\n    );\n    this._emptySelectionClipboard = options.get(32\n    /* emptySelectionClipboard */\n    );\n    this._copyWithSyntaxHighlighting = options.get(21\n    /* copyWithSyntaxHighlighting */\n    );\n    this._visibleTextArea = null;\n    this._selections = [new Selection(1, 1, 1, 1)];\n    this._modelSelections = [new Selection(1, 1, 1, 1)];\n    this._lastRenderPosition = null; // Text Area (The focus will always be in the textarea when the cursor is blinking)\n\n    this.textArea = createFastDomNode(document.createElement('textarea'));\n    PartFingerprints.write(this.textArea, 6\n    /* TextArea */\n    );\n    this.textArea.setClassName(`inputarea ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`);\n    this.textArea.setAttribute('wrap', 'off');\n    this.textArea.setAttribute('autocorrect', 'off');\n    this.textArea.setAttribute('autocapitalize', 'off');\n    this.textArea.setAttribute('autocomplete', 'off');\n    this.textArea.setAttribute('spellcheck', 'false');\n    this.textArea.setAttribute('aria-label', this._getAriaLabel(options));\n    this.textArea.setAttribute('tabindex', String(options.get(111\n    /* tabIndex */\n    )));\n    this.textArea.setAttribute('role', 'textbox');\n    this.textArea.setAttribute('aria-roledescription', nls.localize('editor', \"editor\"));\n    this.textArea.setAttribute('aria-multiline', 'true');\n    this.textArea.setAttribute('aria-haspopup', 'false');\n    this.textArea.setAttribute('aria-autocomplete', 'both');\n\n    if (options.get(30\n    /* domReadOnly */\n    ) && options.get(80\n    /* readOnly */\n    )) {\n      this.textArea.setAttribute('readonly', 'true');\n    }\n\n    this.textAreaCover = createFastDomNode(document.createElement('div'));\n    this.textAreaCover.setPosition('absolute');\n    const simpleModel = {\n      getLineCount: () => {\n        return this._context.model.getLineCount();\n      },\n      getLineMaxColumn: lineNumber => {\n        return this._context.model.getLineMaxColumn(lineNumber);\n      },\n      getValueInRange: (range, eol) => {\n        return this._context.model.getValueInRange(range, eol);\n      }\n    };\n    const textAreaInputHost = {\n      getDataToCopy: generateHTML => {\n        const rawTextToCopy = this._context.model.getPlainTextToCopy(this._modelSelections, this._emptySelectionClipboard, platform.isWindows);\n\n        const newLineCharacter = this._context.model.getEOL();\n\n        const isFromEmptySelection = this._emptySelectionClipboard && this._modelSelections.length === 1 && this._modelSelections[0].isEmpty();\n\n        const multicursorText = Array.isArray(rawTextToCopy) ? rawTextToCopy : null;\n        const text = Array.isArray(rawTextToCopy) ? rawTextToCopy.join(newLineCharacter) : rawTextToCopy;\n        let html = undefined;\n        let mode = null;\n\n        if (generateHTML) {\n          if (CopyOptions.forceCopyWithSyntaxHighlighting || this._copyWithSyntaxHighlighting && text.length < 65536) {\n            const richText = this._context.model.getRichTextToCopy(this._modelSelections, this._emptySelectionClipboard);\n\n            if (richText) {\n              html = richText.html;\n              mode = richText.mode;\n            }\n          }\n        }\n\n        return {\n          isFromEmptySelection,\n          multicursorText,\n          text,\n          html,\n          mode\n        };\n      },\n      getScreenReaderContent: currentState => {\n        if (this._accessibilitySupport === 1\n        /* Disabled */\n        ) {\n          // We know for a fact that a screen reader is not attached\n          // On OSX, we write the character before the cursor to allow for \"long-press\" composition\n          // Also on OSX, we write the word before the cursor to allow for the Accessibility Keyboard to give good hints\n          if (platform.isMacintosh) {\n            const selection = this._selections[0];\n\n            if (selection.isEmpty()) {\n              const position = selection.getStartPosition();\n\n              let textBefore = this._getWordBeforePosition(position);\n\n              if (textBefore.length === 0) {\n                textBefore = this._getCharacterBeforePosition(position);\n              }\n\n              if (textBefore.length > 0) {\n                return new TextAreaState(textBefore, textBefore.length, textBefore.length, position, position);\n              }\n            }\n          }\n\n          return TextAreaState.EMPTY;\n        }\n\n        if (browser.isAndroid) {\n          // when tapping in the editor on a word, Android enters composition mode.\n          // in the `compositionstart` event we cannot clear the textarea, because\n          // it then forgets to ever send a `compositionend`.\n          // we therefore only write the current word in the textarea\n          const selection = this._selections[0];\n\n          if (selection.isEmpty()) {\n            const position = selection.getStartPosition();\n\n            const [wordAtPosition, positionOffsetInWord] = this._getAndroidWordAtPosition(position);\n\n            if (wordAtPosition.length > 0) {\n              return new TextAreaState(wordAtPosition, positionOffsetInWord, positionOffsetInWord, position, position);\n            }\n          }\n\n          return TextAreaState.EMPTY;\n        }\n\n        return PagedScreenReaderStrategy.fromEditorSelection(currentState, simpleModel, this._selections[0], this._accessibilityPageSize, this._accessibilitySupport === 0\n        /* Unknown */\n        );\n      },\n      deduceModelPosition: (viewAnchorPosition, deltaOffset, lineFeedCnt) => {\n        return this._context.model.deduceModelPositionRelativeToViewPosition(viewAnchorPosition, deltaOffset, lineFeedCnt);\n      }\n    };\n    this._textAreaInput = this._register(new TextAreaInput(textAreaInputHost, this.textArea));\n\n    this._register(this._textAreaInput.onKeyDown(e => {\n      this._viewController.emitKeyDown(e);\n    }));\n\n    this._register(this._textAreaInput.onKeyUp(e => {\n      this._viewController.emitKeyUp(e);\n    }));\n\n    this._register(this._textAreaInput.onPaste(e => {\n      let pasteOnNewLine = false;\n      let multicursorText = null;\n      let mode = null;\n\n      if (e.metadata) {\n        pasteOnNewLine = this._emptySelectionClipboard && !!e.metadata.isFromEmptySelection;\n        multicursorText = typeof e.metadata.multicursorText !== 'undefined' ? e.metadata.multicursorText : null;\n        mode = e.metadata.mode;\n      }\n\n      this._viewController.paste(e.text, pasteOnNewLine, multicursorText, mode);\n    }));\n\n    this._register(this._textAreaInput.onCut(() => {\n      this._viewController.cut();\n    }));\n\n    this._register(this._textAreaInput.onType(e => {\n      if (e.replacePrevCharCnt || e.replaceNextCharCnt || e.positionDelta) {\n        // must be handled through the new command\n        if (_debugComposition) {\n          console.log(` => compositionType: <<${e.text}>>, ${e.replacePrevCharCnt}, ${e.replaceNextCharCnt}, ${e.positionDelta}`);\n        }\n\n        this._viewController.compositionType(e.text, e.replacePrevCharCnt, e.replaceNextCharCnt, e.positionDelta);\n      } else {\n        if (_debugComposition) {\n          console.log(` => type: <<${e.text}>>`);\n        }\n\n        this._viewController.type(e.text);\n      }\n    }));\n\n    this._register(this._textAreaInput.onSelectionChangeRequest(modelSelection => {\n      this._viewController.setSelection(modelSelection);\n    }));\n\n    this._register(this._textAreaInput.onCompositionStart(e => {\n      const lineNumber = this._selections[0].startLineNumber;\n      const column = this._selections[0].startColumn + e.revealDeltaColumns;\n\n      this._context.model.revealRange('keyboard', true, new Range(lineNumber, column, lineNumber, column), 0\n      /* Simple */\n      , 1\n      /* Immediate */\n      ); // Find range pixel position\n\n\n      const visibleRange = this._viewHelper.visibleRangeForPositionRelativeToEditor(lineNumber, column);\n\n      if (visibleRange) {\n        this._visibleTextArea = new VisibleTextAreaData(this._context.viewLayout.getVerticalOffsetForLineNumber(lineNumber), visibleRange.left, canUseZeroSizeTextarea ? 0 : 1);\n\n        this._render();\n      } // Show the textarea\n\n\n      this.textArea.setClassName(`inputarea ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME} ime-input`);\n\n      this._viewController.compositionStart();\n\n      this._context.model.onCompositionStart();\n    }));\n\n    this._register(this._textAreaInput.onCompositionUpdate(e => {\n      if (!this._visibleTextArea) {\n        return;\n      } // adjust width by its size\n\n\n      this._visibleTextArea = this._visibleTextArea.setWidth(measureText(e.data, this._fontInfo));\n\n      this._render();\n    }));\n\n    this._register(this._textAreaInput.onCompositionEnd(() => {\n      this._visibleTextArea = null;\n\n      this._render();\n\n      this.textArea.setClassName(`inputarea ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`);\n\n      this._viewController.compositionEnd();\n\n      this._context.model.onCompositionEnd();\n    }));\n\n    this._register(this._textAreaInput.onFocus(() => {\n      this._context.model.setHasFocus(true);\n    }));\n\n    this._register(this._textAreaInput.onBlur(() => {\n      this._context.model.setHasFocus(false);\n    }));\n  }\n\n  dispose() {\n    super.dispose();\n  }\n\n  _getAndroidWordAtPosition(position) {\n    const ANDROID_WORD_SEPARATORS = '`~!@#$%^&*()-=+[{]}\\\\|;:\",.<>/?';\n\n    const lineContent = this._context.model.getLineContent(position.lineNumber);\n\n    const wordSeparators = getMapForWordSeparators(ANDROID_WORD_SEPARATORS);\n    let goingLeft = true;\n    let startColumn = position.column;\n    let goingRight = true;\n    let endColumn = position.column;\n    let distance = 0;\n\n    while (distance < 50 && (goingLeft || goingRight)) {\n      if (goingLeft && startColumn <= 1) {\n        goingLeft = false;\n      }\n\n      if (goingLeft) {\n        const charCode = lineContent.charCodeAt(startColumn - 2);\n        const charClass = wordSeparators.get(charCode);\n\n        if (charClass !== 0\n        /* Regular */\n        ) {\n          goingLeft = false;\n        } else {\n          startColumn--;\n        }\n      }\n\n      if (goingRight && endColumn > lineContent.length) {\n        goingRight = false;\n      }\n\n      if (goingRight) {\n        const charCode = lineContent.charCodeAt(endColumn - 1);\n        const charClass = wordSeparators.get(charCode);\n\n        if (charClass !== 0\n        /* Regular */\n        ) {\n          goingRight = false;\n        } else {\n          endColumn++;\n        }\n      }\n\n      distance++;\n    }\n\n    return [lineContent.substring(startColumn - 1, endColumn - 1), position.column - startColumn];\n  }\n\n  _getWordBeforePosition(position) {\n    const lineContent = this._context.model.getLineContent(position.lineNumber);\n\n    const wordSeparators = getMapForWordSeparators(this._context.configuration.options.get(115\n    /* wordSeparators */\n    ));\n    let column = position.column;\n    let distance = 0;\n\n    while (column > 1) {\n      const charCode = lineContent.charCodeAt(column - 2);\n      const charClass = wordSeparators.get(charCode);\n\n      if (charClass !== 0\n      /* Regular */\n      || distance > 50) {\n        return lineContent.substring(column - 1, position.column - 1);\n      }\n\n      distance++;\n      column--;\n    }\n\n    return lineContent.substring(0, position.column - 1);\n  }\n\n  _getCharacterBeforePosition(position) {\n    if (position.column > 1) {\n      const lineContent = this._context.model.getLineContent(position.lineNumber);\n\n      const charBefore = lineContent.charAt(position.column - 2);\n\n      if (!strings.isHighSurrogate(charBefore.charCodeAt(0))) {\n        return charBefore;\n      }\n    }\n\n    return '';\n  }\n\n  _getAriaLabel(options) {\n    const accessibilitySupport = options.get(2\n    /* accessibilitySupport */\n    );\n\n    if (accessibilitySupport === 1\n    /* Disabled */\n    ) {\n      return nls.localize('accessibilityOffAriaLabel', \"The editor is not accessible at this time. Press {0} for options.\", platform.isLinux ? 'Shift+Alt+F1' : 'Alt+F1');\n    }\n\n    return options.get(4\n    /* ariaLabel */\n    );\n  }\n\n  _setAccessibilityOptions(options) {\n    this._accessibilitySupport = options.get(2\n    /* accessibilitySupport */\n    );\n    const accessibilityPageSize = options.get(3\n    /* accessibilityPageSize */\n    );\n\n    if (this._accessibilitySupport === 2\n    /* Enabled */\n    && accessibilityPageSize === EditorOptions.accessibilityPageSize.defaultValue) {\n      // If a screen reader is attached and the default value is not set we shuold automatically increase the page size to 500 for a better experience\n      this._accessibilityPageSize = 500;\n    } else {\n      this._accessibilityPageSize = accessibilityPageSize;\n    }\n  } // --- begin event handlers\n\n\n  onConfigurationChanged(e) {\n    const options = this._context.configuration.options;\n    const layoutInfo = options.get(129\n    /* layoutInfo */\n    );\n\n    this._setAccessibilityOptions(options);\n\n    this._contentLeft = layoutInfo.contentLeft;\n    this._contentWidth = layoutInfo.contentWidth;\n    this._contentHeight = layoutInfo.height;\n    this._fontInfo = options.get(43\n    /* fontInfo */\n    );\n    this._lineHeight = options.get(58\n    /* lineHeight */\n    );\n    this._emptySelectionClipboard = options.get(32\n    /* emptySelectionClipboard */\n    );\n    this._copyWithSyntaxHighlighting = options.get(21\n    /* copyWithSyntaxHighlighting */\n    );\n    this.textArea.setAttribute('aria-label', this._getAriaLabel(options));\n    this.textArea.setAttribute('tabindex', String(options.get(111\n    /* tabIndex */\n    )));\n\n    if (e.hasChanged(30\n    /* domReadOnly */\n    ) || e.hasChanged(80\n    /* readOnly */\n    )) {\n      if (options.get(30\n      /* domReadOnly */\n      ) && options.get(80\n      /* readOnly */\n      )) {\n        this.textArea.setAttribute('readonly', 'true');\n      } else {\n        this.textArea.removeAttribute('readonly');\n      }\n    }\n\n    if (e.hasChanged(2\n    /* accessibilitySupport */\n    )) {\n      this._textAreaInput.writeScreenReaderContent('strategy changed');\n    }\n\n    return true;\n  }\n\n  onCursorStateChanged(e) {\n    this._selections = e.selections.slice(0);\n    this._modelSelections = e.modelSelections.slice(0);\n\n    this._textAreaInput.writeScreenReaderContent('selection changed');\n\n    return true;\n  }\n\n  onDecorationsChanged(e) {\n    // true for inline decorations that can end up relayouting text\n    return true;\n  }\n\n  onFlushed(e) {\n    return true;\n  }\n\n  onLinesChanged(e) {\n    return true;\n  }\n\n  onLinesDeleted(e) {\n    return true;\n  }\n\n  onLinesInserted(e) {\n    return true;\n  }\n\n  onScrollChanged(e) {\n    this._scrollLeft = e.scrollLeft;\n    this._scrollTop = e.scrollTop;\n    return true;\n  }\n\n  onZonesChanged(e) {\n    return true;\n  } // --- end event handlers\n  // --- begin view API\n\n\n  isFocused() {\n    return this._textAreaInput.isFocused();\n  }\n\n  focusTextArea() {\n    this._textAreaInput.focusTextArea();\n  }\n\n  getLastRenderData() {\n    return this._lastRenderPosition;\n  }\n\n  setAriaOptions(options) {\n    if (options.activeDescendant) {\n      this.textArea.setAttribute('aria-haspopup', 'true');\n      this.textArea.setAttribute('aria-autocomplete', 'list');\n      this.textArea.setAttribute('aria-activedescendant', options.activeDescendant);\n    } else {\n      this.textArea.setAttribute('aria-haspopup', 'false');\n      this.textArea.setAttribute('aria-autocomplete', 'both');\n      this.textArea.removeAttribute('aria-activedescendant');\n    }\n\n    if (options.role) {\n      this.textArea.setAttribute('role', options.role);\n    }\n  }\n\n  prepareRender(ctx) {\n    this._primaryCursorPosition = new Position(this._selections[0].positionLineNumber, this._selections[0].positionColumn);\n    this._primaryCursorVisibleRange = ctx.visibleRangeForPosition(this._primaryCursorPosition);\n  }\n\n  render(ctx) {\n    this._textAreaInput.writeScreenReaderContent('render');\n\n    this._render();\n  }\n\n  _render() {\n    if (this._visibleTextArea) {\n      // The text area is visible for composition reasons\n      this._renderInsideEditor(null, this._visibleTextArea.top - this._scrollTop, this._contentLeft + this._visibleTextArea.left - this._scrollLeft, this._visibleTextArea.width, this._lineHeight);\n\n      return;\n    }\n\n    if (!this._primaryCursorVisibleRange) {\n      // The primary cursor is outside the viewport => place textarea to the top left\n      this._renderAtTopLeft();\n\n      return;\n    }\n\n    const left = this._contentLeft + this._primaryCursorVisibleRange.left - this._scrollLeft;\n\n    if (left < this._contentLeft || left > this._contentLeft + this._contentWidth) {\n      // cursor is outside the viewport\n      this._renderAtTopLeft();\n\n      return;\n    }\n\n    const top = this._context.viewLayout.getVerticalOffsetForLineNumber(this._selections[0].positionLineNumber) - this._scrollTop;\n\n    if (top < 0 || top > this._contentHeight) {\n      // cursor is outside the viewport\n      this._renderAtTopLeft();\n\n      return;\n    } // The primary cursor is in the viewport (at least vertically) => place textarea on the cursor\n\n\n    if (platform.isMacintosh) {\n      // For the popup emoji input, we will make the text area as high as the line height\n      // We will also make the fontSize and lineHeight the correct dimensions to help with the placement of these pickers\n      this._renderInsideEditor(this._primaryCursorPosition, top, left, canUseZeroSizeTextarea ? 0 : 1, this._lineHeight);\n\n      return;\n    }\n\n    this._renderInsideEditor(this._primaryCursorPosition, top, left, canUseZeroSizeTextarea ? 0 : 1, canUseZeroSizeTextarea ? 0 : 1);\n  }\n\n  _renderInsideEditor(renderedPosition, top, left, width, height) {\n    this._lastRenderPosition = renderedPosition;\n    const ta = this.textArea;\n    const tac = this.textAreaCover;\n    Configuration.applyFontInfo(ta, this._fontInfo);\n    ta.setTop(top);\n    ta.setLeft(left);\n    ta.setWidth(width);\n    ta.setHeight(height);\n    tac.setTop(0);\n    tac.setLeft(0);\n    tac.setWidth(0);\n    tac.setHeight(0);\n  }\n\n  _renderAtTopLeft() {\n    this._lastRenderPosition = null;\n    const ta = this.textArea;\n    const tac = this.textAreaCover;\n    Configuration.applyFontInfo(ta, this._fontInfo);\n    ta.setTop(0);\n    ta.setLeft(0);\n    tac.setTop(0);\n    tac.setLeft(0);\n\n    if (canUseZeroSizeTextarea) {\n      ta.setWidth(0);\n      ta.setHeight(0);\n      tac.setWidth(0);\n      tac.setHeight(0);\n      return;\n    } // (in WebKit the textarea is 1px by 1px because it cannot handle input to a 0x0 textarea)\n    // specifically, when doing Korean IME, setting the textarea to 0x0 breaks IME badly.\n\n\n    ta.setWidth(1);\n    ta.setHeight(1);\n    tac.setWidth(1);\n    tac.setHeight(1);\n    const options = this._context.configuration.options;\n\n    if (options.get(49\n    /* glyphMargin */\n    )) {\n      tac.setClassName('monaco-editor-background textAreaCover ' + Margin.OUTER_CLASS_NAME);\n    } else {\n      if (options.get(59\n      /* lineNumbers */\n      ).renderType !== 0\n      /* Off */\n      ) {\n        tac.setClassName('monaco-editor-background textAreaCover ' + LineNumbersOverlay.CLASS_NAME);\n      } else {\n        tac.setClassName('monaco-editor-background textAreaCover');\n      }\n    }\n  }\n\n}\n\nfunction measureText(text, fontInfo) {\n  // adjust width by its size\n  const canvasElem = document.createElement('canvas');\n  const context = canvasElem.getContext('2d');\n  context.font = createFontString(fontInfo);\n  const metrics = context.measureText(text);\n\n  if (browser.isFirefox) {\n    return metrics.width + 2; // +2 for Japanese...\n  } else {\n    return metrics.width;\n  }\n}\n\nfunction createFontString(bareFontInfo) {\n  return doCreateFontString('normal', bareFontInfo.fontWeight, bareFontInfo.fontSize, bareFontInfo.lineHeight, bareFontInfo.fontFamily);\n}\n\nfunction doCreateFontString(fontStyle, fontWeight, fontSize, lineHeight, fontFamily) {\n  // The full font syntax is:\n  // style | variant | weight | stretch | size/line-height | fontFamily\n  // (https://developer.mozilla.org/en-US/docs/Web/CSS/font)\n  // But it appears Edge and IE11 cannot properly parse `stretch`.\n  return `${fontStyle} normal ${fontWeight} ${fontSize}px / ${lineHeight}px ${fontFamily}`;\n}","map":{"version":3,"sources":["/home/umut/Documents/cs/cs410/Project2Group14/node_modules/monaco-editor/esm/vs/editor/browser/controller/textAreaHandler.js"],"names":["nls","browser","createFastDomNode","platform","strings","Configuration","CopyOptions","TextAreaInput","PagedScreenReaderStrategy","TextAreaState","_debugComposition","PartFingerprints","ViewPart","LineNumbersOverlay","Margin","EditorOptions","getMapForWordSeparators","Position","Range","Selection","MOUSE_CURSOR_TEXT_CSS_CLASS_NAME","VisibleTextAreaData","constructor","top","left","width","_visibleTextAreaBrand","undefined","setWidth","canUseZeroSizeTextarea","isFirefox","TextAreaHandler","context","viewController","viewHelper","_primaryCursorPosition","_primaryCursorVisibleRange","_viewController","_viewHelper","_scrollLeft","_scrollTop","options","_context","configuration","layoutInfo","get","_setAccessibilityOptions","_contentLeft","contentLeft","_contentWidth","contentWidth","_contentHeight","height","_fontInfo","_lineHeight","_emptySelectionClipboard","_copyWithSyntaxHighlighting","_visibleTextArea","_selections","_modelSelections","_lastRenderPosition","textArea","document","createElement","write","setClassName","setAttribute","_getAriaLabel","String","localize","textAreaCover","setPosition","simpleModel","getLineCount","model","getLineMaxColumn","lineNumber","getValueInRange","range","eol","textAreaInputHost","getDataToCopy","generateHTML","rawTextToCopy","getPlainTextToCopy","isWindows","newLineCharacter","getEOL","isFromEmptySelection","length","isEmpty","multicursorText","Array","isArray","text","join","html","mode","forceCopyWithSyntaxHighlighting","richText","getRichTextToCopy","getScreenReaderContent","currentState","_accessibilitySupport","isMacintosh","selection","position","getStartPosition","textBefore","_getWordBeforePosition","_getCharacterBeforePosition","EMPTY","isAndroid","wordAtPosition","positionOffsetInWord","_getAndroidWordAtPosition","fromEditorSelection","_accessibilityPageSize","deduceModelPosition","viewAnchorPosition","deltaOffset","lineFeedCnt","deduceModelPositionRelativeToViewPosition","_textAreaInput","_register","onKeyDown","e","emitKeyDown","onKeyUp","emitKeyUp","onPaste","pasteOnNewLine","metadata","paste","onCut","cut","onType","replacePrevCharCnt","replaceNextCharCnt","positionDelta","console","log","compositionType","type","onSelectionChangeRequest","modelSelection","setSelection","onCompositionStart","startLineNumber","column","startColumn","revealDeltaColumns","revealRange","visibleRange","visibleRangeForPositionRelativeToEditor","viewLayout","getVerticalOffsetForLineNumber","_render","compositionStart","onCompositionUpdate","measureText","data","onCompositionEnd","compositionEnd","onFocus","setHasFocus","onBlur","dispose","ANDROID_WORD_SEPARATORS","lineContent","getLineContent","wordSeparators","goingLeft","goingRight","endColumn","distance","charCode","charCodeAt","charClass","substring","charBefore","charAt","isHighSurrogate","accessibilitySupport","isLinux","accessibilityPageSize","defaultValue","onConfigurationChanged","hasChanged","removeAttribute","writeScreenReaderContent","onCursorStateChanged","selections","slice","modelSelections","onDecorationsChanged","onFlushed","onLinesChanged","onLinesDeleted","onLinesInserted","onScrollChanged","scrollLeft","scrollTop","onZonesChanged","isFocused","focusTextArea","getLastRenderData","setAriaOptions","activeDescendant","role","prepareRender","ctx","positionLineNumber","positionColumn","visibleRangeForPosition","render","_renderInsideEditor","_renderAtTopLeft","renderedPosition","ta","tac","applyFontInfo","setTop","setLeft","setHeight","OUTER_CLASS_NAME","renderType","CLASS_NAME","fontInfo","canvasElem","getContext","font","createFontString","metrics","bareFontInfo","doCreateFontString","fontWeight","fontSize","lineHeight","fontFamily","fontStyle"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './textAreaHandler.css';\nimport * as nls from '../../../nls.js';\nimport * as browser from '../../../base/browser/browser.js';\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\nimport * as platform from '../../../base/common/platform.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { Configuration } from '../config/configuration.js';\nimport { CopyOptions, TextAreaInput } from './textAreaInput.js';\nimport { PagedScreenReaderStrategy, TextAreaState, _debugComposition } from './textAreaState.js';\nimport { PartFingerprints, ViewPart } from '../view/viewPart.js';\nimport { LineNumbersOverlay } from '../viewParts/lineNumbers/lineNumbers.js';\nimport { Margin } from '../viewParts/margin/margin.js';\nimport { EditorOptions } from '../../common/config/editorOptions.js';\nimport { getMapForWordSeparators } from '../../common/controller/wordCharacterClassifier.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range } from '../../common/core/range.js';\nimport { Selection } from '../../common/core/selection.js';\nimport { MOUSE_CURSOR_TEXT_CSS_CLASS_NAME } from '../../../base/browser/ui/mouseCursor/mouseCursor.js';\nclass VisibleTextAreaData {\n    constructor(top, left, width) {\n        this._visibleTextAreaBrand = undefined;\n        this.top = top;\n        this.left = left;\n        this.width = width;\n    }\n    setWidth(width) {\n        return new VisibleTextAreaData(this.top, this.left, width);\n    }\n}\nconst canUseZeroSizeTextarea = (browser.isFirefox);\nexport class TextAreaHandler extends ViewPart {\n    constructor(context, viewController, viewHelper) {\n        super(context);\n        // --- end view API\n        this._primaryCursorPosition = new Position(1, 1);\n        this._primaryCursorVisibleRange = null;\n        this._viewController = viewController;\n        this._viewHelper = viewHelper;\n        this._scrollLeft = 0;\n        this._scrollTop = 0;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(129 /* layoutInfo */);\n        this._setAccessibilityOptions(options);\n        this._contentLeft = layoutInfo.contentLeft;\n        this._contentWidth = layoutInfo.contentWidth;\n        this._contentHeight = layoutInfo.height;\n        this._fontInfo = options.get(43 /* fontInfo */);\n        this._lineHeight = options.get(58 /* lineHeight */);\n        this._emptySelectionClipboard = options.get(32 /* emptySelectionClipboard */);\n        this._copyWithSyntaxHighlighting = options.get(21 /* copyWithSyntaxHighlighting */);\n        this._visibleTextArea = null;\n        this._selections = [new Selection(1, 1, 1, 1)];\n        this._modelSelections = [new Selection(1, 1, 1, 1)];\n        this._lastRenderPosition = null;\n        // Text Area (The focus will always be in the textarea when the cursor is blinking)\n        this.textArea = createFastDomNode(document.createElement('textarea'));\n        PartFingerprints.write(this.textArea, 6 /* TextArea */);\n        this.textArea.setClassName(`inputarea ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`);\n        this.textArea.setAttribute('wrap', 'off');\n        this.textArea.setAttribute('autocorrect', 'off');\n        this.textArea.setAttribute('autocapitalize', 'off');\n        this.textArea.setAttribute('autocomplete', 'off');\n        this.textArea.setAttribute('spellcheck', 'false');\n        this.textArea.setAttribute('aria-label', this._getAriaLabel(options));\n        this.textArea.setAttribute('tabindex', String(options.get(111 /* tabIndex */)));\n        this.textArea.setAttribute('role', 'textbox');\n        this.textArea.setAttribute('aria-roledescription', nls.localize('editor', \"editor\"));\n        this.textArea.setAttribute('aria-multiline', 'true');\n        this.textArea.setAttribute('aria-haspopup', 'false');\n        this.textArea.setAttribute('aria-autocomplete', 'both');\n        if (options.get(30 /* domReadOnly */) && options.get(80 /* readOnly */)) {\n            this.textArea.setAttribute('readonly', 'true');\n        }\n        this.textAreaCover = createFastDomNode(document.createElement('div'));\n        this.textAreaCover.setPosition('absolute');\n        const simpleModel = {\n            getLineCount: () => {\n                return this._context.model.getLineCount();\n            },\n            getLineMaxColumn: (lineNumber) => {\n                return this._context.model.getLineMaxColumn(lineNumber);\n            },\n            getValueInRange: (range, eol) => {\n                return this._context.model.getValueInRange(range, eol);\n            }\n        };\n        const textAreaInputHost = {\n            getDataToCopy: (generateHTML) => {\n                const rawTextToCopy = this._context.model.getPlainTextToCopy(this._modelSelections, this._emptySelectionClipboard, platform.isWindows);\n                const newLineCharacter = this._context.model.getEOL();\n                const isFromEmptySelection = (this._emptySelectionClipboard && this._modelSelections.length === 1 && this._modelSelections[0].isEmpty());\n                const multicursorText = (Array.isArray(rawTextToCopy) ? rawTextToCopy : null);\n                const text = (Array.isArray(rawTextToCopy) ? rawTextToCopy.join(newLineCharacter) : rawTextToCopy);\n                let html = undefined;\n                let mode = null;\n                if (generateHTML) {\n                    if (CopyOptions.forceCopyWithSyntaxHighlighting || (this._copyWithSyntaxHighlighting && text.length < 65536)) {\n                        const richText = this._context.model.getRichTextToCopy(this._modelSelections, this._emptySelectionClipboard);\n                        if (richText) {\n                            html = richText.html;\n                            mode = richText.mode;\n                        }\n                    }\n                }\n                return {\n                    isFromEmptySelection,\n                    multicursorText,\n                    text,\n                    html,\n                    mode\n                };\n            },\n            getScreenReaderContent: (currentState) => {\n                if (this._accessibilitySupport === 1 /* Disabled */) {\n                    // We know for a fact that a screen reader is not attached\n                    // On OSX, we write the character before the cursor to allow for \"long-press\" composition\n                    // Also on OSX, we write the word before the cursor to allow for the Accessibility Keyboard to give good hints\n                    if (platform.isMacintosh) {\n                        const selection = this._selections[0];\n                        if (selection.isEmpty()) {\n                            const position = selection.getStartPosition();\n                            let textBefore = this._getWordBeforePosition(position);\n                            if (textBefore.length === 0) {\n                                textBefore = this._getCharacterBeforePosition(position);\n                            }\n                            if (textBefore.length > 0) {\n                                return new TextAreaState(textBefore, textBefore.length, textBefore.length, position, position);\n                            }\n                        }\n                    }\n                    return TextAreaState.EMPTY;\n                }\n                if (browser.isAndroid) {\n                    // when tapping in the editor on a word, Android enters composition mode.\n                    // in the `compositionstart` event we cannot clear the textarea, because\n                    // it then forgets to ever send a `compositionend`.\n                    // we therefore only write the current word in the textarea\n                    const selection = this._selections[0];\n                    if (selection.isEmpty()) {\n                        const position = selection.getStartPosition();\n                        const [wordAtPosition, positionOffsetInWord] = this._getAndroidWordAtPosition(position);\n                        if (wordAtPosition.length > 0) {\n                            return new TextAreaState(wordAtPosition, positionOffsetInWord, positionOffsetInWord, position, position);\n                        }\n                    }\n                    return TextAreaState.EMPTY;\n                }\n                return PagedScreenReaderStrategy.fromEditorSelection(currentState, simpleModel, this._selections[0], this._accessibilityPageSize, this._accessibilitySupport === 0 /* Unknown */);\n            },\n            deduceModelPosition: (viewAnchorPosition, deltaOffset, lineFeedCnt) => {\n                return this._context.model.deduceModelPositionRelativeToViewPosition(viewAnchorPosition, deltaOffset, lineFeedCnt);\n            }\n        };\n        this._textAreaInput = this._register(new TextAreaInput(textAreaInputHost, this.textArea));\n        this._register(this._textAreaInput.onKeyDown((e) => {\n            this._viewController.emitKeyDown(e);\n        }));\n        this._register(this._textAreaInput.onKeyUp((e) => {\n            this._viewController.emitKeyUp(e);\n        }));\n        this._register(this._textAreaInput.onPaste((e) => {\n            let pasteOnNewLine = false;\n            let multicursorText = null;\n            let mode = null;\n            if (e.metadata) {\n                pasteOnNewLine = (this._emptySelectionClipboard && !!e.metadata.isFromEmptySelection);\n                multicursorText = (typeof e.metadata.multicursorText !== 'undefined' ? e.metadata.multicursorText : null);\n                mode = e.metadata.mode;\n            }\n            this._viewController.paste(e.text, pasteOnNewLine, multicursorText, mode);\n        }));\n        this._register(this._textAreaInput.onCut(() => {\n            this._viewController.cut();\n        }));\n        this._register(this._textAreaInput.onType((e) => {\n            if (e.replacePrevCharCnt || e.replaceNextCharCnt || e.positionDelta) {\n                // must be handled through the new command\n                if (_debugComposition) {\n                    console.log(` => compositionType: <<${e.text}>>, ${e.replacePrevCharCnt}, ${e.replaceNextCharCnt}, ${e.positionDelta}`);\n                }\n                this._viewController.compositionType(e.text, e.replacePrevCharCnt, e.replaceNextCharCnt, e.positionDelta);\n            }\n            else {\n                if (_debugComposition) {\n                    console.log(` => type: <<${e.text}>>`);\n                }\n                this._viewController.type(e.text);\n            }\n        }));\n        this._register(this._textAreaInput.onSelectionChangeRequest((modelSelection) => {\n            this._viewController.setSelection(modelSelection);\n        }));\n        this._register(this._textAreaInput.onCompositionStart((e) => {\n            const lineNumber = this._selections[0].startLineNumber;\n            const column = this._selections[0].startColumn + e.revealDeltaColumns;\n            this._context.model.revealRange('keyboard', true, new Range(lineNumber, column, lineNumber, column), 0 /* Simple */, 1 /* Immediate */);\n            // Find range pixel position\n            const visibleRange = this._viewHelper.visibleRangeForPositionRelativeToEditor(lineNumber, column);\n            if (visibleRange) {\n                this._visibleTextArea = new VisibleTextAreaData(this._context.viewLayout.getVerticalOffsetForLineNumber(lineNumber), visibleRange.left, canUseZeroSizeTextarea ? 0 : 1);\n                this._render();\n            }\n            // Show the textarea\n            this.textArea.setClassName(`inputarea ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME} ime-input`);\n            this._viewController.compositionStart();\n            this._context.model.onCompositionStart();\n        }));\n        this._register(this._textAreaInput.onCompositionUpdate((e) => {\n            if (!this._visibleTextArea) {\n                return;\n            }\n            // adjust width by its size\n            this._visibleTextArea = this._visibleTextArea.setWidth(measureText(e.data, this._fontInfo));\n            this._render();\n        }));\n        this._register(this._textAreaInput.onCompositionEnd(() => {\n            this._visibleTextArea = null;\n            this._render();\n            this.textArea.setClassName(`inputarea ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`);\n            this._viewController.compositionEnd();\n            this._context.model.onCompositionEnd();\n        }));\n        this._register(this._textAreaInput.onFocus(() => {\n            this._context.model.setHasFocus(true);\n        }));\n        this._register(this._textAreaInput.onBlur(() => {\n            this._context.model.setHasFocus(false);\n        }));\n    }\n    dispose() {\n        super.dispose();\n    }\n    _getAndroidWordAtPosition(position) {\n        const ANDROID_WORD_SEPARATORS = '`~!@#$%^&*()-=+[{]}\\\\|;:\",.<>/?';\n        const lineContent = this._context.model.getLineContent(position.lineNumber);\n        const wordSeparators = getMapForWordSeparators(ANDROID_WORD_SEPARATORS);\n        let goingLeft = true;\n        let startColumn = position.column;\n        let goingRight = true;\n        let endColumn = position.column;\n        let distance = 0;\n        while (distance < 50 && (goingLeft || goingRight)) {\n            if (goingLeft && startColumn <= 1) {\n                goingLeft = false;\n            }\n            if (goingLeft) {\n                const charCode = lineContent.charCodeAt(startColumn - 2);\n                const charClass = wordSeparators.get(charCode);\n                if (charClass !== 0 /* Regular */) {\n                    goingLeft = false;\n                }\n                else {\n                    startColumn--;\n                }\n            }\n            if (goingRight && endColumn > lineContent.length) {\n                goingRight = false;\n            }\n            if (goingRight) {\n                const charCode = lineContent.charCodeAt(endColumn - 1);\n                const charClass = wordSeparators.get(charCode);\n                if (charClass !== 0 /* Regular */) {\n                    goingRight = false;\n                }\n                else {\n                    endColumn++;\n                }\n            }\n            distance++;\n        }\n        return [lineContent.substring(startColumn - 1, endColumn - 1), position.column - startColumn];\n    }\n    _getWordBeforePosition(position) {\n        const lineContent = this._context.model.getLineContent(position.lineNumber);\n        const wordSeparators = getMapForWordSeparators(this._context.configuration.options.get(115 /* wordSeparators */));\n        let column = position.column;\n        let distance = 0;\n        while (column > 1) {\n            const charCode = lineContent.charCodeAt(column - 2);\n            const charClass = wordSeparators.get(charCode);\n            if (charClass !== 0 /* Regular */ || distance > 50) {\n                return lineContent.substring(column - 1, position.column - 1);\n            }\n            distance++;\n            column--;\n        }\n        return lineContent.substring(0, position.column - 1);\n    }\n    _getCharacterBeforePosition(position) {\n        if (position.column > 1) {\n            const lineContent = this._context.model.getLineContent(position.lineNumber);\n            const charBefore = lineContent.charAt(position.column - 2);\n            if (!strings.isHighSurrogate(charBefore.charCodeAt(0))) {\n                return charBefore;\n            }\n        }\n        return '';\n    }\n    _getAriaLabel(options) {\n        const accessibilitySupport = options.get(2 /* accessibilitySupport */);\n        if (accessibilitySupport === 1 /* Disabled */) {\n            return nls.localize('accessibilityOffAriaLabel', \"The editor is not accessible at this time. Press {0} for options.\", platform.isLinux ? 'Shift+Alt+F1' : 'Alt+F1');\n        }\n        return options.get(4 /* ariaLabel */);\n    }\n    _setAccessibilityOptions(options) {\n        this._accessibilitySupport = options.get(2 /* accessibilitySupport */);\n        const accessibilityPageSize = options.get(3 /* accessibilityPageSize */);\n        if (this._accessibilitySupport === 2 /* Enabled */ && accessibilityPageSize === EditorOptions.accessibilityPageSize.defaultValue) {\n            // If a screen reader is attached and the default value is not set we shuold automatically increase the page size to 500 for a better experience\n            this._accessibilityPageSize = 500;\n        }\n        else {\n            this._accessibilityPageSize = accessibilityPageSize;\n        }\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(129 /* layoutInfo */);\n        this._setAccessibilityOptions(options);\n        this._contentLeft = layoutInfo.contentLeft;\n        this._contentWidth = layoutInfo.contentWidth;\n        this._contentHeight = layoutInfo.height;\n        this._fontInfo = options.get(43 /* fontInfo */);\n        this._lineHeight = options.get(58 /* lineHeight */);\n        this._emptySelectionClipboard = options.get(32 /* emptySelectionClipboard */);\n        this._copyWithSyntaxHighlighting = options.get(21 /* copyWithSyntaxHighlighting */);\n        this.textArea.setAttribute('aria-label', this._getAriaLabel(options));\n        this.textArea.setAttribute('tabindex', String(options.get(111 /* tabIndex */)));\n        if (e.hasChanged(30 /* domReadOnly */) || e.hasChanged(80 /* readOnly */)) {\n            if (options.get(30 /* domReadOnly */) && options.get(80 /* readOnly */)) {\n                this.textArea.setAttribute('readonly', 'true');\n            }\n            else {\n                this.textArea.removeAttribute('readonly');\n            }\n        }\n        if (e.hasChanged(2 /* accessibilitySupport */)) {\n            this._textAreaInput.writeScreenReaderContent('strategy changed');\n        }\n        return true;\n    }\n    onCursorStateChanged(e) {\n        this._selections = e.selections.slice(0);\n        this._modelSelections = e.modelSelections.slice(0);\n        this._textAreaInput.writeScreenReaderContent('selection changed');\n        return true;\n    }\n    onDecorationsChanged(e) {\n        // true for inline decorations that can end up relayouting text\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        this._scrollLeft = e.scrollLeft;\n        this._scrollTop = e.scrollTop;\n        return true;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    // --- begin view API\n    isFocused() {\n        return this._textAreaInput.isFocused();\n    }\n    focusTextArea() {\n        this._textAreaInput.focusTextArea();\n    }\n    getLastRenderData() {\n        return this._lastRenderPosition;\n    }\n    setAriaOptions(options) {\n        if (options.activeDescendant) {\n            this.textArea.setAttribute('aria-haspopup', 'true');\n            this.textArea.setAttribute('aria-autocomplete', 'list');\n            this.textArea.setAttribute('aria-activedescendant', options.activeDescendant);\n        }\n        else {\n            this.textArea.setAttribute('aria-haspopup', 'false');\n            this.textArea.setAttribute('aria-autocomplete', 'both');\n            this.textArea.removeAttribute('aria-activedescendant');\n        }\n        if (options.role) {\n            this.textArea.setAttribute('role', options.role);\n        }\n    }\n    prepareRender(ctx) {\n        this._primaryCursorPosition = new Position(this._selections[0].positionLineNumber, this._selections[0].positionColumn);\n        this._primaryCursorVisibleRange = ctx.visibleRangeForPosition(this._primaryCursorPosition);\n    }\n    render(ctx) {\n        this._textAreaInput.writeScreenReaderContent('render');\n        this._render();\n    }\n    _render() {\n        if (this._visibleTextArea) {\n            // The text area is visible for composition reasons\n            this._renderInsideEditor(null, this._visibleTextArea.top - this._scrollTop, this._contentLeft + this._visibleTextArea.left - this._scrollLeft, this._visibleTextArea.width, this._lineHeight);\n            return;\n        }\n        if (!this._primaryCursorVisibleRange) {\n            // The primary cursor is outside the viewport => place textarea to the top left\n            this._renderAtTopLeft();\n            return;\n        }\n        const left = this._contentLeft + this._primaryCursorVisibleRange.left - this._scrollLeft;\n        if (left < this._contentLeft || left > this._contentLeft + this._contentWidth) {\n            // cursor is outside the viewport\n            this._renderAtTopLeft();\n            return;\n        }\n        const top = this._context.viewLayout.getVerticalOffsetForLineNumber(this._selections[0].positionLineNumber) - this._scrollTop;\n        if (top < 0 || top > this._contentHeight) {\n            // cursor is outside the viewport\n            this._renderAtTopLeft();\n            return;\n        }\n        // The primary cursor is in the viewport (at least vertically) => place textarea on the cursor\n        if (platform.isMacintosh) {\n            // For the popup emoji input, we will make the text area as high as the line height\n            // We will also make the fontSize and lineHeight the correct dimensions to help with the placement of these pickers\n            this._renderInsideEditor(this._primaryCursorPosition, top, left, canUseZeroSizeTextarea ? 0 : 1, this._lineHeight);\n            return;\n        }\n        this._renderInsideEditor(this._primaryCursorPosition, top, left, canUseZeroSizeTextarea ? 0 : 1, canUseZeroSizeTextarea ? 0 : 1);\n    }\n    _renderInsideEditor(renderedPosition, top, left, width, height) {\n        this._lastRenderPosition = renderedPosition;\n        const ta = this.textArea;\n        const tac = this.textAreaCover;\n        Configuration.applyFontInfo(ta, this._fontInfo);\n        ta.setTop(top);\n        ta.setLeft(left);\n        ta.setWidth(width);\n        ta.setHeight(height);\n        tac.setTop(0);\n        tac.setLeft(0);\n        tac.setWidth(0);\n        tac.setHeight(0);\n    }\n    _renderAtTopLeft() {\n        this._lastRenderPosition = null;\n        const ta = this.textArea;\n        const tac = this.textAreaCover;\n        Configuration.applyFontInfo(ta, this._fontInfo);\n        ta.setTop(0);\n        ta.setLeft(0);\n        tac.setTop(0);\n        tac.setLeft(0);\n        if (canUseZeroSizeTextarea) {\n            ta.setWidth(0);\n            ta.setHeight(0);\n            tac.setWidth(0);\n            tac.setHeight(0);\n            return;\n        }\n        // (in WebKit the textarea is 1px by 1px because it cannot handle input to a 0x0 textarea)\n        // specifically, when doing Korean IME, setting the textarea to 0x0 breaks IME badly.\n        ta.setWidth(1);\n        ta.setHeight(1);\n        tac.setWidth(1);\n        tac.setHeight(1);\n        const options = this._context.configuration.options;\n        if (options.get(49 /* glyphMargin */)) {\n            tac.setClassName('monaco-editor-background textAreaCover ' + Margin.OUTER_CLASS_NAME);\n        }\n        else {\n            if (options.get(59 /* lineNumbers */).renderType !== 0 /* Off */) {\n                tac.setClassName('monaco-editor-background textAreaCover ' + LineNumbersOverlay.CLASS_NAME);\n            }\n            else {\n                tac.setClassName('monaco-editor-background textAreaCover');\n            }\n        }\n    }\n}\nfunction measureText(text, fontInfo) {\n    // adjust width by its size\n    const canvasElem = document.createElement('canvas');\n    const context = canvasElem.getContext('2d');\n    context.font = createFontString(fontInfo);\n    const metrics = context.measureText(text);\n    if (browser.isFirefox) {\n        return metrics.width + 2; // +2 for Japanese...\n    }\n    else {\n        return metrics.width;\n    }\n}\nfunction createFontString(bareFontInfo) {\n    return doCreateFontString('normal', bareFontInfo.fontWeight, bareFontInfo.fontSize, bareFontInfo.lineHeight, bareFontInfo.fontFamily);\n}\nfunction doCreateFontString(fontStyle, fontWeight, fontSize, lineHeight, fontFamily) {\n    // The full font syntax is:\n    // style | variant | weight | stretch | size/line-height | fontFamily\n    // (https://developer.mozilla.org/en-US/docs/Web/CSS/font)\n    // But it appears Edge and IE11 cannot properly parse `stretch`.\n    return `${fontStyle} normal ${fontWeight} ${fontSize}px / ${lineHeight}px ${fontFamily}`;\n}\n"]},"metadata":{},"sourceType":"module"}