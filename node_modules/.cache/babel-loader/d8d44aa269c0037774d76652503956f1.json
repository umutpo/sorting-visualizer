{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CursorState } from './cursorCommon.js';\nimport { Cursor } from './oneCursor.js';\nimport { Selection } from '../core/selection.js';\nexport class CursorCollection {\n  constructor(context) {\n    this.context = context;\n    this.primaryCursor = new Cursor(context);\n    this.secondaryCursors = [];\n    this.lastAddedCursorIndex = 0;\n  }\n\n  dispose() {\n    this.primaryCursor.dispose(this.context);\n    this.killSecondaryCursors();\n  }\n\n  startTrackingSelections() {\n    this.primaryCursor.startTrackingSelection(this.context);\n\n    for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n      this.secondaryCursors[i].startTrackingSelection(this.context);\n    }\n  }\n\n  stopTrackingSelections() {\n    this.primaryCursor.stopTrackingSelection(this.context);\n\n    for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n      this.secondaryCursors[i].stopTrackingSelection(this.context);\n    }\n  }\n\n  updateContext(context) {\n    this.context = context;\n  }\n\n  ensureValidState() {\n    this.primaryCursor.ensureValidState(this.context);\n\n    for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n      this.secondaryCursors[i].ensureValidState(this.context);\n    }\n  }\n\n  readSelectionFromMarkers() {\n    let result = [];\n    result[0] = this.primaryCursor.readSelectionFromMarkers(this.context);\n\n    for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n      result[i + 1] = this.secondaryCursors[i].readSelectionFromMarkers(this.context);\n    }\n\n    return result;\n  }\n\n  getAll() {\n    let result = [];\n    result[0] = this.primaryCursor.asCursorState();\n\n    for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n      result[i + 1] = this.secondaryCursors[i].asCursorState();\n    }\n\n    return result;\n  }\n\n  getViewPositions() {\n    let result = [];\n    result[0] = this.primaryCursor.viewState.position;\n\n    for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n      result[i + 1] = this.secondaryCursors[i].viewState.position;\n    }\n\n    return result;\n  }\n\n  getTopMostViewPosition() {\n    let result = this.primaryCursor.viewState.position;\n\n    for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n      const viewPosition = this.secondaryCursors[i].viewState.position;\n\n      if (viewPosition.isBefore(result)) {\n        result = viewPosition;\n      }\n    }\n\n    return result;\n  }\n\n  getBottomMostViewPosition() {\n    let result = this.primaryCursor.viewState.position;\n\n    for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n      const viewPosition = this.secondaryCursors[i].viewState.position;\n\n      if (result.isBeforeOrEqual(viewPosition)) {\n        result = viewPosition;\n      }\n    }\n\n    return result;\n  }\n\n  getSelections() {\n    let result = [];\n    result[0] = this.primaryCursor.modelState.selection;\n\n    for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n      result[i + 1] = this.secondaryCursors[i].modelState.selection;\n    }\n\n    return result;\n  }\n\n  getViewSelections() {\n    let result = [];\n    result[0] = this.primaryCursor.viewState.selection;\n\n    for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n      result[i + 1] = this.secondaryCursors[i].viewState.selection;\n    }\n\n    return result;\n  }\n\n  setSelections(selections) {\n    this.setStates(CursorState.fromModelSelections(selections));\n  }\n\n  getPrimaryCursor() {\n    return this.primaryCursor.asCursorState();\n  }\n\n  setStates(states) {\n    if (states === null) {\n      return;\n    }\n\n    this.primaryCursor.setState(this.context, states[0].modelState, states[0].viewState);\n\n    this._setSecondaryStates(states.slice(1));\n  }\n  /**\n   * Creates or disposes secondary cursors as necessary to match the number of `secondarySelections`.\n   */\n\n\n  _setSecondaryStates(secondaryStates) {\n    const secondaryCursorsLength = this.secondaryCursors.length;\n    const secondaryStatesLength = secondaryStates.length;\n\n    if (secondaryCursorsLength < secondaryStatesLength) {\n      let createCnt = secondaryStatesLength - secondaryCursorsLength;\n\n      for (let i = 0; i < createCnt; i++) {\n        this._addSecondaryCursor();\n      }\n    } else if (secondaryCursorsLength > secondaryStatesLength) {\n      let removeCnt = secondaryCursorsLength - secondaryStatesLength;\n\n      for (let i = 0; i < removeCnt; i++) {\n        this._removeSecondaryCursor(this.secondaryCursors.length - 1);\n      }\n    }\n\n    for (let i = 0; i < secondaryStatesLength; i++) {\n      this.secondaryCursors[i].setState(this.context, secondaryStates[i].modelState, secondaryStates[i].viewState);\n    }\n  }\n\n  killSecondaryCursors() {\n    this._setSecondaryStates([]);\n  }\n\n  _addSecondaryCursor() {\n    this.secondaryCursors.push(new Cursor(this.context));\n    this.lastAddedCursorIndex = this.secondaryCursors.length;\n  }\n\n  getLastAddedCursorIndex() {\n    if (this.secondaryCursors.length === 0 || this.lastAddedCursorIndex === 0) {\n      return 0;\n    }\n\n    return this.lastAddedCursorIndex;\n  }\n\n  _removeSecondaryCursor(removeIndex) {\n    if (this.lastAddedCursorIndex >= removeIndex + 1) {\n      this.lastAddedCursorIndex--;\n    }\n\n    this.secondaryCursors[removeIndex].dispose(this.context);\n    this.secondaryCursors.splice(removeIndex, 1);\n  }\n\n  _getAll() {\n    let result = [];\n    result[0] = this.primaryCursor;\n\n    for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n      result[i + 1] = this.secondaryCursors[i];\n    }\n\n    return result;\n  }\n\n  normalize() {\n    if (this.secondaryCursors.length === 0) {\n      return;\n    }\n\n    let cursors = this._getAll();\n\n    let sortedCursors = [];\n\n    for (let i = 0, len = cursors.length; i < len; i++) {\n      sortedCursors.push({\n        index: i,\n        selection: cursors[i].modelState.selection\n      });\n    }\n\n    sortedCursors.sort((a, b) => {\n      if (a.selection.startLineNumber === b.selection.startLineNumber) {\n        return a.selection.startColumn - b.selection.startColumn;\n      }\n\n      return a.selection.startLineNumber - b.selection.startLineNumber;\n    });\n\n    for (let sortedCursorIndex = 0; sortedCursorIndex < sortedCursors.length - 1; sortedCursorIndex++) {\n      const current = sortedCursors[sortedCursorIndex];\n      const next = sortedCursors[sortedCursorIndex + 1];\n      const currentSelection = current.selection;\n      const nextSelection = next.selection;\n\n      if (!this.context.cursorConfig.multiCursorMergeOverlapping) {\n        continue;\n      }\n\n      let shouldMergeCursors;\n\n      if (nextSelection.isEmpty() || currentSelection.isEmpty()) {\n        // Merge touching cursors if one of them is collapsed\n        shouldMergeCursors = nextSelection.getStartPosition().isBeforeOrEqual(currentSelection.getEndPosition());\n      } else {\n        // Merge only overlapping cursors (i.e. allow touching ranges)\n        shouldMergeCursors = nextSelection.getStartPosition().isBefore(currentSelection.getEndPosition());\n      }\n\n      if (shouldMergeCursors) {\n        const winnerSortedCursorIndex = current.index < next.index ? sortedCursorIndex : sortedCursorIndex + 1;\n        const looserSortedCursorIndex = current.index < next.index ? sortedCursorIndex + 1 : sortedCursorIndex;\n        const looserIndex = sortedCursors[looserSortedCursorIndex].index;\n        const winnerIndex = sortedCursors[winnerSortedCursorIndex].index;\n        const looserSelection = sortedCursors[looserSortedCursorIndex].selection;\n        const winnerSelection = sortedCursors[winnerSortedCursorIndex].selection;\n\n        if (!looserSelection.equalsSelection(winnerSelection)) {\n          const resultingRange = looserSelection.plusRange(winnerSelection);\n          const looserSelectionIsLTR = looserSelection.selectionStartLineNumber === looserSelection.startLineNumber && looserSelection.selectionStartColumn === looserSelection.startColumn;\n          const winnerSelectionIsLTR = winnerSelection.selectionStartLineNumber === winnerSelection.startLineNumber && winnerSelection.selectionStartColumn === winnerSelection.startColumn; // Give more importance to the last added cursor (think Ctrl-dragging + hitting another cursor)\n\n          let resultingSelectionIsLTR;\n\n          if (looserIndex === this.lastAddedCursorIndex) {\n            resultingSelectionIsLTR = looserSelectionIsLTR;\n            this.lastAddedCursorIndex = winnerIndex;\n          } else {\n            // Winner takes it all\n            resultingSelectionIsLTR = winnerSelectionIsLTR;\n          }\n\n          let resultingSelection;\n\n          if (resultingSelectionIsLTR) {\n            resultingSelection = new Selection(resultingRange.startLineNumber, resultingRange.startColumn, resultingRange.endLineNumber, resultingRange.endColumn);\n          } else {\n            resultingSelection = new Selection(resultingRange.endLineNumber, resultingRange.endColumn, resultingRange.startLineNumber, resultingRange.startColumn);\n          }\n\n          sortedCursors[winnerSortedCursorIndex].selection = resultingSelection;\n          const resultingState = CursorState.fromModelSelection(resultingSelection);\n          cursors[winnerIndex].setState(this.context, resultingState.modelState, resultingState.viewState);\n        }\n\n        for (const sortedCursor of sortedCursors) {\n          if (sortedCursor.index > looserIndex) {\n            sortedCursor.index--;\n          }\n        }\n\n        cursors.splice(looserIndex, 1);\n        sortedCursors.splice(looserSortedCursorIndex, 1);\n\n        this._removeSecondaryCursor(looserIndex - 1);\n\n        sortedCursorIndex--;\n      }\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/umut/Documents/cs/cs410/Project2Group14/node_modules/monaco-editor/esm/vs/editor/common/controller/cursorCollection.js"],"names":["CursorState","Cursor","Selection","CursorCollection","constructor","context","primaryCursor","secondaryCursors","lastAddedCursorIndex","dispose","killSecondaryCursors","startTrackingSelections","startTrackingSelection","i","len","length","stopTrackingSelections","stopTrackingSelection","updateContext","ensureValidState","readSelectionFromMarkers","result","getAll","asCursorState","getViewPositions","viewState","position","getTopMostViewPosition","viewPosition","isBefore","getBottomMostViewPosition","isBeforeOrEqual","getSelections","modelState","selection","getViewSelections","setSelections","selections","setStates","fromModelSelections","getPrimaryCursor","states","setState","_setSecondaryStates","slice","secondaryStates","secondaryCursorsLength","secondaryStatesLength","createCnt","_addSecondaryCursor","removeCnt","_removeSecondaryCursor","push","getLastAddedCursorIndex","removeIndex","splice","_getAll","normalize","cursors","sortedCursors","index","sort","a","b","startLineNumber","startColumn","sortedCursorIndex","current","next","currentSelection","nextSelection","cursorConfig","multiCursorMergeOverlapping","shouldMergeCursors","isEmpty","getStartPosition","getEndPosition","winnerSortedCursorIndex","looserSortedCursorIndex","looserIndex","winnerIndex","looserSelection","winnerSelection","equalsSelection","resultingRange","plusRange","looserSelectionIsLTR","selectionStartLineNumber","selectionStartColumn","winnerSelectionIsLTR","resultingSelectionIsLTR","resultingSelection","endLineNumber","endColumn","resultingState","fromModelSelection","sortedCursor"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CursorState } from './cursorCommon.js';\nimport { Cursor } from './oneCursor.js';\nimport { Selection } from '../core/selection.js';\nexport class CursorCollection {\n    constructor(context) {\n        this.context = context;\n        this.primaryCursor = new Cursor(context);\n        this.secondaryCursors = [];\n        this.lastAddedCursorIndex = 0;\n    }\n    dispose() {\n        this.primaryCursor.dispose(this.context);\n        this.killSecondaryCursors();\n    }\n    startTrackingSelections() {\n        this.primaryCursor.startTrackingSelection(this.context);\n        for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n            this.secondaryCursors[i].startTrackingSelection(this.context);\n        }\n    }\n    stopTrackingSelections() {\n        this.primaryCursor.stopTrackingSelection(this.context);\n        for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n            this.secondaryCursors[i].stopTrackingSelection(this.context);\n        }\n    }\n    updateContext(context) {\n        this.context = context;\n    }\n    ensureValidState() {\n        this.primaryCursor.ensureValidState(this.context);\n        for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n            this.secondaryCursors[i].ensureValidState(this.context);\n        }\n    }\n    readSelectionFromMarkers() {\n        let result = [];\n        result[0] = this.primaryCursor.readSelectionFromMarkers(this.context);\n        for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n            result[i + 1] = this.secondaryCursors[i].readSelectionFromMarkers(this.context);\n        }\n        return result;\n    }\n    getAll() {\n        let result = [];\n        result[0] = this.primaryCursor.asCursorState();\n        for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n            result[i + 1] = this.secondaryCursors[i].asCursorState();\n        }\n        return result;\n    }\n    getViewPositions() {\n        let result = [];\n        result[0] = this.primaryCursor.viewState.position;\n        for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n            result[i + 1] = this.secondaryCursors[i].viewState.position;\n        }\n        return result;\n    }\n    getTopMostViewPosition() {\n        let result = this.primaryCursor.viewState.position;\n        for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n            const viewPosition = this.secondaryCursors[i].viewState.position;\n            if (viewPosition.isBefore(result)) {\n                result = viewPosition;\n            }\n        }\n        return result;\n    }\n    getBottomMostViewPosition() {\n        let result = this.primaryCursor.viewState.position;\n        for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n            const viewPosition = this.secondaryCursors[i].viewState.position;\n            if (result.isBeforeOrEqual(viewPosition)) {\n                result = viewPosition;\n            }\n        }\n        return result;\n    }\n    getSelections() {\n        let result = [];\n        result[0] = this.primaryCursor.modelState.selection;\n        for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n            result[i + 1] = this.secondaryCursors[i].modelState.selection;\n        }\n        return result;\n    }\n    getViewSelections() {\n        let result = [];\n        result[0] = this.primaryCursor.viewState.selection;\n        for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n            result[i + 1] = this.secondaryCursors[i].viewState.selection;\n        }\n        return result;\n    }\n    setSelections(selections) {\n        this.setStates(CursorState.fromModelSelections(selections));\n    }\n    getPrimaryCursor() {\n        return this.primaryCursor.asCursorState();\n    }\n    setStates(states) {\n        if (states === null) {\n            return;\n        }\n        this.primaryCursor.setState(this.context, states[0].modelState, states[0].viewState);\n        this._setSecondaryStates(states.slice(1));\n    }\n    /**\n     * Creates or disposes secondary cursors as necessary to match the number of `secondarySelections`.\n     */\n    _setSecondaryStates(secondaryStates) {\n        const secondaryCursorsLength = this.secondaryCursors.length;\n        const secondaryStatesLength = secondaryStates.length;\n        if (secondaryCursorsLength < secondaryStatesLength) {\n            let createCnt = secondaryStatesLength - secondaryCursorsLength;\n            for (let i = 0; i < createCnt; i++) {\n                this._addSecondaryCursor();\n            }\n        }\n        else if (secondaryCursorsLength > secondaryStatesLength) {\n            let removeCnt = secondaryCursorsLength - secondaryStatesLength;\n            for (let i = 0; i < removeCnt; i++) {\n                this._removeSecondaryCursor(this.secondaryCursors.length - 1);\n            }\n        }\n        for (let i = 0; i < secondaryStatesLength; i++) {\n            this.secondaryCursors[i].setState(this.context, secondaryStates[i].modelState, secondaryStates[i].viewState);\n        }\n    }\n    killSecondaryCursors() {\n        this._setSecondaryStates([]);\n    }\n    _addSecondaryCursor() {\n        this.secondaryCursors.push(new Cursor(this.context));\n        this.lastAddedCursorIndex = this.secondaryCursors.length;\n    }\n    getLastAddedCursorIndex() {\n        if (this.secondaryCursors.length === 0 || this.lastAddedCursorIndex === 0) {\n            return 0;\n        }\n        return this.lastAddedCursorIndex;\n    }\n    _removeSecondaryCursor(removeIndex) {\n        if (this.lastAddedCursorIndex >= removeIndex + 1) {\n            this.lastAddedCursorIndex--;\n        }\n        this.secondaryCursors[removeIndex].dispose(this.context);\n        this.secondaryCursors.splice(removeIndex, 1);\n    }\n    _getAll() {\n        let result = [];\n        result[0] = this.primaryCursor;\n        for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n            result[i + 1] = this.secondaryCursors[i];\n        }\n        return result;\n    }\n    normalize() {\n        if (this.secondaryCursors.length === 0) {\n            return;\n        }\n        let cursors = this._getAll();\n        let sortedCursors = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            sortedCursors.push({\n                index: i,\n                selection: cursors[i].modelState.selection,\n            });\n        }\n        sortedCursors.sort((a, b) => {\n            if (a.selection.startLineNumber === b.selection.startLineNumber) {\n                return a.selection.startColumn - b.selection.startColumn;\n            }\n            return a.selection.startLineNumber - b.selection.startLineNumber;\n        });\n        for (let sortedCursorIndex = 0; sortedCursorIndex < sortedCursors.length - 1; sortedCursorIndex++) {\n            const current = sortedCursors[sortedCursorIndex];\n            const next = sortedCursors[sortedCursorIndex + 1];\n            const currentSelection = current.selection;\n            const nextSelection = next.selection;\n            if (!this.context.cursorConfig.multiCursorMergeOverlapping) {\n                continue;\n            }\n            let shouldMergeCursors;\n            if (nextSelection.isEmpty() || currentSelection.isEmpty()) {\n                // Merge touching cursors if one of them is collapsed\n                shouldMergeCursors = nextSelection.getStartPosition().isBeforeOrEqual(currentSelection.getEndPosition());\n            }\n            else {\n                // Merge only overlapping cursors (i.e. allow touching ranges)\n                shouldMergeCursors = nextSelection.getStartPosition().isBefore(currentSelection.getEndPosition());\n            }\n            if (shouldMergeCursors) {\n                const winnerSortedCursorIndex = current.index < next.index ? sortedCursorIndex : sortedCursorIndex + 1;\n                const looserSortedCursorIndex = current.index < next.index ? sortedCursorIndex + 1 : sortedCursorIndex;\n                const looserIndex = sortedCursors[looserSortedCursorIndex].index;\n                const winnerIndex = sortedCursors[winnerSortedCursorIndex].index;\n                const looserSelection = sortedCursors[looserSortedCursorIndex].selection;\n                const winnerSelection = sortedCursors[winnerSortedCursorIndex].selection;\n                if (!looserSelection.equalsSelection(winnerSelection)) {\n                    const resultingRange = looserSelection.plusRange(winnerSelection);\n                    const looserSelectionIsLTR = (looserSelection.selectionStartLineNumber === looserSelection.startLineNumber && looserSelection.selectionStartColumn === looserSelection.startColumn);\n                    const winnerSelectionIsLTR = (winnerSelection.selectionStartLineNumber === winnerSelection.startLineNumber && winnerSelection.selectionStartColumn === winnerSelection.startColumn);\n                    // Give more importance to the last added cursor (think Ctrl-dragging + hitting another cursor)\n                    let resultingSelectionIsLTR;\n                    if (looserIndex === this.lastAddedCursorIndex) {\n                        resultingSelectionIsLTR = looserSelectionIsLTR;\n                        this.lastAddedCursorIndex = winnerIndex;\n                    }\n                    else {\n                        // Winner takes it all\n                        resultingSelectionIsLTR = winnerSelectionIsLTR;\n                    }\n                    let resultingSelection;\n                    if (resultingSelectionIsLTR) {\n                        resultingSelection = new Selection(resultingRange.startLineNumber, resultingRange.startColumn, resultingRange.endLineNumber, resultingRange.endColumn);\n                    }\n                    else {\n                        resultingSelection = new Selection(resultingRange.endLineNumber, resultingRange.endColumn, resultingRange.startLineNumber, resultingRange.startColumn);\n                    }\n                    sortedCursors[winnerSortedCursorIndex].selection = resultingSelection;\n                    const resultingState = CursorState.fromModelSelection(resultingSelection);\n                    cursors[winnerIndex].setState(this.context, resultingState.modelState, resultingState.viewState);\n                }\n                for (const sortedCursor of sortedCursors) {\n                    if (sortedCursor.index > looserIndex) {\n                        sortedCursor.index--;\n                    }\n                }\n                cursors.splice(looserIndex, 1);\n                sortedCursors.splice(looserSortedCursorIndex, 1);\n                this._removeSecondaryCursor(looserIndex - 1);\n                sortedCursorIndex--;\n            }\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}