{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { PageCoordinates } from '../editorDom.js';\nimport { PartFingerprints } from '../view/viewPart.js';\nimport { ViewLine } from '../viewParts/lines/viewLine.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range as EditorRange } from '../../common/core/range.js';\nimport { CursorColumns } from '../../common/controller/cursorCommon.js';\nimport * as dom from '../../../base/browser/dom.js';\nimport { AtomicTabMoveOperations } from '../../common/controller/cursorAtomicMoveOperations.js';\n\nclass UnknownHitTestResult {\n  constructor() {\n    let hitTarget = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    this.hitTarget = hitTarget;\n    this.type = 0\n    /* Unknown */\n    ;\n  }\n\n}\n\nclass ContentHitTestResult {\n  constructor(position, spanNode, injectedText) {\n    this.position = position;\n    this.spanNode = spanNode;\n    this.injectedText = injectedText;\n    this.type = 1\n    /* Content */\n    ;\n  }\n\n}\n\nvar HitTestResult;\n\n(function (HitTestResult) {\n  function createFromDOMInfo(ctx, spanNode, offset) {\n    const position = ctx.getPositionFromDOMInfo(spanNode, offset);\n\n    if (position) {\n      return new ContentHitTestResult(position, spanNode, null);\n    }\n\n    return new UnknownHitTestResult(spanNode);\n  }\n\n  HitTestResult.createFromDOMInfo = createFromDOMInfo;\n})(HitTestResult || (HitTestResult = {}));\n\nexport class PointerHandlerLastRenderData {\n  constructor(lastViewCursorsRenderData, lastTextareaPosition) {\n    this.lastViewCursorsRenderData = lastViewCursorsRenderData;\n    this.lastTextareaPosition = lastTextareaPosition;\n  }\n\n}\nexport class MouseTarget {\n  constructor(element, type) {\n    let mouseColumn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let position = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    let range = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    let detail = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n    this.element = element;\n    this.type = type;\n    this.mouseColumn = mouseColumn;\n    this.position = position;\n\n    if (!range && position) {\n      range = new EditorRange(position.lineNumber, position.column, position.lineNumber, position.column);\n    }\n\n    this.range = range;\n    this.detail = detail;\n  }\n\n  static _typeToString(type) {\n    if (type === 1\n    /* TEXTAREA */\n    ) {\n      return 'TEXTAREA';\n    }\n\n    if (type === 2\n    /* GUTTER_GLYPH_MARGIN */\n    ) {\n      return 'GUTTER_GLYPH_MARGIN';\n    }\n\n    if (type === 3\n    /* GUTTER_LINE_NUMBERS */\n    ) {\n      return 'GUTTER_LINE_NUMBERS';\n    }\n\n    if (type === 4\n    /* GUTTER_LINE_DECORATIONS */\n    ) {\n      return 'GUTTER_LINE_DECORATIONS';\n    }\n\n    if (type === 5\n    /* GUTTER_VIEW_ZONE */\n    ) {\n      return 'GUTTER_VIEW_ZONE';\n    }\n\n    if (type === 6\n    /* CONTENT_TEXT */\n    ) {\n      return 'CONTENT_TEXT';\n    }\n\n    if (type === 7\n    /* CONTENT_EMPTY */\n    ) {\n      return 'CONTENT_EMPTY';\n    }\n\n    if (type === 8\n    /* CONTENT_VIEW_ZONE */\n    ) {\n      return 'CONTENT_VIEW_ZONE';\n    }\n\n    if (type === 9\n    /* CONTENT_WIDGET */\n    ) {\n      return 'CONTENT_WIDGET';\n    }\n\n    if (type === 10\n    /* OVERVIEW_RULER */\n    ) {\n      return 'OVERVIEW_RULER';\n    }\n\n    if (type === 11\n    /* SCROLLBAR */\n    ) {\n      return 'SCROLLBAR';\n    }\n\n    if (type === 12\n    /* OVERLAY_WIDGET */\n    ) {\n      return 'OVERLAY_WIDGET';\n    }\n\n    return 'UNKNOWN';\n  }\n\n  static toString(target) {\n    return this._typeToString(target.type) + ': ' + target.position + ' - ' + target.range + ' - ' + target.detail;\n  }\n\n  toString() {\n    return MouseTarget.toString(this);\n  }\n\n}\n\nclass ElementPath {\n  static isTextArea(path) {\n    return path.length === 2 && path[0] === 3\n    /* OverflowGuard */\n    && path[1] === 6\n    /* TextArea */\n    ;\n  }\n\n  static isChildOfViewLines(path) {\n    return path.length >= 4 && path[0] === 3\n    /* OverflowGuard */\n    && path[3] === 7\n    /* ViewLines */\n    ;\n  }\n\n  static isStrictChildOfViewLines(path) {\n    return path.length > 4 && path[0] === 3\n    /* OverflowGuard */\n    && path[3] === 7\n    /* ViewLines */\n    ;\n  }\n\n  static isChildOfScrollableElement(path) {\n    return path.length >= 2 && path[0] === 3\n    /* OverflowGuard */\n    && path[1] === 5\n    /* ScrollableElement */\n    ;\n  }\n\n  static isChildOfMinimap(path) {\n    return path.length >= 2 && path[0] === 3\n    /* OverflowGuard */\n    && path[1] === 8\n    /* Minimap */\n    ;\n  }\n\n  static isChildOfContentWidgets(path) {\n    return path.length >= 4 && path[0] === 3\n    /* OverflowGuard */\n    && path[3] === 1\n    /* ContentWidgets */\n    ;\n  }\n\n  static isChildOfOverflowingContentWidgets(path) {\n    return path.length >= 1 && path[0] === 2\n    /* OverflowingContentWidgets */\n    ;\n  }\n\n  static isChildOfOverlayWidgets(path) {\n    return path.length >= 2 && path[0] === 3\n    /* OverflowGuard */\n    && path[1] === 4\n    /* OverlayWidgets */\n    ;\n  }\n\n}\n\nexport class HitTestContext {\n  constructor(context, viewHelper, lastRenderData) {\n    this.model = context.model;\n    const options = context.configuration.options;\n    this.layoutInfo = options.get(129\n    /* layoutInfo */\n    );\n    this.viewDomNode = viewHelper.viewDomNode;\n    this.lineHeight = options.get(58\n    /* lineHeight */\n    );\n    this.stickyTabStops = options.get(103\n    /* stickyTabStops */\n    );\n    this.typicalHalfwidthCharacterWidth = options.get(43\n    /* fontInfo */\n    ).typicalHalfwidthCharacterWidth;\n    this.lastRenderData = lastRenderData;\n    this._context = context;\n    this._viewHelper = viewHelper;\n  }\n\n  getZoneAtCoord(mouseVerticalOffset) {\n    return HitTestContext.getZoneAtCoord(this._context, mouseVerticalOffset);\n  }\n\n  static getZoneAtCoord(context, mouseVerticalOffset) {\n    // The target is either a view zone or the empty space after the last view-line\n    const viewZoneWhitespace = context.viewLayout.getWhitespaceAtVerticalOffset(mouseVerticalOffset);\n\n    if (viewZoneWhitespace) {\n      const viewZoneMiddle = viewZoneWhitespace.verticalOffset + viewZoneWhitespace.height / 2;\n      const lineCount = context.model.getLineCount();\n      let positionBefore = null;\n      let position;\n      let positionAfter = null;\n\n      if (viewZoneWhitespace.afterLineNumber !== lineCount) {\n        // There are more lines after this view zone\n        positionAfter = new Position(viewZoneWhitespace.afterLineNumber + 1, 1);\n      }\n\n      if (viewZoneWhitespace.afterLineNumber > 0) {\n        // There are more lines above this view zone\n        positionBefore = new Position(viewZoneWhitespace.afterLineNumber, context.model.getLineMaxColumn(viewZoneWhitespace.afterLineNumber));\n      }\n\n      if (positionAfter === null) {\n        position = positionBefore;\n      } else if (positionBefore === null) {\n        position = positionAfter;\n      } else if (mouseVerticalOffset < viewZoneMiddle) {\n        position = positionBefore;\n      } else {\n        position = positionAfter;\n      }\n\n      return {\n        viewZoneId: viewZoneWhitespace.id,\n        afterLineNumber: viewZoneWhitespace.afterLineNumber,\n        positionBefore: positionBefore,\n        positionAfter: positionAfter,\n        position: position\n      };\n    }\n\n    return null;\n  }\n\n  getFullLineRangeAtCoord(mouseVerticalOffset) {\n    if (this._context.viewLayout.isAfterLines(mouseVerticalOffset)) {\n      // Below the last line\n      const lineNumber = this._context.model.getLineCount();\n\n      const maxLineColumn = this._context.model.getLineMaxColumn(lineNumber);\n\n      return {\n        range: new EditorRange(lineNumber, maxLineColumn, lineNumber, maxLineColumn),\n        isAfterLines: true\n      };\n    }\n\n    const lineNumber = this._context.viewLayout.getLineNumberAtVerticalOffset(mouseVerticalOffset);\n\n    const maxLineColumn = this._context.model.getLineMaxColumn(lineNumber);\n\n    return {\n      range: new EditorRange(lineNumber, 1, lineNumber, maxLineColumn),\n      isAfterLines: false\n    };\n  }\n\n  getLineNumberAtVerticalOffset(mouseVerticalOffset) {\n    return this._context.viewLayout.getLineNumberAtVerticalOffset(mouseVerticalOffset);\n  }\n\n  isAfterLines(mouseVerticalOffset) {\n    return this._context.viewLayout.isAfterLines(mouseVerticalOffset);\n  }\n\n  isInTopPadding(mouseVerticalOffset) {\n    return this._context.viewLayout.isInTopPadding(mouseVerticalOffset);\n  }\n\n  isInBottomPadding(mouseVerticalOffset) {\n    return this._context.viewLayout.isInBottomPadding(mouseVerticalOffset);\n  }\n\n  getVerticalOffsetForLineNumber(lineNumber) {\n    return this._context.viewLayout.getVerticalOffsetForLineNumber(lineNumber);\n  }\n\n  findAttribute(element, attr) {\n    return HitTestContext._findAttribute(element, attr, this._viewHelper.viewDomNode);\n  }\n\n  static _findAttribute(element, attr, stopAt) {\n    while (element && element !== document.body) {\n      if (element.hasAttribute && element.hasAttribute(attr)) {\n        return element.getAttribute(attr);\n      }\n\n      if (element === stopAt) {\n        return null;\n      }\n\n      element = element.parentNode;\n    }\n\n    return null;\n  }\n\n  getLineWidth(lineNumber) {\n    return this._viewHelper.getLineWidth(lineNumber);\n  }\n\n  visibleRangeForPosition(lineNumber, column) {\n    return this._viewHelper.visibleRangeForPosition(lineNumber, column);\n  }\n\n  getPositionFromDOMInfo(spanNode, offset) {\n    return this._viewHelper.getPositionFromDOMInfo(spanNode, offset);\n  }\n\n  getCurrentScrollTop() {\n    return this._context.viewLayout.getCurrentScrollTop();\n  }\n\n  getCurrentScrollLeft() {\n    return this._context.viewLayout.getCurrentScrollLeft();\n  }\n\n}\n\nclass BareHitTestRequest {\n  constructor(ctx, editorPos, pos) {\n    this.editorPos = editorPos;\n    this.pos = pos;\n    this.mouseVerticalOffset = Math.max(0, ctx.getCurrentScrollTop() + pos.y - editorPos.y);\n    this.mouseContentHorizontalOffset = ctx.getCurrentScrollLeft() + pos.x - editorPos.x - ctx.layoutInfo.contentLeft;\n    this.isInMarginArea = pos.x - editorPos.x < ctx.layoutInfo.contentLeft && pos.x - editorPos.x >= ctx.layoutInfo.glyphMarginLeft;\n    this.isInContentArea = !this.isInMarginArea;\n    this.mouseColumn = Math.max(0, MouseTargetFactory._getMouseColumn(this.mouseContentHorizontalOffset, ctx.typicalHalfwidthCharacterWidth));\n  }\n\n}\n\nclass HitTestRequest extends BareHitTestRequest {\n  constructor(ctx, editorPos, pos, target) {\n    super(ctx, editorPos, pos);\n    this._ctx = ctx;\n\n    if (target) {\n      this.target = target;\n      this.targetPath = PartFingerprints.collect(target, ctx.viewDomNode);\n    } else {\n      this.target = null;\n      this.targetPath = new Uint8Array(0);\n    }\n  }\n\n  toString() {\n    return `pos(${this.pos.x},${this.pos.y}), editorPos(${this.editorPos.x},${this.editorPos.y}), mouseVerticalOffset: ${this.mouseVerticalOffset}, mouseContentHorizontalOffset: ${this.mouseContentHorizontalOffset}\\n\\ttarget: ${this.target ? this.target.outerHTML : null}`;\n  } // public fulfill(type: MouseTargetType.OVERVIEW_RULER, position?: Position | null, range?: EditorRange | null, detail?: any): MouseTarget;\n  // public fulfill(type: MouseTargetType.OUTSIDE_EDITOR, position?: Position | null, range?: EditorRange | null, detail?: any): MouseTarget;\n\n\n  fulfill(type) {\n    let position = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let range = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let detail = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    let mouseColumn = this.mouseColumn;\n\n    if (position && position.column < this._ctx.model.getLineMaxColumn(position.lineNumber)) {\n      // Most likely, the line contains foreign decorations...\n      mouseColumn = CursorColumns.visibleColumnFromColumn(this._ctx.model.getLineContent(position.lineNumber), position.column, this._ctx.model.getTextModelOptions().tabSize) + 1;\n    }\n\n    return new MouseTarget(this.target, type, mouseColumn, position, range, detail);\n  }\n\n  withTarget(target) {\n    return new HitTestRequest(this._ctx, this.editorPos, this.pos, target);\n  }\n\n}\n\nconst EMPTY_CONTENT_AFTER_LINES = {\n  isAfterLines: true\n};\n\nfunction createEmptyContentDataInLines(horizontalDistanceToText) {\n  return {\n    isAfterLines: false,\n    horizontalDistanceToText: horizontalDistanceToText\n  };\n}\n\nexport class MouseTargetFactory {\n  constructor(context, viewHelper) {\n    this._context = context;\n    this._viewHelper = viewHelper;\n  }\n\n  mouseTargetIsWidget(e) {\n    const t = e.target;\n    const path = PartFingerprints.collect(t, this._viewHelper.viewDomNode); // Is it a content widget?\n\n    if (ElementPath.isChildOfContentWidgets(path) || ElementPath.isChildOfOverflowingContentWidgets(path)) {\n      return true;\n    } // Is it an overlay widget?\n\n\n    if (ElementPath.isChildOfOverlayWidgets(path)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  createMouseTarget(lastRenderData, editorPos, pos, target) {\n    const ctx = new HitTestContext(this._context, this._viewHelper, lastRenderData);\n    const request = new HitTestRequest(ctx, editorPos, pos, target);\n\n    try {\n      const r = MouseTargetFactory._createMouseTarget(ctx, request, false); // console.log(r.toString());\n\n\n      return r;\n    } catch (err) {\n      // console.log(err);\n      return request.fulfill(0\n      /* UNKNOWN */\n      );\n    }\n  }\n\n  static _createMouseTarget(ctx, request, domHitTestExecuted) {\n    // console.log(`${domHitTestExecuted ? '=>' : ''}CAME IN REQUEST: ${request}`);\n    // First ensure the request has a target\n    if (request.target === null) {\n      if (domHitTestExecuted) {\n        // Still no target... and we have already executed hit test...\n        return request.fulfill(0\n        /* UNKNOWN */\n        );\n      }\n\n      const hitTestResult = MouseTargetFactory._doHitTest(ctx, request);\n\n      if (hitTestResult.type === 1\n      /* Content */\n      ) {\n        return MouseTargetFactory.createMouseTargetFromHitTestPosition(ctx, request, hitTestResult.spanNode, hitTestResult.position, hitTestResult.injectedText);\n      }\n\n      return this._createMouseTarget(ctx, request.withTarget(hitTestResult.hitTarget), true);\n    } // we know for a fact that request.target is not null\n\n\n    const resolvedRequest = request;\n    let result = null;\n    result = result || MouseTargetFactory._hitTestContentWidget(ctx, resolvedRequest);\n    result = result || MouseTargetFactory._hitTestOverlayWidget(ctx, resolvedRequest);\n    result = result || MouseTargetFactory._hitTestMinimap(ctx, resolvedRequest);\n    result = result || MouseTargetFactory._hitTestScrollbarSlider(ctx, resolvedRequest);\n    result = result || MouseTargetFactory._hitTestViewZone(ctx, resolvedRequest);\n    result = result || MouseTargetFactory._hitTestMargin(ctx, resolvedRequest);\n    result = result || MouseTargetFactory._hitTestViewCursor(ctx, resolvedRequest);\n    result = result || MouseTargetFactory._hitTestTextArea(ctx, resolvedRequest);\n    result = result || MouseTargetFactory._hitTestViewLines(ctx, resolvedRequest, domHitTestExecuted);\n    result = result || MouseTargetFactory._hitTestScrollbar(ctx, resolvedRequest);\n    return result || request.fulfill(0\n    /* UNKNOWN */\n    );\n  }\n\n  static _hitTestContentWidget(ctx, request) {\n    // Is it a content widget?\n    if (ElementPath.isChildOfContentWidgets(request.targetPath) || ElementPath.isChildOfOverflowingContentWidgets(request.targetPath)) {\n      const widgetId = ctx.findAttribute(request.target, 'widgetId');\n\n      if (widgetId) {\n        return request.fulfill(9\n        /* CONTENT_WIDGET */\n        , null, null, widgetId);\n      } else {\n        return request.fulfill(0\n        /* UNKNOWN */\n        );\n      }\n    }\n\n    return null;\n  }\n\n  static _hitTestOverlayWidget(ctx, request) {\n    // Is it an overlay widget?\n    if (ElementPath.isChildOfOverlayWidgets(request.targetPath)) {\n      const widgetId = ctx.findAttribute(request.target, 'widgetId');\n\n      if (widgetId) {\n        return request.fulfill(12\n        /* OVERLAY_WIDGET */\n        , null, null, widgetId);\n      } else {\n        return request.fulfill(0\n        /* UNKNOWN */\n        );\n      }\n    }\n\n    return null;\n  }\n\n  static _hitTestViewCursor(ctx, request) {\n    if (request.target) {\n      // Check if we've hit a painted cursor\n      const lastViewCursorsRenderData = ctx.lastRenderData.lastViewCursorsRenderData;\n\n      for (const d of lastViewCursorsRenderData) {\n        if (request.target === d.domNode) {\n          return request.fulfill(6\n          /* CONTENT_TEXT */\n          , d.position, null, {\n            mightBeForeignElement: false\n          });\n        }\n      }\n    }\n\n    if (request.isInContentArea) {\n      // Edge has a bug when hit-testing the exact position of a cursor,\n      // instead of returning the correct dom node, it returns the\n      // first or last rendered view line dom node, therefore help it out\n      // and first check if we are on top of a cursor\n      const lastViewCursorsRenderData = ctx.lastRenderData.lastViewCursorsRenderData;\n      const mouseContentHorizontalOffset = request.mouseContentHorizontalOffset;\n      const mouseVerticalOffset = request.mouseVerticalOffset;\n\n      for (const d of lastViewCursorsRenderData) {\n        if (mouseContentHorizontalOffset < d.contentLeft) {\n          // mouse position is to the left of the cursor\n          continue;\n        }\n\n        if (mouseContentHorizontalOffset > d.contentLeft + d.width) {\n          // mouse position is to the right of the cursor\n          continue;\n        }\n\n        const cursorVerticalOffset = ctx.getVerticalOffsetForLineNumber(d.position.lineNumber);\n\n        if (cursorVerticalOffset <= mouseVerticalOffset && mouseVerticalOffset <= cursorVerticalOffset + d.height) {\n          return request.fulfill(6\n          /* CONTENT_TEXT */\n          , d.position, null, {\n            mightBeForeignElement: false\n          });\n        }\n      }\n    }\n\n    return null;\n  }\n\n  static _hitTestViewZone(ctx, request) {\n    const viewZoneData = ctx.getZoneAtCoord(request.mouseVerticalOffset);\n\n    if (viewZoneData) {\n      const mouseTargetType = request.isInContentArea ? 8\n      /* CONTENT_VIEW_ZONE */\n      : 5\n      /* GUTTER_VIEW_ZONE */\n      ;\n      return request.fulfill(mouseTargetType, viewZoneData.position, null, viewZoneData);\n    }\n\n    return null;\n  }\n\n  static _hitTestTextArea(ctx, request) {\n    // Is it the textarea?\n    if (ElementPath.isTextArea(request.targetPath)) {\n      if (ctx.lastRenderData.lastTextareaPosition) {\n        return request.fulfill(6\n        /* CONTENT_TEXT */\n        , ctx.lastRenderData.lastTextareaPosition, null, {\n          mightBeForeignElement: false\n        });\n      }\n\n      return request.fulfill(1\n      /* TEXTAREA */\n      , ctx.lastRenderData.lastTextareaPosition);\n    }\n\n    return null;\n  }\n\n  static _hitTestMargin(ctx, request) {\n    if (request.isInMarginArea) {\n      const res = ctx.getFullLineRangeAtCoord(request.mouseVerticalOffset);\n      const pos = res.range.getStartPosition();\n      let offset = Math.abs(request.pos.x - request.editorPos.x);\n      const detail = {\n        isAfterLines: res.isAfterLines,\n        glyphMarginLeft: ctx.layoutInfo.glyphMarginLeft,\n        glyphMarginWidth: ctx.layoutInfo.glyphMarginWidth,\n        lineNumbersWidth: ctx.layoutInfo.lineNumbersWidth,\n        offsetX: offset\n      };\n      offset -= ctx.layoutInfo.glyphMarginLeft;\n\n      if (offset <= ctx.layoutInfo.glyphMarginWidth) {\n        // On the glyph margin\n        return request.fulfill(2\n        /* GUTTER_GLYPH_MARGIN */\n        , pos, res.range, detail);\n      }\n\n      offset -= ctx.layoutInfo.glyphMarginWidth;\n\n      if (offset <= ctx.layoutInfo.lineNumbersWidth) {\n        // On the line numbers\n        return request.fulfill(3\n        /* GUTTER_LINE_NUMBERS */\n        , pos, res.range, detail);\n      }\n\n      offset -= ctx.layoutInfo.lineNumbersWidth; // On the line decorations\n\n      return request.fulfill(4\n      /* GUTTER_LINE_DECORATIONS */\n      , pos, res.range, detail);\n    }\n\n    return null;\n  }\n\n  static _hitTestViewLines(ctx, request, domHitTestExecuted) {\n    if (!ElementPath.isChildOfViewLines(request.targetPath)) {\n      return null;\n    }\n\n    if (ctx.isInTopPadding(request.mouseVerticalOffset)) {\n      return request.fulfill(7\n      /* CONTENT_EMPTY */\n      , new Position(1, 1), null, EMPTY_CONTENT_AFTER_LINES);\n    } // Check if it is below any lines and any view zones\n\n\n    if (ctx.isAfterLines(request.mouseVerticalOffset) || ctx.isInBottomPadding(request.mouseVerticalOffset)) {\n      // This most likely indicates it happened after the last view-line\n      const lineCount = ctx.model.getLineCount();\n      const maxLineColumn = ctx.model.getLineMaxColumn(lineCount);\n      return request.fulfill(7\n      /* CONTENT_EMPTY */\n      , new Position(lineCount, maxLineColumn), null, EMPTY_CONTENT_AFTER_LINES);\n    }\n\n    if (domHitTestExecuted) {\n      // Check if we are hitting a view-line (can happen in the case of inline decorations on empty lines)\n      // See https://github.com/microsoft/vscode/issues/46942\n      if (ElementPath.isStrictChildOfViewLines(request.targetPath)) {\n        const lineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n\n        if (ctx.model.getLineLength(lineNumber) === 0) {\n          const lineWidth = ctx.getLineWidth(lineNumber);\n          const detail = createEmptyContentDataInLines(request.mouseContentHorizontalOffset - lineWidth);\n          return request.fulfill(7\n          /* CONTENT_EMPTY */\n          , new Position(lineNumber, 1), null, detail);\n        }\n\n        const lineWidth = ctx.getLineWidth(lineNumber);\n\n        if (request.mouseContentHorizontalOffset >= lineWidth) {\n          const detail = createEmptyContentDataInLines(request.mouseContentHorizontalOffset - lineWidth);\n          const pos = new Position(lineNumber, ctx.model.getLineMaxColumn(lineNumber));\n          return request.fulfill(7\n          /* CONTENT_EMPTY */\n          , pos, null, detail);\n        }\n      } // We have already executed hit test...\n\n\n      return request.fulfill(0\n      /* UNKNOWN */\n      );\n    }\n\n    const hitTestResult = MouseTargetFactory._doHitTest(ctx, request);\n\n    if (hitTestResult.type === 1\n    /* Content */\n    ) {\n      return MouseTargetFactory.createMouseTargetFromHitTestPosition(ctx, request, hitTestResult.spanNode, hitTestResult.position, hitTestResult.injectedText);\n    }\n\n    return this._createMouseTarget(ctx, request.withTarget(hitTestResult.hitTarget), true);\n  }\n\n  static _hitTestMinimap(ctx, request) {\n    if (ElementPath.isChildOfMinimap(request.targetPath)) {\n      const possibleLineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n      const maxColumn = ctx.model.getLineMaxColumn(possibleLineNumber);\n      return request.fulfill(11\n      /* SCROLLBAR */\n      , new Position(possibleLineNumber, maxColumn));\n    }\n\n    return null;\n  }\n\n  static _hitTestScrollbarSlider(ctx, request) {\n    if (ElementPath.isChildOfScrollableElement(request.targetPath)) {\n      if (request.target && request.target.nodeType === 1) {\n        const className = request.target.className;\n\n        if (className && /\\b(slider|scrollbar)\\b/.test(className)) {\n          const possibleLineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n          const maxColumn = ctx.model.getLineMaxColumn(possibleLineNumber);\n          return request.fulfill(11\n          /* SCROLLBAR */\n          , new Position(possibleLineNumber, maxColumn));\n        }\n      }\n    }\n\n    return null;\n  }\n\n  static _hitTestScrollbar(ctx, request) {\n    // Is it the overview ruler?\n    // Is it a child of the scrollable element?\n    if (ElementPath.isChildOfScrollableElement(request.targetPath)) {\n      const possibleLineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n      const maxColumn = ctx.model.getLineMaxColumn(possibleLineNumber);\n      return request.fulfill(11\n      /* SCROLLBAR */\n      , new Position(possibleLineNumber, maxColumn));\n    }\n\n    return null;\n  }\n\n  getMouseColumn(editorPos, pos) {\n    const options = this._context.configuration.options;\n    const layoutInfo = options.get(129\n    /* layoutInfo */\n    );\n    const mouseContentHorizontalOffset = this._context.viewLayout.getCurrentScrollLeft() + pos.x - editorPos.x - layoutInfo.contentLeft;\n    return MouseTargetFactory._getMouseColumn(mouseContentHorizontalOffset, options.get(43\n    /* fontInfo */\n    ).typicalHalfwidthCharacterWidth);\n  }\n\n  static _getMouseColumn(mouseContentHorizontalOffset, typicalHalfwidthCharacterWidth) {\n    if (mouseContentHorizontalOffset < 0) {\n      return 1;\n    }\n\n    const chars = Math.round(mouseContentHorizontalOffset / typicalHalfwidthCharacterWidth);\n    return chars + 1;\n  }\n\n  static createMouseTargetFromHitTestPosition(ctx, request, spanNode, pos, injectedText) {\n    const lineNumber = pos.lineNumber;\n    const column = pos.column;\n    const lineWidth = ctx.getLineWidth(lineNumber);\n\n    if (request.mouseContentHorizontalOffset > lineWidth) {\n      const detail = createEmptyContentDataInLines(request.mouseContentHorizontalOffset - lineWidth);\n      return request.fulfill(7\n      /* CONTENT_EMPTY */\n      , pos, null, detail);\n    }\n\n    const visibleRange = ctx.visibleRangeForPosition(lineNumber, column);\n\n    if (!visibleRange) {\n      return request.fulfill(0\n      /* UNKNOWN */\n      , pos);\n    }\n\n    const columnHorizontalOffset = visibleRange.left;\n\n    if (request.mouseContentHorizontalOffset === columnHorizontalOffset) {\n      return request.fulfill(6\n      /* CONTENT_TEXT */\n      , pos, null, {\n        mightBeForeignElement: !!injectedText\n      });\n    }\n\n    const points = [];\n    points.push({\n      offset: visibleRange.left,\n      column: column\n    });\n\n    if (column > 1) {\n      const visibleRange = ctx.visibleRangeForPosition(lineNumber, column - 1);\n\n      if (visibleRange) {\n        points.push({\n          offset: visibleRange.left,\n          column: column - 1\n        });\n      }\n    }\n\n    const lineMaxColumn = ctx.model.getLineMaxColumn(lineNumber);\n\n    if (column < lineMaxColumn) {\n      const visibleRange = ctx.visibleRangeForPosition(lineNumber, column + 1);\n\n      if (visibleRange) {\n        points.push({\n          offset: visibleRange.left,\n          column: column + 1\n        });\n      }\n    }\n\n    points.sort((a, b) => a.offset - b.offset);\n    const mouseCoordinates = request.pos.toClientCoordinates();\n    const spanNodeClientRect = spanNode.getBoundingClientRect();\n    const mouseIsOverSpanNode = spanNodeClientRect.left <= mouseCoordinates.clientX && mouseCoordinates.clientX <= spanNodeClientRect.right;\n\n    for (let i = 1; i < points.length; i++) {\n      const prev = points[i - 1];\n      const curr = points[i];\n\n      if (prev.offset <= request.mouseContentHorizontalOffset && request.mouseContentHorizontalOffset <= curr.offset) {\n        const rng = new EditorRange(lineNumber, prev.column, lineNumber, curr.column);\n        return request.fulfill(6\n        /* CONTENT_TEXT */\n        , pos, rng, {\n          mightBeForeignElement: !mouseIsOverSpanNode || !!injectedText\n        });\n      }\n    }\n\n    return request.fulfill(6\n    /* CONTENT_TEXT */\n    , pos, null, {\n      mightBeForeignElement: !mouseIsOverSpanNode || !!injectedText\n    });\n  }\n  /**\n   * Most probably WebKit browsers and Edge\n   */\n\n\n  static _doHitTestWithCaretRangeFromPoint(ctx, request) {\n    // In Chrome, especially on Linux it is possible to click between lines,\n    // so try to adjust the `hity` below so that it lands in the center of a line\n    const lineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n    const lineVerticalOffset = ctx.getVerticalOffsetForLineNumber(lineNumber);\n    const lineCenteredVerticalOffset = lineVerticalOffset + Math.floor(ctx.lineHeight / 2);\n    let adjustedPageY = request.pos.y + (lineCenteredVerticalOffset - request.mouseVerticalOffset);\n\n    if (adjustedPageY <= request.editorPos.y) {\n      adjustedPageY = request.editorPos.y + 1;\n    }\n\n    if (adjustedPageY >= request.editorPos.y + ctx.layoutInfo.height) {\n      adjustedPageY = request.editorPos.y + ctx.layoutInfo.height - 1;\n    }\n\n    const adjustedPage = new PageCoordinates(request.pos.x, adjustedPageY);\n\n    const r = this._actualDoHitTestWithCaretRangeFromPoint(ctx, adjustedPage.toClientCoordinates());\n\n    if (r.type === 1\n    /* Content */\n    ) {\n      return r;\n    } // Also try to hit test without the adjustment (for the edge cases that we are near the top or bottom)\n\n\n    return this._actualDoHitTestWithCaretRangeFromPoint(ctx, request.pos.toClientCoordinates());\n  }\n\n  static _actualDoHitTestWithCaretRangeFromPoint(ctx, coords) {\n    const shadowRoot = dom.getShadowRoot(ctx.viewDomNode);\n    let range;\n\n    if (shadowRoot) {\n      if (typeof shadowRoot.caretRangeFromPoint === 'undefined') {\n        range = shadowCaretRangeFromPoint(shadowRoot, coords.clientX, coords.clientY);\n      } else {\n        range = shadowRoot.caretRangeFromPoint(coords.clientX, coords.clientY);\n      }\n    } else {\n      range = document.caretRangeFromPoint(coords.clientX, coords.clientY);\n    }\n\n    if (!range || !range.startContainer) {\n      return new UnknownHitTestResult();\n    } // Chrome always hits a TEXT_NODE, while Edge sometimes hits a token span\n\n\n    const startContainer = range.startContainer;\n\n    if (startContainer.nodeType === startContainer.TEXT_NODE) {\n      // startContainer is expected to be the token text\n      const parent1 = startContainer.parentNode; // expected to be the token span\n\n      const parent2 = parent1 ? parent1.parentNode : null; // expected to be the view line container span\n\n      const parent3 = parent2 ? parent2.parentNode : null; // expected to be the view line div\n\n      const parent3ClassName = parent3 && parent3.nodeType === parent3.ELEMENT_NODE ? parent3.className : null;\n\n      if (parent3ClassName === ViewLine.CLASS_NAME) {\n        return HitTestResult.createFromDOMInfo(ctx, parent1, range.startOffset);\n      } else {\n        return new UnknownHitTestResult(startContainer.parentNode);\n      }\n    } else if (startContainer.nodeType === startContainer.ELEMENT_NODE) {\n      // startContainer is expected to be the token span\n      const parent1 = startContainer.parentNode; // expected to be the view line container span\n\n      const parent2 = parent1 ? parent1.parentNode : null; // expected to be the view line div\n\n      const parent2ClassName = parent2 && parent2.nodeType === parent2.ELEMENT_NODE ? parent2.className : null;\n\n      if (parent2ClassName === ViewLine.CLASS_NAME) {\n        return HitTestResult.createFromDOMInfo(ctx, startContainer, startContainer.textContent.length);\n      } else {\n        return new UnknownHitTestResult(startContainer);\n      }\n    }\n\n    return new UnknownHitTestResult();\n  }\n  /**\n   * Most probably Gecko\n   */\n\n\n  static _doHitTestWithCaretPositionFromPoint(ctx, coords) {\n    const hitResult = document.caretPositionFromPoint(coords.clientX, coords.clientY);\n\n    if (hitResult.offsetNode.nodeType === hitResult.offsetNode.TEXT_NODE) {\n      // offsetNode is expected to be the token text\n      const parent1 = hitResult.offsetNode.parentNode; // expected to be the token span\n\n      const parent2 = parent1 ? parent1.parentNode : null; // expected to be the view line container span\n\n      const parent3 = parent2 ? parent2.parentNode : null; // expected to be the view line div\n\n      const parent3ClassName = parent3 && parent3.nodeType === parent3.ELEMENT_NODE ? parent3.className : null;\n\n      if (parent3ClassName === ViewLine.CLASS_NAME) {\n        return HitTestResult.createFromDOMInfo(ctx, hitResult.offsetNode.parentNode, hitResult.offset);\n      } else {\n        return new UnknownHitTestResult(hitResult.offsetNode.parentNode);\n      }\n    } // For inline decorations, Gecko sometimes returns the `<span>` of the line and the offset is the `<span>` with the inline decoration\n    // Some other times, it returns the `<span>` with the inline decoration\n\n\n    if (hitResult.offsetNode.nodeType === hitResult.offsetNode.ELEMENT_NODE) {\n      const parent1 = hitResult.offsetNode.parentNode;\n      const parent1ClassName = parent1 && parent1.nodeType === parent1.ELEMENT_NODE ? parent1.className : null;\n      const parent2 = parent1 ? parent1.parentNode : null;\n      const parent2ClassName = parent2 && parent2.nodeType === parent2.ELEMENT_NODE ? parent2.className : null;\n\n      if (parent1ClassName === ViewLine.CLASS_NAME) {\n        // it returned the `<span>` of the line and the offset is the `<span>` with the inline decoration\n        const tokenSpan = hitResult.offsetNode.childNodes[Math.min(hitResult.offset, hitResult.offsetNode.childNodes.length - 1)];\n\n        if (tokenSpan) {\n          return HitTestResult.createFromDOMInfo(ctx, tokenSpan, 0);\n        }\n      } else if (parent2ClassName === ViewLine.CLASS_NAME) {\n        // it returned the `<span>` with the inline decoration\n        return HitTestResult.createFromDOMInfo(ctx, hitResult.offsetNode, 0);\n      }\n    }\n\n    return new UnknownHitTestResult(hitResult.offsetNode);\n  }\n\n  static _snapToSoftTabBoundary(position, viewModel) {\n    const lineContent = viewModel.getLineContent(position.lineNumber);\n    const {\n      tabSize\n    } = viewModel.getTextModelOptions();\n    const newPosition = AtomicTabMoveOperations.atomicPosition(lineContent, position.column - 1, tabSize, 2\n    /* Nearest */\n    );\n\n    if (newPosition !== -1) {\n      return new Position(position.lineNumber, newPosition + 1);\n    }\n\n    return position;\n  }\n\n  static _doHitTest(ctx, request) {\n    let result = new UnknownHitTestResult();\n\n    if (typeof document.caretRangeFromPoint === 'function') {\n      result = this._doHitTestWithCaretRangeFromPoint(ctx, request);\n    } else if (document.caretPositionFromPoint) {\n      result = this._doHitTestWithCaretPositionFromPoint(ctx, request.pos.toClientCoordinates());\n    }\n\n    if (result.type === 1\n    /* Content */\n    ) {\n      const injectedText = ctx.model.getInjectedTextAt(result.position);\n      const normalizedPosition = ctx.model.normalizePosition(result.position, 2\n      /* None */\n      );\n\n      if (injectedText || !normalizedPosition.equals(result.position)) {\n        result = new ContentHitTestResult(normalizedPosition, result.spanNode, injectedText);\n      }\n    } // Snap to the nearest soft tab boundary if atomic soft tabs are enabled.\n\n\n    if (result.type === 1\n    /* Content */\n    && ctx.stickyTabStops) {\n      result = new ContentHitTestResult(this._snapToSoftTabBoundary(result.position, ctx.model), result.spanNode, result.injectedText);\n    }\n\n    return result;\n  }\n\n}\nexport function shadowCaretRangeFromPoint(shadowRoot, x, y) {\n  const range = document.createRange(); // Get the element under the point\n\n  let el = shadowRoot.elementFromPoint(x, y);\n\n  if (el !== null) {\n    // Get the last child of the element until its firstChild is a text node\n    // This assumes that the pointer is on the right of the line, out of the tokens\n    // and that we want to get the offset of the last token of the line\n    while (el && el.firstChild && el.firstChild.nodeType !== el.firstChild.TEXT_NODE && el.lastChild && el.lastChild.firstChild) {\n      el = el.lastChild;\n    } // Grab its rect\n\n\n    const rect = el.getBoundingClientRect(); // And its font\n\n    const font = window.getComputedStyle(el, null).getPropertyValue('font'); // And also its txt content\n\n    const text = el.innerText; // Position the pixel cursor at the left of the element\n\n    let pixelCursor = rect.left;\n    let offset = 0;\n    let step; // If the point is on the right of the box put the cursor after the last character\n\n    if (x > rect.left + rect.width) {\n      offset = text.length;\n    } else {\n      const charWidthReader = CharWidthReader.getInstance(); // Goes through all the characters of the innerText, and checks if the x of the point\n      // belongs to the character.\n\n      for (let i = 0; i < text.length + 1; i++) {\n        // The step is half the width of the character\n        step = charWidthReader.getCharWidth(text.charAt(i), font) / 2; // Move to the center of the character\n\n        pixelCursor += step; // If the x of the point is smaller that the position of the cursor, the point is over that character\n\n        if (x < pixelCursor) {\n          offset = i;\n          break;\n        } // Move between the current character and the next\n\n\n        pixelCursor += step;\n      }\n    } // Creates a range with the text node of the element and set the offset found\n\n\n    range.setStart(el.firstChild, offset);\n    range.setEnd(el.firstChild, offset);\n  }\n\n  return range;\n}\n\nclass CharWidthReader {\n  constructor() {\n    this._cache = {};\n    this._canvas = document.createElement('canvas');\n  }\n\n  static getInstance() {\n    if (!CharWidthReader._INSTANCE) {\n      CharWidthReader._INSTANCE = new CharWidthReader();\n    }\n\n    return CharWidthReader._INSTANCE;\n  }\n\n  getCharWidth(char, font) {\n    const cacheKey = char + font;\n\n    if (this._cache[cacheKey]) {\n      return this._cache[cacheKey];\n    }\n\n    const context = this._canvas.getContext('2d');\n\n    context.font = font;\n    const metrics = context.measureText(char);\n    const width = metrics.width;\n    this._cache[cacheKey] = width;\n    return width;\n  }\n\n}\n\nCharWidthReader._INSTANCE = null;","map":{"version":3,"sources":["/home/umut/Documents/cs/cs410/Project2Group14/node_modules/monaco-editor/esm/vs/editor/browser/controller/mouseTarget.js"],"names":["PageCoordinates","PartFingerprints","ViewLine","Position","Range","EditorRange","CursorColumns","dom","AtomicTabMoveOperations","UnknownHitTestResult","constructor","hitTarget","type","ContentHitTestResult","position","spanNode","injectedText","HitTestResult","createFromDOMInfo","ctx","offset","getPositionFromDOMInfo","PointerHandlerLastRenderData","lastViewCursorsRenderData","lastTextareaPosition","MouseTarget","element","mouseColumn","range","detail","lineNumber","column","_typeToString","toString","target","ElementPath","isTextArea","path","length","isChildOfViewLines","isStrictChildOfViewLines","isChildOfScrollableElement","isChildOfMinimap","isChildOfContentWidgets","isChildOfOverflowingContentWidgets","isChildOfOverlayWidgets","HitTestContext","context","viewHelper","lastRenderData","model","options","configuration","layoutInfo","get","viewDomNode","lineHeight","stickyTabStops","typicalHalfwidthCharacterWidth","_context","_viewHelper","getZoneAtCoord","mouseVerticalOffset","viewZoneWhitespace","viewLayout","getWhitespaceAtVerticalOffset","viewZoneMiddle","verticalOffset","height","lineCount","getLineCount","positionBefore","positionAfter","afterLineNumber","getLineMaxColumn","viewZoneId","id","getFullLineRangeAtCoord","isAfterLines","maxLineColumn","getLineNumberAtVerticalOffset","isInTopPadding","isInBottomPadding","getVerticalOffsetForLineNumber","findAttribute","attr","_findAttribute","stopAt","document","body","hasAttribute","getAttribute","parentNode","getLineWidth","visibleRangeForPosition","getCurrentScrollTop","getCurrentScrollLeft","BareHitTestRequest","editorPos","pos","Math","max","y","mouseContentHorizontalOffset","x","contentLeft","isInMarginArea","glyphMarginLeft","isInContentArea","MouseTargetFactory","_getMouseColumn","HitTestRequest","_ctx","targetPath","collect","Uint8Array","outerHTML","fulfill","visibleColumnFromColumn","getLineContent","getTextModelOptions","tabSize","withTarget","EMPTY_CONTENT_AFTER_LINES","createEmptyContentDataInLines","horizontalDistanceToText","mouseTargetIsWidget","e","t","createMouseTarget","request","r","_createMouseTarget","err","domHitTestExecuted","hitTestResult","_doHitTest","createMouseTargetFromHitTestPosition","resolvedRequest","result","_hitTestContentWidget","_hitTestOverlayWidget","_hitTestMinimap","_hitTestScrollbarSlider","_hitTestViewZone","_hitTestMargin","_hitTestViewCursor","_hitTestTextArea","_hitTestViewLines","_hitTestScrollbar","widgetId","d","domNode","mightBeForeignElement","width","cursorVerticalOffset","viewZoneData","mouseTargetType","res","getStartPosition","abs","glyphMarginWidth","lineNumbersWidth","offsetX","getLineLength","lineWidth","possibleLineNumber","maxColumn","nodeType","className","test","getMouseColumn","chars","round","visibleRange","columnHorizontalOffset","left","points","push","lineMaxColumn","sort","a","b","mouseCoordinates","toClientCoordinates","spanNodeClientRect","getBoundingClientRect","mouseIsOverSpanNode","clientX","right","i","prev","curr","rng","_doHitTestWithCaretRangeFromPoint","lineVerticalOffset","lineCenteredVerticalOffset","floor","adjustedPageY","adjustedPage","_actualDoHitTestWithCaretRangeFromPoint","coords","shadowRoot","getShadowRoot","caretRangeFromPoint","shadowCaretRangeFromPoint","clientY","startContainer","TEXT_NODE","parent1","parent2","parent3","parent3ClassName","ELEMENT_NODE","CLASS_NAME","startOffset","parent2ClassName","textContent","_doHitTestWithCaretPositionFromPoint","hitResult","caretPositionFromPoint","offsetNode","parent1ClassName","tokenSpan","childNodes","min","_snapToSoftTabBoundary","viewModel","lineContent","newPosition","atomicPosition","getInjectedTextAt","normalizedPosition","normalizePosition","equals","createRange","el","elementFromPoint","firstChild","lastChild","rect","font","window","getComputedStyle","getPropertyValue","text","innerText","pixelCursor","step","charWidthReader","CharWidthReader","getInstance","getCharWidth","charAt","setStart","setEnd","_cache","_canvas","createElement","_INSTANCE","char","cacheKey","getContext","metrics","measureText"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { PageCoordinates } from '../editorDom.js';\nimport { PartFingerprints } from '../view/viewPart.js';\nimport { ViewLine } from '../viewParts/lines/viewLine.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range as EditorRange } from '../../common/core/range.js';\nimport { CursorColumns } from '../../common/controller/cursorCommon.js';\nimport * as dom from '../../../base/browser/dom.js';\nimport { AtomicTabMoveOperations } from '../../common/controller/cursorAtomicMoveOperations.js';\nclass UnknownHitTestResult {\n    constructor(hitTarget = null) {\n        this.hitTarget = hitTarget;\n        this.type = 0 /* Unknown */;\n    }\n}\nclass ContentHitTestResult {\n    constructor(position, spanNode, injectedText) {\n        this.position = position;\n        this.spanNode = spanNode;\n        this.injectedText = injectedText;\n        this.type = 1 /* Content */;\n    }\n}\nvar HitTestResult;\n(function (HitTestResult) {\n    function createFromDOMInfo(ctx, spanNode, offset) {\n        const position = ctx.getPositionFromDOMInfo(spanNode, offset);\n        if (position) {\n            return new ContentHitTestResult(position, spanNode, null);\n        }\n        return new UnknownHitTestResult(spanNode);\n    }\n    HitTestResult.createFromDOMInfo = createFromDOMInfo;\n})(HitTestResult || (HitTestResult = {}));\nexport class PointerHandlerLastRenderData {\n    constructor(lastViewCursorsRenderData, lastTextareaPosition) {\n        this.lastViewCursorsRenderData = lastViewCursorsRenderData;\n        this.lastTextareaPosition = lastTextareaPosition;\n    }\n}\nexport class MouseTarget {\n    constructor(element, type, mouseColumn = 0, position = null, range = null, detail = null) {\n        this.element = element;\n        this.type = type;\n        this.mouseColumn = mouseColumn;\n        this.position = position;\n        if (!range && position) {\n            range = new EditorRange(position.lineNumber, position.column, position.lineNumber, position.column);\n        }\n        this.range = range;\n        this.detail = detail;\n    }\n    static _typeToString(type) {\n        if (type === 1 /* TEXTAREA */) {\n            return 'TEXTAREA';\n        }\n        if (type === 2 /* GUTTER_GLYPH_MARGIN */) {\n            return 'GUTTER_GLYPH_MARGIN';\n        }\n        if (type === 3 /* GUTTER_LINE_NUMBERS */) {\n            return 'GUTTER_LINE_NUMBERS';\n        }\n        if (type === 4 /* GUTTER_LINE_DECORATIONS */) {\n            return 'GUTTER_LINE_DECORATIONS';\n        }\n        if (type === 5 /* GUTTER_VIEW_ZONE */) {\n            return 'GUTTER_VIEW_ZONE';\n        }\n        if (type === 6 /* CONTENT_TEXT */) {\n            return 'CONTENT_TEXT';\n        }\n        if (type === 7 /* CONTENT_EMPTY */) {\n            return 'CONTENT_EMPTY';\n        }\n        if (type === 8 /* CONTENT_VIEW_ZONE */) {\n            return 'CONTENT_VIEW_ZONE';\n        }\n        if (type === 9 /* CONTENT_WIDGET */) {\n            return 'CONTENT_WIDGET';\n        }\n        if (type === 10 /* OVERVIEW_RULER */) {\n            return 'OVERVIEW_RULER';\n        }\n        if (type === 11 /* SCROLLBAR */) {\n            return 'SCROLLBAR';\n        }\n        if (type === 12 /* OVERLAY_WIDGET */) {\n            return 'OVERLAY_WIDGET';\n        }\n        return 'UNKNOWN';\n    }\n    static toString(target) {\n        return this._typeToString(target.type) + ': ' + target.position + ' - ' + target.range + ' - ' + target.detail;\n    }\n    toString() {\n        return MouseTarget.toString(this);\n    }\n}\nclass ElementPath {\n    static isTextArea(path) {\n        return (path.length === 2\n            && path[0] === 3 /* OverflowGuard */\n            && path[1] === 6 /* TextArea */);\n    }\n    static isChildOfViewLines(path) {\n        return (path.length >= 4\n            && path[0] === 3 /* OverflowGuard */\n            && path[3] === 7 /* ViewLines */);\n    }\n    static isStrictChildOfViewLines(path) {\n        return (path.length > 4\n            && path[0] === 3 /* OverflowGuard */\n            && path[3] === 7 /* ViewLines */);\n    }\n    static isChildOfScrollableElement(path) {\n        return (path.length >= 2\n            && path[0] === 3 /* OverflowGuard */\n            && path[1] === 5 /* ScrollableElement */);\n    }\n    static isChildOfMinimap(path) {\n        return (path.length >= 2\n            && path[0] === 3 /* OverflowGuard */\n            && path[1] === 8 /* Minimap */);\n    }\n    static isChildOfContentWidgets(path) {\n        return (path.length >= 4\n            && path[0] === 3 /* OverflowGuard */\n            && path[3] === 1 /* ContentWidgets */);\n    }\n    static isChildOfOverflowingContentWidgets(path) {\n        return (path.length >= 1\n            && path[0] === 2 /* OverflowingContentWidgets */);\n    }\n    static isChildOfOverlayWidgets(path) {\n        return (path.length >= 2\n            && path[0] === 3 /* OverflowGuard */\n            && path[1] === 4 /* OverlayWidgets */);\n    }\n}\nexport class HitTestContext {\n    constructor(context, viewHelper, lastRenderData) {\n        this.model = context.model;\n        const options = context.configuration.options;\n        this.layoutInfo = options.get(129 /* layoutInfo */);\n        this.viewDomNode = viewHelper.viewDomNode;\n        this.lineHeight = options.get(58 /* lineHeight */);\n        this.stickyTabStops = options.get(103 /* stickyTabStops */);\n        this.typicalHalfwidthCharacterWidth = options.get(43 /* fontInfo */).typicalHalfwidthCharacterWidth;\n        this.lastRenderData = lastRenderData;\n        this._context = context;\n        this._viewHelper = viewHelper;\n    }\n    getZoneAtCoord(mouseVerticalOffset) {\n        return HitTestContext.getZoneAtCoord(this._context, mouseVerticalOffset);\n    }\n    static getZoneAtCoord(context, mouseVerticalOffset) {\n        // The target is either a view zone or the empty space after the last view-line\n        const viewZoneWhitespace = context.viewLayout.getWhitespaceAtVerticalOffset(mouseVerticalOffset);\n        if (viewZoneWhitespace) {\n            const viewZoneMiddle = viewZoneWhitespace.verticalOffset + viewZoneWhitespace.height / 2;\n            const lineCount = context.model.getLineCount();\n            let positionBefore = null;\n            let position;\n            let positionAfter = null;\n            if (viewZoneWhitespace.afterLineNumber !== lineCount) {\n                // There are more lines after this view zone\n                positionAfter = new Position(viewZoneWhitespace.afterLineNumber + 1, 1);\n            }\n            if (viewZoneWhitespace.afterLineNumber > 0) {\n                // There are more lines above this view zone\n                positionBefore = new Position(viewZoneWhitespace.afterLineNumber, context.model.getLineMaxColumn(viewZoneWhitespace.afterLineNumber));\n            }\n            if (positionAfter === null) {\n                position = positionBefore;\n            }\n            else if (positionBefore === null) {\n                position = positionAfter;\n            }\n            else if (mouseVerticalOffset < viewZoneMiddle) {\n                position = positionBefore;\n            }\n            else {\n                position = positionAfter;\n            }\n            return {\n                viewZoneId: viewZoneWhitespace.id,\n                afterLineNumber: viewZoneWhitespace.afterLineNumber,\n                positionBefore: positionBefore,\n                positionAfter: positionAfter,\n                position: position\n            };\n        }\n        return null;\n    }\n    getFullLineRangeAtCoord(mouseVerticalOffset) {\n        if (this._context.viewLayout.isAfterLines(mouseVerticalOffset)) {\n            // Below the last line\n            const lineNumber = this._context.model.getLineCount();\n            const maxLineColumn = this._context.model.getLineMaxColumn(lineNumber);\n            return {\n                range: new EditorRange(lineNumber, maxLineColumn, lineNumber, maxLineColumn),\n                isAfterLines: true\n            };\n        }\n        const lineNumber = this._context.viewLayout.getLineNumberAtVerticalOffset(mouseVerticalOffset);\n        const maxLineColumn = this._context.model.getLineMaxColumn(lineNumber);\n        return {\n            range: new EditorRange(lineNumber, 1, lineNumber, maxLineColumn),\n            isAfterLines: false\n        };\n    }\n    getLineNumberAtVerticalOffset(mouseVerticalOffset) {\n        return this._context.viewLayout.getLineNumberAtVerticalOffset(mouseVerticalOffset);\n    }\n    isAfterLines(mouseVerticalOffset) {\n        return this._context.viewLayout.isAfterLines(mouseVerticalOffset);\n    }\n    isInTopPadding(mouseVerticalOffset) {\n        return this._context.viewLayout.isInTopPadding(mouseVerticalOffset);\n    }\n    isInBottomPadding(mouseVerticalOffset) {\n        return this._context.viewLayout.isInBottomPadding(mouseVerticalOffset);\n    }\n    getVerticalOffsetForLineNumber(lineNumber) {\n        return this._context.viewLayout.getVerticalOffsetForLineNumber(lineNumber);\n    }\n    findAttribute(element, attr) {\n        return HitTestContext._findAttribute(element, attr, this._viewHelper.viewDomNode);\n    }\n    static _findAttribute(element, attr, stopAt) {\n        while (element && element !== document.body) {\n            if (element.hasAttribute && element.hasAttribute(attr)) {\n                return element.getAttribute(attr);\n            }\n            if (element === stopAt) {\n                return null;\n            }\n            element = element.parentNode;\n        }\n        return null;\n    }\n    getLineWidth(lineNumber) {\n        return this._viewHelper.getLineWidth(lineNumber);\n    }\n    visibleRangeForPosition(lineNumber, column) {\n        return this._viewHelper.visibleRangeForPosition(lineNumber, column);\n    }\n    getPositionFromDOMInfo(spanNode, offset) {\n        return this._viewHelper.getPositionFromDOMInfo(spanNode, offset);\n    }\n    getCurrentScrollTop() {\n        return this._context.viewLayout.getCurrentScrollTop();\n    }\n    getCurrentScrollLeft() {\n        return this._context.viewLayout.getCurrentScrollLeft();\n    }\n}\nclass BareHitTestRequest {\n    constructor(ctx, editorPos, pos) {\n        this.editorPos = editorPos;\n        this.pos = pos;\n        this.mouseVerticalOffset = Math.max(0, ctx.getCurrentScrollTop() + pos.y - editorPos.y);\n        this.mouseContentHorizontalOffset = ctx.getCurrentScrollLeft() + pos.x - editorPos.x - ctx.layoutInfo.contentLeft;\n        this.isInMarginArea = (pos.x - editorPos.x < ctx.layoutInfo.contentLeft && pos.x - editorPos.x >= ctx.layoutInfo.glyphMarginLeft);\n        this.isInContentArea = !this.isInMarginArea;\n        this.mouseColumn = Math.max(0, MouseTargetFactory._getMouseColumn(this.mouseContentHorizontalOffset, ctx.typicalHalfwidthCharacterWidth));\n    }\n}\nclass HitTestRequest extends BareHitTestRequest {\n    constructor(ctx, editorPos, pos, target) {\n        super(ctx, editorPos, pos);\n        this._ctx = ctx;\n        if (target) {\n            this.target = target;\n            this.targetPath = PartFingerprints.collect(target, ctx.viewDomNode);\n        }\n        else {\n            this.target = null;\n            this.targetPath = new Uint8Array(0);\n        }\n    }\n    toString() {\n        return `pos(${this.pos.x},${this.pos.y}), editorPos(${this.editorPos.x},${this.editorPos.y}), mouseVerticalOffset: ${this.mouseVerticalOffset}, mouseContentHorizontalOffset: ${this.mouseContentHorizontalOffset}\\n\\ttarget: ${this.target ? this.target.outerHTML : null}`;\n    }\n    // public fulfill(type: MouseTargetType.OVERVIEW_RULER, position?: Position | null, range?: EditorRange | null, detail?: any): MouseTarget;\n    // public fulfill(type: MouseTargetType.OUTSIDE_EDITOR, position?: Position | null, range?: EditorRange | null, detail?: any): MouseTarget;\n    fulfill(type, position = null, range = null, detail = null) {\n        let mouseColumn = this.mouseColumn;\n        if (position && position.column < this._ctx.model.getLineMaxColumn(position.lineNumber)) {\n            // Most likely, the line contains foreign decorations...\n            mouseColumn = CursorColumns.visibleColumnFromColumn(this._ctx.model.getLineContent(position.lineNumber), position.column, this._ctx.model.getTextModelOptions().tabSize) + 1;\n        }\n        return new MouseTarget(this.target, type, mouseColumn, position, range, detail);\n    }\n    withTarget(target) {\n        return new HitTestRequest(this._ctx, this.editorPos, this.pos, target);\n    }\n}\nconst EMPTY_CONTENT_AFTER_LINES = { isAfterLines: true };\nfunction createEmptyContentDataInLines(horizontalDistanceToText) {\n    return {\n        isAfterLines: false,\n        horizontalDistanceToText: horizontalDistanceToText\n    };\n}\nexport class MouseTargetFactory {\n    constructor(context, viewHelper) {\n        this._context = context;\n        this._viewHelper = viewHelper;\n    }\n    mouseTargetIsWidget(e) {\n        const t = e.target;\n        const path = PartFingerprints.collect(t, this._viewHelper.viewDomNode);\n        // Is it a content widget?\n        if (ElementPath.isChildOfContentWidgets(path) || ElementPath.isChildOfOverflowingContentWidgets(path)) {\n            return true;\n        }\n        // Is it an overlay widget?\n        if (ElementPath.isChildOfOverlayWidgets(path)) {\n            return true;\n        }\n        return false;\n    }\n    createMouseTarget(lastRenderData, editorPos, pos, target) {\n        const ctx = new HitTestContext(this._context, this._viewHelper, lastRenderData);\n        const request = new HitTestRequest(ctx, editorPos, pos, target);\n        try {\n            const r = MouseTargetFactory._createMouseTarget(ctx, request, false);\n            // console.log(r.toString());\n            return r;\n        }\n        catch (err) {\n            // console.log(err);\n            return request.fulfill(0 /* UNKNOWN */);\n        }\n    }\n    static _createMouseTarget(ctx, request, domHitTestExecuted) {\n        // console.log(`${domHitTestExecuted ? '=>' : ''}CAME IN REQUEST: ${request}`);\n        // First ensure the request has a target\n        if (request.target === null) {\n            if (domHitTestExecuted) {\n                // Still no target... and we have already executed hit test...\n                return request.fulfill(0 /* UNKNOWN */);\n            }\n            const hitTestResult = MouseTargetFactory._doHitTest(ctx, request);\n            if (hitTestResult.type === 1 /* Content */) {\n                return MouseTargetFactory.createMouseTargetFromHitTestPosition(ctx, request, hitTestResult.spanNode, hitTestResult.position, hitTestResult.injectedText);\n            }\n            return this._createMouseTarget(ctx, request.withTarget(hitTestResult.hitTarget), true);\n        }\n        // we know for a fact that request.target is not null\n        const resolvedRequest = request;\n        let result = null;\n        result = result || MouseTargetFactory._hitTestContentWidget(ctx, resolvedRequest);\n        result = result || MouseTargetFactory._hitTestOverlayWidget(ctx, resolvedRequest);\n        result = result || MouseTargetFactory._hitTestMinimap(ctx, resolvedRequest);\n        result = result || MouseTargetFactory._hitTestScrollbarSlider(ctx, resolvedRequest);\n        result = result || MouseTargetFactory._hitTestViewZone(ctx, resolvedRequest);\n        result = result || MouseTargetFactory._hitTestMargin(ctx, resolvedRequest);\n        result = result || MouseTargetFactory._hitTestViewCursor(ctx, resolvedRequest);\n        result = result || MouseTargetFactory._hitTestTextArea(ctx, resolvedRequest);\n        result = result || MouseTargetFactory._hitTestViewLines(ctx, resolvedRequest, domHitTestExecuted);\n        result = result || MouseTargetFactory._hitTestScrollbar(ctx, resolvedRequest);\n        return (result || request.fulfill(0 /* UNKNOWN */));\n    }\n    static _hitTestContentWidget(ctx, request) {\n        // Is it a content widget?\n        if (ElementPath.isChildOfContentWidgets(request.targetPath) || ElementPath.isChildOfOverflowingContentWidgets(request.targetPath)) {\n            const widgetId = ctx.findAttribute(request.target, 'widgetId');\n            if (widgetId) {\n                return request.fulfill(9 /* CONTENT_WIDGET */, null, null, widgetId);\n            }\n            else {\n                return request.fulfill(0 /* UNKNOWN */);\n            }\n        }\n        return null;\n    }\n    static _hitTestOverlayWidget(ctx, request) {\n        // Is it an overlay widget?\n        if (ElementPath.isChildOfOverlayWidgets(request.targetPath)) {\n            const widgetId = ctx.findAttribute(request.target, 'widgetId');\n            if (widgetId) {\n                return request.fulfill(12 /* OVERLAY_WIDGET */, null, null, widgetId);\n            }\n            else {\n                return request.fulfill(0 /* UNKNOWN */);\n            }\n        }\n        return null;\n    }\n    static _hitTestViewCursor(ctx, request) {\n        if (request.target) {\n            // Check if we've hit a painted cursor\n            const lastViewCursorsRenderData = ctx.lastRenderData.lastViewCursorsRenderData;\n            for (const d of lastViewCursorsRenderData) {\n                if (request.target === d.domNode) {\n                    return request.fulfill(6 /* CONTENT_TEXT */, d.position, null, { mightBeForeignElement: false });\n                }\n            }\n        }\n        if (request.isInContentArea) {\n            // Edge has a bug when hit-testing the exact position of a cursor,\n            // instead of returning the correct dom node, it returns the\n            // first or last rendered view line dom node, therefore help it out\n            // and first check if we are on top of a cursor\n            const lastViewCursorsRenderData = ctx.lastRenderData.lastViewCursorsRenderData;\n            const mouseContentHorizontalOffset = request.mouseContentHorizontalOffset;\n            const mouseVerticalOffset = request.mouseVerticalOffset;\n            for (const d of lastViewCursorsRenderData) {\n                if (mouseContentHorizontalOffset < d.contentLeft) {\n                    // mouse position is to the left of the cursor\n                    continue;\n                }\n                if (mouseContentHorizontalOffset > d.contentLeft + d.width) {\n                    // mouse position is to the right of the cursor\n                    continue;\n                }\n                const cursorVerticalOffset = ctx.getVerticalOffsetForLineNumber(d.position.lineNumber);\n                if (cursorVerticalOffset <= mouseVerticalOffset\n                    && mouseVerticalOffset <= cursorVerticalOffset + d.height) {\n                    return request.fulfill(6 /* CONTENT_TEXT */, d.position, null, { mightBeForeignElement: false });\n                }\n            }\n        }\n        return null;\n    }\n    static _hitTestViewZone(ctx, request) {\n        const viewZoneData = ctx.getZoneAtCoord(request.mouseVerticalOffset);\n        if (viewZoneData) {\n            const mouseTargetType = (request.isInContentArea ? 8 /* CONTENT_VIEW_ZONE */ : 5 /* GUTTER_VIEW_ZONE */);\n            return request.fulfill(mouseTargetType, viewZoneData.position, null, viewZoneData);\n        }\n        return null;\n    }\n    static _hitTestTextArea(ctx, request) {\n        // Is it the textarea?\n        if (ElementPath.isTextArea(request.targetPath)) {\n            if (ctx.lastRenderData.lastTextareaPosition) {\n                return request.fulfill(6 /* CONTENT_TEXT */, ctx.lastRenderData.lastTextareaPosition, null, { mightBeForeignElement: false });\n            }\n            return request.fulfill(1 /* TEXTAREA */, ctx.lastRenderData.lastTextareaPosition);\n        }\n        return null;\n    }\n    static _hitTestMargin(ctx, request) {\n        if (request.isInMarginArea) {\n            const res = ctx.getFullLineRangeAtCoord(request.mouseVerticalOffset);\n            const pos = res.range.getStartPosition();\n            let offset = Math.abs(request.pos.x - request.editorPos.x);\n            const detail = {\n                isAfterLines: res.isAfterLines,\n                glyphMarginLeft: ctx.layoutInfo.glyphMarginLeft,\n                glyphMarginWidth: ctx.layoutInfo.glyphMarginWidth,\n                lineNumbersWidth: ctx.layoutInfo.lineNumbersWidth,\n                offsetX: offset\n            };\n            offset -= ctx.layoutInfo.glyphMarginLeft;\n            if (offset <= ctx.layoutInfo.glyphMarginWidth) {\n                // On the glyph margin\n                return request.fulfill(2 /* GUTTER_GLYPH_MARGIN */, pos, res.range, detail);\n            }\n            offset -= ctx.layoutInfo.glyphMarginWidth;\n            if (offset <= ctx.layoutInfo.lineNumbersWidth) {\n                // On the line numbers\n                return request.fulfill(3 /* GUTTER_LINE_NUMBERS */, pos, res.range, detail);\n            }\n            offset -= ctx.layoutInfo.lineNumbersWidth;\n            // On the line decorations\n            return request.fulfill(4 /* GUTTER_LINE_DECORATIONS */, pos, res.range, detail);\n        }\n        return null;\n    }\n    static _hitTestViewLines(ctx, request, domHitTestExecuted) {\n        if (!ElementPath.isChildOfViewLines(request.targetPath)) {\n            return null;\n        }\n        if (ctx.isInTopPadding(request.mouseVerticalOffset)) {\n            return request.fulfill(7 /* CONTENT_EMPTY */, new Position(1, 1), null, EMPTY_CONTENT_AFTER_LINES);\n        }\n        // Check if it is below any lines and any view zones\n        if (ctx.isAfterLines(request.mouseVerticalOffset) || ctx.isInBottomPadding(request.mouseVerticalOffset)) {\n            // This most likely indicates it happened after the last view-line\n            const lineCount = ctx.model.getLineCount();\n            const maxLineColumn = ctx.model.getLineMaxColumn(lineCount);\n            return request.fulfill(7 /* CONTENT_EMPTY */, new Position(lineCount, maxLineColumn), null, EMPTY_CONTENT_AFTER_LINES);\n        }\n        if (domHitTestExecuted) {\n            // Check if we are hitting a view-line (can happen in the case of inline decorations on empty lines)\n            // See https://github.com/microsoft/vscode/issues/46942\n            if (ElementPath.isStrictChildOfViewLines(request.targetPath)) {\n                const lineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n                if (ctx.model.getLineLength(lineNumber) === 0) {\n                    const lineWidth = ctx.getLineWidth(lineNumber);\n                    const detail = createEmptyContentDataInLines(request.mouseContentHorizontalOffset - lineWidth);\n                    return request.fulfill(7 /* CONTENT_EMPTY */, new Position(lineNumber, 1), null, detail);\n                }\n                const lineWidth = ctx.getLineWidth(lineNumber);\n                if (request.mouseContentHorizontalOffset >= lineWidth) {\n                    const detail = createEmptyContentDataInLines(request.mouseContentHorizontalOffset - lineWidth);\n                    const pos = new Position(lineNumber, ctx.model.getLineMaxColumn(lineNumber));\n                    return request.fulfill(7 /* CONTENT_EMPTY */, pos, null, detail);\n                }\n            }\n            // We have already executed hit test...\n            return request.fulfill(0 /* UNKNOWN */);\n        }\n        const hitTestResult = MouseTargetFactory._doHitTest(ctx, request);\n        if (hitTestResult.type === 1 /* Content */) {\n            return MouseTargetFactory.createMouseTargetFromHitTestPosition(ctx, request, hitTestResult.spanNode, hitTestResult.position, hitTestResult.injectedText);\n        }\n        return this._createMouseTarget(ctx, request.withTarget(hitTestResult.hitTarget), true);\n    }\n    static _hitTestMinimap(ctx, request) {\n        if (ElementPath.isChildOfMinimap(request.targetPath)) {\n            const possibleLineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n            const maxColumn = ctx.model.getLineMaxColumn(possibleLineNumber);\n            return request.fulfill(11 /* SCROLLBAR */, new Position(possibleLineNumber, maxColumn));\n        }\n        return null;\n    }\n    static _hitTestScrollbarSlider(ctx, request) {\n        if (ElementPath.isChildOfScrollableElement(request.targetPath)) {\n            if (request.target && request.target.nodeType === 1) {\n                const className = request.target.className;\n                if (className && /\\b(slider|scrollbar)\\b/.test(className)) {\n                    const possibleLineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n                    const maxColumn = ctx.model.getLineMaxColumn(possibleLineNumber);\n                    return request.fulfill(11 /* SCROLLBAR */, new Position(possibleLineNumber, maxColumn));\n                }\n            }\n        }\n        return null;\n    }\n    static _hitTestScrollbar(ctx, request) {\n        // Is it the overview ruler?\n        // Is it a child of the scrollable element?\n        if (ElementPath.isChildOfScrollableElement(request.targetPath)) {\n            const possibleLineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n            const maxColumn = ctx.model.getLineMaxColumn(possibleLineNumber);\n            return request.fulfill(11 /* SCROLLBAR */, new Position(possibleLineNumber, maxColumn));\n        }\n        return null;\n    }\n    getMouseColumn(editorPos, pos) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(129 /* layoutInfo */);\n        const mouseContentHorizontalOffset = this._context.viewLayout.getCurrentScrollLeft() + pos.x - editorPos.x - layoutInfo.contentLeft;\n        return MouseTargetFactory._getMouseColumn(mouseContentHorizontalOffset, options.get(43 /* fontInfo */).typicalHalfwidthCharacterWidth);\n    }\n    static _getMouseColumn(mouseContentHorizontalOffset, typicalHalfwidthCharacterWidth) {\n        if (mouseContentHorizontalOffset < 0) {\n            return 1;\n        }\n        const chars = Math.round(mouseContentHorizontalOffset / typicalHalfwidthCharacterWidth);\n        return (chars + 1);\n    }\n    static createMouseTargetFromHitTestPosition(ctx, request, spanNode, pos, injectedText) {\n        const lineNumber = pos.lineNumber;\n        const column = pos.column;\n        const lineWidth = ctx.getLineWidth(lineNumber);\n        if (request.mouseContentHorizontalOffset > lineWidth) {\n            const detail = createEmptyContentDataInLines(request.mouseContentHorizontalOffset - lineWidth);\n            return request.fulfill(7 /* CONTENT_EMPTY */, pos, null, detail);\n        }\n        const visibleRange = ctx.visibleRangeForPosition(lineNumber, column);\n        if (!visibleRange) {\n            return request.fulfill(0 /* UNKNOWN */, pos);\n        }\n        const columnHorizontalOffset = visibleRange.left;\n        if (request.mouseContentHorizontalOffset === columnHorizontalOffset) {\n            return request.fulfill(6 /* CONTENT_TEXT */, pos, null, { mightBeForeignElement: !!injectedText });\n        }\n        const points = [];\n        points.push({ offset: visibleRange.left, column: column });\n        if (column > 1) {\n            const visibleRange = ctx.visibleRangeForPosition(lineNumber, column - 1);\n            if (visibleRange) {\n                points.push({ offset: visibleRange.left, column: column - 1 });\n            }\n        }\n        const lineMaxColumn = ctx.model.getLineMaxColumn(lineNumber);\n        if (column < lineMaxColumn) {\n            const visibleRange = ctx.visibleRangeForPosition(lineNumber, column + 1);\n            if (visibleRange) {\n                points.push({ offset: visibleRange.left, column: column + 1 });\n            }\n        }\n        points.sort((a, b) => a.offset - b.offset);\n        const mouseCoordinates = request.pos.toClientCoordinates();\n        const spanNodeClientRect = spanNode.getBoundingClientRect();\n        const mouseIsOverSpanNode = (spanNodeClientRect.left <= mouseCoordinates.clientX && mouseCoordinates.clientX <= spanNodeClientRect.right);\n        for (let i = 1; i < points.length; i++) {\n            const prev = points[i - 1];\n            const curr = points[i];\n            if (prev.offset <= request.mouseContentHorizontalOffset && request.mouseContentHorizontalOffset <= curr.offset) {\n                const rng = new EditorRange(lineNumber, prev.column, lineNumber, curr.column);\n                return request.fulfill(6 /* CONTENT_TEXT */, pos, rng, { mightBeForeignElement: !mouseIsOverSpanNode || !!injectedText });\n            }\n        }\n        return request.fulfill(6 /* CONTENT_TEXT */, pos, null, { mightBeForeignElement: !mouseIsOverSpanNode || !!injectedText });\n    }\n    /**\n     * Most probably WebKit browsers and Edge\n     */\n    static _doHitTestWithCaretRangeFromPoint(ctx, request) {\n        // In Chrome, especially on Linux it is possible to click between lines,\n        // so try to adjust the `hity` below so that it lands in the center of a line\n        const lineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n        const lineVerticalOffset = ctx.getVerticalOffsetForLineNumber(lineNumber);\n        const lineCenteredVerticalOffset = lineVerticalOffset + Math.floor(ctx.lineHeight / 2);\n        let adjustedPageY = request.pos.y + (lineCenteredVerticalOffset - request.mouseVerticalOffset);\n        if (adjustedPageY <= request.editorPos.y) {\n            adjustedPageY = request.editorPos.y + 1;\n        }\n        if (adjustedPageY >= request.editorPos.y + ctx.layoutInfo.height) {\n            adjustedPageY = request.editorPos.y + ctx.layoutInfo.height - 1;\n        }\n        const adjustedPage = new PageCoordinates(request.pos.x, adjustedPageY);\n        const r = this._actualDoHitTestWithCaretRangeFromPoint(ctx, adjustedPage.toClientCoordinates());\n        if (r.type === 1 /* Content */) {\n            return r;\n        }\n        // Also try to hit test without the adjustment (for the edge cases that we are near the top or bottom)\n        return this._actualDoHitTestWithCaretRangeFromPoint(ctx, request.pos.toClientCoordinates());\n    }\n    static _actualDoHitTestWithCaretRangeFromPoint(ctx, coords) {\n        const shadowRoot = dom.getShadowRoot(ctx.viewDomNode);\n        let range;\n        if (shadowRoot) {\n            if (typeof shadowRoot.caretRangeFromPoint === 'undefined') {\n                range = shadowCaretRangeFromPoint(shadowRoot, coords.clientX, coords.clientY);\n            }\n            else {\n                range = shadowRoot.caretRangeFromPoint(coords.clientX, coords.clientY);\n            }\n        }\n        else {\n            range = document.caretRangeFromPoint(coords.clientX, coords.clientY);\n        }\n        if (!range || !range.startContainer) {\n            return new UnknownHitTestResult();\n        }\n        // Chrome always hits a TEXT_NODE, while Edge sometimes hits a token span\n        const startContainer = range.startContainer;\n        if (startContainer.nodeType === startContainer.TEXT_NODE) {\n            // startContainer is expected to be the token text\n            const parent1 = startContainer.parentNode; // expected to be the token span\n            const parent2 = parent1 ? parent1.parentNode : null; // expected to be the view line container span\n            const parent3 = parent2 ? parent2.parentNode : null; // expected to be the view line div\n            const parent3ClassName = parent3 && parent3.nodeType === parent3.ELEMENT_NODE ? parent3.className : null;\n            if (parent3ClassName === ViewLine.CLASS_NAME) {\n                return HitTestResult.createFromDOMInfo(ctx, parent1, range.startOffset);\n            }\n            else {\n                return new UnknownHitTestResult(startContainer.parentNode);\n            }\n        }\n        else if (startContainer.nodeType === startContainer.ELEMENT_NODE) {\n            // startContainer is expected to be the token span\n            const parent1 = startContainer.parentNode; // expected to be the view line container span\n            const parent2 = parent1 ? parent1.parentNode : null; // expected to be the view line div\n            const parent2ClassName = parent2 && parent2.nodeType === parent2.ELEMENT_NODE ? parent2.className : null;\n            if (parent2ClassName === ViewLine.CLASS_NAME) {\n                return HitTestResult.createFromDOMInfo(ctx, startContainer, startContainer.textContent.length);\n            }\n            else {\n                return new UnknownHitTestResult(startContainer);\n            }\n        }\n        return new UnknownHitTestResult();\n    }\n    /**\n     * Most probably Gecko\n     */\n    static _doHitTestWithCaretPositionFromPoint(ctx, coords) {\n        const hitResult = document.caretPositionFromPoint(coords.clientX, coords.clientY);\n        if (hitResult.offsetNode.nodeType === hitResult.offsetNode.TEXT_NODE) {\n            // offsetNode is expected to be the token text\n            const parent1 = hitResult.offsetNode.parentNode; // expected to be the token span\n            const parent2 = parent1 ? parent1.parentNode : null; // expected to be the view line container span\n            const parent3 = parent2 ? parent2.parentNode : null; // expected to be the view line div\n            const parent3ClassName = parent3 && parent3.nodeType === parent3.ELEMENT_NODE ? parent3.className : null;\n            if (parent3ClassName === ViewLine.CLASS_NAME) {\n                return HitTestResult.createFromDOMInfo(ctx, hitResult.offsetNode.parentNode, hitResult.offset);\n            }\n            else {\n                return new UnknownHitTestResult(hitResult.offsetNode.parentNode);\n            }\n        }\n        // For inline decorations, Gecko sometimes returns the `<span>` of the line and the offset is the `<span>` with the inline decoration\n        // Some other times, it returns the `<span>` with the inline decoration\n        if (hitResult.offsetNode.nodeType === hitResult.offsetNode.ELEMENT_NODE) {\n            const parent1 = hitResult.offsetNode.parentNode;\n            const parent1ClassName = parent1 && parent1.nodeType === parent1.ELEMENT_NODE ? parent1.className : null;\n            const parent2 = parent1 ? parent1.parentNode : null;\n            const parent2ClassName = parent2 && parent2.nodeType === parent2.ELEMENT_NODE ? parent2.className : null;\n            if (parent1ClassName === ViewLine.CLASS_NAME) {\n                // it returned the `<span>` of the line and the offset is the `<span>` with the inline decoration\n                const tokenSpan = hitResult.offsetNode.childNodes[Math.min(hitResult.offset, hitResult.offsetNode.childNodes.length - 1)];\n                if (tokenSpan) {\n                    return HitTestResult.createFromDOMInfo(ctx, tokenSpan, 0);\n                }\n            }\n            else if (parent2ClassName === ViewLine.CLASS_NAME) {\n                // it returned the `<span>` with the inline decoration\n                return HitTestResult.createFromDOMInfo(ctx, hitResult.offsetNode, 0);\n            }\n        }\n        return new UnknownHitTestResult(hitResult.offsetNode);\n    }\n    static _snapToSoftTabBoundary(position, viewModel) {\n        const lineContent = viewModel.getLineContent(position.lineNumber);\n        const { tabSize } = viewModel.getTextModelOptions();\n        const newPosition = AtomicTabMoveOperations.atomicPosition(lineContent, position.column - 1, tabSize, 2 /* Nearest */);\n        if (newPosition !== -1) {\n            return new Position(position.lineNumber, newPosition + 1);\n        }\n        return position;\n    }\n    static _doHitTest(ctx, request) {\n        let result = new UnknownHitTestResult();\n        if (typeof document.caretRangeFromPoint === 'function') {\n            result = this._doHitTestWithCaretRangeFromPoint(ctx, request);\n        }\n        else if (document.caretPositionFromPoint) {\n            result = this._doHitTestWithCaretPositionFromPoint(ctx, request.pos.toClientCoordinates());\n        }\n        if (result.type === 1 /* Content */) {\n            const injectedText = ctx.model.getInjectedTextAt(result.position);\n            const normalizedPosition = ctx.model.normalizePosition(result.position, 2 /* None */);\n            if (injectedText || !normalizedPosition.equals(result.position)) {\n                result = new ContentHitTestResult(normalizedPosition, result.spanNode, injectedText);\n            }\n        }\n        // Snap to the nearest soft tab boundary if atomic soft tabs are enabled.\n        if (result.type === 1 /* Content */ && ctx.stickyTabStops) {\n            result = new ContentHitTestResult(this._snapToSoftTabBoundary(result.position, ctx.model), result.spanNode, result.injectedText);\n        }\n        return result;\n    }\n}\nexport function shadowCaretRangeFromPoint(shadowRoot, x, y) {\n    const range = document.createRange();\n    // Get the element under the point\n    let el = shadowRoot.elementFromPoint(x, y);\n    if (el !== null) {\n        // Get the last child of the element until its firstChild is a text node\n        // This assumes that the pointer is on the right of the line, out of the tokens\n        // and that we want to get the offset of the last token of the line\n        while (el && el.firstChild && el.firstChild.nodeType !== el.firstChild.TEXT_NODE && el.lastChild && el.lastChild.firstChild) {\n            el = el.lastChild;\n        }\n        // Grab its rect\n        const rect = el.getBoundingClientRect();\n        // And its font\n        const font = window.getComputedStyle(el, null).getPropertyValue('font');\n        // And also its txt content\n        const text = el.innerText;\n        // Position the pixel cursor at the left of the element\n        let pixelCursor = rect.left;\n        let offset = 0;\n        let step;\n        // If the point is on the right of the box put the cursor after the last character\n        if (x > rect.left + rect.width) {\n            offset = text.length;\n        }\n        else {\n            const charWidthReader = CharWidthReader.getInstance();\n            // Goes through all the characters of the innerText, and checks if the x of the point\n            // belongs to the character.\n            for (let i = 0; i < text.length + 1; i++) {\n                // The step is half the width of the character\n                step = charWidthReader.getCharWidth(text.charAt(i), font) / 2;\n                // Move to the center of the character\n                pixelCursor += step;\n                // If the x of the point is smaller that the position of the cursor, the point is over that character\n                if (x < pixelCursor) {\n                    offset = i;\n                    break;\n                }\n                // Move between the current character and the next\n                pixelCursor += step;\n            }\n        }\n        // Creates a range with the text node of the element and set the offset found\n        range.setStart(el.firstChild, offset);\n        range.setEnd(el.firstChild, offset);\n    }\n    return range;\n}\nclass CharWidthReader {\n    constructor() {\n        this._cache = {};\n        this._canvas = document.createElement('canvas');\n    }\n    static getInstance() {\n        if (!CharWidthReader._INSTANCE) {\n            CharWidthReader._INSTANCE = new CharWidthReader();\n        }\n        return CharWidthReader._INSTANCE;\n    }\n    getCharWidth(char, font) {\n        const cacheKey = char + font;\n        if (this._cache[cacheKey]) {\n            return this._cache[cacheKey];\n        }\n        const context = this._canvas.getContext('2d');\n        context.font = font;\n        const metrics = context.measureText(char);\n        const width = metrics.width;\n        this._cache[cacheKey] = width;\n        return width;\n    }\n}\nCharWidthReader._INSTANCE = null;\n"]},"metadata":{},"sourceType":"module"}