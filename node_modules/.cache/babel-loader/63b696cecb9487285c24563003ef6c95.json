{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as platform from '../../../base/common/platform.js';\nimport { EditorZoom } from './editorZoom.js';\n/**\n * Determined from empirical observations.\n * @internal\n */\n\nconst GOLDEN_LINE_HEIGHT_RATIO = platform.isMacintosh ? 1.5 : 1.35;\n/**\n * @internal\n */\n\nconst MINIMUM_LINE_HEIGHT = 8;\nexport class BareFontInfo {\n  /**\n   * @internal\n   */\n  constructor(opts) {\n    this._bareFontInfoBrand = undefined;\n    this.zoomLevel = opts.zoomLevel;\n    this.pixelRatio = opts.pixelRatio;\n    this.fontFamily = String(opts.fontFamily);\n    this.fontWeight = String(opts.fontWeight);\n    this.fontSize = opts.fontSize;\n    this.fontFeatureSettings = opts.fontFeatureSettings;\n    this.lineHeight = opts.lineHeight | 0;\n    this.letterSpacing = opts.letterSpacing;\n  }\n  /**\n   * @internal\n   */\n\n\n  static createFromValidatedSettings(options, zoomLevel, pixelRatio, ignoreEditorZoom) {\n    const fontFamily = options.get(42\n    /* fontFamily */\n    );\n    const fontWeight = options.get(46\n    /* fontWeight */\n    );\n    const fontSize = options.get(45\n    /* fontSize */\n    );\n    const fontFeatureSettings = options.get(44\n    /* fontLigatures */\n    );\n    const lineHeight = options.get(58\n    /* lineHeight */\n    );\n    const letterSpacing = options.get(55\n    /* letterSpacing */\n    );\n    return BareFontInfo._create(fontFamily, fontWeight, fontSize, fontFeatureSettings, lineHeight, letterSpacing, zoomLevel, pixelRatio, ignoreEditorZoom);\n  }\n  /**\n   * @internal\n   */\n\n\n  static _create(fontFamily, fontWeight, fontSize, fontFeatureSettings, lineHeight, letterSpacing, zoomLevel, pixelRatio, ignoreEditorZoom) {\n    if (lineHeight === 0) {\n      lineHeight = GOLDEN_LINE_HEIGHT_RATIO * fontSize;\n    } else if (lineHeight < MINIMUM_LINE_HEIGHT) {\n      // Values too small to be line heights in pixels are probably in ems. Accept them gracefully.\n      lineHeight = lineHeight * fontSize;\n    } // Enforce integer, minimum constraints\n\n\n    lineHeight = Math.round(lineHeight);\n\n    if (lineHeight < MINIMUM_LINE_HEIGHT) {\n      lineHeight = MINIMUM_LINE_HEIGHT;\n    }\n\n    const editorZoomLevelMultiplier = 1 + (ignoreEditorZoom ? 0 : EditorZoom.getZoomLevel() * 0.1);\n    fontSize *= editorZoomLevelMultiplier;\n    lineHeight *= editorZoomLevelMultiplier;\n    return new BareFontInfo({\n      zoomLevel: zoomLevel,\n      pixelRatio: pixelRatio,\n      fontFamily: fontFamily,\n      fontWeight: fontWeight,\n      fontSize: fontSize,\n      fontFeatureSettings: fontFeatureSettings,\n      lineHeight: lineHeight,\n      letterSpacing: letterSpacing\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  getId() {\n    return this.zoomLevel + '-' + this.pixelRatio + '-' + this.fontFamily + '-' + this.fontWeight + '-' + this.fontSize + '-' + this.fontFeatureSettings + '-' + this.lineHeight + '-' + this.letterSpacing;\n  }\n  /**\n   * @internal\n   */\n\n\n  getMassagedFontFamily(fallbackFontFamily) {\n    const fontFamily = BareFontInfo._wrapInQuotes(this.fontFamily);\n\n    if (fallbackFontFamily && this.fontFamily !== fallbackFontFamily) {\n      return `${fontFamily}, ${fallbackFontFamily}`;\n    }\n\n    return fontFamily;\n  }\n\n  static _wrapInQuotes(fontFamily) {\n    if (/[,\"']/.test(fontFamily)) {\n      // Looks like the font family might be already escaped\n      return fontFamily;\n    }\n\n    if (/[+ ]/.test(fontFamily)) {\n      // Wrap a font family using + or <space> with quotes\n      return `\"${fontFamily}\"`;\n    }\n\n    return fontFamily;\n  }\n\n} // change this whenever `FontInfo` members are changed\n\nexport const SERIALIZED_FONT_INFO_VERSION = 1;\nexport class FontInfo extends BareFontInfo {\n  /**\n   * @internal\n   */\n  constructor(opts, isTrusted) {\n    super(opts);\n    this._editorStylingBrand = undefined;\n    this.version = SERIALIZED_FONT_INFO_VERSION;\n    this.isTrusted = isTrusted;\n    this.isMonospace = opts.isMonospace;\n    this.typicalHalfwidthCharacterWidth = opts.typicalHalfwidthCharacterWidth;\n    this.typicalFullwidthCharacterWidth = opts.typicalFullwidthCharacterWidth;\n    this.canUseHalfwidthRightwardsArrow = opts.canUseHalfwidthRightwardsArrow;\n    this.spaceWidth = opts.spaceWidth;\n    this.middotWidth = opts.middotWidth;\n    this.wsmiddotWidth = opts.wsmiddotWidth;\n    this.maxDigitWidth = opts.maxDigitWidth;\n  }\n  /**\n   * @internal\n   */\n\n\n  equals(other) {\n    return this.fontFamily === other.fontFamily && this.fontWeight === other.fontWeight && this.fontSize === other.fontSize && this.fontFeatureSettings === other.fontFeatureSettings && this.lineHeight === other.lineHeight && this.letterSpacing === other.letterSpacing && this.typicalHalfwidthCharacterWidth === other.typicalHalfwidthCharacterWidth && this.typicalFullwidthCharacterWidth === other.typicalFullwidthCharacterWidth && this.canUseHalfwidthRightwardsArrow === other.canUseHalfwidthRightwardsArrow && this.spaceWidth === other.spaceWidth && this.middotWidth === other.middotWidth && this.wsmiddotWidth === other.wsmiddotWidth && this.maxDigitWidth === other.maxDigitWidth;\n  }\n\n}","map":{"version":3,"sources":["/home/umut/Documents/cs/cs410/Project2Group14/node_modules/monaco-editor/esm/vs/editor/common/config/fontInfo.js"],"names":["platform","EditorZoom","GOLDEN_LINE_HEIGHT_RATIO","isMacintosh","MINIMUM_LINE_HEIGHT","BareFontInfo","constructor","opts","_bareFontInfoBrand","undefined","zoomLevel","pixelRatio","fontFamily","String","fontWeight","fontSize","fontFeatureSettings","lineHeight","letterSpacing","createFromValidatedSettings","options","ignoreEditorZoom","get","_create","Math","round","editorZoomLevelMultiplier","getZoomLevel","getId","getMassagedFontFamily","fallbackFontFamily","_wrapInQuotes","test","SERIALIZED_FONT_INFO_VERSION","FontInfo","isTrusted","_editorStylingBrand","version","isMonospace","typicalHalfwidthCharacterWidth","typicalFullwidthCharacterWidth","canUseHalfwidthRightwardsArrow","spaceWidth","middotWidth","wsmiddotWidth","maxDigitWidth","equals","other"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as platform from '../../../base/common/platform.js';\nimport { EditorZoom } from './editorZoom.js';\n/**\n * Determined from empirical observations.\n * @internal\n */\nconst GOLDEN_LINE_HEIGHT_RATIO = platform.isMacintosh ? 1.5 : 1.35;\n/**\n * @internal\n */\nconst MINIMUM_LINE_HEIGHT = 8;\nexport class BareFontInfo {\n    /**\n     * @internal\n     */\n    constructor(opts) {\n        this._bareFontInfoBrand = undefined;\n        this.zoomLevel = opts.zoomLevel;\n        this.pixelRatio = opts.pixelRatio;\n        this.fontFamily = String(opts.fontFamily);\n        this.fontWeight = String(opts.fontWeight);\n        this.fontSize = opts.fontSize;\n        this.fontFeatureSettings = opts.fontFeatureSettings;\n        this.lineHeight = opts.lineHeight | 0;\n        this.letterSpacing = opts.letterSpacing;\n    }\n    /**\n     * @internal\n     */\n    static createFromValidatedSettings(options, zoomLevel, pixelRatio, ignoreEditorZoom) {\n        const fontFamily = options.get(42 /* fontFamily */);\n        const fontWeight = options.get(46 /* fontWeight */);\n        const fontSize = options.get(45 /* fontSize */);\n        const fontFeatureSettings = options.get(44 /* fontLigatures */);\n        const lineHeight = options.get(58 /* lineHeight */);\n        const letterSpacing = options.get(55 /* letterSpacing */);\n        return BareFontInfo._create(fontFamily, fontWeight, fontSize, fontFeatureSettings, lineHeight, letterSpacing, zoomLevel, pixelRatio, ignoreEditorZoom);\n    }\n    /**\n     * @internal\n     */\n    static _create(fontFamily, fontWeight, fontSize, fontFeatureSettings, lineHeight, letterSpacing, zoomLevel, pixelRatio, ignoreEditorZoom) {\n        if (lineHeight === 0) {\n            lineHeight = GOLDEN_LINE_HEIGHT_RATIO * fontSize;\n        }\n        else if (lineHeight < MINIMUM_LINE_HEIGHT) {\n            // Values too small to be line heights in pixels are probably in ems. Accept them gracefully.\n            lineHeight = lineHeight * fontSize;\n        }\n        // Enforce integer, minimum constraints\n        lineHeight = Math.round(lineHeight);\n        if (lineHeight < MINIMUM_LINE_HEIGHT) {\n            lineHeight = MINIMUM_LINE_HEIGHT;\n        }\n        const editorZoomLevelMultiplier = 1 + (ignoreEditorZoom ? 0 : EditorZoom.getZoomLevel() * 0.1);\n        fontSize *= editorZoomLevelMultiplier;\n        lineHeight *= editorZoomLevelMultiplier;\n        return new BareFontInfo({\n            zoomLevel: zoomLevel,\n            pixelRatio: pixelRatio,\n            fontFamily: fontFamily,\n            fontWeight: fontWeight,\n            fontSize: fontSize,\n            fontFeatureSettings: fontFeatureSettings,\n            lineHeight: lineHeight,\n            letterSpacing: letterSpacing\n        });\n    }\n    /**\n     * @internal\n     */\n    getId() {\n        return this.zoomLevel + '-' + this.pixelRatio + '-' + this.fontFamily + '-' + this.fontWeight + '-' + this.fontSize + '-' + this.fontFeatureSettings + '-' + this.lineHeight + '-' + this.letterSpacing;\n    }\n    /**\n     * @internal\n     */\n    getMassagedFontFamily(fallbackFontFamily) {\n        const fontFamily = BareFontInfo._wrapInQuotes(this.fontFamily);\n        if (fallbackFontFamily && this.fontFamily !== fallbackFontFamily) {\n            return `${fontFamily}, ${fallbackFontFamily}`;\n        }\n        return fontFamily;\n    }\n    static _wrapInQuotes(fontFamily) {\n        if (/[,\"']/.test(fontFamily)) {\n            // Looks like the font family might be already escaped\n            return fontFamily;\n        }\n        if (/[+ ]/.test(fontFamily)) {\n            // Wrap a font family using + or <space> with quotes\n            return `\"${fontFamily}\"`;\n        }\n        return fontFamily;\n    }\n}\n// change this whenever `FontInfo` members are changed\nexport const SERIALIZED_FONT_INFO_VERSION = 1;\nexport class FontInfo extends BareFontInfo {\n    /**\n     * @internal\n     */\n    constructor(opts, isTrusted) {\n        super(opts);\n        this._editorStylingBrand = undefined;\n        this.version = SERIALIZED_FONT_INFO_VERSION;\n        this.isTrusted = isTrusted;\n        this.isMonospace = opts.isMonospace;\n        this.typicalHalfwidthCharacterWidth = opts.typicalHalfwidthCharacterWidth;\n        this.typicalFullwidthCharacterWidth = opts.typicalFullwidthCharacterWidth;\n        this.canUseHalfwidthRightwardsArrow = opts.canUseHalfwidthRightwardsArrow;\n        this.spaceWidth = opts.spaceWidth;\n        this.middotWidth = opts.middotWidth;\n        this.wsmiddotWidth = opts.wsmiddotWidth;\n        this.maxDigitWidth = opts.maxDigitWidth;\n    }\n    /**\n     * @internal\n     */\n    equals(other) {\n        return (this.fontFamily === other.fontFamily\n            && this.fontWeight === other.fontWeight\n            && this.fontSize === other.fontSize\n            && this.fontFeatureSettings === other.fontFeatureSettings\n            && this.lineHeight === other.lineHeight\n            && this.letterSpacing === other.letterSpacing\n            && this.typicalHalfwidthCharacterWidth === other.typicalHalfwidthCharacterWidth\n            && this.typicalFullwidthCharacterWidth === other.typicalFullwidthCharacterWidth\n            && this.canUseHalfwidthRightwardsArrow === other.canUseHalfwidthRightwardsArrow\n            && this.spaceWidth === other.spaceWidth\n            && this.middotWidth === other.middotWidth\n            && this.wsmiddotWidth === other.wsmiddotWidth\n            && this.maxDigitWidth === other.maxDigitWidth);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}