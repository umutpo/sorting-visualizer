{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport * as dom from '../../../base/browser/dom.js';\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { AbstractCodeEditorService } from './abstractCodeEditorService.js';\nimport { isThemeColor } from '../../common/editorCommon.js';\nimport { OverviewRulerLane } from '../../common/model.js';\nimport { IThemeService } from '../../../platform/theme/common/themeService.js';\nexport class RefCountedStyleSheet {\n  constructor(parent, editorId, styleSheet) {\n    this._parent = parent;\n    this._editorId = editorId;\n    this._styleSheet = styleSheet;\n    this._refCount = 0;\n  }\n\n  ref() {\n    this._refCount++;\n  }\n\n  unref() {\n    var _a;\n\n    this._refCount--;\n\n    if (this._refCount === 0) {\n      (_a = this._styleSheet.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(this._styleSheet);\n\n      this._parent._removeEditorStyleSheets(this._editorId);\n    }\n  }\n\n  insertRule(rule, index) {\n    const sheet = this._styleSheet.sheet;\n    sheet.insertRule(rule, index);\n  }\n\n  removeRulesContainingSelector(ruleName) {\n    dom.removeCSSRulesContainingSelector(ruleName, this._styleSheet);\n  }\n\n}\nexport class GlobalStyleSheet {\n  constructor(styleSheet) {\n    this._styleSheet = styleSheet;\n  }\n\n  ref() {}\n\n  unref() {}\n\n  insertRule(rule, index) {\n    const sheet = this._styleSheet.sheet;\n    sheet.insertRule(rule, index);\n  }\n\n  removeRulesContainingSelector(ruleName) {\n    dom.removeCSSRulesContainingSelector(ruleName, this._styleSheet);\n  }\n\n}\nlet CodeEditorServiceImpl = class CodeEditorServiceImpl extends AbstractCodeEditorService {\n  constructor(styleSheet, themeService) {\n    super();\n    this._decorationOptionProviders = new Map();\n    this._editorStyleSheets = new Map();\n    this._globalStyleSheet = styleSheet ? styleSheet : null;\n    this._themeService = themeService;\n  }\n\n  _getOrCreateGlobalStyleSheet() {\n    if (!this._globalStyleSheet) {\n      this._globalStyleSheet = new GlobalStyleSheet(dom.createStyleSheet());\n    }\n\n    return this._globalStyleSheet;\n  }\n\n  _getOrCreateStyleSheet(editor) {\n    if (!editor) {\n      return this._getOrCreateGlobalStyleSheet();\n    }\n\n    const domNode = editor.getContainerDomNode();\n\n    if (!dom.isInShadowDOM(domNode)) {\n      return this._getOrCreateGlobalStyleSheet();\n    }\n\n    const editorId = editor.getId();\n\n    if (!this._editorStyleSheets.has(editorId)) {\n      const refCountedStyleSheet = new RefCountedStyleSheet(this, editorId, dom.createStyleSheet(domNode));\n\n      this._editorStyleSheets.set(editorId, refCountedStyleSheet);\n    }\n\n    return this._editorStyleSheets.get(editorId);\n  }\n\n  _removeEditorStyleSheets(editorId) {\n    this._editorStyleSheets.delete(editorId);\n  }\n\n  registerDecorationType(description, key, options, parentTypeKey, editor) {\n    let provider = this._decorationOptionProviders.get(key);\n\n    if (!provider) {\n      const styleSheet = this._getOrCreateStyleSheet(editor);\n\n      const providerArgs = {\n        styleSheet: styleSheet,\n        key: key,\n        parentTypeKey: parentTypeKey,\n        options: options || Object.create(null)\n      };\n\n      if (!parentTypeKey) {\n        provider = new DecorationTypeOptionsProvider(description, this._themeService, styleSheet, providerArgs);\n      } else {\n        provider = new DecorationSubTypeOptionsProvider(this._themeService, styleSheet, providerArgs);\n      }\n\n      this._decorationOptionProviders.set(key, provider);\n\n      this._onDecorationTypeRegistered.fire(key);\n    }\n\n    provider.refCount++;\n  }\n\n  removeDecorationType(key) {\n    const provider = this._decorationOptionProviders.get(key);\n\n    if (provider) {\n      provider.refCount--;\n\n      if (provider.refCount <= 0) {\n        this._decorationOptionProviders.delete(key);\n\n        provider.dispose();\n        this.listCodeEditors().forEach(ed => ed.removeDecorations(key));\n      }\n    }\n  }\n\n  resolveDecorationOptions(decorationTypeKey, writable) {\n    const provider = this._decorationOptionProviders.get(decorationTypeKey);\n\n    if (!provider) {\n      throw new Error('Unknown decoration type key: ' + decorationTypeKey);\n    }\n\n    return provider.getOptions(this, writable);\n  }\n\n};\nCodeEditorServiceImpl = __decorate([__param(1, IThemeService)], CodeEditorServiceImpl);\nexport { CodeEditorServiceImpl };\nexport class DecorationSubTypeOptionsProvider {\n  constructor(themeService, styleSheet, providerArgs) {\n    this._styleSheet = styleSheet;\n\n    this._styleSheet.ref();\n\n    this._parentTypeKey = providerArgs.parentTypeKey;\n    this.refCount = 0;\n    this._beforeContentRules = new DecorationCSSRules(3\n    /* BeforeContentClassName */\n    , providerArgs, themeService);\n    this._afterContentRules = new DecorationCSSRules(4\n    /* AfterContentClassName */\n    , providerArgs, themeService);\n  }\n\n  getOptions(codeEditorService, writable) {\n    const options = codeEditorService.resolveDecorationOptions(this._parentTypeKey, true);\n\n    if (this._beforeContentRules) {\n      options.beforeContentClassName = this._beforeContentRules.className;\n    }\n\n    if (this._afterContentRules) {\n      options.afterContentClassName = this._afterContentRules.className;\n    }\n\n    return options;\n  }\n\n  dispose() {\n    if (this._beforeContentRules) {\n      this._beforeContentRules.dispose();\n\n      this._beforeContentRules = null;\n    }\n\n    if (this._afterContentRules) {\n      this._afterContentRules.dispose();\n\n      this._afterContentRules = null;\n    }\n\n    this._styleSheet.unref();\n  }\n\n}\nexport class DecorationTypeOptionsProvider {\n  constructor(description, themeService, styleSheet, providerArgs) {\n    this._disposables = new DisposableStore();\n    this.description = description;\n    this._styleSheet = styleSheet;\n\n    this._styleSheet.ref();\n\n    this.refCount = 0;\n\n    const createCSSRules = type => {\n      const rules = new DecorationCSSRules(type, providerArgs, themeService);\n\n      this._disposables.add(rules);\n\n      if (rules.hasContent) {\n        return rules.className;\n      }\n\n      return undefined;\n    };\n\n    const createInlineCSSRules = type => {\n      const rules = new DecorationCSSRules(type, providerArgs, themeService);\n\n      this._disposables.add(rules);\n\n      if (rules.hasContent) {\n        return {\n          className: rules.className,\n          hasLetterSpacing: rules.hasLetterSpacing\n        };\n      }\n\n      return null;\n    };\n\n    this.className = createCSSRules(0\n    /* ClassName */\n    );\n    const inlineData = createInlineCSSRules(1\n    /* InlineClassName */\n    );\n\n    if (inlineData) {\n      this.inlineClassName = inlineData.className;\n      this.inlineClassNameAffectsLetterSpacing = inlineData.hasLetterSpacing;\n    }\n\n    this.beforeContentClassName = createCSSRules(3\n    /* BeforeContentClassName */\n    );\n    this.afterContentClassName = createCSSRules(4\n    /* AfterContentClassName */\n    );\n\n    if (providerArgs.options.beforeInjectedText && providerArgs.options.beforeInjectedText.contentText) {\n      const beforeInlineData = createInlineCSSRules(5\n      /* BeforeInjectedTextClassName */\n      );\n      this.beforeInjectedText = {\n        content: providerArgs.options.beforeInjectedText.contentText,\n        inlineClassName: beforeInlineData === null || beforeInlineData === void 0 ? void 0 : beforeInlineData.className,\n        inlineClassNameAffectsLetterSpacing: (beforeInlineData === null || beforeInlineData === void 0 ? void 0 : beforeInlineData.hasLetterSpacing) || providerArgs.options.beforeInjectedText.affectsLetterSpacing\n      };\n    }\n\n    if (providerArgs.options.afterInjectedText && providerArgs.options.afterInjectedText.contentText) {\n      const afterInlineData = createInlineCSSRules(6\n      /* AfterInjectedTextClassName */\n      );\n      this.afterInjectedText = {\n        content: providerArgs.options.afterInjectedText.contentText,\n        inlineClassName: afterInlineData === null || afterInlineData === void 0 ? void 0 : afterInlineData.className,\n        inlineClassNameAffectsLetterSpacing: (afterInlineData === null || afterInlineData === void 0 ? void 0 : afterInlineData.hasLetterSpacing) || providerArgs.options.afterInjectedText.affectsLetterSpacing\n      };\n    }\n\n    this.glyphMarginClassName = createCSSRules(2\n    /* GlyphMarginClassName */\n    );\n    const options = providerArgs.options;\n    this.isWholeLine = Boolean(options.isWholeLine);\n    this.stickiness = options.rangeBehavior;\n    const lightOverviewRulerColor = options.light && options.light.overviewRulerColor || options.overviewRulerColor;\n    const darkOverviewRulerColor = options.dark && options.dark.overviewRulerColor || options.overviewRulerColor;\n\n    if (typeof lightOverviewRulerColor !== 'undefined' || typeof darkOverviewRulerColor !== 'undefined') {\n      this.overviewRuler = {\n        color: lightOverviewRulerColor || darkOverviewRulerColor,\n        darkColor: darkOverviewRulerColor || lightOverviewRulerColor,\n        position: options.overviewRulerLane || OverviewRulerLane.Center\n      };\n    }\n  }\n\n  getOptions(codeEditorService, writable) {\n    if (!writable) {\n      return this;\n    }\n\n    return {\n      description: this.description,\n      inlineClassName: this.inlineClassName,\n      beforeContentClassName: this.beforeContentClassName,\n      afterContentClassName: this.afterContentClassName,\n      className: this.className,\n      glyphMarginClassName: this.glyphMarginClassName,\n      isWholeLine: this.isWholeLine,\n      overviewRuler: this.overviewRuler,\n      stickiness: this.stickiness,\n      before: this.beforeInjectedText,\n      after: this.afterInjectedText\n    };\n  }\n\n  dispose() {\n    this._disposables.dispose();\n\n    this._styleSheet.unref();\n  }\n\n}\nexport const _CSS_MAP = {\n  color: 'color:{0} !important;',\n  opacity: 'opacity:{0};',\n  backgroundColor: 'background-color:{0};',\n  outline: 'outline:{0};',\n  outlineColor: 'outline-color:{0};',\n  outlineStyle: 'outline-style:{0};',\n  outlineWidth: 'outline-width:{0};',\n  border: 'border:{0};',\n  borderColor: 'border-color:{0};',\n  borderRadius: 'border-radius:{0};',\n  borderSpacing: 'border-spacing:{0};',\n  borderStyle: 'border-style:{0};',\n  borderWidth: 'border-width:{0};',\n  fontStyle: 'font-style:{0};',\n  fontWeight: 'font-weight:{0};',\n  fontSize: 'font-size:{0};',\n  fontFamily: 'font-family:{0};',\n  textDecoration: 'text-decoration:{0};',\n  cursor: 'cursor:{0};',\n  letterSpacing: 'letter-spacing:{0};',\n  gutterIconPath: 'background:{0} center center no-repeat;',\n  gutterIconSize: 'background-size:{0};',\n  contentText: 'content:\\'{0}\\';',\n  contentIconPath: 'content:{0};',\n  margin: 'margin:{0};',\n  padding: 'padding:{0};',\n  width: 'width:{0};',\n  height: 'height:{0};',\n  verticalAlign: 'vertical-align:{0};'\n};\n\nclass DecorationCSSRules {\n  constructor(ruleType, providerArgs, themeService) {\n    this._theme = themeService.getColorTheme();\n    this._ruleType = ruleType;\n    this._providerArgs = providerArgs;\n    this._usesThemeColors = false;\n    this._hasContent = false;\n    this._hasLetterSpacing = false;\n    let className = CSSNameHelper.getClassName(this._providerArgs.key, ruleType);\n\n    if (this._providerArgs.parentTypeKey) {\n      className = className + ' ' + CSSNameHelper.getClassName(this._providerArgs.parentTypeKey, ruleType);\n    }\n\n    this._className = className;\n    this._unThemedSelector = CSSNameHelper.getSelector(this._providerArgs.key, this._providerArgs.parentTypeKey, ruleType);\n\n    this._buildCSS();\n\n    if (this._usesThemeColors) {\n      this._themeListener = themeService.onDidColorThemeChange(theme => {\n        this._theme = themeService.getColorTheme();\n\n        this._removeCSS();\n\n        this._buildCSS();\n      });\n    } else {\n      this._themeListener = null;\n    }\n  }\n\n  dispose() {\n    if (this._hasContent) {\n      this._removeCSS();\n\n      this._hasContent = false;\n    }\n\n    if (this._themeListener) {\n      this._themeListener.dispose();\n\n      this._themeListener = null;\n    }\n  }\n\n  get hasContent() {\n    return this._hasContent;\n  }\n\n  get hasLetterSpacing() {\n    return this._hasLetterSpacing;\n  }\n\n  get className() {\n    return this._className;\n  }\n\n  _buildCSS() {\n    const options = this._providerArgs.options;\n    let unthemedCSS, lightCSS, darkCSS;\n\n    switch (this._ruleType) {\n      case 0\n      /* ClassName */\n      :\n        unthemedCSS = this.getCSSTextForModelDecorationClassName(options);\n        lightCSS = this.getCSSTextForModelDecorationClassName(options.light);\n        darkCSS = this.getCSSTextForModelDecorationClassName(options.dark);\n        break;\n\n      case 1\n      /* InlineClassName */\n      :\n        unthemedCSS = this.getCSSTextForModelDecorationInlineClassName(options);\n        lightCSS = this.getCSSTextForModelDecorationInlineClassName(options.light);\n        darkCSS = this.getCSSTextForModelDecorationInlineClassName(options.dark);\n        break;\n\n      case 2\n      /* GlyphMarginClassName */\n      :\n        unthemedCSS = this.getCSSTextForModelDecorationGlyphMarginClassName(options);\n        lightCSS = this.getCSSTextForModelDecorationGlyphMarginClassName(options.light);\n        darkCSS = this.getCSSTextForModelDecorationGlyphMarginClassName(options.dark);\n        break;\n\n      case 3\n      /* BeforeContentClassName */\n      :\n        unthemedCSS = this.getCSSTextForModelDecorationContentClassName(options.before);\n        lightCSS = this.getCSSTextForModelDecorationContentClassName(options.light && options.light.before);\n        darkCSS = this.getCSSTextForModelDecorationContentClassName(options.dark && options.dark.before);\n        break;\n\n      case 4\n      /* AfterContentClassName */\n      :\n        unthemedCSS = this.getCSSTextForModelDecorationContentClassName(options.after);\n        lightCSS = this.getCSSTextForModelDecorationContentClassName(options.light && options.light.after);\n        darkCSS = this.getCSSTextForModelDecorationContentClassName(options.dark && options.dark.after);\n        break;\n\n      case 5\n      /* BeforeInjectedTextClassName */\n      :\n        unthemedCSS = this.getCSSTextForModelDecorationContentClassName(options.beforeInjectedText);\n        lightCSS = this.getCSSTextForModelDecorationContentClassName(options.light && options.light.beforeInjectedText);\n        darkCSS = this.getCSSTextForModelDecorationContentClassName(options.dark && options.dark.beforeInjectedText);\n        break;\n\n      case 6\n      /* AfterInjectedTextClassName */\n      :\n        unthemedCSS = this.getCSSTextForModelDecorationContentClassName(options.afterInjectedText);\n        lightCSS = this.getCSSTextForModelDecorationContentClassName(options.light && options.light.afterInjectedText);\n        darkCSS = this.getCSSTextForModelDecorationContentClassName(options.dark && options.dark.afterInjectedText);\n        break;\n\n      default:\n        throw new Error('Unknown rule type: ' + this._ruleType);\n    }\n\n    const sheet = this._providerArgs.styleSheet;\n    let hasContent = false;\n\n    if (unthemedCSS.length > 0) {\n      sheet.insertRule(`${this._unThemedSelector} {${unthemedCSS}}`, 0);\n      hasContent = true;\n    }\n\n    if (lightCSS.length > 0) {\n      sheet.insertRule(`.vs${this._unThemedSelector} {${lightCSS}}`, 0);\n      hasContent = true;\n    }\n\n    if (darkCSS.length > 0) {\n      sheet.insertRule(`.vs-dark${this._unThemedSelector}, .hc-black${this._unThemedSelector} {${darkCSS}}`, 0);\n      hasContent = true;\n    }\n\n    this._hasContent = hasContent;\n  }\n\n  _removeCSS() {\n    this._providerArgs.styleSheet.removeRulesContainingSelector(this._unThemedSelector);\n  }\n  /**\n   * Build the CSS for decorations styled via `className`.\n   */\n\n\n  getCSSTextForModelDecorationClassName(opts) {\n    if (!opts) {\n      return '';\n    }\n\n    const cssTextArr = [];\n    this.collectCSSText(opts, ['backgroundColor'], cssTextArr);\n    this.collectCSSText(opts, ['outline', 'outlineColor', 'outlineStyle', 'outlineWidth'], cssTextArr);\n    this.collectBorderSettingsCSSText(opts, cssTextArr);\n    return cssTextArr.join('');\n  }\n  /**\n   * Build the CSS for decorations styled via `inlineClassName`.\n   */\n\n\n  getCSSTextForModelDecorationInlineClassName(opts) {\n    if (!opts) {\n      return '';\n    }\n\n    const cssTextArr = [];\n    this.collectCSSText(opts, ['fontStyle', 'fontWeight', 'textDecoration', 'cursor', 'color', 'opacity', 'letterSpacing'], cssTextArr);\n\n    if (opts.letterSpacing) {\n      this._hasLetterSpacing = true;\n    }\n\n    return cssTextArr.join('');\n  }\n  /**\n   * Build the CSS for decorations styled before or after content.\n   */\n\n\n  getCSSTextForModelDecorationContentClassName(opts) {\n    if (!opts) {\n      return '';\n    }\n\n    const cssTextArr = [];\n\n    if (typeof opts !== 'undefined') {\n      this.collectBorderSettingsCSSText(opts, cssTextArr);\n\n      if (typeof opts.contentIconPath !== 'undefined') {\n        cssTextArr.push(strings.format(_CSS_MAP.contentIconPath, dom.asCSSUrl(URI.revive(opts.contentIconPath))));\n      }\n\n      if (typeof opts.contentText === 'string') {\n        const truncated = opts.contentText.match(/^.*$/m)[0]; // only take first line\n\n        const escaped = truncated.replace(/['\\\\]/g, '\\\\$&');\n        cssTextArr.push(strings.format(_CSS_MAP.contentText, escaped));\n      }\n\n      this.collectCSSText(opts, ['verticalAlign', 'fontStyle', 'fontWeight', 'fontSize', 'fontFamily', 'textDecoration', 'color', 'opacity', 'backgroundColor', 'margin', 'padding'], cssTextArr);\n\n      if (this.collectCSSText(opts, ['width', 'height'], cssTextArr)) {\n        cssTextArr.push('display:inline-block;');\n      }\n    }\n\n    return cssTextArr.join('');\n  }\n  /**\n   * Build the CSS for decorations styled via `glpyhMarginClassName`.\n   */\n\n\n  getCSSTextForModelDecorationGlyphMarginClassName(opts) {\n    if (!opts) {\n      return '';\n    }\n\n    const cssTextArr = [];\n\n    if (typeof opts.gutterIconPath !== 'undefined') {\n      cssTextArr.push(strings.format(_CSS_MAP.gutterIconPath, dom.asCSSUrl(URI.revive(opts.gutterIconPath))));\n\n      if (typeof opts.gutterIconSize !== 'undefined') {\n        cssTextArr.push(strings.format(_CSS_MAP.gutterIconSize, opts.gutterIconSize));\n      }\n    }\n\n    return cssTextArr.join('');\n  }\n\n  collectBorderSettingsCSSText(opts, cssTextArr) {\n    if (this.collectCSSText(opts, ['border', 'borderColor', 'borderRadius', 'borderSpacing', 'borderStyle', 'borderWidth'], cssTextArr)) {\n      cssTextArr.push(strings.format('box-sizing: border-box;'));\n      return true;\n    }\n\n    return false;\n  }\n\n  collectCSSText(opts, properties, cssTextArr) {\n    const lenBefore = cssTextArr.length;\n\n    for (let property of properties) {\n      const value = this.resolveValue(opts[property]);\n\n      if (typeof value === 'string') {\n        cssTextArr.push(strings.format(_CSS_MAP[property], value));\n      }\n    }\n\n    return cssTextArr.length !== lenBefore;\n  }\n\n  resolveValue(value) {\n    if (isThemeColor(value)) {\n      this._usesThemeColors = true;\n\n      const color = this._theme.getColor(value.id);\n\n      if (color) {\n        return color.toString();\n      }\n\n      return 'transparent';\n    }\n\n    return value;\n  }\n\n}\n\nclass CSSNameHelper {\n  static getClassName(key, type) {\n    return 'ced-' + key + '-' + type;\n  }\n\n  static getSelector(key, parentKey, ruleType) {\n    let selector = '.monaco-editor .' + this.getClassName(key, ruleType);\n\n    if (parentKey) {\n      selector = selector + '.' + this.getClassName(parentKey, ruleType);\n    }\n\n    if (ruleType === 3\n    /* BeforeContentClassName */\n    ) {\n      selector += '::before';\n    } else if (ruleType === 4\n    /* AfterContentClassName */\n    ) {\n      selector += '::after';\n    }\n\n    return selector;\n  }\n\n}","map":{"version":3,"sources":["/home/umut/Documents/cs/cs410/Project2Group14/node_modules/monaco-editor/esm/vs/editor/browser/services/codeEditorServiceImpl.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","dom","DisposableStore","strings","URI","AbstractCodeEditorService","isThemeColor","OverviewRulerLane","IThemeService","RefCountedStyleSheet","constructor","parent","editorId","styleSheet","_parent","_editorId","_styleSheet","_refCount","ref","unref","_a","parentNode","removeChild","_removeEditorStyleSheets","insertRule","rule","index","sheet","removeRulesContainingSelector","ruleName","removeCSSRulesContainingSelector","GlobalStyleSheet","CodeEditorServiceImpl","themeService","_decorationOptionProviders","Map","_editorStyleSheets","_globalStyleSheet","_themeService","_getOrCreateGlobalStyleSheet","createStyleSheet","_getOrCreateStyleSheet","editor","domNode","getContainerDomNode","isInShadowDOM","getId","has","refCountedStyleSheet","set","get","delete","registerDecorationType","description","options","parentTypeKey","provider","providerArgs","create","DecorationTypeOptionsProvider","DecorationSubTypeOptionsProvider","_onDecorationTypeRegistered","fire","refCount","removeDecorationType","dispose","listCodeEditors","forEach","ed","removeDecorations","resolveDecorationOptions","decorationTypeKey","writable","Error","getOptions","_parentTypeKey","_beforeContentRules","DecorationCSSRules","_afterContentRules","codeEditorService","beforeContentClassName","className","afterContentClassName","_disposables","createCSSRules","type","rules","add","hasContent","undefined","createInlineCSSRules","hasLetterSpacing","inlineData","inlineClassName","inlineClassNameAffectsLetterSpacing","beforeInjectedText","contentText","beforeInlineData","content","affectsLetterSpacing","afterInjectedText","afterInlineData","glyphMarginClassName","isWholeLine","Boolean","stickiness","rangeBehavior","lightOverviewRulerColor","light","overviewRulerColor","darkOverviewRulerColor","dark","overviewRuler","color","darkColor","position","overviewRulerLane","Center","before","after","_CSS_MAP","opacity","backgroundColor","outline","outlineColor","outlineStyle","outlineWidth","border","borderColor","borderRadius","borderSpacing","borderStyle","borderWidth","fontStyle","fontWeight","fontSize","fontFamily","textDecoration","cursor","letterSpacing","gutterIconPath","gutterIconSize","contentIconPath","margin","padding","width","height","verticalAlign","ruleType","_theme","getColorTheme","_ruleType","_providerArgs","_usesThemeColors","_hasContent","_hasLetterSpacing","CSSNameHelper","getClassName","_className","_unThemedSelector","getSelector","_buildCSS","_themeListener","onDidColorThemeChange","theme","_removeCSS","unthemedCSS","lightCSS","darkCSS","getCSSTextForModelDecorationClassName","getCSSTextForModelDecorationInlineClassName","getCSSTextForModelDecorationGlyphMarginClassName","getCSSTextForModelDecorationContentClassName","opts","cssTextArr","collectCSSText","collectBorderSettingsCSSText","join","push","format","asCSSUrl","revive","truncated","match","escaped","replace","properties","lenBefore","property","value","resolveValue","getColor","id","toString","parentKey","selector"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport * as dom from '../../../base/browser/dom.js';\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { AbstractCodeEditorService } from './abstractCodeEditorService.js';\nimport { isThemeColor } from '../../common/editorCommon.js';\nimport { OverviewRulerLane } from '../../common/model.js';\nimport { IThemeService } from '../../../platform/theme/common/themeService.js';\nexport class RefCountedStyleSheet {\n    constructor(parent, editorId, styleSheet) {\n        this._parent = parent;\n        this._editorId = editorId;\n        this._styleSheet = styleSheet;\n        this._refCount = 0;\n    }\n    ref() {\n        this._refCount++;\n    }\n    unref() {\n        var _a;\n        this._refCount--;\n        if (this._refCount === 0) {\n            (_a = this._styleSheet.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(this._styleSheet);\n            this._parent._removeEditorStyleSheets(this._editorId);\n        }\n    }\n    insertRule(rule, index) {\n        const sheet = this._styleSheet.sheet;\n        sheet.insertRule(rule, index);\n    }\n    removeRulesContainingSelector(ruleName) {\n        dom.removeCSSRulesContainingSelector(ruleName, this._styleSheet);\n    }\n}\nexport class GlobalStyleSheet {\n    constructor(styleSheet) {\n        this._styleSheet = styleSheet;\n    }\n    ref() {\n    }\n    unref() {\n    }\n    insertRule(rule, index) {\n        const sheet = this._styleSheet.sheet;\n        sheet.insertRule(rule, index);\n    }\n    removeRulesContainingSelector(ruleName) {\n        dom.removeCSSRulesContainingSelector(ruleName, this._styleSheet);\n    }\n}\nlet CodeEditorServiceImpl = class CodeEditorServiceImpl extends AbstractCodeEditorService {\n    constructor(styleSheet, themeService) {\n        super();\n        this._decorationOptionProviders = new Map();\n        this._editorStyleSheets = new Map();\n        this._globalStyleSheet = styleSheet ? styleSheet : null;\n        this._themeService = themeService;\n    }\n    _getOrCreateGlobalStyleSheet() {\n        if (!this._globalStyleSheet) {\n            this._globalStyleSheet = new GlobalStyleSheet(dom.createStyleSheet());\n        }\n        return this._globalStyleSheet;\n    }\n    _getOrCreateStyleSheet(editor) {\n        if (!editor) {\n            return this._getOrCreateGlobalStyleSheet();\n        }\n        const domNode = editor.getContainerDomNode();\n        if (!dom.isInShadowDOM(domNode)) {\n            return this._getOrCreateGlobalStyleSheet();\n        }\n        const editorId = editor.getId();\n        if (!this._editorStyleSheets.has(editorId)) {\n            const refCountedStyleSheet = new RefCountedStyleSheet(this, editorId, dom.createStyleSheet(domNode));\n            this._editorStyleSheets.set(editorId, refCountedStyleSheet);\n        }\n        return this._editorStyleSheets.get(editorId);\n    }\n    _removeEditorStyleSheets(editorId) {\n        this._editorStyleSheets.delete(editorId);\n    }\n    registerDecorationType(description, key, options, parentTypeKey, editor) {\n        let provider = this._decorationOptionProviders.get(key);\n        if (!provider) {\n            const styleSheet = this._getOrCreateStyleSheet(editor);\n            const providerArgs = {\n                styleSheet: styleSheet,\n                key: key,\n                parentTypeKey: parentTypeKey,\n                options: options || Object.create(null)\n            };\n            if (!parentTypeKey) {\n                provider = new DecorationTypeOptionsProvider(description, this._themeService, styleSheet, providerArgs);\n            }\n            else {\n                provider = new DecorationSubTypeOptionsProvider(this._themeService, styleSheet, providerArgs);\n            }\n            this._decorationOptionProviders.set(key, provider);\n            this._onDecorationTypeRegistered.fire(key);\n        }\n        provider.refCount++;\n    }\n    removeDecorationType(key) {\n        const provider = this._decorationOptionProviders.get(key);\n        if (provider) {\n            provider.refCount--;\n            if (provider.refCount <= 0) {\n                this._decorationOptionProviders.delete(key);\n                provider.dispose();\n                this.listCodeEditors().forEach((ed) => ed.removeDecorations(key));\n            }\n        }\n    }\n    resolveDecorationOptions(decorationTypeKey, writable) {\n        const provider = this._decorationOptionProviders.get(decorationTypeKey);\n        if (!provider) {\n            throw new Error('Unknown decoration type key: ' + decorationTypeKey);\n        }\n        return provider.getOptions(this, writable);\n    }\n};\nCodeEditorServiceImpl = __decorate([\n    __param(1, IThemeService)\n], CodeEditorServiceImpl);\nexport { CodeEditorServiceImpl };\nexport class DecorationSubTypeOptionsProvider {\n    constructor(themeService, styleSheet, providerArgs) {\n        this._styleSheet = styleSheet;\n        this._styleSheet.ref();\n        this._parentTypeKey = providerArgs.parentTypeKey;\n        this.refCount = 0;\n        this._beforeContentRules = new DecorationCSSRules(3 /* BeforeContentClassName */, providerArgs, themeService);\n        this._afterContentRules = new DecorationCSSRules(4 /* AfterContentClassName */, providerArgs, themeService);\n    }\n    getOptions(codeEditorService, writable) {\n        const options = codeEditorService.resolveDecorationOptions(this._parentTypeKey, true);\n        if (this._beforeContentRules) {\n            options.beforeContentClassName = this._beforeContentRules.className;\n        }\n        if (this._afterContentRules) {\n            options.afterContentClassName = this._afterContentRules.className;\n        }\n        return options;\n    }\n    dispose() {\n        if (this._beforeContentRules) {\n            this._beforeContentRules.dispose();\n            this._beforeContentRules = null;\n        }\n        if (this._afterContentRules) {\n            this._afterContentRules.dispose();\n            this._afterContentRules = null;\n        }\n        this._styleSheet.unref();\n    }\n}\nexport class DecorationTypeOptionsProvider {\n    constructor(description, themeService, styleSheet, providerArgs) {\n        this._disposables = new DisposableStore();\n        this.description = description;\n        this._styleSheet = styleSheet;\n        this._styleSheet.ref();\n        this.refCount = 0;\n        const createCSSRules = (type) => {\n            const rules = new DecorationCSSRules(type, providerArgs, themeService);\n            this._disposables.add(rules);\n            if (rules.hasContent) {\n                return rules.className;\n            }\n            return undefined;\n        };\n        const createInlineCSSRules = (type) => {\n            const rules = new DecorationCSSRules(type, providerArgs, themeService);\n            this._disposables.add(rules);\n            if (rules.hasContent) {\n                return { className: rules.className, hasLetterSpacing: rules.hasLetterSpacing };\n            }\n            return null;\n        };\n        this.className = createCSSRules(0 /* ClassName */);\n        const inlineData = createInlineCSSRules(1 /* InlineClassName */);\n        if (inlineData) {\n            this.inlineClassName = inlineData.className;\n            this.inlineClassNameAffectsLetterSpacing = inlineData.hasLetterSpacing;\n        }\n        this.beforeContentClassName = createCSSRules(3 /* BeforeContentClassName */);\n        this.afterContentClassName = createCSSRules(4 /* AfterContentClassName */);\n        if (providerArgs.options.beforeInjectedText && providerArgs.options.beforeInjectedText.contentText) {\n            const beforeInlineData = createInlineCSSRules(5 /* BeforeInjectedTextClassName */);\n            this.beforeInjectedText = {\n                content: providerArgs.options.beforeInjectedText.contentText,\n                inlineClassName: beforeInlineData === null || beforeInlineData === void 0 ? void 0 : beforeInlineData.className,\n                inlineClassNameAffectsLetterSpacing: (beforeInlineData === null || beforeInlineData === void 0 ? void 0 : beforeInlineData.hasLetterSpacing) || providerArgs.options.beforeInjectedText.affectsLetterSpacing\n            };\n        }\n        if (providerArgs.options.afterInjectedText && providerArgs.options.afterInjectedText.contentText) {\n            const afterInlineData = createInlineCSSRules(6 /* AfterInjectedTextClassName */);\n            this.afterInjectedText = {\n                content: providerArgs.options.afterInjectedText.contentText,\n                inlineClassName: afterInlineData === null || afterInlineData === void 0 ? void 0 : afterInlineData.className,\n                inlineClassNameAffectsLetterSpacing: (afterInlineData === null || afterInlineData === void 0 ? void 0 : afterInlineData.hasLetterSpacing) || providerArgs.options.afterInjectedText.affectsLetterSpacing\n            };\n        }\n        this.glyphMarginClassName = createCSSRules(2 /* GlyphMarginClassName */);\n        const options = providerArgs.options;\n        this.isWholeLine = Boolean(options.isWholeLine);\n        this.stickiness = options.rangeBehavior;\n        const lightOverviewRulerColor = options.light && options.light.overviewRulerColor || options.overviewRulerColor;\n        const darkOverviewRulerColor = options.dark && options.dark.overviewRulerColor || options.overviewRulerColor;\n        if (typeof lightOverviewRulerColor !== 'undefined'\n            || typeof darkOverviewRulerColor !== 'undefined') {\n            this.overviewRuler = {\n                color: lightOverviewRulerColor || darkOverviewRulerColor,\n                darkColor: darkOverviewRulerColor || lightOverviewRulerColor,\n                position: options.overviewRulerLane || OverviewRulerLane.Center\n            };\n        }\n    }\n    getOptions(codeEditorService, writable) {\n        if (!writable) {\n            return this;\n        }\n        return {\n            description: this.description,\n            inlineClassName: this.inlineClassName,\n            beforeContentClassName: this.beforeContentClassName,\n            afterContentClassName: this.afterContentClassName,\n            className: this.className,\n            glyphMarginClassName: this.glyphMarginClassName,\n            isWholeLine: this.isWholeLine,\n            overviewRuler: this.overviewRuler,\n            stickiness: this.stickiness,\n            before: this.beforeInjectedText,\n            after: this.afterInjectedText\n        };\n    }\n    dispose() {\n        this._disposables.dispose();\n        this._styleSheet.unref();\n    }\n}\nexport const _CSS_MAP = {\n    color: 'color:{0} !important;',\n    opacity: 'opacity:{0};',\n    backgroundColor: 'background-color:{0};',\n    outline: 'outline:{0};',\n    outlineColor: 'outline-color:{0};',\n    outlineStyle: 'outline-style:{0};',\n    outlineWidth: 'outline-width:{0};',\n    border: 'border:{0};',\n    borderColor: 'border-color:{0};',\n    borderRadius: 'border-radius:{0};',\n    borderSpacing: 'border-spacing:{0};',\n    borderStyle: 'border-style:{0};',\n    borderWidth: 'border-width:{0};',\n    fontStyle: 'font-style:{0};',\n    fontWeight: 'font-weight:{0};',\n    fontSize: 'font-size:{0};',\n    fontFamily: 'font-family:{0};',\n    textDecoration: 'text-decoration:{0};',\n    cursor: 'cursor:{0};',\n    letterSpacing: 'letter-spacing:{0};',\n    gutterIconPath: 'background:{0} center center no-repeat;',\n    gutterIconSize: 'background-size:{0};',\n    contentText: 'content:\\'{0}\\';',\n    contentIconPath: 'content:{0};',\n    margin: 'margin:{0};',\n    padding: 'padding:{0};',\n    width: 'width:{0};',\n    height: 'height:{0};',\n    verticalAlign: 'vertical-align:{0};',\n};\nclass DecorationCSSRules {\n    constructor(ruleType, providerArgs, themeService) {\n        this._theme = themeService.getColorTheme();\n        this._ruleType = ruleType;\n        this._providerArgs = providerArgs;\n        this._usesThemeColors = false;\n        this._hasContent = false;\n        this._hasLetterSpacing = false;\n        let className = CSSNameHelper.getClassName(this._providerArgs.key, ruleType);\n        if (this._providerArgs.parentTypeKey) {\n            className = className + ' ' + CSSNameHelper.getClassName(this._providerArgs.parentTypeKey, ruleType);\n        }\n        this._className = className;\n        this._unThemedSelector = CSSNameHelper.getSelector(this._providerArgs.key, this._providerArgs.parentTypeKey, ruleType);\n        this._buildCSS();\n        if (this._usesThemeColors) {\n            this._themeListener = themeService.onDidColorThemeChange(theme => {\n                this._theme = themeService.getColorTheme();\n                this._removeCSS();\n                this._buildCSS();\n            });\n        }\n        else {\n            this._themeListener = null;\n        }\n    }\n    dispose() {\n        if (this._hasContent) {\n            this._removeCSS();\n            this._hasContent = false;\n        }\n        if (this._themeListener) {\n            this._themeListener.dispose();\n            this._themeListener = null;\n        }\n    }\n    get hasContent() {\n        return this._hasContent;\n    }\n    get hasLetterSpacing() {\n        return this._hasLetterSpacing;\n    }\n    get className() {\n        return this._className;\n    }\n    _buildCSS() {\n        const options = this._providerArgs.options;\n        let unthemedCSS, lightCSS, darkCSS;\n        switch (this._ruleType) {\n            case 0 /* ClassName */:\n                unthemedCSS = this.getCSSTextForModelDecorationClassName(options);\n                lightCSS = this.getCSSTextForModelDecorationClassName(options.light);\n                darkCSS = this.getCSSTextForModelDecorationClassName(options.dark);\n                break;\n            case 1 /* InlineClassName */:\n                unthemedCSS = this.getCSSTextForModelDecorationInlineClassName(options);\n                lightCSS = this.getCSSTextForModelDecorationInlineClassName(options.light);\n                darkCSS = this.getCSSTextForModelDecorationInlineClassName(options.dark);\n                break;\n            case 2 /* GlyphMarginClassName */:\n                unthemedCSS = this.getCSSTextForModelDecorationGlyphMarginClassName(options);\n                lightCSS = this.getCSSTextForModelDecorationGlyphMarginClassName(options.light);\n                darkCSS = this.getCSSTextForModelDecorationGlyphMarginClassName(options.dark);\n                break;\n            case 3 /* BeforeContentClassName */:\n                unthemedCSS = this.getCSSTextForModelDecorationContentClassName(options.before);\n                lightCSS = this.getCSSTextForModelDecorationContentClassName(options.light && options.light.before);\n                darkCSS = this.getCSSTextForModelDecorationContentClassName(options.dark && options.dark.before);\n                break;\n            case 4 /* AfterContentClassName */:\n                unthemedCSS = this.getCSSTextForModelDecorationContentClassName(options.after);\n                lightCSS = this.getCSSTextForModelDecorationContentClassName(options.light && options.light.after);\n                darkCSS = this.getCSSTextForModelDecorationContentClassName(options.dark && options.dark.after);\n                break;\n            case 5 /* BeforeInjectedTextClassName */:\n                unthemedCSS = this.getCSSTextForModelDecorationContentClassName(options.beforeInjectedText);\n                lightCSS = this.getCSSTextForModelDecorationContentClassName(options.light && options.light.beforeInjectedText);\n                darkCSS = this.getCSSTextForModelDecorationContentClassName(options.dark && options.dark.beforeInjectedText);\n                break;\n            case 6 /* AfterInjectedTextClassName */:\n                unthemedCSS = this.getCSSTextForModelDecorationContentClassName(options.afterInjectedText);\n                lightCSS = this.getCSSTextForModelDecorationContentClassName(options.light && options.light.afterInjectedText);\n                darkCSS = this.getCSSTextForModelDecorationContentClassName(options.dark && options.dark.afterInjectedText);\n                break;\n            default:\n                throw new Error('Unknown rule type: ' + this._ruleType);\n        }\n        const sheet = this._providerArgs.styleSheet;\n        let hasContent = false;\n        if (unthemedCSS.length > 0) {\n            sheet.insertRule(`${this._unThemedSelector} {${unthemedCSS}}`, 0);\n            hasContent = true;\n        }\n        if (lightCSS.length > 0) {\n            sheet.insertRule(`.vs${this._unThemedSelector} {${lightCSS}}`, 0);\n            hasContent = true;\n        }\n        if (darkCSS.length > 0) {\n            sheet.insertRule(`.vs-dark${this._unThemedSelector}, .hc-black${this._unThemedSelector} {${darkCSS}}`, 0);\n            hasContent = true;\n        }\n        this._hasContent = hasContent;\n    }\n    _removeCSS() {\n        this._providerArgs.styleSheet.removeRulesContainingSelector(this._unThemedSelector);\n    }\n    /**\n     * Build the CSS for decorations styled via `className`.\n     */\n    getCSSTextForModelDecorationClassName(opts) {\n        if (!opts) {\n            return '';\n        }\n        const cssTextArr = [];\n        this.collectCSSText(opts, ['backgroundColor'], cssTextArr);\n        this.collectCSSText(opts, ['outline', 'outlineColor', 'outlineStyle', 'outlineWidth'], cssTextArr);\n        this.collectBorderSettingsCSSText(opts, cssTextArr);\n        return cssTextArr.join('');\n    }\n    /**\n     * Build the CSS for decorations styled via `inlineClassName`.\n     */\n    getCSSTextForModelDecorationInlineClassName(opts) {\n        if (!opts) {\n            return '';\n        }\n        const cssTextArr = [];\n        this.collectCSSText(opts, ['fontStyle', 'fontWeight', 'textDecoration', 'cursor', 'color', 'opacity', 'letterSpacing'], cssTextArr);\n        if (opts.letterSpacing) {\n            this._hasLetterSpacing = true;\n        }\n        return cssTextArr.join('');\n    }\n    /**\n     * Build the CSS for decorations styled before or after content.\n     */\n    getCSSTextForModelDecorationContentClassName(opts) {\n        if (!opts) {\n            return '';\n        }\n        const cssTextArr = [];\n        if (typeof opts !== 'undefined') {\n            this.collectBorderSettingsCSSText(opts, cssTextArr);\n            if (typeof opts.contentIconPath !== 'undefined') {\n                cssTextArr.push(strings.format(_CSS_MAP.contentIconPath, dom.asCSSUrl(URI.revive(opts.contentIconPath))));\n            }\n            if (typeof opts.contentText === 'string') {\n                const truncated = opts.contentText.match(/^.*$/m)[0]; // only take first line\n                const escaped = truncated.replace(/['\\\\]/g, '\\\\$&');\n                cssTextArr.push(strings.format(_CSS_MAP.contentText, escaped));\n            }\n            this.collectCSSText(opts, ['verticalAlign', 'fontStyle', 'fontWeight', 'fontSize', 'fontFamily', 'textDecoration', 'color', 'opacity', 'backgroundColor', 'margin', 'padding'], cssTextArr);\n            if (this.collectCSSText(opts, ['width', 'height'], cssTextArr)) {\n                cssTextArr.push('display:inline-block;');\n            }\n        }\n        return cssTextArr.join('');\n    }\n    /**\n     * Build the CSS for decorations styled via `glpyhMarginClassName`.\n     */\n    getCSSTextForModelDecorationGlyphMarginClassName(opts) {\n        if (!opts) {\n            return '';\n        }\n        const cssTextArr = [];\n        if (typeof opts.gutterIconPath !== 'undefined') {\n            cssTextArr.push(strings.format(_CSS_MAP.gutterIconPath, dom.asCSSUrl(URI.revive(opts.gutterIconPath))));\n            if (typeof opts.gutterIconSize !== 'undefined') {\n                cssTextArr.push(strings.format(_CSS_MAP.gutterIconSize, opts.gutterIconSize));\n            }\n        }\n        return cssTextArr.join('');\n    }\n    collectBorderSettingsCSSText(opts, cssTextArr) {\n        if (this.collectCSSText(opts, ['border', 'borderColor', 'borderRadius', 'borderSpacing', 'borderStyle', 'borderWidth'], cssTextArr)) {\n            cssTextArr.push(strings.format('box-sizing: border-box;'));\n            return true;\n        }\n        return false;\n    }\n    collectCSSText(opts, properties, cssTextArr) {\n        const lenBefore = cssTextArr.length;\n        for (let property of properties) {\n            const value = this.resolveValue(opts[property]);\n            if (typeof value === 'string') {\n                cssTextArr.push(strings.format(_CSS_MAP[property], value));\n            }\n        }\n        return cssTextArr.length !== lenBefore;\n    }\n    resolveValue(value) {\n        if (isThemeColor(value)) {\n            this._usesThemeColors = true;\n            const color = this._theme.getColor(value.id);\n            if (color) {\n                return color.toString();\n            }\n            return 'transparent';\n        }\n        return value;\n    }\n}\nclass CSSNameHelper {\n    static getClassName(key, type) {\n        return 'ced-' + key + '-' + type;\n    }\n    static getSelector(key, parentKey, ruleType) {\n        let selector = '.monaco-editor .' + this.getClassName(key, ruleType);\n        if (parentKey) {\n            selector = selector + '.' + this.getClassName(parentKey, ruleType);\n        }\n        if (ruleType === 3 /* BeforeContentClassName */) {\n            selector += '::before';\n        }\n        else if (ruleType === 4 /* AfterContentClassName */) {\n            selector += '::after';\n        }\n        return selector;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}