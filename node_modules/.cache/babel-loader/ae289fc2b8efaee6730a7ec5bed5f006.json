{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport * as objects from '../../../base/common/objects.js';\nimport * as arrays from '../../../base/common/arrays.js';\nimport { editorOptionsRegistry, ValidatedEditorOptions, ConfigurationChangedEvent, EDITOR_MODEL_DEFAULTS, ComputeOptionsMemory } from './editorOptions.js';\nimport { EditorZoom } from './editorZoom.js';\nimport { BareFontInfo } from './fontInfo.js';\nimport { Extensions } from '../../../platform/configuration/common/configurationRegistry.js';\nimport { Registry } from '../../../platform/registry/common/platform.js';\nimport { forEach } from '../../../base/common/collections.js';\nexport const TabFocus = new class {\n  constructor() {\n    this._tabFocus = false;\n    this._onDidChangeTabFocus = new Emitter();\n    this.onDidChangeTabFocus = this._onDidChangeTabFocus.event;\n  }\n\n  getTabFocusMode() {\n    return this._tabFocus;\n  }\n\n  setTabFocusMode(tabFocusMode) {\n    if (this._tabFocus === tabFocusMode) {\n      return;\n    }\n\n    this._tabFocus = tabFocusMode;\n\n    this._onDidChangeTabFocus.fire(this._tabFocus);\n  }\n\n}();\nconst hasOwnProperty = Object.hasOwnProperty;\nexport class ComputedEditorOptions {\n  constructor() {\n    this._values = [];\n  }\n\n  _read(id) {\n    return this._values[id];\n  }\n\n  get(id) {\n    return this._values[id];\n  }\n\n  _write(id, value) {\n    this._values[id] = value;\n  }\n\n}\n\nclass RawEditorOptions {\n  constructor() {\n    this._values = [];\n  }\n\n  _read(id) {\n    return this._values[id];\n  }\n\n  _write(id, value) {\n    this._values[id] = value;\n  }\n\n}\n\nclass EditorConfiguration2 {\n  static readOptions(_options) {\n    const options = _options;\n    const result = new RawEditorOptions();\n\n    for (const editorOption of editorOptionsRegistry) {\n      const value = editorOption.name === '_never_' ? undefined : options[editorOption.name];\n\n      result._write(editorOption.id, value);\n    }\n\n    return result;\n  }\n\n  static validateOptions(options) {\n    const result = new ValidatedEditorOptions();\n\n    for (const editorOption of editorOptionsRegistry) {\n      result._write(editorOption.id, editorOption.validate(options._read(editorOption.id)));\n    }\n\n    return result;\n  }\n\n  static computeOptions(options, env) {\n    const result = new ComputedEditorOptions();\n\n    for (const editorOption of editorOptionsRegistry) {\n      result._write(editorOption.id, editorOption.compute(env, result, options._read(editorOption.id)));\n    }\n\n    return result;\n  }\n\n  static _deepEquals(a, b) {\n    if (typeof a !== 'object' || typeof b !== 'object') {\n      return a === b;\n    }\n\n    if (Array.isArray(a) || Array.isArray(b)) {\n      return Array.isArray(a) && Array.isArray(b) ? arrays.equals(a, b) : false;\n    }\n\n    for (let key in a) {\n      if (!EditorConfiguration2._deepEquals(a[key], b[key])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  static checkEquals(a, b) {\n    const result = [];\n    let somethingChanged = false;\n\n    for (const editorOption of editorOptionsRegistry) {\n      const changed = !EditorConfiguration2._deepEquals(a._read(editorOption.id), b._read(editorOption.id));\n      result[editorOption.id] = changed;\n\n      if (changed) {\n        somethingChanged = true;\n      }\n    }\n\n    return somethingChanged ? new ConfigurationChangedEvent(result) : null;\n  }\n\n}\n/**\n * Compatibility with old options\n */\n\n\nfunction migrateOptions(options) {\n  const wordWrap = options.wordWrap;\n\n  if (wordWrap === true) {\n    options.wordWrap = 'on';\n  } else if (wordWrap === false) {\n    options.wordWrap = 'off';\n  }\n\n  const lineNumbers = options.lineNumbers;\n\n  if (lineNumbers === true) {\n    options.lineNumbers = 'on';\n  } else if (lineNumbers === false) {\n    options.lineNumbers = 'off';\n  }\n\n  const autoClosingBrackets = options.autoClosingBrackets;\n\n  if (autoClosingBrackets === false) {\n    options.autoClosingBrackets = 'never';\n    options.autoClosingQuotes = 'never';\n    options.autoSurround = 'never';\n  }\n\n  const cursorBlinking = options.cursorBlinking;\n\n  if (cursorBlinking === 'visible') {\n    options.cursorBlinking = 'solid';\n  }\n\n  const renderWhitespace = options.renderWhitespace;\n\n  if (renderWhitespace === true) {\n    options.renderWhitespace = 'boundary';\n  } else if (renderWhitespace === false) {\n    options.renderWhitespace = 'none';\n  }\n\n  const renderLineHighlight = options.renderLineHighlight;\n\n  if (renderLineHighlight === true) {\n    options.renderLineHighlight = 'line';\n  } else if (renderLineHighlight === false) {\n    options.renderLineHighlight = 'none';\n  }\n\n  const acceptSuggestionOnEnter = options.acceptSuggestionOnEnter;\n\n  if (acceptSuggestionOnEnter === true) {\n    options.acceptSuggestionOnEnter = 'on';\n  } else if (acceptSuggestionOnEnter === false) {\n    options.acceptSuggestionOnEnter = 'off';\n  }\n\n  const tabCompletion = options.tabCompletion;\n\n  if (tabCompletion === false) {\n    options.tabCompletion = 'off';\n  } else if (tabCompletion === true) {\n    options.tabCompletion = 'onlySnippets';\n  }\n\n  const suggest = options.suggest;\n\n  if (suggest && typeof suggest.filteredTypes === 'object' && suggest.filteredTypes) {\n    const mapping = {};\n    mapping['method'] = 'showMethods';\n    mapping['function'] = 'showFunctions';\n    mapping['constructor'] = 'showConstructors';\n    mapping['deprecated'] = 'showDeprecated';\n    mapping['field'] = 'showFields';\n    mapping['variable'] = 'showVariables';\n    mapping['class'] = 'showClasses';\n    mapping['struct'] = 'showStructs';\n    mapping['interface'] = 'showInterfaces';\n    mapping['module'] = 'showModules';\n    mapping['property'] = 'showProperties';\n    mapping['event'] = 'showEvents';\n    mapping['operator'] = 'showOperators';\n    mapping['unit'] = 'showUnits';\n    mapping['value'] = 'showValues';\n    mapping['constant'] = 'showConstants';\n    mapping['enum'] = 'showEnums';\n    mapping['enumMember'] = 'showEnumMembers';\n    mapping['keyword'] = 'showKeywords';\n    mapping['text'] = 'showWords';\n    mapping['color'] = 'showColors';\n    mapping['file'] = 'showFiles';\n    mapping['reference'] = 'showReferences';\n    mapping['folder'] = 'showFolders';\n    mapping['typeParameter'] = 'showTypeParameters';\n    mapping['snippet'] = 'showSnippets';\n    forEach(mapping, entry => {\n      const value = suggest.filteredTypes[entry.key];\n\n      if (value === false) {\n        suggest[entry.value] = value;\n      }\n    }); // delete (<any>suggest).filteredTypes;\n  }\n\n  const hover = options.hover;\n\n  if (hover === true) {\n    options.hover = {\n      enabled: true\n    };\n  } else if (hover === false) {\n    options.hover = {\n      enabled: false\n    };\n  }\n\n  const parameterHints = options.parameterHints;\n\n  if (parameterHints === true) {\n    options.parameterHints = {\n      enabled: true\n    };\n  } else if (parameterHints === false) {\n    options.parameterHints = {\n      enabled: false\n    };\n  }\n\n  const autoIndent = options.autoIndent;\n\n  if (autoIndent === true) {\n    options.autoIndent = 'full';\n  } else if (autoIndent === false) {\n    options.autoIndent = 'advanced';\n  }\n\n  const matchBrackets = options.matchBrackets;\n\n  if (matchBrackets === true) {\n    options.matchBrackets = 'always';\n  } else if (matchBrackets === false) {\n    options.matchBrackets = 'never';\n  }\n\n  const {\n    renderIndentGuides,\n    highlightActiveIndentGuide\n  } = options;\n\n  if (!options.guides) {\n    options.guides = {};\n  }\n\n  if (renderIndentGuides !== undefined) {\n    options.guides.indentation = !!renderIndentGuides;\n  }\n\n  if (highlightActiveIndentGuide !== undefined) {\n    options.guides.highlightActiveIndentation = !!highlightActiveIndentGuide;\n  }\n}\n\nfunction deepCloneAndMigrateOptions(_options) {\n  const options = objects.deepClone(_options);\n  migrateOptions(options);\n  return options;\n}\n\nexport class CommonEditorConfiguration extends Disposable {\n  constructor(isSimpleWidget, _options) {\n    super();\n    this._onDidChange = this._register(new Emitter());\n    this.onDidChange = this._onDidChange.event;\n    this._onDidChangeFast = this._register(new Emitter());\n    this.onDidChangeFast = this._onDidChangeFast.event;\n    this.isSimpleWidget = isSimpleWidget;\n    this._isDominatedByLongLines = false;\n    this._computeOptionsMemory = new ComputeOptionsMemory();\n    this._viewLineCount = 1;\n    this._lineNumbersDigitCount = 1;\n    this._rawOptions = deepCloneAndMigrateOptions(_options);\n    this._readOptions = EditorConfiguration2.readOptions(this._rawOptions);\n    this._validatedOptions = EditorConfiguration2.validateOptions(this._readOptions);\n\n    this._register(EditorZoom.onDidChangeZoomLevel(_ => this._recomputeOptions()));\n\n    this._register(TabFocus.onDidChangeTabFocus(_ => this._recomputeOptions()));\n  }\n\n  observeReferenceElement(dimension) {}\n\n  updatePixelRatio() {}\n\n  _recomputeOptions() {\n    const oldOptions = this.options;\n\n    const newOptions = this._computeInternalOptions();\n\n    if (!oldOptions) {\n      this.options = newOptions;\n    } else {\n      const changeEvent = EditorConfiguration2.checkEquals(oldOptions, newOptions);\n\n      if (changeEvent === null) {\n        // nothing changed!\n        return;\n      }\n\n      this.options = newOptions;\n\n      this._onDidChangeFast.fire(changeEvent);\n\n      this._onDidChange.fire(changeEvent);\n    }\n  }\n\n  getRawOptions() {\n    return this._rawOptions;\n  }\n\n  _computeInternalOptions() {\n    const partialEnv = this._getEnvConfiguration();\n\n    const bareFontInfo = BareFontInfo.createFromValidatedSettings(this._validatedOptions, partialEnv.zoomLevel, partialEnv.pixelRatio, this.isSimpleWidget);\n    const env = {\n      memory: this._computeOptionsMemory,\n      outerWidth: partialEnv.outerWidth,\n      outerHeight: partialEnv.outerHeight,\n      fontInfo: this.readConfiguration(bareFontInfo),\n      extraEditorClassName: partialEnv.extraEditorClassName,\n      isDominatedByLongLines: this._isDominatedByLongLines,\n      viewLineCount: this._viewLineCount,\n      lineNumbersDigitCount: this._lineNumbersDigitCount,\n      emptySelectionClipboard: partialEnv.emptySelectionClipboard,\n      pixelRatio: partialEnv.pixelRatio,\n      tabFocusMode: TabFocus.getTabFocusMode(),\n      accessibilitySupport: partialEnv.accessibilitySupport\n    };\n    return EditorConfiguration2.computeOptions(this._validatedOptions, env);\n  }\n\n  static _subsetEquals(base, subset) {\n    for (const key in subset) {\n      if (hasOwnProperty.call(subset, key)) {\n        const subsetValue = subset[key];\n        const baseValue = base[key];\n\n        if (baseValue === subsetValue) {\n          continue;\n        }\n\n        if (Array.isArray(baseValue) && Array.isArray(subsetValue)) {\n          if (!arrays.equals(baseValue, subsetValue)) {\n            return false;\n          }\n\n          continue;\n        }\n\n        if (baseValue && typeof baseValue === 'object' && subsetValue && typeof subsetValue === 'object') {\n          if (!this._subsetEquals(baseValue, subsetValue)) {\n            return false;\n          }\n\n          continue;\n        }\n\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  updateOptions(_newOptions) {\n    if (typeof _newOptions === 'undefined') {\n      return;\n    }\n\n    const newOptions = deepCloneAndMigrateOptions(_newOptions);\n\n    if (CommonEditorConfiguration._subsetEquals(this._rawOptions, newOptions)) {\n      return;\n    }\n\n    this._rawOptions = objects.mixin(this._rawOptions, newOptions || {});\n    this._readOptions = EditorConfiguration2.readOptions(this._rawOptions);\n    this._validatedOptions = EditorConfiguration2.validateOptions(this._readOptions);\n\n    this._recomputeOptions();\n  }\n\n  setIsDominatedByLongLines(isDominatedByLongLines) {\n    this._isDominatedByLongLines = isDominatedByLongLines;\n\n    this._recomputeOptions();\n  }\n\n  setMaxLineNumber(maxLineNumber) {\n    const lineNumbersDigitCount = CommonEditorConfiguration._digitCount(maxLineNumber);\n\n    if (this._lineNumbersDigitCount === lineNumbersDigitCount) {\n      return;\n    }\n\n    this._lineNumbersDigitCount = lineNumbersDigitCount;\n\n    this._recomputeOptions();\n  }\n\n  setViewLineCount(viewLineCount) {\n    if (this._viewLineCount === viewLineCount) {\n      return;\n    }\n\n    this._viewLineCount = viewLineCount;\n\n    this._recomputeOptions();\n  }\n\n  static _digitCount(n) {\n    let r = 0;\n\n    while (n) {\n      n = Math.floor(n / 10);\n      r++;\n    }\n\n    return r ? r : 1;\n  }\n\n}\nexport const editorConfigurationBaseNode = Object.freeze({\n  id: 'editor',\n  order: 5,\n  type: 'object',\n  title: nls.localize('editorConfigurationTitle', \"Editor\"),\n  scope: 5\n  /* LANGUAGE_OVERRIDABLE */\n\n});\nconst configurationRegistry = Registry.as(Extensions.Configuration);\nconst editorConfiguration = Object.assign(Object.assign({}, editorConfigurationBaseNode), {\n  properties: {\n    'editor.tabSize': {\n      type: 'number',\n      default: EDITOR_MODEL_DEFAULTS.tabSize,\n      minimum: 1,\n      markdownDescription: nls.localize('tabSize', \"The number of spaces a tab is equal to. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on.\")\n    },\n    // 'editor.indentSize': {\n    // \t'anyOf': [\n    // \t\t{\n    // \t\t\ttype: 'string',\n    // \t\t\tenum: ['tabSize']\n    // \t\t},\n    // \t\t{\n    // \t\t\ttype: 'number',\n    // \t\t\tminimum: 1\n    // \t\t}\n    // \t],\n    // \tdefault: 'tabSize',\n    // \tmarkdownDescription: nls.localize('indentSize', \"The number of spaces used for indentation or 'tabSize' to use the value from `#editor.tabSize#`. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on.\")\n    // },\n    'editor.insertSpaces': {\n      type: 'boolean',\n      default: EDITOR_MODEL_DEFAULTS.insertSpaces,\n      markdownDescription: nls.localize('insertSpaces', \"Insert spaces when pressing `Tab`. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on.\")\n    },\n    'editor.detectIndentation': {\n      type: 'boolean',\n      default: EDITOR_MODEL_DEFAULTS.detectIndentation,\n      markdownDescription: nls.localize('detectIndentation', \"Controls whether `#editor.tabSize#` and `#editor.insertSpaces#` will be automatically detected when a file is opened based on the file contents.\")\n    },\n    'editor.trimAutoWhitespace': {\n      type: 'boolean',\n      default: EDITOR_MODEL_DEFAULTS.trimAutoWhitespace,\n      description: nls.localize('trimAutoWhitespace', \"Remove trailing auto inserted whitespace.\")\n    },\n    'editor.largeFileOptimizations': {\n      type: 'boolean',\n      default: EDITOR_MODEL_DEFAULTS.largeFileOptimizations,\n      description: nls.localize('largeFileOptimizations', \"Special handling for large files to disable certain memory intensive features.\")\n    },\n    'editor.wordBasedSuggestions': {\n      type: 'boolean',\n      default: true,\n      description: nls.localize('wordBasedSuggestions', \"Controls whether completions should be computed based on words in the document.\")\n    },\n    'editor.wordBasedSuggestionsMode': {\n      enum: ['currentDocument', 'matchingDocuments', 'allDocuments'],\n      default: 'matchingDocuments',\n      enumDescriptions: [nls.localize('wordBasedSuggestionsMode.currentDocument', 'Only suggest words from the active document.'), nls.localize('wordBasedSuggestionsMode.matchingDocuments', 'Suggest words from all open documents of the same language.'), nls.localize('wordBasedSuggestionsMode.allDocuments', 'Suggest words from all open documents.')],\n      description: nls.localize('wordBasedSuggestionsMode', \"Controls from which documents word based completions are computed.\")\n    },\n    'editor.semanticHighlighting.enabled': {\n      enum: [true, false, 'configuredByTheme'],\n      enumDescriptions: [nls.localize('semanticHighlighting.true', 'Semantic highlighting enabled for all color themes.'), nls.localize('semanticHighlighting.false', 'Semantic highlighting disabled for all color themes.'), nls.localize('semanticHighlighting.configuredByTheme', 'Semantic highlighting is configured by the current color theme\\'s `semanticHighlighting` setting.')],\n      default: 'configuredByTheme',\n      description: nls.localize('semanticHighlighting.enabled', \"Controls whether the semanticHighlighting is shown for the languages that support it.\")\n    },\n    'editor.stablePeek': {\n      type: 'boolean',\n      default: false,\n      markdownDescription: nls.localize('stablePeek', \"Keep peek editors open even when double clicking their content or when hitting `Escape`.\")\n    },\n    'editor.maxTokenizationLineLength': {\n      type: 'integer',\n      default: 20000,\n      description: nls.localize('maxTokenizationLineLength', \"Lines above this length will not be tokenized for performance reasons\")\n    },\n    'editor.language.brackets': {\n      type: 'array',\n      default: false,\n      description: nls.localize('schema.brackets', 'Defines the bracket symbols that increase or decrease the indentation.'),\n      items: {\n        type: 'array',\n        items: [{\n          type: 'string',\n          description: nls.localize('schema.openBracket', 'The opening bracket character or string sequence.')\n        }, {\n          type: 'string',\n          description: nls.localize('schema.closeBracket', 'The closing bracket character or string sequence.')\n        }]\n      }\n    },\n    'editor.language.colorizedBracketPairs': {\n      type: 'array',\n      default: false,\n      description: nls.localize('schema.colorizedBracketPairs', 'Defines the bracket pairs that are colorized by their nesting level if bracket pair colorization is enabled.'),\n      items: {\n        type: 'array',\n        items: [{\n          type: 'string',\n          description: nls.localize('schema.openBracket', 'The opening bracket character or string sequence.')\n        }, {\n          type: 'string',\n          description: nls.localize('schema.closeBracket', 'The closing bracket character or string sequence.')\n        }]\n      }\n    },\n    'diffEditor.maxComputationTime': {\n      type: 'number',\n      default: 5000,\n      description: nls.localize('maxComputationTime', \"Timeout in milliseconds after which diff computation is cancelled. Use 0 for no timeout.\")\n    },\n    'diffEditor.maxFileSize': {\n      type: 'number',\n      default: 50,\n      description: nls.localize('maxFileSize', \"Maximum file size in MB for which to compute diffs. Use 0 for no limit.\")\n    },\n    'diffEditor.renderSideBySide': {\n      type: 'boolean',\n      default: true,\n      description: nls.localize('sideBySide', \"Controls whether the diff editor shows the diff side by side or inline.\")\n    },\n    'diffEditor.ignoreTrimWhitespace': {\n      type: 'boolean',\n      default: true,\n      description: nls.localize('ignoreTrimWhitespace', \"When enabled, the diff editor ignores changes in leading or trailing whitespace.\")\n    },\n    'diffEditor.renderIndicators': {\n      type: 'boolean',\n      default: true,\n      description: nls.localize('renderIndicators', \"Controls whether the diff editor shows +/- indicators for added/removed changes.\")\n    },\n    'diffEditor.codeLens': {\n      type: 'boolean',\n      default: false,\n      description: nls.localize('codeLens', \"Controls whether the editor shows CodeLens.\")\n    },\n    'diffEditor.wordWrap': {\n      type: 'string',\n      enum: ['off', 'on', 'inherit'],\n      default: 'inherit',\n      markdownEnumDescriptions: [nls.localize('wordWrap.off', \"Lines will never wrap.\"), nls.localize('wordWrap.on', \"Lines will wrap at the viewport width.\"), nls.localize('wordWrap.inherit', \"Lines will wrap according to the `#editor.wordWrap#` setting.\")]\n    }\n  }\n});\n\nfunction isConfigurationPropertySchema(x) {\n  return typeof x.type !== 'undefined' || typeof x.anyOf !== 'undefined';\n} // Add properties from the Editor Option Registry\n\n\nfor (const editorOption of editorOptionsRegistry) {\n  const schema = editorOption.schema;\n\n  if (typeof schema !== 'undefined') {\n    if (isConfigurationPropertySchema(schema)) {\n      // This is a single schema contribution\n      editorConfiguration.properties[`editor.${editorOption.name}`] = schema;\n    } else {\n      for (let key in schema) {\n        if (hasOwnProperty.call(schema, key)) {\n          editorConfiguration.properties[key] = schema[key];\n        }\n      }\n    }\n  }\n}\n\nlet cachedEditorConfigurationKeys = null;\n\nfunction getEditorConfigurationKeys() {\n  if (cachedEditorConfigurationKeys === null) {\n    cachedEditorConfigurationKeys = Object.create(null);\n    Object.keys(editorConfiguration.properties).forEach(prop => {\n      cachedEditorConfigurationKeys[prop] = true;\n    });\n  }\n\n  return cachedEditorConfigurationKeys;\n}\n\nexport function isEditorConfigurationKey(key) {\n  const editorConfigurationKeys = getEditorConfigurationKeys();\n  return editorConfigurationKeys[`editor.${key}`] || false;\n}\nexport function isDiffEditorConfigurationKey(key) {\n  const editorConfigurationKeys = getEditorConfigurationKeys();\n  return editorConfigurationKeys[`diffEditor.${key}`] || false;\n}\nconfigurationRegistry.registerConfiguration(editorConfiguration);","map":{"version":3,"sources":["/home/umut/Documents/cs/cs410/Project2Group14/node_modules/monaco-editor/esm/vs/editor/common/config/commonEditorConfig.js"],"names":["nls","Emitter","Disposable","objects","arrays","editorOptionsRegistry","ValidatedEditorOptions","ConfigurationChangedEvent","EDITOR_MODEL_DEFAULTS","ComputeOptionsMemory","EditorZoom","BareFontInfo","Extensions","Registry","forEach","TabFocus","constructor","_tabFocus","_onDidChangeTabFocus","onDidChangeTabFocus","event","getTabFocusMode","setTabFocusMode","tabFocusMode","fire","hasOwnProperty","Object","ComputedEditorOptions","_values","_read","id","get","_write","value","RawEditorOptions","EditorConfiguration2","readOptions","_options","options","result","editorOption","name","undefined","validateOptions","validate","computeOptions","env","compute","_deepEquals","a","b","Array","isArray","equals","key","checkEquals","somethingChanged","changed","migrateOptions","wordWrap","lineNumbers","autoClosingBrackets","autoClosingQuotes","autoSurround","cursorBlinking","renderWhitespace","renderLineHighlight","acceptSuggestionOnEnter","tabCompletion","suggest","filteredTypes","mapping","entry","hover","enabled","parameterHints","autoIndent","matchBrackets","renderIndentGuides","highlightActiveIndentGuide","guides","indentation","highlightActiveIndentation","deepCloneAndMigrateOptions","deepClone","CommonEditorConfiguration","isSimpleWidget","_onDidChange","_register","onDidChange","_onDidChangeFast","onDidChangeFast","_isDominatedByLongLines","_computeOptionsMemory","_viewLineCount","_lineNumbersDigitCount","_rawOptions","_readOptions","_validatedOptions","onDidChangeZoomLevel","_","_recomputeOptions","observeReferenceElement","dimension","updatePixelRatio","oldOptions","newOptions","_computeInternalOptions","changeEvent","getRawOptions","partialEnv","_getEnvConfiguration","bareFontInfo","createFromValidatedSettings","zoomLevel","pixelRatio","memory","outerWidth","outerHeight","fontInfo","readConfiguration","extraEditorClassName","isDominatedByLongLines","viewLineCount","lineNumbersDigitCount","emptySelectionClipboard","accessibilitySupport","_subsetEquals","base","subset","call","subsetValue","baseValue","updateOptions","_newOptions","mixin","setIsDominatedByLongLines","setMaxLineNumber","maxLineNumber","_digitCount","setViewLineCount","n","r","Math","floor","editorConfigurationBaseNode","freeze","order","type","title","localize","scope","configurationRegistry","as","Configuration","editorConfiguration","assign","properties","default","tabSize","minimum","markdownDescription","insertSpaces","detectIndentation","trimAutoWhitespace","description","largeFileOptimizations","enum","enumDescriptions","items","markdownEnumDescriptions","isConfigurationPropertySchema","x","anyOf","schema","cachedEditorConfigurationKeys","getEditorConfigurationKeys","create","keys","prop","isEditorConfigurationKey","editorConfigurationKeys","isDiffEditorConfigurationKey","registerConfiguration"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport * as objects from '../../../base/common/objects.js';\nimport * as arrays from '../../../base/common/arrays.js';\nimport { editorOptionsRegistry, ValidatedEditorOptions, ConfigurationChangedEvent, EDITOR_MODEL_DEFAULTS, ComputeOptionsMemory } from './editorOptions.js';\nimport { EditorZoom } from './editorZoom.js';\nimport { BareFontInfo } from './fontInfo.js';\nimport { Extensions } from '../../../platform/configuration/common/configurationRegistry.js';\nimport { Registry } from '../../../platform/registry/common/platform.js';\nimport { forEach } from '../../../base/common/collections.js';\nexport const TabFocus = new class {\n    constructor() {\n        this._tabFocus = false;\n        this._onDidChangeTabFocus = new Emitter();\n        this.onDidChangeTabFocus = this._onDidChangeTabFocus.event;\n    }\n    getTabFocusMode() {\n        return this._tabFocus;\n    }\n    setTabFocusMode(tabFocusMode) {\n        if (this._tabFocus === tabFocusMode) {\n            return;\n        }\n        this._tabFocus = tabFocusMode;\n        this._onDidChangeTabFocus.fire(this._tabFocus);\n    }\n};\nconst hasOwnProperty = Object.hasOwnProperty;\nexport class ComputedEditorOptions {\n    constructor() {\n        this._values = [];\n    }\n    _read(id) {\n        return this._values[id];\n    }\n    get(id) {\n        return this._values[id];\n    }\n    _write(id, value) {\n        this._values[id] = value;\n    }\n}\nclass RawEditorOptions {\n    constructor() {\n        this._values = [];\n    }\n    _read(id) {\n        return this._values[id];\n    }\n    _write(id, value) {\n        this._values[id] = value;\n    }\n}\nclass EditorConfiguration2 {\n    static readOptions(_options) {\n        const options = _options;\n        const result = new RawEditorOptions();\n        for (const editorOption of editorOptionsRegistry) {\n            const value = (editorOption.name === '_never_' ? undefined : options[editorOption.name]);\n            result._write(editorOption.id, value);\n        }\n        return result;\n    }\n    static validateOptions(options) {\n        const result = new ValidatedEditorOptions();\n        for (const editorOption of editorOptionsRegistry) {\n            result._write(editorOption.id, editorOption.validate(options._read(editorOption.id)));\n        }\n        return result;\n    }\n    static computeOptions(options, env) {\n        const result = new ComputedEditorOptions();\n        for (const editorOption of editorOptionsRegistry) {\n            result._write(editorOption.id, editorOption.compute(env, result, options._read(editorOption.id)));\n        }\n        return result;\n    }\n    static _deepEquals(a, b) {\n        if (typeof a !== 'object' || typeof b !== 'object') {\n            return (a === b);\n        }\n        if (Array.isArray(a) || Array.isArray(b)) {\n            return (Array.isArray(a) && Array.isArray(b) ? arrays.equals(a, b) : false);\n        }\n        for (let key in a) {\n            if (!EditorConfiguration2._deepEquals(a[key], b[key])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    static checkEquals(a, b) {\n        const result = [];\n        let somethingChanged = false;\n        for (const editorOption of editorOptionsRegistry) {\n            const changed = !EditorConfiguration2._deepEquals(a._read(editorOption.id), b._read(editorOption.id));\n            result[editorOption.id] = changed;\n            if (changed) {\n                somethingChanged = true;\n            }\n        }\n        return (somethingChanged ? new ConfigurationChangedEvent(result) : null);\n    }\n}\n/**\n * Compatibility with old options\n */\nfunction migrateOptions(options) {\n    const wordWrap = options.wordWrap;\n    if (wordWrap === true) {\n        options.wordWrap = 'on';\n    }\n    else if (wordWrap === false) {\n        options.wordWrap = 'off';\n    }\n    const lineNumbers = options.lineNumbers;\n    if (lineNumbers === true) {\n        options.lineNumbers = 'on';\n    }\n    else if (lineNumbers === false) {\n        options.lineNumbers = 'off';\n    }\n    const autoClosingBrackets = options.autoClosingBrackets;\n    if (autoClosingBrackets === false) {\n        options.autoClosingBrackets = 'never';\n        options.autoClosingQuotes = 'never';\n        options.autoSurround = 'never';\n    }\n    const cursorBlinking = options.cursorBlinking;\n    if (cursorBlinking === 'visible') {\n        options.cursorBlinking = 'solid';\n    }\n    const renderWhitespace = options.renderWhitespace;\n    if (renderWhitespace === true) {\n        options.renderWhitespace = 'boundary';\n    }\n    else if (renderWhitespace === false) {\n        options.renderWhitespace = 'none';\n    }\n    const renderLineHighlight = options.renderLineHighlight;\n    if (renderLineHighlight === true) {\n        options.renderLineHighlight = 'line';\n    }\n    else if (renderLineHighlight === false) {\n        options.renderLineHighlight = 'none';\n    }\n    const acceptSuggestionOnEnter = options.acceptSuggestionOnEnter;\n    if (acceptSuggestionOnEnter === true) {\n        options.acceptSuggestionOnEnter = 'on';\n    }\n    else if (acceptSuggestionOnEnter === false) {\n        options.acceptSuggestionOnEnter = 'off';\n    }\n    const tabCompletion = options.tabCompletion;\n    if (tabCompletion === false) {\n        options.tabCompletion = 'off';\n    }\n    else if (tabCompletion === true) {\n        options.tabCompletion = 'onlySnippets';\n    }\n    const suggest = options.suggest;\n    if (suggest && typeof suggest.filteredTypes === 'object' && suggest.filteredTypes) {\n        const mapping = {};\n        mapping['method'] = 'showMethods';\n        mapping['function'] = 'showFunctions';\n        mapping['constructor'] = 'showConstructors';\n        mapping['deprecated'] = 'showDeprecated';\n        mapping['field'] = 'showFields';\n        mapping['variable'] = 'showVariables';\n        mapping['class'] = 'showClasses';\n        mapping['struct'] = 'showStructs';\n        mapping['interface'] = 'showInterfaces';\n        mapping['module'] = 'showModules';\n        mapping['property'] = 'showProperties';\n        mapping['event'] = 'showEvents';\n        mapping['operator'] = 'showOperators';\n        mapping['unit'] = 'showUnits';\n        mapping['value'] = 'showValues';\n        mapping['constant'] = 'showConstants';\n        mapping['enum'] = 'showEnums';\n        mapping['enumMember'] = 'showEnumMembers';\n        mapping['keyword'] = 'showKeywords';\n        mapping['text'] = 'showWords';\n        mapping['color'] = 'showColors';\n        mapping['file'] = 'showFiles';\n        mapping['reference'] = 'showReferences';\n        mapping['folder'] = 'showFolders';\n        mapping['typeParameter'] = 'showTypeParameters';\n        mapping['snippet'] = 'showSnippets';\n        forEach(mapping, entry => {\n            const value = suggest.filteredTypes[entry.key];\n            if (value === false) {\n                suggest[entry.value] = value;\n            }\n        });\n        // delete (<any>suggest).filteredTypes;\n    }\n    const hover = options.hover;\n    if (hover === true) {\n        options.hover = {\n            enabled: true\n        };\n    }\n    else if (hover === false) {\n        options.hover = {\n            enabled: false\n        };\n    }\n    const parameterHints = options.parameterHints;\n    if (parameterHints === true) {\n        options.parameterHints = {\n            enabled: true\n        };\n    }\n    else if (parameterHints === false) {\n        options.parameterHints = {\n            enabled: false\n        };\n    }\n    const autoIndent = options.autoIndent;\n    if (autoIndent === true) {\n        options.autoIndent = 'full';\n    }\n    else if (autoIndent === false) {\n        options.autoIndent = 'advanced';\n    }\n    const matchBrackets = options.matchBrackets;\n    if (matchBrackets === true) {\n        options.matchBrackets = 'always';\n    }\n    else if (matchBrackets === false) {\n        options.matchBrackets = 'never';\n    }\n    const { renderIndentGuides, highlightActiveIndentGuide } = options;\n    if (!options.guides) {\n        options.guides = {};\n    }\n    if (renderIndentGuides !== undefined) {\n        options.guides.indentation = !!renderIndentGuides;\n    }\n    if (highlightActiveIndentGuide !== undefined) {\n        options.guides.highlightActiveIndentation = !!highlightActiveIndentGuide;\n    }\n}\nfunction deepCloneAndMigrateOptions(_options) {\n    const options = objects.deepClone(_options);\n    migrateOptions(options);\n    return options;\n}\nexport class CommonEditorConfiguration extends Disposable {\n    constructor(isSimpleWidget, _options) {\n        super();\n        this._onDidChange = this._register(new Emitter());\n        this.onDidChange = this._onDidChange.event;\n        this._onDidChangeFast = this._register(new Emitter());\n        this.onDidChangeFast = this._onDidChangeFast.event;\n        this.isSimpleWidget = isSimpleWidget;\n        this._isDominatedByLongLines = false;\n        this._computeOptionsMemory = new ComputeOptionsMemory();\n        this._viewLineCount = 1;\n        this._lineNumbersDigitCount = 1;\n        this._rawOptions = deepCloneAndMigrateOptions(_options);\n        this._readOptions = EditorConfiguration2.readOptions(this._rawOptions);\n        this._validatedOptions = EditorConfiguration2.validateOptions(this._readOptions);\n        this._register(EditorZoom.onDidChangeZoomLevel(_ => this._recomputeOptions()));\n        this._register(TabFocus.onDidChangeTabFocus(_ => this._recomputeOptions()));\n    }\n    observeReferenceElement(dimension) {\n    }\n    updatePixelRatio() {\n    }\n    _recomputeOptions() {\n        const oldOptions = this.options;\n        const newOptions = this._computeInternalOptions();\n        if (!oldOptions) {\n            this.options = newOptions;\n        }\n        else {\n            const changeEvent = EditorConfiguration2.checkEquals(oldOptions, newOptions);\n            if (changeEvent === null) {\n                // nothing changed!\n                return;\n            }\n            this.options = newOptions;\n            this._onDidChangeFast.fire(changeEvent);\n            this._onDidChange.fire(changeEvent);\n        }\n    }\n    getRawOptions() {\n        return this._rawOptions;\n    }\n    _computeInternalOptions() {\n        const partialEnv = this._getEnvConfiguration();\n        const bareFontInfo = BareFontInfo.createFromValidatedSettings(this._validatedOptions, partialEnv.zoomLevel, partialEnv.pixelRatio, this.isSimpleWidget);\n        const env = {\n            memory: this._computeOptionsMemory,\n            outerWidth: partialEnv.outerWidth,\n            outerHeight: partialEnv.outerHeight,\n            fontInfo: this.readConfiguration(bareFontInfo),\n            extraEditorClassName: partialEnv.extraEditorClassName,\n            isDominatedByLongLines: this._isDominatedByLongLines,\n            viewLineCount: this._viewLineCount,\n            lineNumbersDigitCount: this._lineNumbersDigitCount,\n            emptySelectionClipboard: partialEnv.emptySelectionClipboard,\n            pixelRatio: partialEnv.pixelRatio,\n            tabFocusMode: TabFocus.getTabFocusMode(),\n            accessibilitySupport: partialEnv.accessibilitySupport\n        };\n        return EditorConfiguration2.computeOptions(this._validatedOptions, env);\n    }\n    static _subsetEquals(base, subset) {\n        for (const key in subset) {\n            if (hasOwnProperty.call(subset, key)) {\n                const subsetValue = subset[key];\n                const baseValue = base[key];\n                if (baseValue === subsetValue) {\n                    continue;\n                }\n                if (Array.isArray(baseValue) && Array.isArray(subsetValue)) {\n                    if (!arrays.equals(baseValue, subsetValue)) {\n                        return false;\n                    }\n                    continue;\n                }\n                if (baseValue && typeof baseValue === 'object' && subsetValue && typeof subsetValue === 'object') {\n                    if (!this._subsetEquals(baseValue, subsetValue)) {\n                        return false;\n                    }\n                    continue;\n                }\n                return false;\n            }\n        }\n        return true;\n    }\n    updateOptions(_newOptions) {\n        if (typeof _newOptions === 'undefined') {\n            return;\n        }\n        const newOptions = deepCloneAndMigrateOptions(_newOptions);\n        if (CommonEditorConfiguration._subsetEquals(this._rawOptions, newOptions)) {\n            return;\n        }\n        this._rawOptions = objects.mixin(this._rawOptions, newOptions || {});\n        this._readOptions = EditorConfiguration2.readOptions(this._rawOptions);\n        this._validatedOptions = EditorConfiguration2.validateOptions(this._readOptions);\n        this._recomputeOptions();\n    }\n    setIsDominatedByLongLines(isDominatedByLongLines) {\n        this._isDominatedByLongLines = isDominatedByLongLines;\n        this._recomputeOptions();\n    }\n    setMaxLineNumber(maxLineNumber) {\n        const lineNumbersDigitCount = CommonEditorConfiguration._digitCount(maxLineNumber);\n        if (this._lineNumbersDigitCount === lineNumbersDigitCount) {\n            return;\n        }\n        this._lineNumbersDigitCount = lineNumbersDigitCount;\n        this._recomputeOptions();\n    }\n    setViewLineCount(viewLineCount) {\n        if (this._viewLineCount === viewLineCount) {\n            return;\n        }\n        this._viewLineCount = viewLineCount;\n        this._recomputeOptions();\n    }\n    static _digitCount(n) {\n        let r = 0;\n        while (n) {\n            n = Math.floor(n / 10);\n            r++;\n        }\n        return r ? r : 1;\n    }\n}\nexport const editorConfigurationBaseNode = Object.freeze({\n    id: 'editor',\n    order: 5,\n    type: 'object',\n    title: nls.localize('editorConfigurationTitle', \"Editor\"),\n    scope: 5 /* LANGUAGE_OVERRIDABLE */,\n});\nconst configurationRegistry = Registry.as(Extensions.Configuration);\nconst editorConfiguration = Object.assign(Object.assign({}, editorConfigurationBaseNode), { properties: {\n        'editor.tabSize': {\n            type: 'number',\n            default: EDITOR_MODEL_DEFAULTS.tabSize,\n            minimum: 1,\n            markdownDescription: nls.localize('tabSize', \"The number of spaces a tab is equal to. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on.\")\n        },\n        // 'editor.indentSize': {\n        // \t'anyOf': [\n        // \t\t{\n        // \t\t\ttype: 'string',\n        // \t\t\tenum: ['tabSize']\n        // \t\t},\n        // \t\t{\n        // \t\t\ttype: 'number',\n        // \t\t\tminimum: 1\n        // \t\t}\n        // \t],\n        // \tdefault: 'tabSize',\n        // \tmarkdownDescription: nls.localize('indentSize', \"The number of spaces used for indentation or 'tabSize' to use the value from `#editor.tabSize#`. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on.\")\n        // },\n        'editor.insertSpaces': {\n            type: 'boolean',\n            default: EDITOR_MODEL_DEFAULTS.insertSpaces,\n            markdownDescription: nls.localize('insertSpaces', \"Insert spaces when pressing `Tab`. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on.\")\n        },\n        'editor.detectIndentation': {\n            type: 'boolean',\n            default: EDITOR_MODEL_DEFAULTS.detectIndentation,\n            markdownDescription: nls.localize('detectIndentation', \"Controls whether `#editor.tabSize#` and `#editor.insertSpaces#` will be automatically detected when a file is opened based on the file contents.\")\n        },\n        'editor.trimAutoWhitespace': {\n            type: 'boolean',\n            default: EDITOR_MODEL_DEFAULTS.trimAutoWhitespace,\n            description: nls.localize('trimAutoWhitespace', \"Remove trailing auto inserted whitespace.\")\n        },\n        'editor.largeFileOptimizations': {\n            type: 'boolean',\n            default: EDITOR_MODEL_DEFAULTS.largeFileOptimizations,\n            description: nls.localize('largeFileOptimizations', \"Special handling for large files to disable certain memory intensive features.\")\n        },\n        'editor.wordBasedSuggestions': {\n            type: 'boolean',\n            default: true,\n            description: nls.localize('wordBasedSuggestions', \"Controls whether completions should be computed based on words in the document.\")\n        },\n        'editor.wordBasedSuggestionsMode': {\n            enum: ['currentDocument', 'matchingDocuments', 'allDocuments'],\n            default: 'matchingDocuments',\n            enumDescriptions: [\n                nls.localize('wordBasedSuggestionsMode.currentDocument', 'Only suggest words from the active document.'),\n                nls.localize('wordBasedSuggestionsMode.matchingDocuments', 'Suggest words from all open documents of the same language.'),\n                nls.localize('wordBasedSuggestionsMode.allDocuments', 'Suggest words from all open documents.')\n            ],\n            description: nls.localize('wordBasedSuggestionsMode', \"Controls from which documents word based completions are computed.\")\n        },\n        'editor.semanticHighlighting.enabled': {\n            enum: [true, false, 'configuredByTheme'],\n            enumDescriptions: [\n                nls.localize('semanticHighlighting.true', 'Semantic highlighting enabled for all color themes.'),\n                nls.localize('semanticHighlighting.false', 'Semantic highlighting disabled for all color themes.'),\n                nls.localize('semanticHighlighting.configuredByTheme', 'Semantic highlighting is configured by the current color theme\\'s `semanticHighlighting` setting.')\n            ],\n            default: 'configuredByTheme',\n            description: nls.localize('semanticHighlighting.enabled', \"Controls whether the semanticHighlighting is shown for the languages that support it.\")\n        },\n        'editor.stablePeek': {\n            type: 'boolean',\n            default: false,\n            markdownDescription: nls.localize('stablePeek', \"Keep peek editors open even when double clicking their content or when hitting `Escape`.\")\n        },\n        'editor.maxTokenizationLineLength': {\n            type: 'integer',\n            default: 20000,\n            description: nls.localize('maxTokenizationLineLength', \"Lines above this length will not be tokenized for performance reasons\")\n        },\n        'editor.language.brackets': {\n            type: 'array',\n            default: false,\n            description: nls.localize('schema.brackets', 'Defines the bracket symbols that increase or decrease the indentation.'),\n            items: {\n                type: 'array',\n                items: [\n                    {\n                        type: 'string',\n                        description: nls.localize('schema.openBracket', 'The opening bracket character or string sequence.')\n                    },\n                    {\n                        type: 'string',\n                        description: nls.localize('schema.closeBracket', 'The closing bracket character or string sequence.')\n                    }\n                ]\n            }\n        },\n        'editor.language.colorizedBracketPairs': {\n            type: 'array',\n            default: false,\n            description: nls.localize('schema.colorizedBracketPairs', 'Defines the bracket pairs that are colorized by their nesting level if bracket pair colorization is enabled.'),\n            items: {\n                type: 'array',\n                items: [\n                    {\n                        type: 'string',\n                        description: nls.localize('schema.openBracket', 'The opening bracket character or string sequence.')\n                    },\n                    {\n                        type: 'string',\n                        description: nls.localize('schema.closeBracket', 'The closing bracket character or string sequence.')\n                    }\n                ]\n            }\n        },\n        'diffEditor.maxComputationTime': {\n            type: 'number',\n            default: 5000,\n            description: nls.localize('maxComputationTime', \"Timeout in milliseconds after which diff computation is cancelled. Use 0 for no timeout.\")\n        },\n        'diffEditor.maxFileSize': {\n            type: 'number',\n            default: 50,\n            description: nls.localize('maxFileSize', \"Maximum file size in MB for which to compute diffs. Use 0 for no limit.\")\n        },\n        'diffEditor.renderSideBySide': {\n            type: 'boolean',\n            default: true,\n            description: nls.localize('sideBySide', \"Controls whether the diff editor shows the diff side by side or inline.\")\n        },\n        'diffEditor.ignoreTrimWhitespace': {\n            type: 'boolean',\n            default: true,\n            description: nls.localize('ignoreTrimWhitespace', \"When enabled, the diff editor ignores changes in leading or trailing whitespace.\")\n        },\n        'diffEditor.renderIndicators': {\n            type: 'boolean',\n            default: true,\n            description: nls.localize('renderIndicators', \"Controls whether the diff editor shows +/- indicators for added/removed changes.\")\n        },\n        'diffEditor.codeLens': {\n            type: 'boolean',\n            default: false,\n            description: nls.localize('codeLens', \"Controls whether the editor shows CodeLens.\")\n        },\n        'diffEditor.wordWrap': {\n            type: 'string',\n            enum: ['off', 'on', 'inherit'],\n            default: 'inherit',\n            markdownEnumDescriptions: [\n                nls.localize('wordWrap.off', \"Lines will never wrap.\"),\n                nls.localize('wordWrap.on', \"Lines will wrap at the viewport width.\"),\n                nls.localize('wordWrap.inherit', \"Lines will wrap according to the `#editor.wordWrap#` setting.\"),\n            ]\n        }\n    } });\nfunction isConfigurationPropertySchema(x) {\n    return (typeof x.type !== 'undefined' || typeof x.anyOf !== 'undefined');\n}\n// Add properties from the Editor Option Registry\nfor (const editorOption of editorOptionsRegistry) {\n    const schema = editorOption.schema;\n    if (typeof schema !== 'undefined') {\n        if (isConfigurationPropertySchema(schema)) {\n            // This is a single schema contribution\n            editorConfiguration.properties[`editor.${editorOption.name}`] = schema;\n        }\n        else {\n            for (let key in schema) {\n                if (hasOwnProperty.call(schema, key)) {\n                    editorConfiguration.properties[key] = schema[key];\n                }\n            }\n        }\n    }\n}\nlet cachedEditorConfigurationKeys = null;\nfunction getEditorConfigurationKeys() {\n    if (cachedEditorConfigurationKeys === null) {\n        cachedEditorConfigurationKeys = Object.create(null);\n        Object.keys(editorConfiguration.properties).forEach((prop) => {\n            cachedEditorConfigurationKeys[prop] = true;\n        });\n    }\n    return cachedEditorConfigurationKeys;\n}\nexport function isEditorConfigurationKey(key) {\n    const editorConfigurationKeys = getEditorConfigurationKeys();\n    return (editorConfigurationKeys[`editor.${key}`] || false);\n}\nexport function isDiffEditorConfigurationKey(key) {\n    const editorConfigurationKeys = getEditorConfigurationKeys();\n    return (editorConfigurationKeys[`diffEditor.${key}`] || false);\n}\nconfigurationRegistry.registerConfiguration(editorConfiguration);\n"]},"metadata":{},"sourceType":"module"}