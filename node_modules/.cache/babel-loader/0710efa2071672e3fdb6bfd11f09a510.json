{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../base/browser/dom.js';\nimport { Sash } from '../../../base/browser/ui/sash/sash.js';\nimport { Color, RGBA } from '../../../base/common/color.js';\nimport { IdGenerator } from '../../../base/common/idGenerator.js';\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\nimport * as objects from '../../../base/common/objects.js';\nimport './zoneWidget.css';\nimport { Range } from '../../common/core/range.js';\nimport { ModelDecorationOptions } from '../../common/model/textModel.js';\nconst defaultColor = new Color(new RGBA(0, 122, 204));\nconst defaultOptions = {\n  showArrow: true,\n  showFrame: true,\n  className: '',\n  frameColor: defaultColor,\n  arrowColor: defaultColor,\n  keepEditorSelection: false\n};\nconst WIDGET_ID = 'vs.editor.contrib.zoneWidget';\nexport class ViewZoneDelegate {\n  constructor(domNode, afterLineNumber, afterColumn, heightInLines, onDomNodeTop, onComputedHeight) {\n    this.id = ''; // A valid zone id should be greater than 0\n\n    this.domNode = domNode;\n    this.afterLineNumber = afterLineNumber;\n    this.afterColumn = afterColumn;\n    this.heightInLines = heightInLines;\n    this._onDomNodeTop = onDomNodeTop;\n    this._onComputedHeight = onComputedHeight;\n  }\n\n  onDomNodeTop(top) {\n    this._onDomNodeTop(top);\n  }\n\n  onComputedHeight(height) {\n    this._onComputedHeight(height);\n  }\n\n}\nexport class OverlayWidgetDelegate {\n  constructor(id, domNode) {\n    this._id = id;\n    this._domNode = domNode;\n  }\n\n  getId() {\n    return this._id;\n  }\n\n  getDomNode() {\n    return this._domNode;\n  }\n\n  getPosition() {\n    return null;\n  }\n\n}\n\nclass Arrow {\n  constructor(_editor) {\n    this._editor = _editor;\n    this._ruleName = Arrow._IdGenerator.nextId();\n    this._decorations = [];\n    this._color = null;\n    this._height = -1; //\n  }\n\n  dispose() {\n    this.hide();\n    dom.removeCSSRulesContainingSelector(this._ruleName);\n  }\n\n  set color(value) {\n    if (this._color !== value) {\n      this._color = value;\n\n      this._updateStyle();\n    }\n  }\n\n  set height(value) {\n    if (this._height !== value) {\n      this._height = value;\n\n      this._updateStyle();\n    }\n  }\n\n  _updateStyle() {\n    dom.removeCSSRulesContainingSelector(this._ruleName);\n    dom.createCSSRule(`.monaco-editor ${this._ruleName}`, `border-style: solid; border-color: transparent; border-bottom-color: ${this._color}; border-width: ${this._height}px; bottom: -${this._height}px; margin-left: -${this._height}px; `);\n  }\n\n  show(where) {\n    this._decorations = this._editor.deltaDecorations(this._decorations, [{\n      range: Range.fromPositions(where),\n      options: {\n        description: 'zone-widget-arrow',\n        className: this._ruleName,\n        stickiness: 1\n        /* NeverGrowsWhenTypingAtEdges */\n\n      }\n    }]);\n  }\n\n  hide() {\n    this._editor.deltaDecorations(this._decorations, []);\n  }\n\n}\n\nArrow._IdGenerator = new IdGenerator('.arrow-decoration-');\nexport class ZoneWidget {\n  constructor(editor) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this._arrow = null;\n    this._overlayWidget = null;\n    this._resizeSash = null;\n    this._positionMarkerId = [];\n    this._viewZone = null;\n    this._disposables = new DisposableStore();\n    this.container = null;\n    this._isShowing = false;\n    this.editor = editor;\n    this.options = objects.deepClone(options);\n    objects.mixin(this.options, defaultOptions, false);\n    this.domNode = document.createElement('div');\n\n    if (!this.options.isAccessible) {\n      this.domNode.setAttribute('aria-hidden', 'true');\n      this.domNode.setAttribute('role', 'presentation');\n    }\n\n    this._disposables.add(this.editor.onDidLayoutChange(info => {\n      const width = this._getWidth(info);\n\n      this.domNode.style.width = width + 'px';\n      this.domNode.style.left = this._getLeft(info) + 'px';\n\n      this._onWidth(width);\n    }));\n  }\n\n  dispose() {\n    if (this._overlayWidget) {\n      this.editor.removeOverlayWidget(this._overlayWidget);\n      this._overlayWidget = null;\n    }\n\n    if (this._viewZone) {\n      this.editor.changeViewZones(accessor => {\n        if (this._viewZone) {\n          accessor.removeZone(this._viewZone.id);\n        }\n\n        this._viewZone = null;\n      });\n    }\n\n    this.editor.deltaDecorations(this._positionMarkerId, []);\n    this._positionMarkerId = [];\n\n    this._disposables.dispose();\n  }\n\n  create() {\n    this.domNode.classList.add('zone-widget');\n\n    if (this.options.className) {\n      this.domNode.classList.add(this.options.className);\n    }\n\n    this.container = document.createElement('div');\n    this.container.classList.add('zone-widget-container');\n    this.domNode.appendChild(this.container);\n\n    if (this.options.showArrow) {\n      this._arrow = new Arrow(this.editor);\n\n      this._disposables.add(this._arrow);\n    }\n\n    this._fillContainer(this.container);\n\n    this._initSash();\n\n    this._applyStyles();\n  }\n\n  style(styles) {\n    if (styles.frameColor) {\n      this.options.frameColor = styles.frameColor;\n    }\n\n    if (styles.arrowColor) {\n      this.options.arrowColor = styles.arrowColor;\n    }\n\n    this._applyStyles();\n  }\n\n  _applyStyles() {\n    if (this.container && this.options.frameColor) {\n      let frameColor = this.options.frameColor.toString();\n      this.container.style.borderTopColor = frameColor;\n      this.container.style.borderBottomColor = frameColor;\n    }\n\n    if (this._arrow && this.options.arrowColor) {\n      let arrowColor = this.options.arrowColor.toString();\n      this._arrow.color = arrowColor;\n    }\n  }\n\n  _getWidth(info) {\n    return info.width - info.minimap.minimapWidth - info.verticalScrollbarWidth;\n  }\n\n  _getLeft(info) {\n    // If minimap is to the left, we move beyond it\n    if (info.minimap.minimapWidth > 0 && info.minimap.minimapLeft === 0) {\n      return info.minimap.minimapWidth;\n    }\n\n    return 0;\n  }\n\n  _onViewZoneTop(top) {\n    this.domNode.style.top = top + 'px';\n  }\n\n  _onViewZoneHeight(height) {\n    this.domNode.style.height = `${height}px`;\n\n    if (this.container) {\n      let containerHeight = height - this._decoratingElementsHeight();\n\n      this.container.style.height = `${containerHeight}px`;\n      const layoutInfo = this.editor.getLayoutInfo();\n\n      this._doLayout(containerHeight, this._getWidth(layoutInfo));\n    }\n\n    if (this._resizeSash) {\n      this._resizeSash.layout();\n    }\n  }\n\n  get position() {\n    const [id] = this._positionMarkerId;\n\n    if (!id) {\n      return undefined;\n    }\n\n    const model = this.editor.getModel();\n\n    if (!model) {\n      return undefined;\n    }\n\n    const range = model.getDecorationRange(id);\n\n    if (!range) {\n      return undefined;\n    }\n\n    return range.getStartPosition();\n  }\n\n  show(rangeOrPos, heightInLines) {\n    const range = Range.isIRange(rangeOrPos) ? Range.lift(rangeOrPos) : Range.fromPositions(rangeOrPos);\n    this._isShowing = true;\n\n    this._showImpl(range, heightInLines);\n\n    this._isShowing = false;\n    this._positionMarkerId = this.editor.deltaDecorations(this._positionMarkerId, [{\n      range,\n      options: ModelDecorationOptions.EMPTY\n    }]);\n  }\n\n  hide() {\n    if (this._viewZone) {\n      this.editor.changeViewZones(accessor => {\n        if (this._viewZone) {\n          accessor.removeZone(this._viewZone.id);\n        }\n      });\n      this._viewZone = null;\n    }\n\n    if (this._overlayWidget) {\n      this.editor.removeOverlayWidget(this._overlayWidget);\n      this._overlayWidget = null;\n    }\n\n    if (this._arrow) {\n      this._arrow.hide();\n    }\n  }\n\n  _decoratingElementsHeight() {\n    let lineHeight = this.editor.getOption(58\n    /* lineHeight */\n    );\n    let result = 0;\n\n    if (this.options.showArrow) {\n      let arrowHeight = Math.round(lineHeight / 3);\n      result += 2 * arrowHeight;\n    }\n\n    if (this.options.showFrame) {\n      let frameThickness = Math.round(lineHeight / 9);\n      result += 2 * frameThickness;\n    }\n\n    return result;\n  }\n\n  _showImpl(where, heightInLines) {\n    const position = where.getStartPosition();\n    const layoutInfo = this.editor.getLayoutInfo();\n\n    const width = this._getWidth(layoutInfo);\n\n    this.domNode.style.width = `${width}px`;\n    this.domNode.style.left = this._getLeft(layoutInfo) + 'px'; // Render the widget as zone (rendering) and widget (lifecycle)\n\n    const viewZoneDomNode = document.createElement('div');\n    viewZoneDomNode.style.overflow = 'hidden';\n    const lineHeight = this.editor.getOption(58\n    /* lineHeight */\n    ); // adjust heightInLines to viewport\n\n    const maxHeightInLines = Math.max(12, this.editor.getLayoutInfo().height / lineHeight * 0.8);\n    heightInLines = Math.min(heightInLines, maxHeightInLines);\n    let arrowHeight = 0;\n    let frameThickness = 0; // Render the arrow one 1/3 of an editor line height\n\n    if (this._arrow && this.options.showArrow) {\n      arrowHeight = Math.round(lineHeight / 3);\n      this._arrow.height = arrowHeight;\n\n      this._arrow.show(position);\n    } // Render the frame as 1/9 of an editor line height\n\n\n    if (this.options.showFrame) {\n      frameThickness = Math.round(lineHeight / 9);\n    } // insert zone widget\n\n\n    this.editor.changeViewZones(accessor => {\n      if (this._viewZone) {\n        accessor.removeZone(this._viewZone.id);\n      }\n\n      if (this._overlayWidget) {\n        this.editor.removeOverlayWidget(this._overlayWidget);\n        this._overlayWidget = null;\n      }\n\n      this.domNode.style.top = '-1000px';\n      this._viewZone = new ViewZoneDelegate(viewZoneDomNode, position.lineNumber, position.column, heightInLines, top => this._onViewZoneTop(top), height => this._onViewZoneHeight(height));\n      this._viewZone.id = accessor.addZone(this._viewZone);\n      this._overlayWidget = new OverlayWidgetDelegate(WIDGET_ID + this._viewZone.id, this.domNode);\n      this.editor.addOverlayWidget(this._overlayWidget);\n    });\n\n    if (this.container && this.options.showFrame) {\n      const width = this.options.frameWidth ? this.options.frameWidth : frameThickness;\n      this.container.style.borderTopWidth = width + 'px';\n      this.container.style.borderBottomWidth = width + 'px';\n    }\n\n    let containerHeight = heightInLines * lineHeight - this._decoratingElementsHeight();\n\n    if (this.container) {\n      this.container.style.top = arrowHeight + 'px';\n      this.container.style.height = containerHeight + 'px';\n      this.container.style.overflow = 'hidden';\n    }\n\n    this._doLayout(containerHeight, width);\n\n    if (!this.options.keepEditorSelection) {\n      this.editor.setSelection(where);\n    }\n\n    const model = this.editor.getModel();\n\n    if (model) {\n      const revealLine = where.endLineNumber + 1;\n\n      if (revealLine <= model.getLineCount()) {\n        // reveal line below the zone widget\n        this.revealLine(revealLine, false);\n      } else {\n        // reveal last line atop\n        this.revealLine(model.getLineCount(), true);\n      }\n    }\n  }\n\n  revealLine(lineNumber, isLastLine) {\n    if (isLastLine) {\n      this.editor.revealLineInCenter(lineNumber, 0\n      /* Smooth */\n      );\n    } else {\n      this.editor.revealLine(lineNumber, 0\n      /* Smooth */\n      );\n    }\n  }\n\n  setCssClass(className, classToReplace) {\n    if (!this.container) {\n      return;\n    }\n\n    if (classToReplace) {\n      this.container.classList.remove(classToReplace);\n    }\n\n    this.container.classList.add(className);\n  }\n\n  _onWidth(widthInPixel) {// implement in subclass\n  }\n\n  _doLayout(heightInPixel, widthInPixel) {// implement in subclass\n  }\n\n  _relayout(newHeightInLines) {\n    if (this._viewZone && this._viewZone.heightInLines !== newHeightInLines) {\n      this.editor.changeViewZones(accessor => {\n        if (this._viewZone) {\n          this._viewZone.heightInLines = newHeightInLines;\n          accessor.layoutZone(this._viewZone.id);\n        }\n      });\n    }\n  } // --- sash\n\n\n  _initSash() {\n    if (this._resizeSash) {\n      return;\n    }\n\n    this._resizeSash = this._disposables.add(new Sash(this.domNode, this, {\n      orientation: 1\n      /* HORIZONTAL */\n\n    }));\n\n    if (!this.options.isResizeable) {\n      this._resizeSash.hide();\n\n      this._resizeSash.state = 0\n      /* Disabled */\n      ;\n    }\n\n    let data;\n\n    this._disposables.add(this._resizeSash.onDidStart(e => {\n      if (this._viewZone) {\n        data = {\n          startY: e.startY,\n          heightInLines: this._viewZone.heightInLines\n        };\n      }\n    }));\n\n    this._disposables.add(this._resizeSash.onDidEnd(() => {\n      data = undefined;\n    }));\n\n    this._disposables.add(this._resizeSash.onDidChange(evt => {\n      if (data) {\n        let lineDelta = (evt.currentY - data.startY) / this.editor.getOption(58\n        /* lineHeight */\n        );\n        let roundedLineDelta = lineDelta < 0 ? Math.ceil(lineDelta) : Math.floor(lineDelta);\n        let newHeightInLines = data.heightInLines + roundedLineDelta;\n\n        if (newHeightInLines > 5 && newHeightInLines < 35) {\n          this._relayout(newHeightInLines);\n        }\n      }\n    }));\n  }\n\n  getHorizontalSashLeft() {\n    return 0;\n  }\n\n  getHorizontalSashTop() {\n    return (this.domNode.style.height === null ? 0 : parseInt(this.domNode.style.height)) - this._decoratingElementsHeight() / 2;\n  }\n\n  getHorizontalSashWidth() {\n    const layoutInfo = this.editor.getLayoutInfo();\n    return layoutInfo.width - layoutInfo.minimap.minimapWidth;\n  }\n\n}","map":{"version":3,"sources":["/home/umut/Documents/cs/cs410/Project2Group14/node_modules/monaco-editor/esm/vs/editor/contrib/zoneWidget/zoneWidget.js"],"names":["dom","Sash","Color","RGBA","IdGenerator","DisposableStore","objects","Range","ModelDecorationOptions","defaultColor","defaultOptions","showArrow","showFrame","className","frameColor","arrowColor","keepEditorSelection","WIDGET_ID","ViewZoneDelegate","constructor","domNode","afterLineNumber","afterColumn","heightInLines","onDomNodeTop","onComputedHeight","id","_onDomNodeTop","_onComputedHeight","top","height","OverlayWidgetDelegate","_id","_domNode","getId","getDomNode","getPosition","Arrow","_editor","_ruleName","_IdGenerator","nextId","_decorations","_color","_height","dispose","hide","removeCSSRulesContainingSelector","color","value","_updateStyle","createCSSRule","show","where","deltaDecorations","range","fromPositions","options","description","stickiness","ZoneWidget","editor","_arrow","_overlayWidget","_resizeSash","_positionMarkerId","_viewZone","_disposables","container","_isShowing","deepClone","mixin","document","createElement","isAccessible","setAttribute","add","onDidLayoutChange","info","width","_getWidth","style","left","_getLeft","_onWidth","removeOverlayWidget","changeViewZones","accessor","removeZone","create","classList","appendChild","_fillContainer","_initSash","_applyStyles","styles","toString","borderTopColor","borderBottomColor","minimap","minimapWidth","verticalScrollbarWidth","minimapLeft","_onViewZoneTop","_onViewZoneHeight","containerHeight","_decoratingElementsHeight","layoutInfo","getLayoutInfo","_doLayout","layout","position","undefined","model","getModel","getDecorationRange","getStartPosition","rangeOrPos","isIRange","lift","_showImpl","EMPTY","lineHeight","getOption","result","arrowHeight","Math","round","frameThickness","viewZoneDomNode","overflow","maxHeightInLines","max","min","lineNumber","column","addZone","addOverlayWidget","frameWidth","borderTopWidth","borderBottomWidth","setSelection","revealLine","endLineNumber","getLineCount","isLastLine","revealLineInCenter","setCssClass","classToReplace","remove","widthInPixel","heightInPixel","_relayout","newHeightInLines","layoutZone","orientation","isResizeable","state","data","onDidStart","e","startY","onDidEnd","onDidChange","evt","lineDelta","currentY","roundedLineDelta","ceil","floor","getHorizontalSashLeft","getHorizontalSashTop","parseInt","getHorizontalSashWidth"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../base/browser/dom.js';\nimport { Sash } from '../../../base/browser/ui/sash/sash.js';\nimport { Color, RGBA } from '../../../base/common/color.js';\nimport { IdGenerator } from '../../../base/common/idGenerator.js';\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\nimport * as objects from '../../../base/common/objects.js';\nimport './zoneWidget.css';\nimport { Range } from '../../common/core/range.js';\nimport { ModelDecorationOptions } from '../../common/model/textModel.js';\nconst defaultColor = new Color(new RGBA(0, 122, 204));\nconst defaultOptions = {\n    showArrow: true,\n    showFrame: true,\n    className: '',\n    frameColor: defaultColor,\n    arrowColor: defaultColor,\n    keepEditorSelection: false\n};\nconst WIDGET_ID = 'vs.editor.contrib.zoneWidget';\nexport class ViewZoneDelegate {\n    constructor(domNode, afterLineNumber, afterColumn, heightInLines, onDomNodeTop, onComputedHeight) {\n        this.id = ''; // A valid zone id should be greater than 0\n        this.domNode = domNode;\n        this.afterLineNumber = afterLineNumber;\n        this.afterColumn = afterColumn;\n        this.heightInLines = heightInLines;\n        this._onDomNodeTop = onDomNodeTop;\n        this._onComputedHeight = onComputedHeight;\n    }\n    onDomNodeTop(top) {\n        this._onDomNodeTop(top);\n    }\n    onComputedHeight(height) {\n        this._onComputedHeight(height);\n    }\n}\nexport class OverlayWidgetDelegate {\n    constructor(id, domNode) {\n        this._id = id;\n        this._domNode = domNode;\n    }\n    getId() {\n        return this._id;\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    getPosition() {\n        return null;\n    }\n}\nclass Arrow {\n    constructor(_editor) {\n        this._editor = _editor;\n        this._ruleName = Arrow._IdGenerator.nextId();\n        this._decorations = [];\n        this._color = null;\n        this._height = -1;\n        //\n    }\n    dispose() {\n        this.hide();\n        dom.removeCSSRulesContainingSelector(this._ruleName);\n    }\n    set color(value) {\n        if (this._color !== value) {\n            this._color = value;\n            this._updateStyle();\n        }\n    }\n    set height(value) {\n        if (this._height !== value) {\n            this._height = value;\n            this._updateStyle();\n        }\n    }\n    _updateStyle() {\n        dom.removeCSSRulesContainingSelector(this._ruleName);\n        dom.createCSSRule(`.monaco-editor ${this._ruleName}`, `border-style: solid; border-color: transparent; border-bottom-color: ${this._color}; border-width: ${this._height}px; bottom: -${this._height}px; margin-left: -${this._height}px; `);\n    }\n    show(where) {\n        this._decorations = this._editor.deltaDecorations(this._decorations, [{ range: Range.fromPositions(where), options: { description: 'zone-widget-arrow', className: this._ruleName, stickiness: 1 /* NeverGrowsWhenTypingAtEdges */ } }]);\n    }\n    hide() {\n        this._editor.deltaDecorations(this._decorations, []);\n    }\n}\nArrow._IdGenerator = new IdGenerator('.arrow-decoration-');\nexport class ZoneWidget {\n    constructor(editor, options = {}) {\n        this._arrow = null;\n        this._overlayWidget = null;\n        this._resizeSash = null;\n        this._positionMarkerId = [];\n        this._viewZone = null;\n        this._disposables = new DisposableStore();\n        this.container = null;\n        this._isShowing = false;\n        this.editor = editor;\n        this.options = objects.deepClone(options);\n        objects.mixin(this.options, defaultOptions, false);\n        this.domNode = document.createElement('div');\n        if (!this.options.isAccessible) {\n            this.domNode.setAttribute('aria-hidden', 'true');\n            this.domNode.setAttribute('role', 'presentation');\n        }\n        this._disposables.add(this.editor.onDidLayoutChange((info) => {\n            const width = this._getWidth(info);\n            this.domNode.style.width = width + 'px';\n            this.domNode.style.left = this._getLeft(info) + 'px';\n            this._onWidth(width);\n        }));\n    }\n    dispose() {\n        if (this._overlayWidget) {\n            this.editor.removeOverlayWidget(this._overlayWidget);\n            this._overlayWidget = null;\n        }\n        if (this._viewZone) {\n            this.editor.changeViewZones(accessor => {\n                if (this._viewZone) {\n                    accessor.removeZone(this._viewZone.id);\n                }\n                this._viewZone = null;\n            });\n        }\n        this.editor.deltaDecorations(this._positionMarkerId, []);\n        this._positionMarkerId = [];\n        this._disposables.dispose();\n    }\n    create() {\n        this.domNode.classList.add('zone-widget');\n        if (this.options.className) {\n            this.domNode.classList.add(this.options.className);\n        }\n        this.container = document.createElement('div');\n        this.container.classList.add('zone-widget-container');\n        this.domNode.appendChild(this.container);\n        if (this.options.showArrow) {\n            this._arrow = new Arrow(this.editor);\n            this._disposables.add(this._arrow);\n        }\n        this._fillContainer(this.container);\n        this._initSash();\n        this._applyStyles();\n    }\n    style(styles) {\n        if (styles.frameColor) {\n            this.options.frameColor = styles.frameColor;\n        }\n        if (styles.arrowColor) {\n            this.options.arrowColor = styles.arrowColor;\n        }\n        this._applyStyles();\n    }\n    _applyStyles() {\n        if (this.container && this.options.frameColor) {\n            let frameColor = this.options.frameColor.toString();\n            this.container.style.borderTopColor = frameColor;\n            this.container.style.borderBottomColor = frameColor;\n        }\n        if (this._arrow && this.options.arrowColor) {\n            let arrowColor = this.options.arrowColor.toString();\n            this._arrow.color = arrowColor;\n        }\n    }\n    _getWidth(info) {\n        return info.width - info.minimap.minimapWidth - info.verticalScrollbarWidth;\n    }\n    _getLeft(info) {\n        // If minimap is to the left, we move beyond it\n        if (info.minimap.minimapWidth > 0 && info.minimap.minimapLeft === 0) {\n            return info.minimap.minimapWidth;\n        }\n        return 0;\n    }\n    _onViewZoneTop(top) {\n        this.domNode.style.top = top + 'px';\n    }\n    _onViewZoneHeight(height) {\n        this.domNode.style.height = `${height}px`;\n        if (this.container) {\n            let containerHeight = height - this._decoratingElementsHeight();\n            this.container.style.height = `${containerHeight}px`;\n            const layoutInfo = this.editor.getLayoutInfo();\n            this._doLayout(containerHeight, this._getWidth(layoutInfo));\n        }\n        if (this._resizeSash) {\n            this._resizeSash.layout();\n        }\n    }\n    get position() {\n        const [id] = this._positionMarkerId;\n        if (!id) {\n            return undefined;\n        }\n        const model = this.editor.getModel();\n        if (!model) {\n            return undefined;\n        }\n        const range = model.getDecorationRange(id);\n        if (!range) {\n            return undefined;\n        }\n        return range.getStartPosition();\n    }\n    show(rangeOrPos, heightInLines) {\n        const range = Range.isIRange(rangeOrPos) ? Range.lift(rangeOrPos) : Range.fromPositions(rangeOrPos);\n        this._isShowing = true;\n        this._showImpl(range, heightInLines);\n        this._isShowing = false;\n        this._positionMarkerId = this.editor.deltaDecorations(this._positionMarkerId, [{ range, options: ModelDecorationOptions.EMPTY }]);\n    }\n    hide() {\n        if (this._viewZone) {\n            this.editor.changeViewZones(accessor => {\n                if (this._viewZone) {\n                    accessor.removeZone(this._viewZone.id);\n                }\n            });\n            this._viewZone = null;\n        }\n        if (this._overlayWidget) {\n            this.editor.removeOverlayWidget(this._overlayWidget);\n            this._overlayWidget = null;\n        }\n        if (this._arrow) {\n            this._arrow.hide();\n        }\n    }\n    _decoratingElementsHeight() {\n        let lineHeight = this.editor.getOption(58 /* lineHeight */);\n        let result = 0;\n        if (this.options.showArrow) {\n            let arrowHeight = Math.round(lineHeight / 3);\n            result += 2 * arrowHeight;\n        }\n        if (this.options.showFrame) {\n            let frameThickness = Math.round(lineHeight / 9);\n            result += 2 * frameThickness;\n        }\n        return result;\n    }\n    _showImpl(where, heightInLines) {\n        const position = where.getStartPosition();\n        const layoutInfo = this.editor.getLayoutInfo();\n        const width = this._getWidth(layoutInfo);\n        this.domNode.style.width = `${width}px`;\n        this.domNode.style.left = this._getLeft(layoutInfo) + 'px';\n        // Render the widget as zone (rendering) and widget (lifecycle)\n        const viewZoneDomNode = document.createElement('div');\n        viewZoneDomNode.style.overflow = 'hidden';\n        const lineHeight = this.editor.getOption(58 /* lineHeight */);\n        // adjust heightInLines to viewport\n        const maxHeightInLines = Math.max(12, (this.editor.getLayoutInfo().height / lineHeight) * 0.8);\n        heightInLines = Math.min(heightInLines, maxHeightInLines);\n        let arrowHeight = 0;\n        let frameThickness = 0;\n        // Render the arrow one 1/3 of an editor line height\n        if (this._arrow && this.options.showArrow) {\n            arrowHeight = Math.round(lineHeight / 3);\n            this._arrow.height = arrowHeight;\n            this._arrow.show(position);\n        }\n        // Render the frame as 1/9 of an editor line height\n        if (this.options.showFrame) {\n            frameThickness = Math.round(lineHeight / 9);\n        }\n        // insert zone widget\n        this.editor.changeViewZones((accessor) => {\n            if (this._viewZone) {\n                accessor.removeZone(this._viewZone.id);\n            }\n            if (this._overlayWidget) {\n                this.editor.removeOverlayWidget(this._overlayWidget);\n                this._overlayWidget = null;\n            }\n            this.domNode.style.top = '-1000px';\n            this._viewZone = new ViewZoneDelegate(viewZoneDomNode, position.lineNumber, position.column, heightInLines, (top) => this._onViewZoneTop(top), (height) => this._onViewZoneHeight(height));\n            this._viewZone.id = accessor.addZone(this._viewZone);\n            this._overlayWidget = new OverlayWidgetDelegate(WIDGET_ID + this._viewZone.id, this.domNode);\n            this.editor.addOverlayWidget(this._overlayWidget);\n        });\n        if (this.container && this.options.showFrame) {\n            const width = this.options.frameWidth ? this.options.frameWidth : frameThickness;\n            this.container.style.borderTopWidth = width + 'px';\n            this.container.style.borderBottomWidth = width + 'px';\n        }\n        let containerHeight = heightInLines * lineHeight - this._decoratingElementsHeight();\n        if (this.container) {\n            this.container.style.top = arrowHeight + 'px';\n            this.container.style.height = containerHeight + 'px';\n            this.container.style.overflow = 'hidden';\n        }\n        this._doLayout(containerHeight, width);\n        if (!this.options.keepEditorSelection) {\n            this.editor.setSelection(where);\n        }\n        const model = this.editor.getModel();\n        if (model) {\n            const revealLine = where.endLineNumber + 1;\n            if (revealLine <= model.getLineCount()) {\n                // reveal line below the zone widget\n                this.revealLine(revealLine, false);\n            }\n            else {\n                // reveal last line atop\n                this.revealLine(model.getLineCount(), true);\n            }\n        }\n    }\n    revealLine(lineNumber, isLastLine) {\n        if (isLastLine) {\n            this.editor.revealLineInCenter(lineNumber, 0 /* Smooth */);\n        }\n        else {\n            this.editor.revealLine(lineNumber, 0 /* Smooth */);\n        }\n    }\n    setCssClass(className, classToReplace) {\n        if (!this.container) {\n            return;\n        }\n        if (classToReplace) {\n            this.container.classList.remove(classToReplace);\n        }\n        this.container.classList.add(className);\n    }\n    _onWidth(widthInPixel) {\n        // implement in subclass\n    }\n    _doLayout(heightInPixel, widthInPixel) {\n        // implement in subclass\n    }\n    _relayout(newHeightInLines) {\n        if (this._viewZone && this._viewZone.heightInLines !== newHeightInLines) {\n            this.editor.changeViewZones(accessor => {\n                if (this._viewZone) {\n                    this._viewZone.heightInLines = newHeightInLines;\n                    accessor.layoutZone(this._viewZone.id);\n                }\n            });\n        }\n    }\n    // --- sash\n    _initSash() {\n        if (this._resizeSash) {\n            return;\n        }\n        this._resizeSash = this._disposables.add(new Sash(this.domNode, this, { orientation: 1 /* HORIZONTAL */ }));\n        if (!this.options.isResizeable) {\n            this._resizeSash.hide();\n            this._resizeSash.state = 0 /* Disabled */;\n        }\n        let data;\n        this._disposables.add(this._resizeSash.onDidStart((e) => {\n            if (this._viewZone) {\n                data = {\n                    startY: e.startY,\n                    heightInLines: this._viewZone.heightInLines,\n                };\n            }\n        }));\n        this._disposables.add(this._resizeSash.onDidEnd(() => {\n            data = undefined;\n        }));\n        this._disposables.add(this._resizeSash.onDidChange((evt) => {\n            if (data) {\n                let lineDelta = (evt.currentY - data.startY) / this.editor.getOption(58 /* lineHeight */);\n                let roundedLineDelta = lineDelta < 0 ? Math.ceil(lineDelta) : Math.floor(lineDelta);\n                let newHeightInLines = data.heightInLines + roundedLineDelta;\n                if (newHeightInLines > 5 && newHeightInLines < 35) {\n                    this._relayout(newHeightInLines);\n                }\n            }\n        }));\n    }\n    getHorizontalSashLeft() {\n        return 0;\n    }\n    getHorizontalSashTop() {\n        return (this.domNode.style.height === null ? 0 : parseInt(this.domNode.style.height)) - (this._decoratingElementsHeight() / 2);\n    }\n    getHorizontalSashWidth() {\n        const layoutInfo = this.editor.getLayoutInfo();\n        return layoutInfo.width - layoutInfo.minimap.minimapWidth;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}