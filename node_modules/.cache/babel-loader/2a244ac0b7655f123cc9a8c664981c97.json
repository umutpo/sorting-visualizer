{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { Delayer } from '../../../base/common/async.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { EditorAction, EditorCommand, MultiEditorAction, registerEditorAction, registerEditorCommand, registerEditorContribution, registerMultiEditorAction } from '../../browser/editorExtensions.js';\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\nimport { CONTEXT_FIND_INPUT_FOCUSED, CONTEXT_FIND_WIDGET_VISIBLE, CONTEXT_REPLACE_INPUT_FOCUSED, FindModelBoundToEditorModel, FIND_IDS, ToggleCaseSensitiveKeybinding, TogglePreserveCaseKeybinding, ToggleRegexKeybinding, ToggleSearchScopeKeybinding, ToggleWholeWordKeybinding } from './findModel.js';\nimport { FindOptionsWidget } from './findOptionsWidget.js';\nimport { FindReplaceState } from './findState.js';\nimport { FindWidget } from './findWidget.js';\nimport * as nls from '../../../nls.js';\nimport { MenuId } from '../../../platform/actions/common/actions.js';\nimport { IClipboardService } from '../../../platform/clipboard/common/clipboardService.js';\nimport { ContextKeyExpr, IContextKeyService } from '../../../platform/contextkey/common/contextkey.js';\nimport { IContextViewService } from '../../../platform/contextview/browser/contextView.js';\nimport { IKeybindingService } from '../../../platform/keybinding/common/keybinding.js';\nimport { INotificationService } from '../../../platform/notification/common/notification.js';\nimport { IStorageService } from '../../../platform/storage/common/storage.js';\nimport { IThemeService } from '../../../platform/theme/common/themeService.js';\nconst SEARCH_STRING_MAX_LENGTH = 524288;\nexport function getSelectionSearchString(editor) {\n  let seedSearchStringFromSelection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'single';\n  let seedSearchStringFromNonEmptySelection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (!editor.hasModel()) {\n    return null;\n  }\n\n  const selection = editor.getSelection(); // if selection spans multiple lines, default search string to empty\n\n  if (seedSearchStringFromSelection === 'single' && selection.startLineNumber === selection.endLineNumber || seedSearchStringFromSelection === 'multiple') {\n    if (selection.isEmpty()) {\n      const wordAtPosition = editor.getConfiguredWordAtPosition(selection.getStartPosition());\n\n      if (wordAtPosition && false === seedSearchStringFromNonEmptySelection) {\n        return wordAtPosition.word;\n      }\n    } else {\n      if (editor.getModel().getValueLengthInRange(selection) < SEARCH_STRING_MAX_LENGTH) {\n        return editor.getModel().getValueInRange(selection);\n      }\n    }\n  }\n\n  return null;\n}\nlet CommonFindController = class CommonFindController extends Disposable {\n  constructor(editor, contextKeyService, storageService, clipboardService) {\n    super();\n    this._editor = editor;\n    this._findWidgetVisible = CONTEXT_FIND_WIDGET_VISIBLE.bindTo(contextKeyService);\n    this._contextKeyService = contextKeyService;\n    this._storageService = storageService;\n    this._clipboardService = clipboardService;\n    this._updateHistoryDelayer = new Delayer(500);\n    this._state = this._register(new FindReplaceState());\n    this.loadQueryState();\n\n    this._register(this._state.onFindReplaceStateChange(e => this._onStateChanged(e)));\n\n    this._model = null;\n\n    this._register(this._editor.onDidChangeModel(() => {\n      let shouldRestartFind = this._editor.getModel() && this._state.isRevealed;\n\n      this.disposeModel();\n\n      this._state.change({\n        searchScope: null,\n        matchCase: this._storageService.getBoolean('editor.matchCase', 1\n        /* WORKSPACE */\n        , false),\n        wholeWord: this._storageService.getBoolean('editor.wholeWord', 1\n        /* WORKSPACE */\n        , false),\n        isRegex: this._storageService.getBoolean('editor.isRegex', 1\n        /* WORKSPACE */\n        , false),\n        preserveCase: this._storageService.getBoolean('editor.preserveCase', 1\n        /* WORKSPACE */\n        , false)\n      }, false);\n\n      if (shouldRestartFind) {\n        this._start({\n          forceRevealReplace: false,\n          seedSearchStringFromSelection: 'none',\n          seedSearchStringFromNonEmptySelection: false,\n          seedSearchStringFromGlobalClipboard: false,\n          shouldFocus: 0\n          /* NoFocusChange */\n          ,\n          shouldAnimate: false,\n          updateSearchScope: false,\n          loop: this._editor.getOption(35\n          /* find */\n          ).loop\n        });\n      }\n    }));\n  }\n\n  get editor() {\n    return this._editor;\n  }\n\n  static get(editor) {\n    return editor.getContribution(CommonFindController.ID);\n  }\n\n  dispose() {\n    this.disposeModel();\n    super.dispose();\n  }\n\n  disposeModel() {\n    if (this._model) {\n      this._model.dispose();\n\n      this._model = null;\n    }\n  }\n\n  _onStateChanged(e) {\n    this.saveQueryState(e);\n\n    if (e.isRevealed) {\n      if (this._state.isRevealed) {\n        this._findWidgetVisible.set(true);\n      } else {\n        this._findWidgetVisible.reset();\n\n        this.disposeModel();\n      }\n    }\n\n    if (e.searchString) {\n      this.setGlobalBufferTerm(this._state.searchString);\n    }\n  }\n\n  saveQueryState(e) {\n    if (e.isRegex) {\n      this._storageService.store('editor.isRegex', this._state.actualIsRegex, 1\n      /* WORKSPACE */\n      , 0\n      /* USER */\n      );\n    }\n\n    if (e.wholeWord) {\n      this._storageService.store('editor.wholeWord', this._state.actualWholeWord, 1\n      /* WORKSPACE */\n      , 0\n      /* USER */\n      );\n    }\n\n    if (e.matchCase) {\n      this._storageService.store('editor.matchCase', this._state.actualMatchCase, 1\n      /* WORKSPACE */\n      , 0\n      /* USER */\n      );\n    }\n\n    if (e.preserveCase) {\n      this._storageService.store('editor.preserveCase', this._state.actualPreserveCase, 1\n      /* WORKSPACE */\n      , 0\n      /* USER */\n      );\n    }\n  }\n\n  loadQueryState() {\n    this._state.change({\n      matchCase: this._storageService.getBoolean('editor.matchCase', 1\n      /* WORKSPACE */\n      , this._state.matchCase),\n      wholeWord: this._storageService.getBoolean('editor.wholeWord', 1\n      /* WORKSPACE */\n      , this._state.wholeWord),\n      isRegex: this._storageService.getBoolean('editor.isRegex', 1\n      /* WORKSPACE */\n      , this._state.isRegex),\n      preserveCase: this._storageService.getBoolean('editor.preserveCase', 1\n      /* WORKSPACE */\n      , this._state.preserveCase)\n    }, false);\n  }\n\n  isFindInputFocused() {\n    return !!CONTEXT_FIND_INPUT_FOCUSED.getValue(this._contextKeyService);\n  }\n\n  getState() {\n    return this._state;\n  }\n\n  closeFindWidget() {\n    this._state.change({\n      isRevealed: false,\n      searchScope: null\n    }, false);\n\n    this._editor.focus();\n  }\n\n  toggleCaseSensitive() {\n    this._state.change({\n      matchCase: !this._state.matchCase\n    }, false);\n\n    if (!this._state.isRevealed) {\n      this.highlightFindOptions();\n    }\n  }\n\n  toggleWholeWords() {\n    this._state.change({\n      wholeWord: !this._state.wholeWord\n    }, false);\n\n    if (!this._state.isRevealed) {\n      this.highlightFindOptions();\n    }\n  }\n\n  toggleRegex() {\n    this._state.change({\n      isRegex: !this._state.isRegex\n    }, false);\n\n    if (!this._state.isRevealed) {\n      this.highlightFindOptions();\n    }\n  }\n\n  togglePreserveCase() {\n    this._state.change({\n      preserveCase: !this._state.preserveCase\n    }, false);\n\n    if (!this._state.isRevealed) {\n      this.highlightFindOptions();\n    }\n  }\n\n  toggleSearchScope() {\n    if (this._state.searchScope) {\n      this._state.change({\n        searchScope: null\n      }, true);\n    } else {\n      if (this._editor.hasModel()) {\n        let selections = this._editor.getSelections();\n\n        selections.map(selection => {\n          if (selection.endColumn === 1 && selection.endLineNumber > selection.startLineNumber) {\n            selection = selection.setEndPosition(selection.endLineNumber - 1, this._editor.getModel().getLineMaxColumn(selection.endLineNumber - 1));\n          }\n\n          if (!selection.isEmpty()) {\n            return selection;\n          }\n\n          return null;\n        }).filter(element => !!element);\n\n        if (selections.length) {\n          this._state.change({\n            searchScope: selections\n          }, true);\n        }\n      }\n    }\n  }\n\n  setSearchString(searchString) {\n    if (this._state.isRegex) {\n      searchString = strings.escapeRegExpCharacters(searchString);\n    }\n\n    this._state.change({\n      searchString: searchString\n    }, false);\n  }\n\n  highlightFindOptions() {// overwritten in subclass\n\n    let ignoreWhenVisible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  }\n\n  _start(opts) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.disposeModel();\n\n      if (!this._editor.hasModel()) {\n        // cannot do anything with an editor that doesn't have a model...\n        return;\n      }\n\n      let stateChanges = {\n        isRevealed: true\n      };\n\n      if (opts.seedSearchStringFromSelection === 'single') {\n        let selectionSearchString = getSelectionSearchString(this._editor, opts.seedSearchStringFromSelection, opts.seedSearchStringFromNonEmptySelection);\n\n        if (selectionSearchString) {\n          if (this._state.isRegex) {\n            stateChanges.searchString = strings.escapeRegExpCharacters(selectionSearchString);\n          } else {\n            stateChanges.searchString = selectionSearchString;\n          }\n        }\n      } else if (opts.seedSearchStringFromSelection === 'multiple' && !opts.updateSearchScope) {\n        let selectionSearchString = getSelectionSearchString(this._editor, opts.seedSearchStringFromSelection);\n\n        if (selectionSearchString) {\n          stateChanges.searchString = selectionSearchString;\n        }\n      }\n\n      if (!stateChanges.searchString && opts.seedSearchStringFromGlobalClipboard) {\n        let selectionSearchString = yield this.getGlobalBufferTerm();\n\n        if (!this._editor.hasModel()) {\n          // the editor has lost its model in the meantime\n          return;\n        }\n\n        if (selectionSearchString) {\n          stateChanges.searchString = selectionSearchString;\n        }\n      } // Overwrite isReplaceRevealed\n\n\n      if (opts.forceRevealReplace) {\n        stateChanges.isReplaceRevealed = true;\n      } else if (!this._findWidgetVisible.get()) {\n        stateChanges.isReplaceRevealed = false;\n      }\n\n      if (opts.updateSearchScope) {\n        let currentSelections = this._editor.getSelections();\n\n        if (currentSelections.some(selection => !selection.isEmpty())) {\n          stateChanges.searchScope = currentSelections;\n        }\n      }\n\n      stateChanges.loop = opts.loop;\n\n      this._state.change(stateChanges, false);\n\n      if (!this._model) {\n        this._model = new FindModelBoundToEditorModel(this._editor, this._state);\n      }\n    });\n  }\n\n  start(opts) {\n    return this._start(opts);\n  }\n\n  moveToNextMatch() {\n    if (this._model) {\n      this._model.moveToNextMatch();\n\n      return true;\n    }\n\n    return false;\n  }\n\n  moveToPrevMatch() {\n    if (this._model) {\n      this._model.moveToPrevMatch();\n\n      return true;\n    }\n\n    return false;\n  }\n\n  replace() {\n    if (this._model) {\n      this._model.replace();\n\n      return true;\n    }\n\n    return false;\n  }\n\n  replaceAll() {\n    if (this._model) {\n      this._model.replaceAll();\n\n      return true;\n    }\n\n    return false;\n  }\n\n  selectAllMatches() {\n    if (this._model) {\n      this._model.selectAllMatches();\n\n      this._editor.focus();\n\n      return true;\n    }\n\n    return false;\n  }\n\n  getGlobalBufferTerm() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this._editor.getOption(35\n      /* find */\n      ).globalFindClipboard && this._editor.hasModel() && !this._editor.getModel().isTooLargeForSyncing()) {\n        return this._clipboardService.readFindText();\n      }\n\n      return '';\n    });\n  }\n\n  setGlobalBufferTerm(text) {\n    if (this._editor.getOption(35\n    /* find */\n    ).globalFindClipboard && this._editor.hasModel() && !this._editor.getModel().isTooLargeForSyncing()) {\n      // intentionally not awaited\n      this._clipboardService.writeFindText(text);\n    }\n  }\n\n};\nCommonFindController.ID = 'editor.contrib.findController';\nCommonFindController = __decorate([__param(1, IContextKeyService), __param(2, IStorageService), __param(3, IClipboardService)], CommonFindController);\nexport { CommonFindController };\nlet FindController = class FindController extends CommonFindController {\n  constructor(editor, _contextViewService, _contextKeyService, _keybindingService, _themeService, _notificationService, _storageService, clipboardService) {\n    super(editor, _contextKeyService, _storageService, clipboardService);\n    this._contextViewService = _contextViewService;\n    this._keybindingService = _keybindingService;\n    this._themeService = _themeService;\n    this._notificationService = _notificationService;\n    this._widget = null;\n    this._findOptionsWidget = null;\n  }\n\n  _start(opts) {\n    const _super = Object.create(null, {\n      _start: {\n        get: () => super._start\n      }\n    });\n\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this._widget) {\n        this._createFindWidget();\n      }\n\n      const selection = this._editor.getSelection();\n\n      let updateSearchScope = false;\n\n      switch (this._editor.getOption(35\n      /* find */\n      ).autoFindInSelection) {\n        case 'always':\n          updateSearchScope = true;\n          break;\n\n        case 'never':\n          updateSearchScope = false;\n          break;\n\n        case 'multiline':\n          const isSelectionMultipleLine = !!selection && selection.startLineNumber !== selection.endLineNumber;\n          updateSearchScope = isSelectionMultipleLine;\n          break;\n\n        default:\n          break;\n      }\n\n      opts.updateSearchScope = updateSearchScope;\n      yield _super._start.call(this, opts);\n\n      if (this._widget) {\n        if (opts.shouldFocus === 2\n        /* FocusReplaceInput */\n        ) {\n          this._widget.focusReplaceInput();\n        } else if (opts.shouldFocus === 1\n        /* FocusFindInput */\n        ) {\n          this._widget.focusFindInput();\n        }\n      }\n    });\n  }\n\n  highlightFindOptions() {\n    let ignoreWhenVisible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    if (!this._widget) {\n      this._createFindWidget();\n    }\n\n    if (this._state.isRevealed && !ignoreWhenVisible) {\n      this._widget.highlightFindOptions();\n    } else {\n      this._findOptionsWidget.highlightFindOptions();\n    }\n  }\n\n  _createFindWidget() {\n    this._widget = this._register(new FindWidget(this._editor, this, this._state, this._contextViewService, this._keybindingService, this._contextKeyService, this._themeService, this._storageService, this._notificationService));\n    this._findOptionsWidget = this._register(new FindOptionsWidget(this._editor, this._state, this._keybindingService, this._themeService));\n  }\n\n};\nFindController = __decorate([__param(1, IContextViewService), __param(2, IContextKeyService), __param(3, IKeybindingService), __param(4, IThemeService), __param(5, INotificationService), __param(6, IStorageService), __param(7, IClipboardService)], FindController);\nexport { FindController };\nexport const StartFindAction = registerMultiEditorAction(new MultiEditorAction({\n  id: FIND_IDS.StartFindAction,\n  label: nls.localize('startFindAction', \"Find\"),\n  alias: 'Find',\n  precondition: ContextKeyExpr.or(EditorContextKeys.focus, ContextKeyExpr.has('editorIsOpen')),\n  kbOpts: {\n    kbExpr: null,\n    primary: 2048\n    /* CtrlCmd */\n    | 36\n    /* KeyF */\n    ,\n    weight: 100\n    /* EditorContrib */\n\n  },\n  menuOpts: {\n    menuId: MenuId.MenubarEditMenu,\n    group: '3_find',\n    title: nls.localize({\n      key: 'miFind',\n      comment: ['&& denotes a mnemonic']\n    }, \"&&Find\"),\n    order: 1\n  }\n}));\nStartFindAction.addImplementation(0, (accessor, editor, args) => {\n  const controller = CommonFindController.get(editor);\n\n  if (!controller) {\n    return false;\n  }\n\n  return controller.start({\n    forceRevealReplace: false,\n    seedSearchStringFromSelection: editor.getOption(35\n    /* find */\n    ).seedSearchStringFromSelection !== 'never' ? 'single' : 'none',\n    seedSearchStringFromNonEmptySelection: editor.getOption(35\n    /* find */\n    ).seedSearchStringFromSelection === 'selection',\n    seedSearchStringFromGlobalClipboard: editor.getOption(35\n    /* find */\n    ).globalFindClipboard,\n    shouldFocus: 1\n    /* FocusFindInput */\n    ,\n    shouldAnimate: true,\n    updateSearchScope: false,\n    loop: editor.getOption(35\n    /* find */\n    ).loop\n  });\n});\nexport class StartFindWithSelectionAction extends EditorAction {\n  constructor() {\n    super({\n      id: FIND_IDS.StartFindWithSelection,\n      label: nls.localize('startFindWithSelectionAction', \"Find With Selection\"),\n      alias: 'Find With Selection',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: null,\n        primary: 0,\n        mac: {\n          primary: 2048\n          /* CtrlCmd */\n          | 35\n          /* KeyE */\n\n        },\n        weight: 100\n        /* EditorContrib */\n\n      }\n    });\n  }\n\n  run(accessor, editor) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let controller = CommonFindController.get(editor);\n\n      if (controller) {\n        yield controller.start({\n          forceRevealReplace: false,\n          seedSearchStringFromSelection: 'multiple',\n          seedSearchStringFromNonEmptySelection: false,\n          seedSearchStringFromGlobalClipboard: false,\n          shouldFocus: 0\n          /* NoFocusChange */\n          ,\n          shouldAnimate: true,\n          updateSearchScope: false,\n          loop: editor.getOption(35\n          /* find */\n          ).loop\n        });\n        controller.setGlobalBufferTerm(controller.getState().searchString);\n      }\n    });\n  }\n\n}\nexport class MatchFindAction extends EditorAction {\n  run(accessor, editor) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let controller = CommonFindController.get(editor);\n\n      if (controller && !this._run(controller)) {\n        yield controller.start({\n          forceRevealReplace: false,\n          seedSearchStringFromSelection: controller.getState().searchString.length === 0 && editor.getOption(35\n          /* find */\n          ).seedSearchStringFromSelection !== 'never' ? 'single' : 'none',\n          seedSearchStringFromNonEmptySelection: editor.getOption(35\n          /* find */\n          ).seedSearchStringFromSelection === 'selection',\n          seedSearchStringFromGlobalClipboard: true,\n          shouldFocus: 0\n          /* NoFocusChange */\n          ,\n          shouldAnimate: true,\n          updateSearchScope: false,\n          loop: editor.getOption(35\n          /* find */\n          ).loop\n        });\n\n        this._run(controller);\n      }\n    });\n  }\n\n}\nexport class NextMatchFindAction extends MatchFindAction {\n  constructor() {\n    super({\n      id: FIND_IDS.NextMatchFindAction,\n      label: nls.localize('findNextMatchAction', \"Find Next\"),\n      alias: 'Find Next',\n      precondition: undefined,\n      kbOpts: [{\n        kbExpr: EditorContextKeys.focus,\n        primary: 61\n        /* F3 */\n        ,\n        mac: {\n          primary: 2048\n          /* CtrlCmd */\n          | 37\n          /* KeyG */\n          ,\n          secondary: [61\n          /* F3 */\n          ]\n        },\n        weight: 100\n        /* EditorContrib */\n\n      }, {\n        kbExpr: ContextKeyExpr.and(EditorContextKeys.focus, CONTEXT_FIND_INPUT_FOCUSED),\n        primary: 3\n        /* Enter */\n        ,\n        weight: 100\n        /* EditorContrib */\n\n      }]\n    });\n  }\n\n  _run(controller) {\n    const result = controller.moveToNextMatch();\n\n    if (result) {\n      controller.editor.pushUndoStop();\n      return true;\n    }\n\n    return false;\n  }\n\n}\nexport class PreviousMatchFindAction extends MatchFindAction {\n  constructor() {\n    super({\n      id: FIND_IDS.PreviousMatchFindAction,\n      label: nls.localize('findPreviousMatchAction', \"Find Previous\"),\n      alias: 'Find Previous',\n      precondition: undefined,\n      kbOpts: [{\n        kbExpr: EditorContextKeys.focus,\n        primary: 1024\n        /* Shift */\n        | 61\n        /* F3 */\n        ,\n        mac: {\n          primary: 2048\n          /* CtrlCmd */\n          | 1024\n          /* Shift */\n          | 37\n          /* KeyG */\n          ,\n          secondary: [1024\n          /* Shift */\n          | 61\n          /* F3 */\n          ]\n        },\n        weight: 100\n        /* EditorContrib */\n\n      }, {\n        kbExpr: ContextKeyExpr.and(EditorContextKeys.focus, CONTEXT_FIND_INPUT_FOCUSED),\n        primary: 1024\n        /* Shift */\n        | 3\n        /* Enter */\n        ,\n        weight: 100\n        /* EditorContrib */\n\n      }]\n    });\n  }\n\n  _run(controller) {\n    return controller.moveToPrevMatch();\n  }\n\n}\nexport class SelectionMatchFindAction extends EditorAction {\n  run(accessor, editor) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let controller = CommonFindController.get(editor);\n\n      if (!controller) {\n        return;\n      }\n\n      const seedSearchStringFromNonEmptySelection = editor.getOption(35\n      /* find */\n      ).seedSearchStringFromSelection === 'selection';\n      let selectionSearchString = null;\n\n      if (editor.getOption(35\n      /* find */\n      ).seedSearchStringFromSelection !== 'never') {\n        selectionSearchString = getSelectionSearchString(editor, 'single', seedSearchStringFromNonEmptySelection);\n      }\n\n      if (selectionSearchString) {\n        controller.setSearchString(selectionSearchString);\n      }\n\n      if (!this._run(controller)) {\n        yield controller.start({\n          forceRevealReplace: false,\n          seedSearchStringFromSelection: editor.getOption(35\n          /* find */\n          ).seedSearchStringFromSelection !== 'never' ? 'single' : 'none',\n          seedSearchStringFromNonEmptySelection: seedSearchStringFromNonEmptySelection,\n          seedSearchStringFromGlobalClipboard: false,\n          shouldFocus: 0\n          /* NoFocusChange */\n          ,\n          shouldAnimate: true,\n          updateSearchScope: false,\n          loop: editor.getOption(35\n          /* find */\n          ).loop\n        });\n\n        this._run(controller);\n      }\n    });\n  }\n\n}\nexport class NextSelectionMatchFindAction extends SelectionMatchFindAction {\n  constructor() {\n    super({\n      id: FIND_IDS.NextSelectionMatchFindAction,\n      label: nls.localize('nextSelectionMatchFindAction', \"Find Next Selection\"),\n      alias: 'Find Next Selection',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: EditorContextKeys.focus,\n        primary: 2048\n        /* CtrlCmd */\n        | 61\n        /* F3 */\n        ,\n        weight: 100\n        /* EditorContrib */\n\n      }\n    });\n  }\n\n  _run(controller) {\n    return controller.moveToNextMatch();\n  }\n\n}\nexport class PreviousSelectionMatchFindAction extends SelectionMatchFindAction {\n  constructor() {\n    super({\n      id: FIND_IDS.PreviousSelectionMatchFindAction,\n      label: nls.localize('previousSelectionMatchFindAction', \"Find Previous Selection\"),\n      alias: 'Find Previous Selection',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: EditorContextKeys.focus,\n        primary: 2048\n        /* CtrlCmd */\n        | 1024\n        /* Shift */\n        | 61\n        /* F3 */\n        ,\n        weight: 100\n        /* EditorContrib */\n\n      }\n    });\n  }\n\n  _run(controller) {\n    return controller.moveToPrevMatch();\n  }\n\n}\nexport const StartFindReplaceAction = registerMultiEditorAction(new MultiEditorAction({\n  id: FIND_IDS.StartFindReplaceAction,\n  label: nls.localize('startReplace', \"Replace\"),\n  alias: 'Replace',\n  precondition: ContextKeyExpr.or(EditorContextKeys.focus, ContextKeyExpr.has('editorIsOpen')),\n  kbOpts: {\n    kbExpr: null,\n    primary: 2048\n    /* CtrlCmd */\n    | 38\n    /* KeyH */\n    ,\n    mac: {\n      primary: 2048\n      /* CtrlCmd */\n      | 512\n      /* Alt */\n      | 36\n      /* KeyF */\n\n    },\n    weight: 100\n    /* EditorContrib */\n\n  },\n  menuOpts: {\n    menuId: MenuId.MenubarEditMenu,\n    group: '3_find',\n    title: nls.localize({\n      key: 'miReplace',\n      comment: ['&& denotes a mnemonic']\n    }, \"&&Replace\"),\n    order: 2\n  }\n}));\nStartFindReplaceAction.addImplementation(0, (accessor, editor, args) => {\n  if (!editor.hasModel() || editor.getOption(80\n  /* readOnly */\n  )) {\n    return false;\n  }\n\n  const controller = CommonFindController.get(editor);\n\n  if (!controller) {\n    return false;\n  }\n\n  const currentSelection = editor.getSelection();\n  const findInputFocused = controller.isFindInputFocused(); // we only seed search string from selection when the current selection is single line and not empty,\n  // + the find input is not focused\n\n  const seedSearchStringFromSelection = !currentSelection.isEmpty() && currentSelection.startLineNumber === currentSelection.endLineNumber && editor.getOption(35\n  /* find */\n  ).seedSearchStringFromSelection !== 'never' && !findInputFocused;\n  /*\n  * if the existing search string in find widget is empty and we don't seed search string from selection, it means the Find Input is still empty, so we should focus the Find Input instead of Replace Input.\n   * findInputFocused true -> seedSearchStringFromSelection false, FocusReplaceInput\n  * findInputFocused false, seedSearchStringFromSelection true FocusReplaceInput\n  * findInputFocused false seedSearchStringFromSelection false FocusFindInput\n  */\n\n  const shouldFocus = findInputFocused || seedSearchStringFromSelection ? 2\n  /* FocusReplaceInput */\n  : 1\n  /* FocusFindInput */\n  ;\n  return controller.start({\n    forceRevealReplace: true,\n    seedSearchStringFromSelection: seedSearchStringFromSelection ? 'single' : 'none',\n    seedSearchStringFromNonEmptySelection: editor.getOption(35\n    /* find */\n    ).seedSearchStringFromSelection === 'selection',\n    seedSearchStringFromGlobalClipboard: editor.getOption(35\n    /* find */\n    ).seedSearchStringFromSelection !== 'never',\n    shouldFocus: shouldFocus,\n    shouldAnimate: true,\n    updateSearchScope: false,\n    loop: editor.getOption(35\n    /* find */\n    ).loop\n  });\n});\nregisterEditorContribution(CommonFindController.ID, FindController);\nregisterEditorAction(StartFindWithSelectionAction);\nregisterEditorAction(NextMatchFindAction);\nregisterEditorAction(PreviousMatchFindAction);\nregisterEditorAction(NextSelectionMatchFindAction);\nregisterEditorAction(PreviousSelectionMatchFindAction);\nconst FindCommand = EditorCommand.bindToContribution(CommonFindController.get);\nregisterEditorCommand(new FindCommand({\n  id: FIND_IDS.CloseFindWidgetCommand,\n  precondition: CONTEXT_FIND_WIDGET_VISIBLE,\n  handler: x => x.closeFindWidget(),\n  kbOpts: {\n    weight: 100\n    /* EditorContrib */\n    + 5,\n    kbExpr: ContextKeyExpr.and(EditorContextKeys.focus, ContextKeyExpr.not('isComposing')),\n    primary: 9\n    /* Escape */\n    ,\n    secondary: [1024\n    /* Shift */\n    | 9\n    /* Escape */\n    ]\n  }\n}));\nregisterEditorCommand(new FindCommand({\n  id: FIND_IDS.ToggleCaseSensitiveCommand,\n  precondition: undefined,\n  handler: x => x.toggleCaseSensitive(),\n  kbOpts: {\n    weight: 100\n    /* EditorContrib */\n    + 5,\n    kbExpr: EditorContextKeys.focus,\n    primary: ToggleCaseSensitiveKeybinding.primary,\n    mac: ToggleCaseSensitiveKeybinding.mac,\n    win: ToggleCaseSensitiveKeybinding.win,\n    linux: ToggleCaseSensitiveKeybinding.linux\n  }\n}));\nregisterEditorCommand(new FindCommand({\n  id: FIND_IDS.ToggleWholeWordCommand,\n  precondition: undefined,\n  handler: x => x.toggleWholeWords(),\n  kbOpts: {\n    weight: 100\n    /* EditorContrib */\n    + 5,\n    kbExpr: EditorContextKeys.focus,\n    primary: ToggleWholeWordKeybinding.primary,\n    mac: ToggleWholeWordKeybinding.mac,\n    win: ToggleWholeWordKeybinding.win,\n    linux: ToggleWholeWordKeybinding.linux\n  }\n}));\nregisterEditorCommand(new FindCommand({\n  id: FIND_IDS.ToggleRegexCommand,\n  precondition: undefined,\n  handler: x => x.toggleRegex(),\n  kbOpts: {\n    weight: 100\n    /* EditorContrib */\n    + 5,\n    kbExpr: EditorContextKeys.focus,\n    primary: ToggleRegexKeybinding.primary,\n    mac: ToggleRegexKeybinding.mac,\n    win: ToggleRegexKeybinding.win,\n    linux: ToggleRegexKeybinding.linux\n  }\n}));\nregisterEditorCommand(new FindCommand({\n  id: FIND_IDS.ToggleSearchScopeCommand,\n  precondition: undefined,\n  handler: x => x.toggleSearchScope(),\n  kbOpts: {\n    weight: 100\n    /* EditorContrib */\n    + 5,\n    kbExpr: EditorContextKeys.focus,\n    primary: ToggleSearchScopeKeybinding.primary,\n    mac: ToggleSearchScopeKeybinding.mac,\n    win: ToggleSearchScopeKeybinding.win,\n    linux: ToggleSearchScopeKeybinding.linux\n  }\n}));\nregisterEditorCommand(new FindCommand({\n  id: FIND_IDS.TogglePreserveCaseCommand,\n  precondition: undefined,\n  handler: x => x.togglePreserveCase(),\n  kbOpts: {\n    weight: 100\n    /* EditorContrib */\n    + 5,\n    kbExpr: EditorContextKeys.focus,\n    primary: TogglePreserveCaseKeybinding.primary,\n    mac: TogglePreserveCaseKeybinding.mac,\n    win: TogglePreserveCaseKeybinding.win,\n    linux: TogglePreserveCaseKeybinding.linux\n  }\n}));\nregisterEditorCommand(new FindCommand({\n  id: FIND_IDS.ReplaceOneAction,\n  precondition: CONTEXT_FIND_WIDGET_VISIBLE,\n  handler: x => x.replace(),\n  kbOpts: {\n    weight: 100\n    /* EditorContrib */\n    + 5,\n    kbExpr: EditorContextKeys.focus,\n    primary: 2048\n    /* CtrlCmd */\n    | 1024\n    /* Shift */\n    | 22\n    /* Digit1 */\n\n  }\n}));\nregisterEditorCommand(new FindCommand({\n  id: FIND_IDS.ReplaceOneAction,\n  precondition: CONTEXT_FIND_WIDGET_VISIBLE,\n  handler: x => x.replace(),\n  kbOpts: {\n    weight: 100\n    /* EditorContrib */\n    + 5,\n    kbExpr: ContextKeyExpr.and(EditorContextKeys.focus, CONTEXT_REPLACE_INPUT_FOCUSED),\n    primary: 3\n    /* Enter */\n\n  }\n}));\nregisterEditorCommand(new FindCommand({\n  id: FIND_IDS.ReplaceAllAction,\n  precondition: CONTEXT_FIND_WIDGET_VISIBLE,\n  handler: x => x.replaceAll(),\n  kbOpts: {\n    weight: 100\n    /* EditorContrib */\n    + 5,\n    kbExpr: EditorContextKeys.focus,\n    primary: 2048\n    /* CtrlCmd */\n    | 512\n    /* Alt */\n    | 3\n    /* Enter */\n\n  }\n}));\nregisterEditorCommand(new FindCommand({\n  id: FIND_IDS.ReplaceAllAction,\n  precondition: CONTEXT_FIND_WIDGET_VISIBLE,\n  handler: x => x.replaceAll(),\n  kbOpts: {\n    weight: 100\n    /* EditorContrib */\n    + 5,\n    kbExpr: ContextKeyExpr.and(EditorContextKeys.focus, CONTEXT_REPLACE_INPUT_FOCUSED),\n    primary: undefined,\n    mac: {\n      primary: 2048\n      /* CtrlCmd */\n      | 3\n      /* Enter */\n\n    }\n  }\n}));\nregisterEditorCommand(new FindCommand({\n  id: FIND_IDS.SelectAllMatchesAction,\n  precondition: CONTEXT_FIND_WIDGET_VISIBLE,\n  handler: x => x.selectAllMatches(),\n  kbOpts: {\n    weight: 100\n    /* EditorContrib */\n    + 5,\n    kbExpr: EditorContextKeys.focus,\n    primary: 512\n    /* Alt */\n    | 3\n    /* Enter */\n\n  }\n}));","map":{"version":3,"sources":["/home/umut/Documents/cs/cs410/Project2Group14/node_modules/monaco-editor/esm/vs/editor/contrib/find/findController.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Delayer","Disposable","strings","EditorAction","EditorCommand","MultiEditorAction","registerEditorAction","registerEditorCommand","registerEditorContribution","registerMultiEditorAction","EditorContextKeys","CONTEXT_FIND_INPUT_FOCUSED","CONTEXT_FIND_WIDGET_VISIBLE","CONTEXT_REPLACE_INPUT_FOCUSED","FindModelBoundToEditorModel","FIND_IDS","ToggleCaseSensitiveKeybinding","TogglePreserveCaseKeybinding","ToggleRegexKeybinding","ToggleSearchScopeKeybinding","ToggleWholeWordKeybinding","FindOptionsWidget","FindReplaceState","FindWidget","nls","MenuId","IClipboardService","ContextKeyExpr","IContextKeyService","IContextViewService","IKeybindingService","INotificationService","IStorageService","IThemeService","SEARCH_STRING_MAX_LENGTH","getSelectionSearchString","editor","seedSearchStringFromSelection","seedSearchStringFromNonEmptySelection","hasModel","selection","getSelection","startLineNumber","endLineNumber","isEmpty","wordAtPosition","getConfiguredWordAtPosition","getStartPosition","word","getModel","getValueLengthInRange","getValueInRange","CommonFindController","constructor","contextKeyService","storageService","clipboardService","_editor","_findWidgetVisible","bindTo","_contextKeyService","_storageService","_clipboardService","_updateHistoryDelayer","_state","_register","loadQueryState","onFindReplaceStateChange","_onStateChanged","_model","onDidChangeModel","shouldRestartFind","isRevealed","disposeModel","change","searchScope","matchCase","getBoolean","wholeWord","isRegex","preserveCase","_start","forceRevealReplace","seedSearchStringFromGlobalClipboard","shouldFocus","shouldAnimate","updateSearchScope","loop","getOption","get","getContribution","ID","dispose","saveQueryState","set","reset","searchString","setGlobalBufferTerm","store","actualIsRegex","actualWholeWord","actualMatchCase","actualPreserveCase","isFindInputFocused","getValue","getState","closeFindWidget","focus","toggleCaseSensitive","highlightFindOptions","toggleWholeWords","toggleRegex","togglePreserveCase","toggleSearchScope","selections","getSelections","map","endColumn","setEndPosition","getLineMaxColumn","filter","element","setSearchString","escapeRegExpCharacters","ignoreWhenVisible","opts","stateChanges","selectionSearchString","getGlobalBufferTerm","isReplaceRevealed","currentSelections","some","start","moveToNextMatch","moveToPrevMatch","replace","replaceAll","selectAllMatches","globalFindClipboard","isTooLargeForSyncing","readFindText","text","writeFindText","FindController","_contextViewService","_keybindingService","_themeService","_notificationService","_widget","_findOptionsWidget","_super","create","_createFindWidget","autoFindInSelection","isSelectionMultipleLine","call","focusReplaceInput","focusFindInput","StartFindAction","id","label","localize","alias","precondition","or","has","kbOpts","kbExpr","primary","weight","menuOpts","menuId","MenubarEditMenu","group","title","comment","order","addImplementation","accessor","args","controller","StartFindWithSelectionAction","StartFindWithSelection","undefined","mac","run","MatchFindAction","_run","NextMatchFindAction","secondary","and","pushUndoStop","PreviousMatchFindAction","SelectionMatchFindAction","NextSelectionMatchFindAction","PreviousSelectionMatchFindAction","StartFindReplaceAction","currentSelection","findInputFocused","FindCommand","bindToContribution","CloseFindWidgetCommand","handler","x","not","ToggleCaseSensitiveCommand","win","linux","ToggleWholeWordCommand","ToggleRegexCommand","ToggleSearchScopeCommand","TogglePreserveCaseCommand","ReplaceOneAction","ReplaceAllAction","SelectAllMatchesAction"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Delayer } from '../../../base/common/async.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { EditorAction, EditorCommand, MultiEditorAction, registerEditorAction, registerEditorCommand, registerEditorContribution, registerMultiEditorAction } from '../../browser/editorExtensions.js';\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\nimport { CONTEXT_FIND_INPUT_FOCUSED, CONTEXT_FIND_WIDGET_VISIBLE, CONTEXT_REPLACE_INPUT_FOCUSED, FindModelBoundToEditorModel, FIND_IDS, ToggleCaseSensitiveKeybinding, TogglePreserveCaseKeybinding, ToggleRegexKeybinding, ToggleSearchScopeKeybinding, ToggleWholeWordKeybinding } from './findModel.js';\nimport { FindOptionsWidget } from './findOptionsWidget.js';\nimport { FindReplaceState } from './findState.js';\nimport { FindWidget } from './findWidget.js';\nimport * as nls from '../../../nls.js';\nimport { MenuId } from '../../../platform/actions/common/actions.js';\nimport { IClipboardService } from '../../../platform/clipboard/common/clipboardService.js';\nimport { ContextKeyExpr, IContextKeyService } from '../../../platform/contextkey/common/contextkey.js';\nimport { IContextViewService } from '../../../platform/contextview/browser/contextView.js';\nimport { IKeybindingService } from '../../../platform/keybinding/common/keybinding.js';\nimport { INotificationService } from '../../../platform/notification/common/notification.js';\nimport { IStorageService } from '../../../platform/storage/common/storage.js';\nimport { IThemeService } from '../../../platform/theme/common/themeService.js';\nconst SEARCH_STRING_MAX_LENGTH = 524288;\nexport function getSelectionSearchString(editor, seedSearchStringFromSelection = 'single', seedSearchStringFromNonEmptySelection = false) {\n    if (!editor.hasModel()) {\n        return null;\n    }\n    const selection = editor.getSelection();\n    // if selection spans multiple lines, default search string to empty\n    if ((seedSearchStringFromSelection === 'single' && selection.startLineNumber === selection.endLineNumber)\n        || seedSearchStringFromSelection === 'multiple') {\n        if (selection.isEmpty()) {\n            const wordAtPosition = editor.getConfiguredWordAtPosition(selection.getStartPosition());\n            if (wordAtPosition && (false === seedSearchStringFromNonEmptySelection)) {\n                return wordAtPosition.word;\n            }\n        }\n        else {\n            if (editor.getModel().getValueLengthInRange(selection) < SEARCH_STRING_MAX_LENGTH) {\n                return editor.getModel().getValueInRange(selection);\n            }\n        }\n    }\n    return null;\n}\nlet CommonFindController = class CommonFindController extends Disposable {\n    constructor(editor, contextKeyService, storageService, clipboardService) {\n        super();\n        this._editor = editor;\n        this._findWidgetVisible = CONTEXT_FIND_WIDGET_VISIBLE.bindTo(contextKeyService);\n        this._contextKeyService = contextKeyService;\n        this._storageService = storageService;\n        this._clipboardService = clipboardService;\n        this._updateHistoryDelayer = new Delayer(500);\n        this._state = this._register(new FindReplaceState());\n        this.loadQueryState();\n        this._register(this._state.onFindReplaceStateChange((e) => this._onStateChanged(e)));\n        this._model = null;\n        this._register(this._editor.onDidChangeModel(() => {\n            let shouldRestartFind = (this._editor.getModel() && this._state.isRevealed);\n            this.disposeModel();\n            this._state.change({\n                searchScope: null,\n                matchCase: this._storageService.getBoolean('editor.matchCase', 1 /* WORKSPACE */, false),\n                wholeWord: this._storageService.getBoolean('editor.wholeWord', 1 /* WORKSPACE */, false),\n                isRegex: this._storageService.getBoolean('editor.isRegex', 1 /* WORKSPACE */, false),\n                preserveCase: this._storageService.getBoolean('editor.preserveCase', 1 /* WORKSPACE */, false)\n            }, false);\n            if (shouldRestartFind) {\n                this._start({\n                    forceRevealReplace: false,\n                    seedSearchStringFromSelection: 'none',\n                    seedSearchStringFromNonEmptySelection: false,\n                    seedSearchStringFromGlobalClipboard: false,\n                    shouldFocus: 0 /* NoFocusChange */,\n                    shouldAnimate: false,\n                    updateSearchScope: false,\n                    loop: this._editor.getOption(35 /* find */).loop\n                });\n            }\n        }));\n    }\n    get editor() {\n        return this._editor;\n    }\n    static get(editor) {\n        return editor.getContribution(CommonFindController.ID);\n    }\n    dispose() {\n        this.disposeModel();\n        super.dispose();\n    }\n    disposeModel() {\n        if (this._model) {\n            this._model.dispose();\n            this._model = null;\n        }\n    }\n    _onStateChanged(e) {\n        this.saveQueryState(e);\n        if (e.isRevealed) {\n            if (this._state.isRevealed) {\n                this._findWidgetVisible.set(true);\n            }\n            else {\n                this._findWidgetVisible.reset();\n                this.disposeModel();\n            }\n        }\n        if (e.searchString) {\n            this.setGlobalBufferTerm(this._state.searchString);\n        }\n    }\n    saveQueryState(e) {\n        if (e.isRegex) {\n            this._storageService.store('editor.isRegex', this._state.actualIsRegex, 1 /* WORKSPACE */, 0 /* USER */);\n        }\n        if (e.wholeWord) {\n            this._storageService.store('editor.wholeWord', this._state.actualWholeWord, 1 /* WORKSPACE */, 0 /* USER */);\n        }\n        if (e.matchCase) {\n            this._storageService.store('editor.matchCase', this._state.actualMatchCase, 1 /* WORKSPACE */, 0 /* USER */);\n        }\n        if (e.preserveCase) {\n            this._storageService.store('editor.preserveCase', this._state.actualPreserveCase, 1 /* WORKSPACE */, 0 /* USER */);\n        }\n    }\n    loadQueryState() {\n        this._state.change({\n            matchCase: this._storageService.getBoolean('editor.matchCase', 1 /* WORKSPACE */, this._state.matchCase),\n            wholeWord: this._storageService.getBoolean('editor.wholeWord', 1 /* WORKSPACE */, this._state.wholeWord),\n            isRegex: this._storageService.getBoolean('editor.isRegex', 1 /* WORKSPACE */, this._state.isRegex),\n            preserveCase: this._storageService.getBoolean('editor.preserveCase', 1 /* WORKSPACE */, this._state.preserveCase)\n        }, false);\n    }\n    isFindInputFocused() {\n        return !!CONTEXT_FIND_INPUT_FOCUSED.getValue(this._contextKeyService);\n    }\n    getState() {\n        return this._state;\n    }\n    closeFindWidget() {\n        this._state.change({\n            isRevealed: false,\n            searchScope: null\n        }, false);\n        this._editor.focus();\n    }\n    toggleCaseSensitive() {\n        this._state.change({ matchCase: !this._state.matchCase }, false);\n        if (!this._state.isRevealed) {\n            this.highlightFindOptions();\n        }\n    }\n    toggleWholeWords() {\n        this._state.change({ wholeWord: !this._state.wholeWord }, false);\n        if (!this._state.isRevealed) {\n            this.highlightFindOptions();\n        }\n    }\n    toggleRegex() {\n        this._state.change({ isRegex: !this._state.isRegex }, false);\n        if (!this._state.isRevealed) {\n            this.highlightFindOptions();\n        }\n    }\n    togglePreserveCase() {\n        this._state.change({ preserveCase: !this._state.preserveCase }, false);\n        if (!this._state.isRevealed) {\n            this.highlightFindOptions();\n        }\n    }\n    toggleSearchScope() {\n        if (this._state.searchScope) {\n            this._state.change({ searchScope: null }, true);\n        }\n        else {\n            if (this._editor.hasModel()) {\n                let selections = this._editor.getSelections();\n                selections.map(selection => {\n                    if (selection.endColumn === 1 && selection.endLineNumber > selection.startLineNumber) {\n                        selection = selection.setEndPosition(selection.endLineNumber - 1, this._editor.getModel().getLineMaxColumn(selection.endLineNumber - 1));\n                    }\n                    if (!selection.isEmpty()) {\n                        return selection;\n                    }\n                    return null;\n                }).filter(element => !!element);\n                if (selections.length) {\n                    this._state.change({ searchScope: selections }, true);\n                }\n            }\n        }\n    }\n    setSearchString(searchString) {\n        if (this._state.isRegex) {\n            searchString = strings.escapeRegExpCharacters(searchString);\n        }\n        this._state.change({ searchString: searchString }, false);\n    }\n    highlightFindOptions(ignoreWhenVisible = false) {\n        // overwritten in subclass\n    }\n    _start(opts) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.disposeModel();\n            if (!this._editor.hasModel()) {\n                // cannot do anything with an editor that doesn't have a model...\n                return;\n            }\n            let stateChanges = {\n                isRevealed: true\n            };\n            if (opts.seedSearchStringFromSelection === 'single') {\n                let selectionSearchString = getSelectionSearchString(this._editor, opts.seedSearchStringFromSelection, opts.seedSearchStringFromNonEmptySelection);\n                if (selectionSearchString) {\n                    if (this._state.isRegex) {\n                        stateChanges.searchString = strings.escapeRegExpCharacters(selectionSearchString);\n                    }\n                    else {\n                        stateChanges.searchString = selectionSearchString;\n                    }\n                }\n            }\n            else if (opts.seedSearchStringFromSelection === 'multiple' && !opts.updateSearchScope) {\n                let selectionSearchString = getSelectionSearchString(this._editor, opts.seedSearchStringFromSelection);\n                if (selectionSearchString) {\n                    stateChanges.searchString = selectionSearchString;\n                }\n            }\n            if (!stateChanges.searchString && opts.seedSearchStringFromGlobalClipboard) {\n                let selectionSearchString = yield this.getGlobalBufferTerm();\n                if (!this._editor.hasModel()) {\n                    // the editor has lost its model in the meantime\n                    return;\n                }\n                if (selectionSearchString) {\n                    stateChanges.searchString = selectionSearchString;\n                }\n            }\n            // Overwrite isReplaceRevealed\n            if (opts.forceRevealReplace) {\n                stateChanges.isReplaceRevealed = true;\n            }\n            else if (!this._findWidgetVisible.get()) {\n                stateChanges.isReplaceRevealed = false;\n            }\n            if (opts.updateSearchScope) {\n                let currentSelections = this._editor.getSelections();\n                if (currentSelections.some(selection => !selection.isEmpty())) {\n                    stateChanges.searchScope = currentSelections;\n                }\n            }\n            stateChanges.loop = opts.loop;\n            this._state.change(stateChanges, false);\n            if (!this._model) {\n                this._model = new FindModelBoundToEditorModel(this._editor, this._state);\n            }\n        });\n    }\n    start(opts) {\n        return this._start(opts);\n    }\n    moveToNextMatch() {\n        if (this._model) {\n            this._model.moveToNextMatch();\n            return true;\n        }\n        return false;\n    }\n    moveToPrevMatch() {\n        if (this._model) {\n            this._model.moveToPrevMatch();\n            return true;\n        }\n        return false;\n    }\n    replace() {\n        if (this._model) {\n            this._model.replace();\n            return true;\n        }\n        return false;\n    }\n    replaceAll() {\n        if (this._model) {\n            this._model.replaceAll();\n            return true;\n        }\n        return false;\n    }\n    selectAllMatches() {\n        if (this._model) {\n            this._model.selectAllMatches();\n            this._editor.focus();\n            return true;\n        }\n        return false;\n    }\n    getGlobalBufferTerm() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._editor.getOption(35 /* find */).globalFindClipboard\n                && this._editor.hasModel()\n                && !this._editor.getModel().isTooLargeForSyncing()) {\n                return this._clipboardService.readFindText();\n            }\n            return '';\n        });\n    }\n    setGlobalBufferTerm(text) {\n        if (this._editor.getOption(35 /* find */).globalFindClipboard\n            && this._editor.hasModel()\n            && !this._editor.getModel().isTooLargeForSyncing()) {\n            // intentionally not awaited\n            this._clipboardService.writeFindText(text);\n        }\n    }\n};\nCommonFindController.ID = 'editor.contrib.findController';\nCommonFindController = __decorate([\n    __param(1, IContextKeyService),\n    __param(2, IStorageService),\n    __param(3, IClipboardService)\n], CommonFindController);\nexport { CommonFindController };\nlet FindController = class FindController extends CommonFindController {\n    constructor(editor, _contextViewService, _contextKeyService, _keybindingService, _themeService, _notificationService, _storageService, clipboardService) {\n        super(editor, _contextKeyService, _storageService, clipboardService);\n        this._contextViewService = _contextViewService;\n        this._keybindingService = _keybindingService;\n        this._themeService = _themeService;\n        this._notificationService = _notificationService;\n        this._widget = null;\n        this._findOptionsWidget = null;\n    }\n    _start(opts) {\n        const _super = Object.create(null, {\n            _start: { get: () => super._start }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this._widget) {\n                this._createFindWidget();\n            }\n            const selection = this._editor.getSelection();\n            let updateSearchScope = false;\n            switch (this._editor.getOption(35 /* find */).autoFindInSelection) {\n                case 'always':\n                    updateSearchScope = true;\n                    break;\n                case 'never':\n                    updateSearchScope = false;\n                    break;\n                case 'multiline':\n                    const isSelectionMultipleLine = !!selection && selection.startLineNumber !== selection.endLineNumber;\n                    updateSearchScope = isSelectionMultipleLine;\n                    break;\n                default:\n                    break;\n            }\n            opts.updateSearchScope = updateSearchScope;\n            yield _super._start.call(this, opts);\n            if (this._widget) {\n                if (opts.shouldFocus === 2 /* FocusReplaceInput */) {\n                    this._widget.focusReplaceInput();\n                }\n                else if (opts.shouldFocus === 1 /* FocusFindInput */) {\n                    this._widget.focusFindInput();\n                }\n            }\n        });\n    }\n    highlightFindOptions(ignoreWhenVisible = false) {\n        if (!this._widget) {\n            this._createFindWidget();\n        }\n        if (this._state.isRevealed && !ignoreWhenVisible) {\n            this._widget.highlightFindOptions();\n        }\n        else {\n            this._findOptionsWidget.highlightFindOptions();\n        }\n    }\n    _createFindWidget() {\n        this._widget = this._register(new FindWidget(this._editor, this, this._state, this._contextViewService, this._keybindingService, this._contextKeyService, this._themeService, this._storageService, this._notificationService));\n        this._findOptionsWidget = this._register(new FindOptionsWidget(this._editor, this._state, this._keybindingService, this._themeService));\n    }\n};\nFindController = __decorate([\n    __param(1, IContextViewService),\n    __param(2, IContextKeyService),\n    __param(3, IKeybindingService),\n    __param(4, IThemeService),\n    __param(5, INotificationService),\n    __param(6, IStorageService),\n    __param(7, IClipboardService)\n], FindController);\nexport { FindController };\nexport const StartFindAction = registerMultiEditorAction(new MultiEditorAction({\n    id: FIND_IDS.StartFindAction,\n    label: nls.localize('startFindAction', \"Find\"),\n    alias: 'Find',\n    precondition: ContextKeyExpr.or(EditorContextKeys.focus, ContextKeyExpr.has('editorIsOpen')),\n    kbOpts: {\n        kbExpr: null,\n        primary: 2048 /* CtrlCmd */ | 36 /* KeyF */,\n        weight: 100 /* EditorContrib */\n    },\n    menuOpts: {\n        menuId: MenuId.MenubarEditMenu,\n        group: '3_find',\n        title: nls.localize({ key: 'miFind', comment: ['&& denotes a mnemonic'] }, \"&&Find\"),\n        order: 1\n    }\n}));\nStartFindAction.addImplementation(0, (accessor, editor, args) => {\n    const controller = CommonFindController.get(editor);\n    if (!controller) {\n        return false;\n    }\n    return controller.start({\n        forceRevealReplace: false,\n        seedSearchStringFromSelection: editor.getOption(35 /* find */).seedSearchStringFromSelection !== 'never' ? 'single' : 'none',\n        seedSearchStringFromNonEmptySelection: editor.getOption(35 /* find */).seedSearchStringFromSelection === 'selection',\n        seedSearchStringFromGlobalClipboard: editor.getOption(35 /* find */).globalFindClipboard,\n        shouldFocus: 1 /* FocusFindInput */,\n        shouldAnimate: true,\n        updateSearchScope: false,\n        loop: editor.getOption(35 /* find */).loop\n    });\n});\nexport class StartFindWithSelectionAction extends EditorAction {\n    constructor() {\n        super({\n            id: FIND_IDS.StartFindWithSelection,\n            label: nls.localize('startFindWithSelectionAction', \"Find With Selection\"),\n            alias: 'Find With Selection',\n            precondition: undefined,\n            kbOpts: {\n                kbExpr: null,\n                primary: 0,\n                mac: {\n                    primary: 2048 /* CtrlCmd */ | 35 /* KeyE */,\n                },\n                weight: 100 /* EditorContrib */\n            }\n        });\n    }\n    run(accessor, editor) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let controller = CommonFindController.get(editor);\n            if (controller) {\n                yield controller.start({\n                    forceRevealReplace: false,\n                    seedSearchStringFromSelection: 'multiple',\n                    seedSearchStringFromNonEmptySelection: false,\n                    seedSearchStringFromGlobalClipboard: false,\n                    shouldFocus: 0 /* NoFocusChange */,\n                    shouldAnimate: true,\n                    updateSearchScope: false,\n                    loop: editor.getOption(35 /* find */).loop\n                });\n                controller.setGlobalBufferTerm(controller.getState().searchString);\n            }\n        });\n    }\n}\nexport class MatchFindAction extends EditorAction {\n    run(accessor, editor) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let controller = CommonFindController.get(editor);\n            if (controller && !this._run(controller)) {\n                yield controller.start({\n                    forceRevealReplace: false,\n                    seedSearchStringFromSelection: (controller.getState().searchString.length === 0) && editor.getOption(35 /* find */).seedSearchStringFromSelection !== 'never' ? 'single' : 'none',\n                    seedSearchStringFromNonEmptySelection: editor.getOption(35 /* find */).seedSearchStringFromSelection === 'selection',\n                    seedSearchStringFromGlobalClipboard: true,\n                    shouldFocus: 0 /* NoFocusChange */,\n                    shouldAnimate: true,\n                    updateSearchScope: false,\n                    loop: editor.getOption(35 /* find */).loop\n                });\n                this._run(controller);\n            }\n        });\n    }\n}\nexport class NextMatchFindAction extends MatchFindAction {\n    constructor() {\n        super({\n            id: FIND_IDS.NextMatchFindAction,\n            label: nls.localize('findNextMatchAction', \"Find Next\"),\n            alias: 'Find Next',\n            precondition: undefined,\n            kbOpts: [{\n                    kbExpr: EditorContextKeys.focus,\n                    primary: 61 /* F3 */,\n                    mac: { primary: 2048 /* CtrlCmd */ | 37 /* KeyG */, secondary: [61 /* F3 */] },\n                    weight: 100 /* EditorContrib */\n                }, {\n                    kbExpr: ContextKeyExpr.and(EditorContextKeys.focus, CONTEXT_FIND_INPUT_FOCUSED),\n                    primary: 3 /* Enter */,\n                    weight: 100 /* EditorContrib */\n                }]\n        });\n    }\n    _run(controller) {\n        const result = controller.moveToNextMatch();\n        if (result) {\n            controller.editor.pushUndoStop();\n            return true;\n        }\n        return false;\n    }\n}\nexport class PreviousMatchFindAction extends MatchFindAction {\n    constructor() {\n        super({\n            id: FIND_IDS.PreviousMatchFindAction,\n            label: nls.localize('findPreviousMatchAction', \"Find Previous\"),\n            alias: 'Find Previous',\n            precondition: undefined,\n            kbOpts: [{\n                    kbExpr: EditorContextKeys.focus,\n                    primary: 1024 /* Shift */ | 61 /* F3 */,\n                    mac: { primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 37 /* KeyG */, secondary: [1024 /* Shift */ | 61 /* F3 */] },\n                    weight: 100 /* EditorContrib */\n                }, {\n                    kbExpr: ContextKeyExpr.and(EditorContextKeys.focus, CONTEXT_FIND_INPUT_FOCUSED),\n                    primary: 1024 /* Shift */ | 3 /* Enter */,\n                    weight: 100 /* EditorContrib */\n                }\n            ]\n        });\n    }\n    _run(controller) {\n        return controller.moveToPrevMatch();\n    }\n}\nexport class SelectionMatchFindAction extends EditorAction {\n    run(accessor, editor) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let controller = CommonFindController.get(editor);\n            if (!controller) {\n                return;\n            }\n            const seedSearchStringFromNonEmptySelection = editor.getOption(35 /* find */).seedSearchStringFromSelection === 'selection';\n            let selectionSearchString = null;\n            if (editor.getOption(35 /* find */).seedSearchStringFromSelection !== 'never') {\n                selectionSearchString = getSelectionSearchString(editor, 'single', seedSearchStringFromNonEmptySelection);\n            }\n            if (selectionSearchString) {\n                controller.setSearchString(selectionSearchString);\n            }\n            if (!this._run(controller)) {\n                yield controller.start({\n                    forceRevealReplace: false,\n                    seedSearchStringFromSelection: editor.getOption(35 /* find */).seedSearchStringFromSelection !== 'never' ? 'single' : 'none',\n                    seedSearchStringFromNonEmptySelection: seedSearchStringFromNonEmptySelection,\n                    seedSearchStringFromGlobalClipboard: false,\n                    shouldFocus: 0 /* NoFocusChange */,\n                    shouldAnimate: true,\n                    updateSearchScope: false,\n                    loop: editor.getOption(35 /* find */).loop\n                });\n                this._run(controller);\n            }\n        });\n    }\n}\nexport class NextSelectionMatchFindAction extends SelectionMatchFindAction {\n    constructor() {\n        super({\n            id: FIND_IDS.NextSelectionMatchFindAction,\n            label: nls.localize('nextSelectionMatchFindAction', \"Find Next Selection\"),\n            alias: 'Find Next Selection',\n            precondition: undefined,\n            kbOpts: {\n                kbExpr: EditorContextKeys.focus,\n                primary: 2048 /* CtrlCmd */ | 61 /* F3 */,\n                weight: 100 /* EditorContrib */\n            }\n        });\n    }\n    _run(controller) {\n        return controller.moveToNextMatch();\n    }\n}\nexport class PreviousSelectionMatchFindAction extends SelectionMatchFindAction {\n    constructor() {\n        super({\n            id: FIND_IDS.PreviousSelectionMatchFindAction,\n            label: nls.localize('previousSelectionMatchFindAction', \"Find Previous Selection\"),\n            alias: 'Find Previous Selection',\n            precondition: undefined,\n            kbOpts: {\n                kbExpr: EditorContextKeys.focus,\n                primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 61 /* F3 */,\n                weight: 100 /* EditorContrib */\n            }\n        });\n    }\n    _run(controller) {\n        return controller.moveToPrevMatch();\n    }\n}\nexport const StartFindReplaceAction = registerMultiEditorAction(new MultiEditorAction({\n    id: FIND_IDS.StartFindReplaceAction,\n    label: nls.localize('startReplace', \"Replace\"),\n    alias: 'Replace',\n    precondition: ContextKeyExpr.or(EditorContextKeys.focus, ContextKeyExpr.has('editorIsOpen')),\n    kbOpts: {\n        kbExpr: null,\n        primary: 2048 /* CtrlCmd */ | 38 /* KeyH */,\n        mac: { primary: 2048 /* CtrlCmd */ | 512 /* Alt */ | 36 /* KeyF */ },\n        weight: 100 /* EditorContrib */\n    },\n    menuOpts: {\n        menuId: MenuId.MenubarEditMenu,\n        group: '3_find',\n        title: nls.localize({ key: 'miReplace', comment: ['&& denotes a mnemonic'] }, \"&&Replace\"),\n        order: 2\n    }\n}));\nStartFindReplaceAction.addImplementation(0, (accessor, editor, args) => {\n    if (!editor.hasModel() || editor.getOption(80 /* readOnly */)) {\n        return false;\n    }\n    const controller = CommonFindController.get(editor);\n    if (!controller) {\n        return false;\n    }\n    const currentSelection = editor.getSelection();\n    const findInputFocused = controller.isFindInputFocused();\n    // we only seed search string from selection when the current selection is single line and not empty,\n    // + the find input is not focused\n    const seedSearchStringFromSelection = !currentSelection.isEmpty()\n        && currentSelection.startLineNumber === currentSelection.endLineNumber\n        && (editor.getOption(35 /* find */).seedSearchStringFromSelection !== 'never')\n        && !findInputFocused;\n    /*\n    * if the existing search string in find widget is empty and we don't seed search string from selection, it means the Find Input is still empty, so we should focus the Find Input instead of Replace Input.\n\n    * findInputFocused true -> seedSearchStringFromSelection false, FocusReplaceInput\n    * findInputFocused false, seedSearchStringFromSelection true FocusReplaceInput\n    * findInputFocused false seedSearchStringFromSelection false FocusFindInput\n    */\n    const shouldFocus = (findInputFocused || seedSearchStringFromSelection) ?\n        2 /* FocusReplaceInput */ : 1 /* FocusFindInput */;\n    return controller.start({\n        forceRevealReplace: true,\n        seedSearchStringFromSelection: seedSearchStringFromSelection ? 'single' : 'none',\n        seedSearchStringFromNonEmptySelection: editor.getOption(35 /* find */).seedSearchStringFromSelection === 'selection',\n        seedSearchStringFromGlobalClipboard: editor.getOption(35 /* find */).seedSearchStringFromSelection !== 'never',\n        shouldFocus: shouldFocus,\n        shouldAnimate: true,\n        updateSearchScope: false,\n        loop: editor.getOption(35 /* find */).loop\n    });\n});\nregisterEditorContribution(CommonFindController.ID, FindController);\nregisterEditorAction(StartFindWithSelectionAction);\nregisterEditorAction(NextMatchFindAction);\nregisterEditorAction(PreviousMatchFindAction);\nregisterEditorAction(NextSelectionMatchFindAction);\nregisterEditorAction(PreviousSelectionMatchFindAction);\nconst FindCommand = EditorCommand.bindToContribution(CommonFindController.get);\nregisterEditorCommand(new FindCommand({\n    id: FIND_IDS.CloseFindWidgetCommand,\n    precondition: CONTEXT_FIND_WIDGET_VISIBLE,\n    handler: x => x.closeFindWidget(),\n    kbOpts: {\n        weight: 100 /* EditorContrib */ + 5,\n        kbExpr: ContextKeyExpr.and(EditorContextKeys.focus, ContextKeyExpr.not('isComposing')),\n        primary: 9 /* Escape */,\n        secondary: [1024 /* Shift */ | 9 /* Escape */]\n    }\n}));\nregisterEditorCommand(new FindCommand({\n    id: FIND_IDS.ToggleCaseSensitiveCommand,\n    precondition: undefined,\n    handler: x => x.toggleCaseSensitive(),\n    kbOpts: {\n        weight: 100 /* EditorContrib */ + 5,\n        kbExpr: EditorContextKeys.focus,\n        primary: ToggleCaseSensitiveKeybinding.primary,\n        mac: ToggleCaseSensitiveKeybinding.mac,\n        win: ToggleCaseSensitiveKeybinding.win,\n        linux: ToggleCaseSensitiveKeybinding.linux\n    }\n}));\nregisterEditorCommand(new FindCommand({\n    id: FIND_IDS.ToggleWholeWordCommand,\n    precondition: undefined,\n    handler: x => x.toggleWholeWords(),\n    kbOpts: {\n        weight: 100 /* EditorContrib */ + 5,\n        kbExpr: EditorContextKeys.focus,\n        primary: ToggleWholeWordKeybinding.primary,\n        mac: ToggleWholeWordKeybinding.mac,\n        win: ToggleWholeWordKeybinding.win,\n        linux: ToggleWholeWordKeybinding.linux\n    }\n}));\nregisterEditorCommand(new FindCommand({\n    id: FIND_IDS.ToggleRegexCommand,\n    precondition: undefined,\n    handler: x => x.toggleRegex(),\n    kbOpts: {\n        weight: 100 /* EditorContrib */ + 5,\n        kbExpr: EditorContextKeys.focus,\n        primary: ToggleRegexKeybinding.primary,\n        mac: ToggleRegexKeybinding.mac,\n        win: ToggleRegexKeybinding.win,\n        linux: ToggleRegexKeybinding.linux\n    }\n}));\nregisterEditorCommand(new FindCommand({\n    id: FIND_IDS.ToggleSearchScopeCommand,\n    precondition: undefined,\n    handler: x => x.toggleSearchScope(),\n    kbOpts: {\n        weight: 100 /* EditorContrib */ + 5,\n        kbExpr: EditorContextKeys.focus,\n        primary: ToggleSearchScopeKeybinding.primary,\n        mac: ToggleSearchScopeKeybinding.mac,\n        win: ToggleSearchScopeKeybinding.win,\n        linux: ToggleSearchScopeKeybinding.linux\n    }\n}));\nregisterEditorCommand(new FindCommand({\n    id: FIND_IDS.TogglePreserveCaseCommand,\n    precondition: undefined,\n    handler: x => x.togglePreserveCase(),\n    kbOpts: {\n        weight: 100 /* EditorContrib */ + 5,\n        kbExpr: EditorContextKeys.focus,\n        primary: TogglePreserveCaseKeybinding.primary,\n        mac: TogglePreserveCaseKeybinding.mac,\n        win: TogglePreserveCaseKeybinding.win,\n        linux: TogglePreserveCaseKeybinding.linux\n    }\n}));\nregisterEditorCommand(new FindCommand({\n    id: FIND_IDS.ReplaceOneAction,\n    precondition: CONTEXT_FIND_WIDGET_VISIBLE,\n    handler: x => x.replace(),\n    kbOpts: {\n        weight: 100 /* EditorContrib */ + 5,\n        kbExpr: EditorContextKeys.focus,\n        primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 22 /* Digit1 */\n    }\n}));\nregisterEditorCommand(new FindCommand({\n    id: FIND_IDS.ReplaceOneAction,\n    precondition: CONTEXT_FIND_WIDGET_VISIBLE,\n    handler: x => x.replace(),\n    kbOpts: {\n        weight: 100 /* EditorContrib */ + 5,\n        kbExpr: ContextKeyExpr.and(EditorContextKeys.focus, CONTEXT_REPLACE_INPUT_FOCUSED),\n        primary: 3 /* Enter */\n    }\n}));\nregisterEditorCommand(new FindCommand({\n    id: FIND_IDS.ReplaceAllAction,\n    precondition: CONTEXT_FIND_WIDGET_VISIBLE,\n    handler: x => x.replaceAll(),\n    kbOpts: {\n        weight: 100 /* EditorContrib */ + 5,\n        kbExpr: EditorContextKeys.focus,\n        primary: 2048 /* CtrlCmd */ | 512 /* Alt */ | 3 /* Enter */\n    }\n}));\nregisterEditorCommand(new FindCommand({\n    id: FIND_IDS.ReplaceAllAction,\n    precondition: CONTEXT_FIND_WIDGET_VISIBLE,\n    handler: x => x.replaceAll(),\n    kbOpts: {\n        weight: 100 /* EditorContrib */ + 5,\n        kbExpr: ContextKeyExpr.and(EditorContextKeys.focus, CONTEXT_REPLACE_INPUT_FOCUSED),\n        primary: undefined,\n        mac: {\n            primary: 2048 /* CtrlCmd */ | 3 /* Enter */,\n        }\n    }\n}));\nregisterEditorCommand(new FindCommand({\n    id: FIND_IDS.SelectAllMatchesAction,\n    precondition: CONTEXT_FIND_WIDGET_VISIBLE,\n    handler: x => x.selectAllMatches(),\n    kbOpts: {\n        weight: 100 /* EditorContrib */ + 5,\n        kbExpr: EditorContextKeys.focus,\n        primary: 512 /* Alt */ | 3 /* Enter */\n    }\n}));\n"]},"metadata":{},"sourceType":"module"}