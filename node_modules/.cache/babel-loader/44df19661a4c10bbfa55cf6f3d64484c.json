{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport * as dom from '../../../base/browser/dom.js';\nimport { MarkdownString } from '../../../base/common/htmlContent.js';\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\nimport { MarkdownRenderer } from '../../browser/core/markdownRenderer.js';\nimport { Range } from '../../common/core/range.js';\nimport { IModeService } from '../../common/services/modeService.js';\nimport { HoverForeignElementAnchor } from '../hover/hoverTypes.js';\nimport { commitInlineSuggestionAction, GhostTextController, ShowNextInlineSuggestionAction, ShowPreviousInlineSuggestionAction } from './ghostTextController.js';\nimport * as nls from '../../../nls.js';\nimport { IAccessibilityService } from '../../../platform/accessibility/common/accessibility.js';\nimport { IMenuService, MenuId, MenuItemAction } from '../../../platform/actions/common/actions.js';\nimport { ICommandService } from '../../../platform/commands/common/commands.js';\nimport { IContextKeyService } from '../../../platform/contextkey/common/contextkey.js';\nimport { IOpenerService } from '../../../platform/opener/common/opener.js';\nexport class InlineCompletionsHover {\n  constructor(owner, range, controller) {\n    this.owner = owner;\n    this.range = range;\n    this.controller = controller;\n  }\n\n  isValidForHoverAnchor(anchor) {\n    return anchor.type === 1\n    /* Range */\n    && this.range.startColumn <= anchor.range.startColumn && this.range.endColumn >= anchor.range.endColumn;\n  }\n\n  hasMultipleSuggestions() {\n    return this.controller.hasMultipleInlineCompletions();\n  }\n\n}\nlet InlineCompletionsHoverParticipant = class InlineCompletionsHoverParticipant {\n  constructor(_editor, _hover, _commandService, _menuService, _contextKeyService, _modeService, _openerService, accessibilityService) {\n    this._editor = _editor;\n    this._hover = _hover;\n    this._commandService = _commandService;\n    this._menuService = _menuService;\n    this._contextKeyService = _contextKeyService;\n    this._modeService = _modeService;\n    this._openerService = _openerService;\n    this.accessibilityService = accessibilityService;\n  }\n\n  suggestHoverAnchor(mouseEvent) {\n    const controller = GhostTextController.get(this._editor);\n\n    if (!controller) {\n      return null;\n    }\n\n    if (mouseEvent.target.type === 8\n    /* CONTENT_VIEW_ZONE */\n    ) {\n      // handle the case where the mouse is over the view zone\n      const viewZoneData = mouseEvent.target.detail;\n\n      if (controller.shouldShowHoverAtViewZone(viewZoneData.viewZoneId)) {\n        return new HoverForeignElementAnchor(1000, this, Range.fromPositions(viewZoneData.positionBefore || viewZoneData.position, viewZoneData.positionBefore || viewZoneData.position));\n      }\n    }\n\n    if (mouseEvent.target.type === 7\n    /* CONTENT_EMPTY */\n    && mouseEvent.target.range) {\n      // handle the case where the mouse is over the empty portion of a line following ghost text\n      if (controller.shouldShowHoverAt(mouseEvent.target.range)) {\n        return new HoverForeignElementAnchor(1000, this, mouseEvent.target.range);\n      }\n    }\n\n    if (mouseEvent.target.type === 6\n    /* CONTENT_TEXT */\n    && mouseEvent.target.range && mouseEvent.target.detail) {\n      // handle the case where the mouse is directly over ghost text\n      const mightBeForeignElement = mouseEvent.target.detail.mightBeForeignElement;\n\n      if (mightBeForeignElement && controller.shouldShowHoverAt(mouseEvent.target.range)) {\n        return new HoverForeignElementAnchor(1000, this, mouseEvent.target.range);\n      }\n    }\n\n    return null;\n  }\n\n  computeSync(anchor, lineDecorations) {\n    const controller = GhostTextController.get(this._editor);\n\n    if (controller && controller.shouldShowHoverAt(anchor.range)) {\n      return [new InlineCompletionsHover(this, anchor.range, controller)];\n    }\n\n    return [];\n  }\n\n  renderHoverParts(hoverParts, fragment, statusBar) {\n    const disposableStore = new DisposableStore();\n    const part = hoverParts[0];\n\n    if (this.accessibilityService.isScreenReaderOptimized()) {\n      this.renderScreenReaderText(part, fragment, disposableStore);\n    }\n\n    const menu = disposableStore.add(this._menuService.createMenu(MenuId.InlineCompletionsActions, this._contextKeyService));\n    const previousAction = statusBar.addAction({\n      label: nls.localize('showNextInlineSuggestion', \"Next\"),\n      commandId: ShowNextInlineSuggestionAction.ID,\n      run: () => this._commandService.executeCommand(ShowNextInlineSuggestionAction.ID)\n    });\n    const nextAction = statusBar.addAction({\n      label: nls.localize('showPreviousInlineSuggestion', \"Previous\"),\n      commandId: ShowPreviousInlineSuggestionAction.ID,\n      run: () => this._commandService.executeCommand(ShowPreviousInlineSuggestionAction.ID)\n    });\n    statusBar.addAction({\n      label: nls.localize('acceptInlineSuggestion', \"Accept\"),\n      commandId: commitInlineSuggestionAction.id,\n      run: () => this._commandService.executeCommand(commitInlineSuggestionAction.id)\n    });\n    const actions = [previousAction, nextAction];\n\n    for (const action of actions) {\n      action.setEnabled(false);\n    }\n\n    part.hasMultipleSuggestions().then(hasMore => {\n      for (const action of actions) {\n        action.setEnabled(hasMore);\n      }\n    });\n\n    for (const [_, group] of menu.getActions()) {\n      for (const action of group) {\n        if (action instanceof MenuItemAction) {\n          statusBar.addAction({\n            label: action.label,\n            commandId: action.item.id,\n            run: () => this._commandService.executeCommand(action.item.id)\n          });\n        }\n      }\n    }\n\n    return disposableStore;\n  }\n\n  renderScreenReaderText(part, fragment, disposableStore) {\n    var _a, _b;\n\n    const $ = dom.$;\n    const markdownHoverElement = $('div.hover-row.markdown-hover');\n    const hoverContentsElement = dom.append(markdownHoverElement, $('div.hover-contents'));\n    const renderer = disposableStore.add(new MarkdownRenderer({\n      editor: this._editor\n    }, this._modeService, this._openerService));\n\n    const render = code => {\n      disposableStore.add(renderer.onDidRenderAsync(() => {\n        hoverContentsElement.className = 'hover-contents code-hover-contents';\n\n        this._hover.onContentsChanged();\n      }));\n      const inlineSuggestionAvailable = nls.localize('inlineSuggestionFollows', \"Suggestion:\");\n      const renderedContents = disposableStore.add(renderer.render(new MarkdownString().appendText(inlineSuggestionAvailable).appendCodeblock('text', code)));\n      hoverContentsElement.replaceChildren(renderedContents.element);\n    };\n\n    const ghostText = (_b = (_a = part.controller.activeModel) === null || _a === void 0 ? void 0 : _a.inlineCompletionsModel) === null || _b === void 0 ? void 0 : _b.ghostText;\n\n    if (ghostText) {\n      const lineText = this._editor.getModel().getLineContent(ghostText.lineNumber);\n\n      render(ghostText.renderForScreenReader(lineText));\n    }\n\n    fragment.appendChild(markdownHoverElement);\n  }\n\n};\nInlineCompletionsHoverParticipant = __decorate([__param(2, ICommandService), __param(3, IMenuService), __param(4, IContextKeyService), __param(5, IModeService), __param(6, IOpenerService), __param(7, IAccessibilityService)], InlineCompletionsHoverParticipant);\nexport { InlineCompletionsHoverParticipant };","map":{"version":3,"sources":["/home/umut/Documents/cs/cs410/Project2Group14/node_modules/monaco-editor/esm/vs/editor/contrib/inlineCompletions/inlineCompletionsHoverParticipant.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","dom","MarkdownString","DisposableStore","MarkdownRenderer","Range","IModeService","HoverForeignElementAnchor","commitInlineSuggestionAction","GhostTextController","ShowNextInlineSuggestionAction","ShowPreviousInlineSuggestionAction","nls","IAccessibilityService","IMenuService","MenuId","MenuItemAction","ICommandService","IContextKeyService","IOpenerService","InlineCompletionsHover","constructor","owner","range","controller","isValidForHoverAnchor","anchor","type","startColumn","endColumn","hasMultipleSuggestions","hasMultipleInlineCompletions","InlineCompletionsHoverParticipant","_editor","_hover","_commandService","_menuService","_contextKeyService","_modeService","_openerService","accessibilityService","suggestHoverAnchor","mouseEvent","get","viewZoneData","detail","shouldShowHoverAtViewZone","viewZoneId","fromPositions","positionBefore","position","shouldShowHoverAt","mightBeForeignElement","computeSync","lineDecorations","renderHoverParts","hoverParts","fragment","statusBar","disposableStore","part","isScreenReaderOptimized","renderScreenReaderText","menu","add","createMenu","InlineCompletionsActions","previousAction","addAction","label","localize","commandId","ID","run","executeCommand","nextAction","id","actions","action","setEnabled","then","hasMore","_","group","getActions","item","_a","_b","$","markdownHoverElement","hoverContentsElement","append","renderer","editor","render","code","onDidRenderAsync","className","onContentsChanged","inlineSuggestionAvailable","renderedContents","appendText","appendCodeblock","replaceChildren","element","ghostText","activeModel","inlineCompletionsModel","lineText","getModel","getLineContent","lineNumber","renderForScreenReader","appendChild"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport * as dom from '../../../base/browser/dom.js';\nimport { MarkdownString } from '../../../base/common/htmlContent.js';\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\nimport { MarkdownRenderer } from '../../browser/core/markdownRenderer.js';\nimport { Range } from '../../common/core/range.js';\nimport { IModeService } from '../../common/services/modeService.js';\nimport { HoverForeignElementAnchor } from '../hover/hoverTypes.js';\nimport { commitInlineSuggestionAction, GhostTextController, ShowNextInlineSuggestionAction, ShowPreviousInlineSuggestionAction } from './ghostTextController.js';\nimport * as nls from '../../../nls.js';\nimport { IAccessibilityService } from '../../../platform/accessibility/common/accessibility.js';\nimport { IMenuService, MenuId, MenuItemAction } from '../../../platform/actions/common/actions.js';\nimport { ICommandService } from '../../../platform/commands/common/commands.js';\nimport { IContextKeyService } from '../../../platform/contextkey/common/contextkey.js';\nimport { IOpenerService } from '../../../platform/opener/common/opener.js';\nexport class InlineCompletionsHover {\n    constructor(owner, range, controller) {\n        this.owner = owner;\n        this.range = range;\n        this.controller = controller;\n    }\n    isValidForHoverAnchor(anchor) {\n        return (anchor.type === 1 /* Range */\n            && this.range.startColumn <= anchor.range.startColumn\n            && this.range.endColumn >= anchor.range.endColumn);\n    }\n    hasMultipleSuggestions() {\n        return this.controller.hasMultipleInlineCompletions();\n    }\n}\nlet InlineCompletionsHoverParticipant = class InlineCompletionsHoverParticipant {\n    constructor(_editor, _hover, _commandService, _menuService, _contextKeyService, _modeService, _openerService, accessibilityService) {\n        this._editor = _editor;\n        this._hover = _hover;\n        this._commandService = _commandService;\n        this._menuService = _menuService;\n        this._contextKeyService = _contextKeyService;\n        this._modeService = _modeService;\n        this._openerService = _openerService;\n        this.accessibilityService = accessibilityService;\n    }\n    suggestHoverAnchor(mouseEvent) {\n        const controller = GhostTextController.get(this._editor);\n        if (!controller) {\n            return null;\n        }\n        if (mouseEvent.target.type === 8 /* CONTENT_VIEW_ZONE */) {\n            // handle the case where the mouse is over the view zone\n            const viewZoneData = mouseEvent.target.detail;\n            if (controller.shouldShowHoverAtViewZone(viewZoneData.viewZoneId)) {\n                return new HoverForeignElementAnchor(1000, this, Range.fromPositions(viewZoneData.positionBefore || viewZoneData.position, viewZoneData.positionBefore || viewZoneData.position));\n            }\n        }\n        if (mouseEvent.target.type === 7 /* CONTENT_EMPTY */ && mouseEvent.target.range) {\n            // handle the case where the mouse is over the empty portion of a line following ghost text\n            if (controller.shouldShowHoverAt(mouseEvent.target.range)) {\n                return new HoverForeignElementAnchor(1000, this, mouseEvent.target.range);\n            }\n        }\n        if (mouseEvent.target.type === 6 /* CONTENT_TEXT */ && mouseEvent.target.range && mouseEvent.target.detail) {\n            // handle the case where the mouse is directly over ghost text\n            const mightBeForeignElement = mouseEvent.target.detail.mightBeForeignElement;\n            if (mightBeForeignElement && controller.shouldShowHoverAt(mouseEvent.target.range)) {\n                return new HoverForeignElementAnchor(1000, this, mouseEvent.target.range);\n            }\n        }\n        return null;\n    }\n    computeSync(anchor, lineDecorations) {\n        const controller = GhostTextController.get(this._editor);\n        if (controller && controller.shouldShowHoverAt(anchor.range)) {\n            return [new InlineCompletionsHover(this, anchor.range, controller)];\n        }\n        return [];\n    }\n    renderHoverParts(hoverParts, fragment, statusBar) {\n        const disposableStore = new DisposableStore();\n        const part = hoverParts[0];\n        if (this.accessibilityService.isScreenReaderOptimized()) {\n            this.renderScreenReaderText(part, fragment, disposableStore);\n        }\n        const menu = disposableStore.add(this._menuService.createMenu(MenuId.InlineCompletionsActions, this._contextKeyService));\n        const previousAction = statusBar.addAction({\n            label: nls.localize('showNextInlineSuggestion', \"Next\"),\n            commandId: ShowNextInlineSuggestionAction.ID,\n            run: () => this._commandService.executeCommand(ShowNextInlineSuggestionAction.ID)\n        });\n        const nextAction = statusBar.addAction({\n            label: nls.localize('showPreviousInlineSuggestion', \"Previous\"),\n            commandId: ShowPreviousInlineSuggestionAction.ID,\n            run: () => this._commandService.executeCommand(ShowPreviousInlineSuggestionAction.ID)\n        });\n        statusBar.addAction({\n            label: nls.localize('acceptInlineSuggestion', \"Accept\"),\n            commandId: commitInlineSuggestionAction.id,\n            run: () => this._commandService.executeCommand(commitInlineSuggestionAction.id)\n        });\n        const actions = [previousAction, nextAction];\n        for (const action of actions) {\n            action.setEnabled(false);\n        }\n        part.hasMultipleSuggestions().then(hasMore => {\n            for (const action of actions) {\n                action.setEnabled(hasMore);\n            }\n        });\n        for (const [_, group] of menu.getActions()) {\n            for (const action of group) {\n                if (action instanceof MenuItemAction) {\n                    statusBar.addAction({\n                        label: action.label,\n                        commandId: action.item.id,\n                        run: () => this._commandService.executeCommand(action.item.id)\n                    });\n                }\n            }\n        }\n        return disposableStore;\n    }\n    renderScreenReaderText(part, fragment, disposableStore) {\n        var _a, _b;\n        const $ = dom.$;\n        const markdownHoverElement = $('div.hover-row.markdown-hover');\n        const hoverContentsElement = dom.append(markdownHoverElement, $('div.hover-contents'));\n        const renderer = disposableStore.add(new MarkdownRenderer({ editor: this._editor }, this._modeService, this._openerService));\n        const render = (code) => {\n            disposableStore.add(renderer.onDidRenderAsync(() => {\n                hoverContentsElement.className = 'hover-contents code-hover-contents';\n                this._hover.onContentsChanged();\n            }));\n            const inlineSuggestionAvailable = nls.localize('inlineSuggestionFollows', \"Suggestion:\");\n            const renderedContents = disposableStore.add(renderer.render(new MarkdownString().appendText(inlineSuggestionAvailable).appendCodeblock('text', code)));\n            hoverContentsElement.replaceChildren(renderedContents.element);\n        };\n        const ghostText = (_b = (_a = part.controller.activeModel) === null || _a === void 0 ? void 0 : _a.inlineCompletionsModel) === null || _b === void 0 ? void 0 : _b.ghostText;\n        if (ghostText) {\n            const lineText = this._editor.getModel().getLineContent(ghostText.lineNumber);\n            render(ghostText.renderForScreenReader(lineText));\n        }\n        fragment.appendChild(markdownHoverElement);\n    }\n};\nInlineCompletionsHoverParticipant = __decorate([\n    __param(2, ICommandService),\n    __param(3, IMenuService),\n    __param(4, IContextKeyService),\n    __param(5, IModeService),\n    __param(6, IOpenerService),\n    __param(7, IAccessibilityService)\n], InlineCompletionsHoverParticipant);\nexport { InlineCompletionsHoverParticipant };\n"]},"metadata":{},"sourceType":"module"}