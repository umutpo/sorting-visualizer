{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { EditorAction, EditorCommand, registerEditorAction, registerEditorCommand } from '../../browser/editorExtensions.js';\nimport { ReplaceCommand } from '../../common/commands/replaceCommand.js';\nimport { EditorOptions } from '../../common/config/editorOptions.js';\nimport { CursorState } from '../../common/controller/cursorCommon.js';\nimport { WordOperations } from '../../common/controller/cursorWordOperations.js';\nimport { getMapForWordSeparators } from '../../common/controller/wordCharacterClassifier.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range } from '../../common/core/range.js';\nimport { Selection } from '../../common/core/selection.js';\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\nimport { LanguageConfigurationRegistry } from '../../common/modes/languageConfigurationRegistry.js';\nimport * as nls from '../../../nls.js';\nimport { CONTEXT_ACCESSIBILITY_MODE_ENABLED } from '../../../platform/accessibility/common/accessibility.js';\nimport { ContextKeyExpr } from '../../../platform/contextkey/common/contextkey.js';\nimport { IsWindowsContext } from '../../../platform/contextkey/common/contextkeys.js';\nexport class MoveWordCommand extends EditorCommand {\n  constructor(opts) {\n    super(opts);\n    this._inSelectionMode = opts.inSelectionMode;\n    this._wordNavigationType = opts.wordNavigationType;\n  }\n\n  runEditorCommand(accessor, editor, args) {\n    if (!editor.hasModel()) {\n      return;\n    }\n\n    const wordSeparators = getMapForWordSeparators(editor.getOption(115\n    /* wordSeparators */\n    ));\n    const model = editor.getModel();\n    const selections = editor.getSelections();\n    const result = selections.map(sel => {\n      const inPosition = new Position(sel.positionLineNumber, sel.positionColumn);\n\n      const outPosition = this._move(wordSeparators, model, inPosition, this._wordNavigationType);\n\n      return this._moveTo(sel, outPosition, this._inSelectionMode);\n    });\n    model.pushStackElement();\n\n    editor._getViewModel().setCursorStates('moveWordCommand', 3\n    /* Explicit */\n    , result.map(r => CursorState.fromModelSelection(r)));\n\n    if (result.length === 1) {\n      const pos = new Position(result[0].positionLineNumber, result[0].positionColumn);\n      editor.revealPosition(pos, 0\n      /* Smooth */\n      );\n    }\n  }\n\n  _moveTo(from, to, inSelectionMode) {\n    if (inSelectionMode) {\n      // move just position\n      return new Selection(from.selectionStartLineNumber, from.selectionStartColumn, to.lineNumber, to.column);\n    } else {\n      // move everything\n      return new Selection(to.lineNumber, to.column, to.lineNumber, to.column);\n    }\n  }\n\n}\nexport class WordLeftCommand extends MoveWordCommand {\n  _move(wordSeparators, model, position, wordNavigationType) {\n    return WordOperations.moveWordLeft(wordSeparators, model, position, wordNavigationType);\n  }\n\n}\nexport class WordRightCommand extends MoveWordCommand {\n  _move(wordSeparators, model, position, wordNavigationType) {\n    return WordOperations.moveWordRight(wordSeparators, model, position, wordNavigationType);\n  }\n\n}\nexport class CursorWordStartLeft extends WordLeftCommand {\n  constructor() {\n    super({\n      inSelectionMode: false,\n      wordNavigationType: 0\n      /* WordStart */\n      ,\n      id: 'cursorWordStartLeft',\n      precondition: undefined\n    });\n  }\n\n}\nexport class CursorWordEndLeft extends WordLeftCommand {\n  constructor() {\n    super({\n      inSelectionMode: false,\n      wordNavigationType: 2\n      /* WordEnd */\n      ,\n      id: 'cursorWordEndLeft',\n      precondition: undefined\n    });\n  }\n\n}\nexport class CursorWordLeft extends WordLeftCommand {\n  constructor() {\n    var _a;\n\n    super({\n      inSelectionMode: false,\n      wordNavigationType: 1\n      /* WordStartFast */\n      ,\n      id: 'cursorWordLeft',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: ContextKeyExpr.and(EditorContextKeys.textInputFocus, (_a = ContextKeyExpr.and(CONTEXT_ACCESSIBILITY_MODE_ENABLED, IsWindowsContext)) === null || _a === void 0 ? void 0 : _a.negate()),\n        primary: 2048\n        /* CtrlCmd */\n        | 15\n        /* LeftArrow */\n        ,\n        mac: {\n          primary: 512\n          /* Alt */\n          | 15\n          /* LeftArrow */\n\n        },\n        weight: 100\n        /* EditorContrib */\n\n      }\n    });\n  }\n\n}\nexport class CursorWordStartLeftSelect extends WordLeftCommand {\n  constructor() {\n    super({\n      inSelectionMode: true,\n      wordNavigationType: 0\n      /* WordStart */\n      ,\n      id: 'cursorWordStartLeftSelect',\n      precondition: undefined\n    });\n  }\n\n}\nexport class CursorWordEndLeftSelect extends WordLeftCommand {\n  constructor() {\n    super({\n      inSelectionMode: true,\n      wordNavigationType: 2\n      /* WordEnd */\n      ,\n      id: 'cursorWordEndLeftSelect',\n      precondition: undefined\n    });\n  }\n\n}\nexport class CursorWordLeftSelect extends WordLeftCommand {\n  constructor() {\n    var _a;\n\n    super({\n      inSelectionMode: true,\n      wordNavigationType: 1\n      /* WordStartFast */\n      ,\n      id: 'cursorWordLeftSelect',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: ContextKeyExpr.and(EditorContextKeys.textInputFocus, (_a = ContextKeyExpr.and(CONTEXT_ACCESSIBILITY_MODE_ENABLED, IsWindowsContext)) === null || _a === void 0 ? void 0 : _a.negate()),\n        primary: 2048\n        /* CtrlCmd */\n        | 1024\n        /* Shift */\n        | 15\n        /* LeftArrow */\n        ,\n        mac: {\n          primary: 512\n          /* Alt */\n          | 1024\n          /* Shift */\n          | 15\n          /* LeftArrow */\n\n        },\n        weight: 100\n        /* EditorContrib */\n\n      }\n    });\n  }\n\n} // Accessibility navigation commands should only be enabled on windows since they are tuned to what NVDA expects\n\nexport class CursorWordAccessibilityLeft extends WordLeftCommand {\n  constructor() {\n    super({\n      inSelectionMode: false,\n      wordNavigationType: 3\n      /* WordAccessibility */\n      ,\n      id: 'cursorWordAccessibilityLeft',\n      precondition: undefined\n    });\n  }\n\n  _move(_, model, position, wordNavigationType) {\n    return super._move(getMapForWordSeparators(EditorOptions.wordSeparators.defaultValue), model, position, wordNavigationType);\n  }\n\n}\nexport class CursorWordAccessibilityLeftSelect extends WordLeftCommand {\n  constructor() {\n    super({\n      inSelectionMode: true,\n      wordNavigationType: 3\n      /* WordAccessibility */\n      ,\n      id: 'cursorWordAccessibilityLeftSelect',\n      precondition: undefined\n    });\n  }\n\n  _move(_, model, position, wordNavigationType) {\n    return super._move(getMapForWordSeparators(EditorOptions.wordSeparators.defaultValue), model, position, wordNavigationType);\n  }\n\n}\nexport class CursorWordStartRight extends WordRightCommand {\n  constructor() {\n    super({\n      inSelectionMode: false,\n      wordNavigationType: 0\n      /* WordStart */\n      ,\n      id: 'cursorWordStartRight',\n      precondition: undefined\n    });\n  }\n\n}\nexport class CursorWordEndRight extends WordRightCommand {\n  constructor() {\n    var _a;\n\n    super({\n      inSelectionMode: false,\n      wordNavigationType: 2\n      /* WordEnd */\n      ,\n      id: 'cursorWordEndRight',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: ContextKeyExpr.and(EditorContextKeys.textInputFocus, (_a = ContextKeyExpr.and(CONTEXT_ACCESSIBILITY_MODE_ENABLED, IsWindowsContext)) === null || _a === void 0 ? void 0 : _a.negate()),\n        primary: 2048\n        /* CtrlCmd */\n        | 17\n        /* RightArrow */\n        ,\n        mac: {\n          primary: 512\n          /* Alt */\n          | 17\n          /* RightArrow */\n\n        },\n        weight: 100\n        /* EditorContrib */\n\n      }\n    });\n  }\n\n}\nexport class CursorWordRight extends WordRightCommand {\n  constructor() {\n    super({\n      inSelectionMode: false,\n      wordNavigationType: 2\n      /* WordEnd */\n      ,\n      id: 'cursorWordRight',\n      precondition: undefined\n    });\n  }\n\n}\nexport class CursorWordStartRightSelect extends WordRightCommand {\n  constructor() {\n    super({\n      inSelectionMode: true,\n      wordNavigationType: 0\n      /* WordStart */\n      ,\n      id: 'cursorWordStartRightSelect',\n      precondition: undefined\n    });\n  }\n\n}\nexport class CursorWordEndRightSelect extends WordRightCommand {\n  constructor() {\n    var _a;\n\n    super({\n      inSelectionMode: true,\n      wordNavigationType: 2\n      /* WordEnd */\n      ,\n      id: 'cursorWordEndRightSelect',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: ContextKeyExpr.and(EditorContextKeys.textInputFocus, (_a = ContextKeyExpr.and(CONTEXT_ACCESSIBILITY_MODE_ENABLED, IsWindowsContext)) === null || _a === void 0 ? void 0 : _a.negate()),\n        primary: 2048\n        /* CtrlCmd */\n        | 1024\n        /* Shift */\n        | 17\n        /* RightArrow */\n        ,\n        mac: {\n          primary: 512\n          /* Alt */\n          | 1024\n          /* Shift */\n          | 17\n          /* RightArrow */\n\n        },\n        weight: 100\n        /* EditorContrib */\n\n      }\n    });\n  }\n\n}\nexport class CursorWordRightSelect extends WordRightCommand {\n  constructor() {\n    super({\n      inSelectionMode: true,\n      wordNavigationType: 2\n      /* WordEnd */\n      ,\n      id: 'cursorWordRightSelect',\n      precondition: undefined\n    });\n  }\n\n}\nexport class CursorWordAccessibilityRight extends WordRightCommand {\n  constructor() {\n    super({\n      inSelectionMode: false,\n      wordNavigationType: 3\n      /* WordAccessibility */\n      ,\n      id: 'cursorWordAccessibilityRight',\n      precondition: undefined\n    });\n  }\n\n  _move(_, model, position, wordNavigationType) {\n    return super._move(getMapForWordSeparators(EditorOptions.wordSeparators.defaultValue), model, position, wordNavigationType);\n  }\n\n}\nexport class CursorWordAccessibilityRightSelect extends WordRightCommand {\n  constructor() {\n    super({\n      inSelectionMode: true,\n      wordNavigationType: 3\n      /* WordAccessibility */\n      ,\n      id: 'cursorWordAccessibilityRightSelect',\n      precondition: undefined\n    });\n  }\n\n  _move(_, model, position, wordNavigationType) {\n    return super._move(getMapForWordSeparators(EditorOptions.wordSeparators.defaultValue), model, position, wordNavigationType);\n  }\n\n}\nexport class DeleteWordCommand extends EditorCommand {\n  constructor(opts) {\n    super(opts);\n    this._whitespaceHeuristics = opts.whitespaceHeuristics;\n    this._wordNavigationType = opts.wordNavigationType;\n  }\n\n  runEditorCommand(accessor, editor, args) {\n    if (!editor.hasModel()) {\n      return;\n    }\n\n    const wordSeparators = getMapForWordSeparators(editor.getOption(115\n    /* wordSeparators */\n    ));\n    const model = editor.getModel();\n    const selections = editor.getSelections();\n    const autoClosingBrackets = editor.getOption(5\n    /* autoClosingBrackets */\n    );\n    const autoClosingQuotes = editor.getOption(8\n    /* autoClosingQuotes */\n    );\n    const autoClosingPairs = LanguageConfigurationRegistry.getAutoClosingPairs(model.getLanguageId());\n\n    const viewModel = editor._getViewModel();\n\n    const commands = selections.map(sel => {\n      const deleteRange = this._delete({\n        wordSeparators,\n        model,\n        selection: sel,\n        whitespaceHeuristics: this._whitespaceHeuristics,\n        autoClosingDelete: editor.getOption(6\n        /* autoClosingDelete */\n        ),\n        autoClosingBrackets,\n        autoClosingQuotes,\n        autoClosingPairs,\n        autoClosedCharacters: viewModel.getCursorAutoClosedCharacters()\n      }, this._wordNavigationType);\n\n      return new ReplaceCommand(deleteRange, '');\n    });\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, commands);\n    editor.pushUndoStop();\n  }\n\n}\nexport class DeleteWordLeftCommand extends DeleteWordCommand {\n  _delete(ctx, wordNavigationType) {\n    let r = WordOperations.deleteWordLeft(ctx, wordNavigationType);\n\n    if (r) {\n      return r;\n    }\n\n    return new Range(1, 1, 1, 1);\n  }\n\n}\nexport class DeleteWordRightCommand extends DeleteWordCommand {\n  _delete(ctx, wordNavigationType) {\n    let r = WordOperations.deleteWordRight(ctx, wordNavigationType);\n\n    if (r) {\n      return r;\n    }\n\n    const lineCount = ctx.model.getLineCount();\n    const maxColumn = ctx.model.getLineMaxColumn(lineCount);\n    return new Range(lineCount, maxColumn, lineCount, maxColumn);\n  }\n\n}\nexport class DeleteWordStartLeft extends DeleteWordLeftCommand {\n  constructor() {\n    super({\n      whitespaceHeuristics: false,\n      wordNavigationType: 0\n      /* WordStart */\n      ,\n      id: 'deleteWordStartLeft',\n      precondition: EditorContextKeys.writable\n    });\n  }\n\n}\nexport class DeleteWordEndLeft extends DeleteWordLeftCommand {\n  constructor() {\n    super({\n      whitespaceHeuristics: false,\n      wordNavigationType: 2\n      /* WordEnd */\n      ,\n      id: 'deleteWordEndLeft',\n      precondition: EditorContextKeys.writable\n    });\n  }\n\n}\nexport class DeleteWordLeft extends DeleteWordLeftCommand {\n  constructor() {\n    super({\n      whitespaceHeuristics: true,\n      wordNavigationType: 0\n      /* WordStart */\n      ,\n      id: 'deleteWordLeft',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 2048\n        /* CtrlCmd */\n        | 1\n        /* Backspace */\n        ,\n        mac: {\n          primary: 512\n          /* Alt */\n          | 1\n          /* Backspace */\n\n        },\n        weight: 100\n        /* EditorContrib */\n\n      }\n    });\n  }\n\n}\nexport class DeleteWordStartRight extends DeleteWordRightCommand {\n  constructor() {\n    super({\n      whitespaceHeuristics: false,\n      wordNavigationType: 0\n      /* WordStart */\n      ,\n      id: 'deleteWordStartRight',\n      precondition: EditorContextKeys.writable\n    });\n  }\n\n}\nexport class DeleteWordEndRight extends DeleteWordRightCommand {\n  constructor() {\n    super({\n      whitespaceHeuristics: false,\n      wordNavigationType: 2\n      /* WordEnd */\n      ,\n      id: 'deleteWordEndRight',\n      precondition: EditorContextKeys.writable\n    });\n  }\n\n}\nexport class DeleteWordRight extends DeleteWordRightCommand {\n  constructor() {\n    super({\n      whitespaceHeuristics: true,\n      wordNavigationType: 2\n      /* WordEnd */\n      ,\n      id: 'deleteWordRight',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 2048\n        /* CtrlCmd */\n        | 20\n        /* Delete */\n        ,\n        mac: {\n          primary: 512\n          /* Alt */\n          | 20\n          /* Delete */\n\n        },\n        weight: 100\n        /* EditorContrib */\n\n      }\n    });\n  }\n\n}\nexport class DeleteInsideWord extends EditorAction {\n  constructor() {\n    super({\n      id: 'deleteInsideWord',\n      precondition: EditorContextKeys.writable,\n      label: nls.localize('deleteInsideWord', \"Delete Word\"),\n      alias: 'Delete Word'\n    });\n  }\n\n  run(accessor, editor, args) {\n    if (!editor.hasModel()) {\n      return;\n    }\n\n    const wordSeparators = getMapForWordSeparators(editor.getOption(115\n    /* wordSeparators */\n    ));\n    const model = editor.getModel();\n    const selections = editor.getSelections();\n    const commands = selections.map(sel => {\n      const deleteRange = WordOperations.deleteInsideWord(wordSeparators, model, sel);\n      return new ReplaceCommand(deleteRange, '');\n    });\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, commands);\n    editor.pushUndoStop();\n  }\n\n}\nregisterEditorCommand(new CursorWordStartLeft());\nregisterEditorCommand(new CursorWordEndLeft());\nregisterEditorCommand(new CursorWordLeft());\nregisterEditorCommand(new CursorWordStartLeftSelect());\nregisterEditorCommand(new CursorWordEndLeftSelect());\nregisterEditorCommand(new CursorWordLeftSelect());\nregisterEditorCommand(new CursorWordStartRight());\nregisterEditorCommand(new CursorWordEndRight());\nregisterEditorCommand(new CursorWordRight());\nregisterEditorCommand(new CursorWordStartRightSelect());\nregisterEditorCommand(new CursorWordEndRightSelect());\nregisterEditorCommand(new CursorWordRightSelect());\nregisterEditorCommand(new CursorWordAccessibilityLeft());\nregisterEditorCommand(new CursorWordAccessibilityLeftSelect());\nregisterEditorCommand(new CursorWordAccessibilityRight());\nregisterEditorCommand(new CursorWordAccessibilityRightSelect());\nregisterEditorCommand(new DeleteWordStartLeft());\nregisterEditorCommand(new DeleteWordEndLeft());\nregisterEditorCommand(new DeleteWordLeft());\nregisterEditorCommand(new DeleteWordStartRight());\nregisterEditorCommand(new DeleteWordEndRight());\nregisterEditorCommand(new DeleteWordRight());\nregisterEditorAction(DeleteInsideWord);","map":{"version":3,"sources":["/home/umut/Documents/cs/cs410/Project2Group14/node_modules/monaco-editor/esm/vs/editor/contrib/wordOperations/wordOperations.js"],"names":["EditorAction","EditorCommand","registerEditorAction","registerEditorCommand","ReplaceCommand","EditorOptions","CursorState","WordOperations","getMapForWordSeparators","Position","Range","Selection","EditorContextKeys","LanguageConfigurationRegistry","nls","CONTEXT_ACCESSIBILITY_MODE_ENABLED","ContextKeyExpr","IsWindowsContext","MoveWordCommand","constructor","opts","_inSelectionMode","inSelectionMode","_wordNavigationType","wordNavigationType","runEditorCommand","accessor","editor","args","hasModel","wordSeparators","getOption","model","getModel","selections","getSelections","result","map","sel","inPosition","positionLineNumber","positionColumn","outPosition","_move","_moveTo","pushStackElement","_getViewModel","setCursorStates","r","fromModelSelection","length","pos","revealPosition","from","to","selectionStartLineNumber","selectionStartColumn","lineNumber","column","WordLeftCommand","position","moveWordLeft","WordRightCommand","moveWordRight","CursorWordStartLeft","id","precondition","undefined","CursorWordEndLeft","CursorWordLeft","_a","kbOpts","kbExpr","and","textInputFocus","negate","primary","mac","weight","CursorWordStartLeftSelect","CursorWordEndLeftSelect","CursorWordLeftSelect","CursorWordAccessibilityLeft","_","defaultValue","CursorWordAccessibilityLeftSelect","CursorWordStartRight","CursorWordEndRight","CursorWordRight","CursorWordStartRightSelect","CursorWordEndRightSelect","CursorWordRightSelect","CursorWordAccessibilityRight","CursorWordAccessibilityRightSelect","DeleteWordCommand","_whitespaceHeuristics","whitespaceHeuristics","autoClosingBrackets","autoClosingQuotes","autoClosingPairs","getAutoClosingPairs","getLanguageId","viewModel","commands","deleteRange","_delete","selection","autoClosingDelete","autoClosedCharacters","getCursorAutoClosedCharacters","pushUndoStop","executeCommands","DeleteWordLeftCommand","ctx","deleteWordLeft","DeleteWordRightCommand","deleteWordRight","lineCount","getLineCount","maxColumn","getLineMaxColumn","DeleteWordStartLeft","writable","DeleteWordEndLeft","DeleteWordLeft","DeleteWordStartRight","DeleteWordEndRight","DeleteWordRight","DeleteInsideWord","label","localize","alias","run","deleteInsideWord"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { EditorAction, EditorCommand, registerEditorAction, registerEditorCommand } from '../../browser/editorExtensions.js';\nimport { ReplaceCommand } from '../../common/commands/replaceCommand.js';\nimport { EditorOptions } from '../../common/config/editorOptions.js';\nimport { CursorState } from '../../common/controller/cursorCommon.js';\nimport { WordOperations } from '../../common/controller/cursorWordOperations.js';\nimport { getMapForWordSeparators } from '../../common/controller/wordCharacterClassifier.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range } from '../../common/core/range.js';\nimport { Selection } from '../../common/core/selection.js';\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\nimport { LanguageConfigurationRegistry } from '../../common/modes/languageConfigurationRegistry.js';\nimport * as nls from '../../../nls.js';\nimport { CONTEXT_ACCESSIBILITY_MODE_ENABLED } from '../../../platform/accessibility/common/accessibility.js';\nimport { ContextKeyExpr } from '../../../platform/contextkey/common/contextkey.js';\nimport { IsWindowsContext } from '../../../platform/contextkey/common/contextkeys.js';\nexport class MoveWordCommand extends EditorCommand {\n    constructor(opts) {\n        super(opts);\n        this._inSelectionMode = opts.inSelectionMode;\n        this._wordNavigationType = opts.wordNavigationType;\n    }\n    runEditorCommand(accessor, editor, args) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        const wordSeparators = getMapForWordSeparators(editor.getOption(115 /* wordSeparators */));\n        const model = editor.getModel();\n        const selections = editor.getSelections();\n        const result = selections.map((sel) => {\n            const inPosition = new Position(sel.positionLineNumber, sel.positionColumn);\n            const outPosition = this._move(wordSeparators, model, inPosition, this._wordNavigationType);\n            return this._moveTo(sel, outPosition, this._inSelectionMode);\n        });\n        model.pushStackElement();\n        editor._getViewModel().setCursorStates('moveWordCommand', 3 /* Explicit */, result.map(r => CursorState.fromModelSelection(r)));\n        if (result.length === 1) {\n            const pos = new Position(result[0].positionLineNumber, result[0].positionColumn);\n            editor.revealPosition(pos, 0 /* Smooth */);\n        }\n    }\n    _moveTo(from, to, inSelectionMode) {\n        if (inSelectionMode) {\n            // move just position\n            return new Selection(from.selectionStartLineNumber, from.selectionStartColumn, to.lineNumber, to.column);\n        }\n        else {\n            // move everything\n            return new Selection(to.lineNumber, to.column, to.lineNumber, to.column);\n        }\n    }\n}\nexport class WordLeftCommand extends MoveWordCommand {\n    _move(wordSeparators, model, position, wordNavigationType) {\n        return WordOperations.moveWordLeft(wordSeparators, model, position, wordNavigationType);\n    }\n}\nexport class WordRightCommand extends MoveWordCommand {\n    _move(wordSeparators, model, position, wordNavigationType) {\n        return WordOperations.moveWordRight(wordSeparators, model, position, wordNavigationType);\n    }\n}\nexport class CursorWordStartLeft extends WordLeftCommand {\n    constructor() {\n        super({\n            inSelectionMode: false,\n            wordNavigationType: 0 /* WordStart */,\n            id: 'cursorWordStartLeft',\n            precondition: undefined\n        });\n    }\n}\nexport class CursorWordEndLeft extends WordLeftCommand {\n    constructor() {\n        super({\n            inSelectionMode: false,\n            wordNavigationType: 2 /* WordEnd */,\n            id: 'cursorWordEndLeft',\n            precondition: undefined\n        });\n    }\n}\nexport class CursorWordLeft extends WordLeftCommand {\n    constructor() {\n        var _a;\n        super({\n            inSelectionMode: false,\n            wordNavigationType: 1 /* WordStartFast */,\n            id: 'cursorWordLeft',\n            precondition: undefined,\n            kbOpts: {\n                kbExpr: ContextKeyExpr.and(EditorContextKeys.textInputFocus, (_a = ContextKeyExpr.and(CONTEXT_ACCESSIBILITY_MODE_ENABLED, IsWindowsContext)) === null || _a === void 0 ? void 0 : _a.negate()),\n                primary: 2048 /* CtrlCmd */ | 15 /* LeftArrow */,\n                mac: { primary: 512 /* Alt */ | 15 /* LeftArrow */ },\n                weight: 100 /* EditorContrib */\n            }\n        });\n    }\n}\nexport class CursorWordStartLeftSelect extends WordLeftCommand {\n    constructor() {\n        super({\n            inSelectionMode: true,\n            wordNavigationType: 0 /* WordStart */,\n            id: 'cursorWordStartLeftSelect',\n            precondition: undefined\n        });\n    }\n}\nexport class CursorWordEndLeftSelect extends WordLeftCommand {\n    constructor() {\n        super({\n            inSelectionMode: true,\n            wordNavigationType: 2 /* WordEnd */,\n            id: 'cursorWordEndLeftSelect',\n            precondition: undefined\n        });\n    }\n}\nexport class CursorWordLeftSelect extends WordLeftCommand {\n    constructor() {\n        var _a;\n        super({\n            inSelectionMode: true,\n            wordNavigationType: 1 /* WordStartFast */,\n            id: 'cursorWordLeftSelect',\n            precondition: undefined,\n            kbOpts: {\n                kbExpr: ContextKeyExpr.and(EditorContextKeys.textInputFocus, (_a = ContextKeyExpr.and(CONTEXT_ACCESSIBILITY_MODE_ENABLED, IsWindowsContext)) === null || _a === void 0 ? void 0 : _a.negate()),\n                primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 15 /* LeftArrow */,\n                mac: { primary: 512 /* Alt */ | 1024 /* Shift */ | 15 /* LeftArrow */ },\n                weight: 100 /* EditorContrib */\n            }\n        });\n    }\n}\n// Accessibility navigation commands should only be enabled on windows since they are tuned to what NVDA expects\nexport class CursorWordAccessibilityLeft extends WordLeftCommand {\n    constructor() {\n        super({\n            inSelectionMode: false,\n            wordNavigationType: 3 /* WordAccessibility */,\n            id: 'cursorWordAccessibilityLeft',\n            precondition: undefined\n        });\n    }\n    _move(_, model, position, wordNavigationType) {\n        return super._move(getMapForWordSeparators(EditorOptions.wordSeparators.defaultValue), model, position, wordNavigationType);\n    }\n}\nexport class CursorWordAccessibilityLeftSelect extends WordLeftCommand {\n    constructor() {\n        super({\n            inSelectionMode: true,\n            wordNavigationType: 3 /* WordAccessibility */,\n            id: 'cursorWordAccessibilityLeftSelect',\n            precondition: undefined\n        });\n    }\n    _move(_, model, position, wordNavigationType) {\n        return super._move(getMapForWordSeparators(EditorOptions.wordSeparators.defaultValue), model, position, wordNavigationType);\n    }\n}\nexport class CursorWordStartRight extends WordRightCommand {\n    constructor() {\n        super({\n            inSelectionMode: false,\n            wordNavigationType: 0 /* WordStart */,\n            id: 'cursorWordStartRight',\n            precondition: undefined\n        });\n    }\n}\nexport class CursorWordEndRight extends WordRightCommand {\n    constructor() {\n        var _a;\n        super({\n            inSelectionMode: false,\n            wordNavigationType: 2 /* WordEnd */,\n            id: 'cursorWordEndRight',\n            precondition: undefined,\n            kbOpts: {\n                kbExpr: ContextKeyExpr.and(EditorContextKeys.textInputFocus, (_a = ContextKeyExpr.and(CONTEXT_ACCESSIBILITY_MODE_ENABLED, IsWindowsContext)) === null || _a === void 0 ? void 0 : _a.negate()),\n                primary: 2048 /* CtrlCmd */ | 17 /* RightArrow */,\n                mac: { primary: 512 /* Alt */ | 17 /* RightArrow */ },\n                weight: 100 /* EditorContrib */\n            }\n        });\n    }\n}\nexport class CursorWordRight extends WordRightCommand {\n    constructor() {\n        super({\n            inSelectionMode: false,\n            wordNavigationType: 2 /* WordEnd */,\n            id: 'cursorWordRight',\n            precondition: undefined\n        });\n    }\n}\nexport class CursorWordStartRightSelect extends WordRightCommand {\n    constructor() {\n        super({\n            inSelectionMode: true,\n            wordNavigationType: 0 /* WordStart */,\n            id: 'cursorWordStartRightSelect',\n            precondition: undefined\n        });\n    }\n}\nexport class CursorWordEndRightSelect extends WordRightCommand {\n    constructor() {\n        var _a;\n        super({\n            inSelectionMode: true,\n            wordNavigationType: 2 /* WordEnd */,\n            id: 'cursorWordEndRightSelect',\n            precondition: undefined,\n            kbOpts: {\n                kbExpr: ContextKeyExpr.and(EditorContextKeys.textInputFocus, (_a = ContextKeyExpr.and(CONTEXT_ACCESSIBILITY_MODE_ENABLED, IsWindowsContext)) === null || _a === void 0 ? void 0 : _a.negate()),\n                primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 17 /* RightArrow */,\n                mac: { primary: 512 /* Alt */ | 1024 /* Shift */ | 17 /* RightArrow */ },\n                weight: 100 /* EditorContrib */\n            }\n        });\n    }\n}\nexport class CursorWordRightSelect extends WordRightCommand {\n    constructor() {\n        super({\n            inSelectionMode: true,\n            wordNavigationType: 2 /* WordEnd */,\n            id: 'cursorWordRightSelect',\n            precondition: undefined\n        });\n    }\n}\nexport class CursorWordAccessibilityRight extends WordRightCommand {\n    constructor() {\n        super({\n            inSelectionMode: false,\n            wordNavigationType: 3 /* WordAccessibility */,\n            id: 'cursorWordAccessibilityRight',\n            precondition: undefined\n        });\n    }\n    _move(_, model, position, wordNavigationType) {\n        return super._move(getMapForWordSeparators(EditorOptions.wordSeparators.defaultValue), model, position, wordNavigationType);\n    }\n}\nexport class CursorWordAccessibilityRightSelect extends WordRightCommand {\n    constructor() {\n        super({\n            inSelectionMode: true,\n            wordNavigationType: 3 /* WordAccessibility */,\n            id: 'cursorWordAccessibilityRightSelect',\n            precondition: undefined\n        });\n    }\n    _move(_, model, position, wordNavigationType) {\n        return super._move(getMapForWordSeparators(EditorOptions.wordSeparators.defaultValue), model, position, wordNavigationType);\n    }\n}\nexport class DeleteWordCommand extends EditorCommand {\n    constructor(opts) {\n        super(opts);\n        this._whitespaceHeuristics = opts.whitespaceHeuristics;\n        this._wordNavigationType = opts.wordNavigationType;\n    }\n    runEditorCommand(accessor, editor, args) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        const wordSeparators = getMapForWordSeparators(editor.getOption(115 /* wordSeparators */));\n        const model = editor.getModel();\n        const selections = editor.getSelections();\n        const autoClosingBrackets = editor.getOption(5 /* autoClosingBrackets */);\n        const autoClosingQuotes = editor.getOption(8 /* autoClosingQuotes */);\n        const autoClosingPairs = LanguageConfigurationRegistry.getAutoClosingPairs(model.getLanguageId());\n        const viewModel = editor._getViewModel();\n        const commands = selections.map((sel) => {\n            const deleteRange = this._delete({\n                wordSeparators,\n                model,\n                selection: sel,\n                whitespaceHeuristics: this._whitespaceHeuristics,\n                autoClosingDelete: editor.getOption(6 /* autoClosingDelete */),\n                autoClosingBrackets,\n                autoClosingQuotes,\n                autoClosingPairs,\n                autoClosedCharacters: viewModel.getCursorAutoClosedCharacters()\n            }, this._wordNavigationType);\n            return new ReplaceCommand(deleteRange, '');\n        });\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, commands);\n        editor.pushUndoStop();\n    }\n}\nexport class DeleteWordLeftCommand extends DeleteWordCommand {\n    _delete(ctx, wordNavigationType) {\n        let r = WordOperations.deleteWordLeft(ctx, wordNavigationType);\n        if (r) {\n            return r;\n        }\n        return new Range(1, 1, 1, 1);\n    }\n}\nexport class DeleteWordRightCommand extends DeleteWordCommand {\n    _delete(ctx, wordNavigationType) {\n        let r = WordOperations.deleteWordRight(ctx, wordNavigationType);\n        if (r) {\n            return r;\n        }\n        const lineCount = ctx.model.getLineCount();\n        const maxColumn = ctx.model.getLineMaxColumn(lineCount);\n        return new Range(lineCount, maxColumn, lineCount, maxColumn);\n    }\n}\nexport class DeleteWordStartLeft extends DeleteWordLeftCommand {\n    constructor() {\n        super({\n            whitespaceHeuristics: false,\n            wordNavigationType: 0 /* WordStart */,\n            id: 'deleteWordStartLeft',\n            precondition: EditorContextKeys.writable\n        });\n    }\n}\nexport class DeleteWordEndLeft extends DeleteWordLeftCommand {\n    constructor() {\n        super({\n            whitespaceHeuristics: false,\n            wordNavigationType: 2 /* WordEnd */,\n            id: 'deleteWordEndLeft',\n            precondition: EditorContextKeys.writable\n        });\n    }\n}\nexport class DeleteWordLeft extends DeleteWordLeftCommand {\n    constructor() {\n        super({\n            whitespaceHeuristics: true,\n            wordNavigationType: 0 /* WordStart */,\n            id: 'deleteWordLeft',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.textInputFocus,\n                primary: 2048 /* CtrlCmd */ | 1 /* Backspace */,\n                mac: { primary: 512 /* Alt */ | 1 /* Backspace */ },\n                weight: 100 /* EditorContrib */\n            }\n        });\n    }\n}\nexport class DeleteWordStartRight extends DeleteWordRightCommand {\n    constructor() {\n        super({\n            whitespaceHeuristics: false,\n            wordNavigationType: 0 /* WordStart */,\n            id: 'deleteWordStartRight',\n            precondition: EditorContextKeys.writable\n        });\n    }\n}\nexport class DeleteWordEndRight extends DeleteWordRightCommand {\n    constructor() {\n        super({\n            whitespaceHeuristics: false,\n            wordNavigationType: 2 /* WordEnd */,\n            id: 'deleteWordEndRight',\n            precondition: EditorContextKeys.writable\n        });\n    }\n}\nexport class DeleteWordRight extends DeleteWordRightCommand {\n    constructor() {\n        super({\n            whitespaceHeuristics: true,\n            wordNavigationType: 2 /* WordEnd */,\n            id: 'deleteWordRight',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.textInputFocus,\n                primary: 2048 /* CtrlCmd */ | 20 /* Delete */,\n                mac: { primary: 512 /* Alt */ | 20 /* Delete */ },\n                weight: 100 /* EditorContrib */\n            }\n        });\n    }\n}\nexport class DeleteInsideWord extends EditorAction {\n    constructor() {\n        super({\n            id: 'deleteInsideWord',\n            precondition: EditorContextKeys.writable,\n            label: nls.localize('deleteInsideWord', \"Delete Word\"),\n            alias: 'Delete Word'\n        });\n    }\n    run(accessor, editor, args) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        const wordSeparators = getMapForWordSeparators(editor.getOption(115 /* wordSeparators */));\n        const model = editor.getModel();\n        const selections = editor.getSelections();\n        const commands = selections.map((sel) => {\n            const deleteRange = WordOperations.deleteInsideWord(wordSeparators, model, sel);\n            return new ReplaceCommand(deleteRange, '');\n        });\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, commands);\n        editor.pushUndoStop();\n    }\n}\nregisterEditorCommand(new CursorWordStartLeft());\nregisterEditorCommand(new CursorWordEndLeft());\nregisterEditorCommand(new CursorWordLeft());\nregisterEditorCommand(new CursorWordStartLeftSelect());\nregisterEditorCommand(new CursorWordEndLeftSelect());\nregisterEditorCommand(new CursorWordLeftSelect());\nregisterEditorCommand(new CursorWordStartRight());\nregisterEditorCommand(new CursorWordEndRight());\nregisterEditorCommand(new CursorWordRight());\nregisterEditorCommand(new CursorWordStartRightSelect());\nregisterEditorCommand(new CursorWordEndRightSelect());\nregisterEditorCommand(new CursorWordRightSelect());\nregisterEditorCommand(new CursorWordAccessibilityLeft());\nregisterEditorCommand(new CursorWordAccessibilityLeftSelect());\nregisterEditorCommand(new CursorWordAccessibilityRight());\nregisterEditorCommand(new CursorWordAccessibilityRightSelect());\nregisterEditorCommand(new DeleteWordStartLeft());\nregisterEditorCommand(new DeleteWordEndLeft());\nregisterEditorCommand(new DeleteWordLeft());\nregisterEditorCommand(new DeleteWordStartRight());\nregisterEditorCommand(new DeleteWordEndRight());\nregisterEditorCommand(new DeleteWordRight());\nregisterEditorAction(DeleteInsideWord);\n"]},"metadata":{},"sourceType":"module"}