{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { equals } from '../../../base/common/arrays.js';\nimport { CancellationTokenSource } from '../../../base/common/cancellation.js';\nimport { onUnexpectedExternalError } from '../../../base/common/errors.js';\nimport { Iterable } from '../../../base/common/iterator.js';\nimport { LRUCache } from '../../../base/common/map.js';\nimport { Range } from '../../common/core/range.js';\nimport { DocumentSymbolProviderRegistry } from '../../common/modes.js';\nimport { LanguageFeatureRequestDelays } from '../../common/modes/languageFeatureRegistry.js';\nexport class TreeElement {\n  remove() {\n    if (this.parent) {\n      this.parent.children.delete(this.id);\n    }\n  }\n\n  static findId(candidate, container) {\n    // complex id-computation which contains the origin/extension,\n    // the parent path, and some dedupe logic when names collide\n    let candidateId;\n\n    if (typeof candidate === 'string') {\n      candidateId = `${container.id}/${candidate}`;\n    } else {\n      candidateId = `${container.id}/${candidate.name}`;\n\n      if (container.children.get(candidateId) !== undefined) {\n        candidateId = `${container.id}/${candidate.name}_${candidate.range.startLineNumber}_${candidate.range.startColumn}`;\n      }\n    }\n\n    let id = candidateId;\n\n    for (let i = 0; container.children.get(id) !== undefined; i++) {\n      id = `${candidateId}_${i}`;\n    }\n\n    return id;\n  }\n\n  static empty(element) {\n    return element.children.size === 0;\n  }\n\n}\nexport class OutlineElement extends TreeElement {\n  constructor(id, parent, symbol) {\n    super();\n    this.id = id;\n    this.parent = parent;\n    this.symbol = symbol;\n    this.children = new Map();\n  }\n\n}\nexport class OutlineGroup extends TreeElement {\n  constructor(id, parent, label, order) {\n    super();\n    this.id = id;\n    this.parent = parent;\n    this.label = label;\n    this.order = order;\n    this.children = new Map();\n  }\n\n}\nexport class OutlineModel extends TreeElement {\n  constructor(uri) {\n    super();\n    this.uri = uri;\n    this.id = 'root';\n    this.parent = undefined;\n    this._groups = new Map();\n    this.children = new Map();\n    this.id = 'root';\n    this.parent = undefined;\n  }\n\n  static create(textModel, token) {\n    let key = this._keys.for(textModel, true);\n\n    let data = OutlineModel._requests.get(key);\n\n    if (!data) {\n      let source = new CancellationTokenSource();\n      data = {\n        promiseCnt: 0,\n        source,\n        promise: OutlineModel._create(textModel, source.token),\n        model: undefined\n      };\n\n      OutlineModel._requests.set(key, data); // keep moving average of request durations\n\n\n      const now = Date.now();\n      data.promise.then(() => {\n        this._requestDurations.update(textModel, Date.now() - now);\n      });\n    }\n\n    if (data.model) {\n      // resolved -> return data\n      return Promise.resolve(data.model);\n    } // increase usage counter\n\n\n    data.promiseCnt += 1;\n    token.onCancellationRequested(() => {\n      // last -> cancel provider request, remove cached promise\n      if (--data.promiseCnt === 0) {\n        data.source.cancel();\n\n        OutlineModel._requests.delete(key);\n      }\n    });\n    return new Promise((resolve, reject) => {\n      data.promise.then(model => {\n        data.model = model;\n        resolve(model);\n      }, err => {\n        OutlineModel._requests.delete(key);\n\n        reject(err);\n      });\n    });\n  }\n\n  static _create(textModel, token) {\n    const cts = new CancellationTokenSource(token);\n    const result = new OutlineModel(textModel.uri);\n    const provider = DocumentSymbolProviderRegistry.ordered(textModel);\n    const promises = provider.map((provider, index) => {\n      var _a;\n\n      let id = TreeElement.findId(`provider_${index}`, result);\n      let group = new OutlineGroup(id, result, (_a = provider.displayName) !== null && _a !== void 0 ? _a : 'Unknown Outline Provider', index);\n      return Promise.resolve(provider.provideDocumentSymbols(textModel, cts.token)).then(result => {\n        for (const info of result || []) {\n          OutlineModel._makeOutlineElement(info, group);\n        }\n\n        return group;\n      }, err => {\n        onUnexpectedExternalError(err);\n        return group;\n      }).then(group => {\n        if (!TreeElement.empty(group)) {\n          result._groups.set(id, group);\n        } else {\n          group.remove();\n        }\n      });\n    });\n    const listener = DocumentSymbolProviderRegistry.onDidChange(() => {\n      const newProvider = DocumentSymbolProviderRegistry.ordered(textModel);\n\n      if (!equals(newProvider, provider)) {\n        cts.cancel();\n      }\n    });\n    return Promise.all(promises).then(() => {\n      if (cts.token.isCancellationRequested && !token.isCancellationRequested) {\n        return OutlineModel._create(textModel, token);\n      } else {\n        return result._compact();\n      }\n    }).finally(() => {\n      listener.dispose();\n    });\n  }\n\n  static _makeOutlineElement(info, container) {\n    let id = TreeElement.findId(info, container);\n    let res = new OutlineElement(id, container, info);\n\n    if (info.children) {\n      for (const childInfo of info.children) {\n        OutlineModel._makeOutlineElement(childInfo, res);\n      }\n    }\n\n    container.children.set(res.id, res);\n  }\n\n  _compact() {\n    let count = 0;\n\n    for (const [key, group] of this._groups) {\n      if (group.children.size === 0) {\n        // empty\n        this._groups.delete(key);\n      } else {\n        count += 1;\n      }\n    }\n\n    if (count !== 1) {\n      //\n      this.children = this._groups;\n    } else {\n      // adopt all elements of the first group\n      let group = Iterable.first(this._groups.values());\n\n      for (let [, child] of group.children) {\n        child.parent = this;\n        this.children.set(child.id, child);\n      }\n    }\n\n    return this;\n  }\n\n  getTopLevelSymbols() {\n    const roots = [];\n\n    for (const child of this.children.values()) {\n      if (child instanceof OutlineElement) {\n        roots.push(child.symbol);\n      } else {\n        roots.push(...Iterable.map(child.children.values(), child => child.symbol));\n      }\n    }\n\n    return roots.sort((a, b) => Range.compareRangesUsingStarts(a.range, b.range));\n  }\n\n  asListOfDocumentSymbols() {\n    const roots = this.getTopLevelSymbols();\n    const bucket = [];\n\n    OutlineModel._flattenDocumentSymbols(bucket, roots, '');\n\n    return bucket.sort((a, b) => Range.compareRangesUsingStarts(a.range, b.range));\n  }\n\n  static _flattenDocumentSymbols(bucket, entries, overrideContainerLabel) {\n    for (const entry of entries) {\n      bucket.push({\n        kind: entry.kind,\n        tags: entry.tags,\n        name: entry.name,\n        detail: entry.detail,\n        containerName: entry.containerName || overrideContainerLabel,\n        range: entry.range,\n        selectionRange: entry.selectionRange,\n        children: undefined // we flatten it...\n\n      }); // Recurse over children\n\n      if (entry.children) {\n        OutlineModel._flattenDocumentSymbols(bucket, entry.children, entry.name);\n      }\n    }\n  }\n\n}\nOutlineModel._requestDurations = new LanguageFeatureRequestDelays(DocumentSymbolProviderRegistry, 350);\nOutlineModel._requests = new LRUCache(9, 0.75);\nOutlineModel._keys = new class {\n  constructor() {\n    this._counter = 1;\n    this._data = new WeakMap();\n  }\n\n  for(textModel, version) {\n    return `${textModel.id}/${version ? textModel.getVersionId() : ''}/${this._hash(DocumentSymbolProviderRegistry.all(textModel))}`;\n  }\n\n  _hash(providers) {\n    let result = '';\n\n    for (const provider of providers) {\n      let n = this._data.get(provider);\n\n      if (typeof n === 'undefined') {\n        n = this._counter++;\n\n        this._data.set(provider, n);\n      }\n\n      result += n;\n    }\n\n    return result;\n  }\n\n}();","map":{"version":3,"sources":["/home/umut/Documents/cs/cs410/Project2Group14/node_modules/monaco-editor/esm/vs/editor/contrib/documentSymbols/outlineModel.js"],"names":["equals","CancellationTokenSource","onUnexpectedExternalError","Iterable","LRUCache","Range","DocumentSymbolProviderRegistry","LanguageFeatureRequestDelays","TreeElement","remove","parent","children","delete","id","findId","candidate","container","candidateId","name","get","undefined","range","startLineNumber","startColumn","i","empty","element","size","OutlineElement","constructor","symbol","Map","OutlineGroup","label","order","OutlineModel","uri","_groups","create","textModel","token","key","_keys","for","data","_requests","source","promiseCnt","promise","_create","model","set","now","Date","then","_requestDurations","update","Promise","resolve","onCancellationRequested","cancel","reject","err","cts","result","provider","ordered","promises","map","index","_a","group","displayName","provideDocumentSymbols","info","_makeOutlineElement","listener","onDidChange","newProvider","all","isCancellationRequested","_compact","finally","dispose","res","childInfo","count","first","values","child","getTopLevelSymbols","roots","push","sort","a","b","compareRangesUsingStarts","asListOfDocumentSymbols","bucket","_flattenDocumentSymbols","entries","overrideContainerLabel","entry","kind","tags","detail","containerName","selectionRange","_counter","_data","WeakMap","version","getVersionId","_hash","providers","n"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { equals } from '../../../base/common/arrays.js';\nimport { CancellationTokenSource } from '../../../base/common/cancellation.js';\nimport { onUnexpectedExternalError } from '../../../base/common/errors.js';\nimport { Iterable } from '../../../base/common/iterator.js';\nimport { LRUCache } from '../../../base/common/map.js';\nimport { Range } from '../../common/core/range.js';\nimport { DocumentSymbolProviderRegistry } from '../../common/modes.js';\nimport { LanguageFeatureRequestDelays } from '../../common/modes/languageFeatureRegistry.js';\nexport class TreeElement {\n    remove() {\n        if (this.parent) {\n            this.parent.children.delete(this.id);\n        }\n    }\n    static findId(candidate, container) {\n        // complex id-computation which contains the origin/extension,\n        // the parent path, and some dedupe logic when names collide\n        let candidateId;\n        if (typeof candidate === 'string') {\n            candidateId = `${container.id}/${candidate}`;\n        }\n        else {\n            candidateId = `${container.id}/${candidate.name}`;\n            if (container.children.get(candidateId) !== undefined) {\n                candidateId = `${container.id}/${candidate.name}_${candidate.range.startLineNumber}_${candidate.range.startColumn}`;\n            }\n        }\n        let id = candidateId;\n        for (let i = 0; container.children.get(id) !== undefined; i++) {\n            id = `${candidateId}_${i}`;\n        }\n        return id;\n    }\n    static empty(element) {\n        return element.children.size === 0;\n    }\n}\nexport class OutlineElement extends TreeElement {\n    constructor(id, parent, symbol) {\n        super();\n        this.id = id;\n        this.parent = parent;\n        this.symbol = symbol;\n        this.children = new Map();\n    }\n}\nexport class OutlineGroup extends TreeElement {\n    constructor(id, parent, label, order) {\n        super();\n        this.id = id;\n        this.parent = parent;\n        this.label = label;\n        this.order = order;\n        this.children = new Map();\n    }\n}\nexport class OutlineModel extends TreeElement {\n    constructor(uri) {\n        super();\n        this.uri = uri;\n        this.id = 'root';\n        this.parent = undefined;\n        this._groups = new Map();\n        this.children = new Map();\n        this.id = 'root';\n        this.parent = undefined;\n    }\n    static create(textModel, token) {\n        let key = this._keys.for(textModel, true);\n        let data = OutlineModel._requests.get(key);\n        if (!data) {\n            let source = new CancellationTokenSource();\n            data = {\n                promiseCnt: 0,\n                source,\n                promise: OutlineModel._create(textModel, source.token),\n                model: undefined,\n            };\n            OutlineModel._requests.set(key, data);\n            // keep moving average of request durations\n            const now = Date.now();\n            data.promise.then(() => {\n                this._requestDurations.update(textModel, Date.now() - now);\n            });\n        }\n        if (data.model) {\n            // resolved -> return data\n            return Promise.resolve(data.model);\n        }\n        // increase usage counter\n        data.promiseCnt += 1;\n        token.onCancellationRequested(() => {\n            // last -> cancel provider request, remove cached promise\n            if (--data.promiseCnt === 0) {\n                data.source.cancel();\n                OutlineModel._requests.delete(key);\n            }\n        });\n        return new Promise((resolve, reject) => {\n            data.promise.then(model => {\n                data.model = model;\n                resolve(model);\n            }, err => {\n                OutlineModel._requests.delete(key);\n                reject(err);\n            });\n        });\n    }\n    static _create(textModel, token) {\n        const cts = new CancellationTokenSource(token);\n        const result = new OutlineModel(textModel.uri);\n        const provider = DocumentSymbolProviderRegistry.ordered(textModel);\n        const promises = provider.map((provider, index) => {\n            var _a;\n            let id = TreeElement.findId(`provider_${index}`, result);\n            let group = new OutlineGroup(id, result, (_a = provider.displayName) !== null && _a !== void 0 ? _a : 'Unknown Outline Provider', index);\n            return Promise.resolve(provider.provideDocumentSymbols(textModel, cts.token)).then(result => {\n                for (const info of result || []) {\n                    OutlineModel._makeOutlineElement(info, group);\n                }\n                return group;\n            }, err => {\n                onUnexpectedExternalError(err);\n                return group;\n            }).then(group => {\n                if (!TreeElement.empty(group)) {\n                    result._groups.set(id, group);\n                }\n                else {\n                    group.remove();\n                }\n            });\n        });\n        const listener = DocumentSymbolProviderRegistry.onDidChange(() => {\n            const newProvider = DocumentSymbolProviderRegistry.ordered(textModel);\n            if (!equals(newProvider, provider)) {\n                cts.cancel();\n            }\n        });\n        return Promise.all(promises).then(() => {\n            if (cts.token.isCancellationRequested && !token.isCancellationRequested) {\n                return OutlineModel._create(textModel, token);\n            }\n            else {\n                return result._compact();\n            }\n        }).finally(() => {\n            listener.dispose();\n        });\n    }\n    static _makeOutlineElement(info, container) {\n        let id = TreeElement.findId(info, container);\n        let res = new OutlineElement(id, container, info);\n        if (info.children) {\n            for (const childInfo of info.children) {\n                OutlineModel._makeOutlineElement(childInfo, res);\n            }\n        }\n        container.children.set(res.id, res);\n    }\n    _compact() {\n        let count = 0;\n        for (const [key, group] of this._groups) {\n            if (group.children.size === 0) { // empty\n                this._groups.delete(key);\n            }\n            else {\n                count += 1;\n            }\n        }\n        if (count !== 1) {\n            //\n            this.children = this._groups;\n        }\n        else {\n            // adopt all elements of the first group\n            let group = Iterable.first(this._groups.values());\n            for (let [, child] of group.children) {\n                child.parent = this;\n                this.children.set(child.id, child);\n            }\n        }\n        return this;\n    }\n    getTopLevelSymbols() {\n        const roots = [];\n        for (const child of this.children.values()) {\n            if (child instanceof OutlineElement) {\n                roots.push(child.symbol);\n            }\n            else {\n                roots.push(...Iterable.map(child.children.values(), child => child.symbol));\n            }\n        }\n        return roots.sort((a, b) => Range.compareRangesUsingStarts(a.range, b.range));\n    }\n    asListOfDocumentSymbols() {\n        const roots = this.getTopLevelSymbols();\n        const bucket = [];\n        OutlineModel._flattenDocumentSymbols(bucket, roots, '');\n        return bucket.sort((a, b) => Range.compareRangesUsingStarts(a.range, b.range));\n    }\n    static _flattenDocumentSymbols(bucket, entries, overrideContainerLabel) {\n        for (const entry of entries) {\n            bucket.push({\n                kind: entry.kind,\n                tags: entry.tags,\n                name: entry.name,\n                detail: entry.detail,\n                containerName: entry.containerName || overrideContainerLabel,\n                range: entry.range,\n                selectionRange: entry.selectionRange,\n                children: undefined, // we flatten it...\n            });\n            // Recurse over children\n            if (entry.children) {\n                OutlineModel._flattenDocumentSymbols(bucket, entry.children, entry.name);\n            }\n        }\n    }\n}\nOutlineModel._requestDurations = new LanguageFeatureRequestDelays(DocumentSymbolProviderRegistry, 350);\nOutlineModel._requests = new LRUCache(9, 0.75);\nOutlineModel._keys = new class {\n    constructor() {\n        this._counter = 1;\n        this._data = new WeakMap();\n    }\n    for(textModel, version) {\n        return `${textModel.id}/${version ? textModel.getVersionId() : ''}/${this._hash(DocumentSymbolProviderRegistry.all(textModel))}`;\n    }\n    _hash(providers) {\n        let result = '';\n        for (const provider of providers) {\n            let n = this._data.get(provider);\n            if (typeof n === 'undefined') {\n                n = this._counter++;\n                this._data.set(provider, n);\n            }\n            result += n;\n        }\n        return result;\n    }\n};\n"]},"metadata":{},"sourceType":"module"}