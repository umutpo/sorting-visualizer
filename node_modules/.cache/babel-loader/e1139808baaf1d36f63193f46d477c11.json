{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { InlineDecoration, ViewModelDecoration } from './viewModel.js';\nimport { filterValidationDecorations } from '../config/editorOptions.js';\nexport class ViewModelDecorations {\n  constructor(editorId, model, configuration, linesCollection, coordinatesConverter) {\n    this.editorId = editorId;\n    this.model = model;\n    this.configuration = configuration;\n    this._linesCollection = linesCollection;\n    this._coordinatesConverter = coordinatesConverter;\n    this._decorationsCache = Object.create(null);\n    this._cachedModelDecorationsResolver = null;\n    this._cachedModelDecorationsResolverViewRange = null;\n  }\n\n  _clearCachedModelDecorationsResolver() {\n    this._cachedModelDecorationsResolver = null;\n    this._cachedModelDecorationsResolverViewRange = null;\n  }\n\n  dispose() {\n    this._decorationsCache = Object.create(null);\n\n    this._clearCachedModelDecorationsResolver();\n  }\n\n  reset() {\n    this._decorationsCache = Object.create(null);\n\n    this._clearCachedModelDecorationsResolver();\n  }\n\n  onModelDecorationsChanged() {\n    this._decorationsCache = Object.create(null);\n\n    this._clearCachedModelDecorationsResolver();\n  }\n\n  onLineMappingChanged() {\n    this._decorationsCache = Object.create(null);\n\n    this._clearCachedModelDecorationsResolver();\n  }\n\n  _getOrCreateViewModelDecoration(modelDecoration) {\n    const id = modelDecoration.id;\n    let r = this._decorationsCache[id];\n\n    if (!r) {\n      const modelRange = modelDecoration.range;\n      const options = modelDecoration.options;\n      let viewRange;\n\n      if (options.isWholeLine) {\n        const start = this._coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.startLineNumber, 1), 0\n        /* Left */\n        );\n\n        const end = this._coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.endLineNumber, this.model.getLineMaxColumn(modelRange.endLineNumber)), 1\n        /* Right */\n        );\n\n        viewRange = new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n      } else {\n        // For backwards compatibility reasons, we want injected text before any decoration.\n        // Thus, move decorations to the right.\n        viewRange = this._coordinatesConverter.convertModelRangeToViewRange(modelRange, 1\n        /* Right */\n        );\n      }\n\n      r = new ViewModelDecoration(viewRange, options);\n      this._decorationsCache[id] = r;\n    }\n\n    return r;\n  }\n\n  getDecorationsViewportData(viewRange) {\n    let cacheIsValid = this._cachedModelDecorationsResolver !== null;\n    cacheIsValid = cacheIsValid && viewRange.equalsRange(this._cachedModelDecorationsResolverViewRange);\n\n    if (!cacheIsValid) {\n      this._cachedModelDecorationsResolver = this._getDecorationsViewportData(viewRange);\n      this._cachedModelDecorationsResolverViewRange = viewRange;\n    }\n\n    return this._cachedModelDecorationsResolver;\n  }\n\n  _getDecorationsViewportData(viewportRange) {\n    const modelDecorations = this._linesCollection.getDecorationsInRange(viewportRange, this.editorId, filterValidationDecorations(this.configuration.options));\n\n    const startLineNumber = viewportRange.startLineNumber;\n    const endLineNumber = viewportRange.endLineNumber;\n    let decorationsInViewport = [],\n        decorationsInViewportLen = 0;\n    let inlineDecorations = [];\n\n    for (let j = startLineNumber; j <= endLineNumber; j++) {\n      inlineDecorations[j - startLineNumber] = [];\n    }\n\n    for (let i = 0, len = modelDecorations.length; i < len; i++) {\n      let modelDecoration = modelDecorations[i];\n      let decorationOptions = modelDecoration.options;\n\n      let viewModelDecoration = this._getOrCreateViewModelDecoration(modelDecoration);\n\n      let viewRange = viewModelDecoration.range;\n      decorationsInViewport[decorationsInViewportLen++] = viewModelDecoration;\n\n      if (decorationOptions.inlineClassName) {\n        let inlineDecoration = new InlineDecoration(viewRange, decorationOptions.inlineClassName, decorationOptions.inlineClassNameAffectsLetterSpacing ? 3\n        /* RegularAffectingLetterSpacing */\n        : 0\n        /* Regular */\n        );\n        let intersectedStartLineNumber = Math.max(startLineNumber, viewRange.startLineNumber);\n        let intersectedEndLineNumber = Math.min(endLineNumber, viewRange.endLineNumber);\n\n        for (let j = intersectedStartLineNumber; j <= intersectedEndLineNumber; j++) {\n          inlineDecorations[j - startLineNumber].push(inlineDecoration);\n        }\n      }\n\n      if (decorationOptions.beforeContentClassName) {\n        if (startLineNumber <= viewRange.startLineNumber && viewRange.startLineNumber <= endLineNumber) {\n          let inlineDecoration = new InlineDecoration(new Range(viewRange.startLineNumber, viewRange.startColumn, viewRange.startLineNumber, viewRange.startColumn), decorationOptions.beforeContentClassName, 1\n          /* Before */\n          );\n          inlineDecorations[viewRange.startLineNumber - startLineNumber].push(inlineDecoration);\n        }\n      }\n\n      if (decorationOptions.afterContentClassName) {\n        if (startLineNumber <= viewRange.endLineNumber && viewRange.endLineNumber <= endLineNumber) {\n          let inlineDecoration = new InlineDecoration(new Range(viewRange.endLineNumber, viewRange.endColumn, viewRange.endLineNumber, viewRange.endColumn), decorationOptions.afterContentClassName, 2\n          /* After */\n          );\n          inlineDecorations[viewRange.endLineNumber - startLineNumber].push(inlineDecoration);\n        }\n      }\n    }\n\n    return {\n      decorations: decorationsInViewport,\n      inlineDecorations: inlineDecorations\n    };\n  }\n\n}","map":{"version":3,"sources":["/home/umut/Documents/cs/cs410/Project2Group14/node_modules/monaco-editor/esm/vs/editor/common/viewModel/viewModelDecorations.js"],"names":["Position","Range","InlineDecoration","ViewModelDecoration","filterValidationDecorations","ViewModelDecorations","constructor","editorId","model","configuration","linesCollection","coordinatesConverter","_linesCollection","_coordinatesConverter","_decorationsCache","Object","create","_cachedModelDecorationsResolver","_cachedModelDecorationsResolverViewRange","_clearCachedModelDecorationsResolver","dispose","reset","onModelDecorationsChanged","onLineMappingChanged","_getOrCreateViewModelDecoration","modelDecoration","id","r","modelRange","range","options","viewRange","isWholeLine","start","convertModelPositionToViewPosition","startLineNumber","end","endLineNumber","getLineMaxColumn","lineNumber","column","convertModelRangeToViewRange","getDecorationsViewportData","cacheIsValid","equalsRange","_getDecorationsViewportData","viewportRange","modelDecorations","getDecorationsInRange","decorationsInViewport","decorationsInViewportLen","inlineDecorations","j","i","len","length","decorationOptions","viewModelDecoration","inlineClassName","inlineDecoration","inlineClassNameAffectsLetterSpacing","intersectedStartLineNumber","Math","max","intersectedEndLineNumber","min","push","beforeContentClassName","startColumn","afterContentClassName","endColumn","decorations"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { InlineDecoration, ViewModelDecoration } from './viewModel.js';\nimport { filterValidationDecorations } from '../config/editorOptions.js';\nexport class ViewModelDecorations {\n    constructor(editorId, model, configuration, linesCollection, coordinatesConverter) {\n        this.editorId = editorId;\n        this.model = model;\n        this.configuration = configuration;\n        this._linesCollection = linesCollection;\n        this._coordinatesConverter = coordinatesConverter;\n        this._decorationsCache = Object.create(null);\n        this._cachedModelDecorationsResolver = null;\n        this._cachedModelDecorationsResolverViewRange = null;\n    }\n    _clearCachedModelDecorationsResolver() {\n        this._cachedModelDecorationsResolver = null;\n        this._cachedModelDecorationsResolverViewRange = null;\n    }\n    dispose() {\n        this._decorationsCache = Object.create(null);\n        this._clearCachedModelDecorationsResolver();\n    }\n    reset() {\n        this._decorationsCache = Object.create(null);\n        this._clearCachedModelDecorationsResolver();\n    }\n    onModelDecorationsChanged() {\n        this._decorationsCache = Object.create(null);\n        this._clearCachedModelDecorationsResolver();\n    }\n    onLineMappingChanged() {\n        this._decorationsCache = Object.create(null);\n        this._clearCachedModelDecorationsResolver();\n    }\n    _getOrCreateViewModelDecoration(modelDecoration) {\n        const id = modelDecoration.id;\n        let r = this._decorationsCache[id];\n        if (!r) {\n            const modelRange = modelDecoration.range;\n            const options = modelDecoration.options;\n            let viewRange;\n            if (options.isWholeLine) {\n                const start = this._coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.startLineNumber, 1), 0 /* Left */);\n                const end = this._coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.endLineNumber, this.model.getLineMaxColumn(modelRange.endLineNumber)), 1 /* Right */);\n                viewRange = new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n            }\n            else {\n                // For backwards compatibility reasons, we want injected text before any decoration.\n                // Thus, move decorations to the right.\n                viewRange = this._coordinatesConverter.convertModelRangeToViewRange(modelRange, 1 /* Right */);\n            }\n            r = new ViewModelDecoration(viewRange, options);\n            this._decorationsCache[id] = r;\n        }\n        return r;\n    }\n    getDecorationsViewportData(viewRange) {\n        let cacheIsValid = (this._cachedModelDecorationsResolver !== null);\n        cacheIsValid = cacheIsValid && (viewRange.equalsRange(this._cachedModelDecorationsResolverViewRange));\n        if (!cacheIsValid) {\n            this._cachedModelDecorationsResolver = this._getDecorationsViewportData(viewRange);\n            this._cachedModelDecorationsResolverViewRange = viewRange;\n        }\n        return this._cachedModelDecorationsResolver;\n    }\n    _getDecorationsViewportData(viewportRange) {\n        const modelDecorations = this._linesCollection.getDecorationsInRange(viewportRange, this.editorId, filterValidationDecorations(this.configuration.options));\n        const startLineNumber = viewportRange.startLineNumber;\n        const endLineNumber = viewportRange.endLineNumber;\n        let decorationsInViewport = [], decorationsInViewportLen = 0;\n        let inlineDecorations = [];\n        for (let j = startLineNumber; j <= endLineNumber; j++) {\n            inlineDecorations[j - startLineNumber] = [];\n        }\n        for (let i = 0, len = modelDecorations.length; i < len; i++) {\n            let modelDecoration = modelDecorations[i];\n            let decorationOptions = modelDecoration.options;\n            let viewModelDecoration = this._getOrCreateViewModelDecoration(modelDecoration);\n            let viewRange = viewModelDecoration.range;\n            decorationsInViewport[decorationsInViewportLen++] = viewModelDecoration;\n            if (decorationOptions.inlineClassName) {\n                let inlineDecoration = new InlineDecoration(viewRange, decorationOptions.inlineClassName, decorationOptions.inlineClassNameAffectsLetterSpacing ? 3 /* RegularAffectingLetterSpacing */ : 0 /* Regular */);\n                let intersectedStartLineNumber = Math.max(startLineNumber, viewRange.startLineNumber);\n                let intersectedEndLineNumber = Math.min(endLineNumber, viewRange.endLineNumber);\n                for (let j = intersectedStartLineNumber; j <= intersectedEndLineNumber; j++) {\n                    inlineDecorations[j - startLineNumber].push(inlineDecoration);\n                }\n            }\n            if (decorationOptions.beforeContentClassName) {\n                if (startLineNumber <= viewRange.startLineNumber && viewRange.startLineNumber <= endLineNumber) {\n                    let inlineDecoration = new InlineDecoration(new Range(viewRange.startLineNumber, viewRange.startColumn, viewRange.startLineNumber, viewRange.startColumn), decorationOptions.beforeContentClassName, 1 /* Before */);\n                    inlineDecorations[viewRange.startLineNumber - startLineNumber].push(inlineDecoration);\n                }\n            }\n            if (decorationOptions.afterContentClassName) {\n                if (startLineNumber <= viewRange.endLineNumber && viewRange.endLineNumber <= endLineNumber) {\n                    let inlineDecoration = new InlineDecoration(new Range(viewRange.endLineNumber, viewRange.endColumn, viewRange.endLineNumber, viewRange.endColumn), decorationOptions.afterContentClassName, 2 /* After */);\n                    inlineDecorations[viewRange.endLineNumber - startLineNumber].push(inlineDecoration);\n                }\n            }\n        }\n        return {\n            decorations: decorationsInViewport,\n            inlineDecorations: inlineDecorations\n        };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}