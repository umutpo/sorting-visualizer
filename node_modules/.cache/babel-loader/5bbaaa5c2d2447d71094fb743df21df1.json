{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { asCSSPropertyValue, asCSSUrl } from '../../../base/browser/dom.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { getIconRegistry } from '../common/iconRegistry.js';\nimport { ThemeIcon } from '../common/themeService.js';\nexport function getIconsStyleSheet() {\n  const onDidChangeEmmiter = new Emitter();\n  const iconRegistry = getIconRegistry();\n  iconRegistry.onDidChange(() => onDidChangeEmmiter.fire());\n  return {\n    onDidChange: onDidChangeEmmiter.event,\n\n    getCSS() {\n      const usedFontIds = {};\n\n      const formatIconRule = contribution => {\n        let definition = contribution.defaults;\n\n        while (ThemeIcon.isThemeIcon(definition)) {\n          const c = iconRegistry.getIcon(definition.id);\n\n          if (!c) {\n            return undefined;\n          }\n\n          definition = c.defaults;\n        }\n\n        const fontId = definition.fontId;\n\n        if (fontId) {\n          const fontContribution = iconRegistry.getIconFont(fontId);\n\n          if (fontContribution) {\n            usedFontIds[fontId] = fontContribution;\n            return `.codicon-${contribution.id}:before { content: '${definition.fontCharacter}'; font-family: ${asCSSPropertyValue(fontId)}; }`;\n          }\n        }\n\n        return `.codicon-${contribution.id}:before { content: '${definition.fontCharacter}'; }`;\n      };\n\n      const rules = [];\n\n      for (let contribution of iconRegistry.getIcons()) {\n        const rule = formatIconRule(contribution);\n\n        if (rule) {\n          rules.push(rule);\n        }\n      }\n\n      for (let id in usedFontIds) {\n        const fontContribution = usedFontIds[id];\n        const src = fontContribution.definition.src.map(l => `${asCSSUrl(l.location)} format('${l.format}')`).join(', ');\n        rules.push(`@font-face { src: ${src}; font-family: ${asCSSPropertyValue(id)}; font-display: block; }`);\n      }\n\n      return rules.join('\\n');\n    }\n\n  };\n}","map":{"version":3,"sources":["/home/umut/Documents/cs/cs410/Project2Group14/node_modules/monaco-editor/esm/vs/platform/theme/browser/iconsStyleSheet.js"],"names":["asCSSPropertyValue","asCSSUrl","Emitter","getIconRegistry","ThemeIcon","getIconsStyleSheet","onDidChangeEmmiter","iconRegistry","onDidChange","fire","event","getCSS","usedFontIds","formatIconRule","contribution","definition","defaults","isThemeIcon","c","getIcon","id","undefined","fontId","fontContribution","getIconFont","fontCharacter","rules","getIcons","rule","push","src","map","l","location","format","join"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,kBAAT,EAA6BC,QAA7B,QAA6C,8BAA7C;AACA,SAASC,OAAT,QAAwB,+BAAxB;AACA,SAASC,eAAT,QAAgC,2BAAhC;AACA,SAASC,SAAT,QAA0B,2BAA1B;AACA,OAAO,SAASC,kBAAT,GAA8B;AACjC,QAAMC,kBAAkB,GAAG,IAAIJ,OAAJ,EAA3B;AACA,QAAMK,YAAY,GAAGJ,eAAe,EAApC;AACAI,EAAAA,YAAY,CAACC,WAAb,CAAyB,MAAMF,kBAAkB,CAACG,IAAnB,EAA/B;AACA,SAAO;AACHD,IAAAA,WAAW,EAAEF,kBAAkB,CAACI,KAD7B;;AAEHC,IAAAA,MAAM,GAAG;AACL,YAAMC,WAAW,GAAG,EAApB;;AACA,YAAMC,cAAc,GAAIC,YAAD,IAAkB;AACrC,YAAIC,UAAU,GAAGD,YAAY,CAACE,QAA9B;;AACA,eAAOZ,SAAS,CAACa,WAAV,CAAsBF,UAAtB,CAAP,EAA0C;AACtC,gBAAMG,CAAC,GAAGX,YAAY,CAACY,OAAb,CAAqBJ,UAAU,CAACK,EAAhC,CAAV;;AACA,cAAI,CAACF,CAAL,EAAQ;AACJ,mBAAOG,SAAP;AACH;;AACDN,UAAAA,UAAU,GAAGG,CAAC,CAACF,QAAf;AACH;;AACD,cAAMM,MAAM,GAAGP,UAAU,CAACO,MAA1B;;AACA,YAAIA,MAAJ,EAAY;AACR,gBAAMC,gBAAgB,GAAGhB,YAAY,CAACiB,WAAb,CAAyBF,MAAzB,CAAzB;;AACA,cAAIC,gBAAJ,EAAsB;AAClBX,YAAAA,WAAW,CAACU,MAAD,CAAX,GAAsBC,gBAAtB;AACA,mBAAQ,YAAWT,YAAY,CAACM,EAAG,uBAAsBL,UAAU,CAACU,aAAc,mBAAkBzB,kBAAkB,CAACsB,MAAD,CAAS,KAA/H;AACH;AACJ;;AACD,eAAQ,YAAWR,YAAY,CAACM,EAAG,uBAAsBL,UAAU,CAACU,aAAc,MAAlF;AACH,OAlBD;;AAmBA,YAAMC,KAAK,GAAG,EAAd;;AACA,WAAK,IAAIZ,YAAT,IAAyBP,YAAY,CAACoB,QAAb,EAAzB,EAAkD;AAC9C,cAAMC,IAAI,GAAGf,cAAc,CAACC,YAAD,CAA3B;;AACA,YAAIc,IAAJ,EAAU;AACNF,UAAAA,KAAK,CAACG,IAAN,CAAWD,IAAX;AACH;AACJ;;AACD,WAAK,IAAIR,EAAT,IAAeR,WAAf,EAA4B;AACxB,cAAMW,gBAAgB,GAAGX,WAAW,CAACQ,EAAD,CAApC;AACA,cAAMU,GAAG,GAAGP,gBAAgB,CAACR,UAAjB,CAA4Be,GAA5B,CAAgCC,GAAhC,CAAoCC,CAAC,IAAK,GAAE/B,QAAQ,CAAC+B,CAAC,CAACC,QAAH,CAAa,YAAWD,CAAC,CAACE,MAAO,IAArF,EAA0FC,IAA1F,CAA+F,IAA/F,CAAZ;AACAT,QAAAA,KAAK,CAACG,IAAN,CAAY,qBAAoBC,GAAI,kBAAiB9B,kBAAkB,CAACoB,EAAD,CAAK,0BAA5E;AACH;;AACD,aAAOM,KAAK,CAACS,IAAN,CAAW,IAAX,CAAP;AACH;;AApCE,GAAP;AAsCH","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { asCSSPropertyValue, asCSSUrl } from '../../../base/browser/dom.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { getIconRegistry } from '../common/iconRegistry.js';\nimport { ThemeIcon } from '../common/themeService.js';\nexport function getIconsStyleSheet() {\n    const onDidChangeEmmiter = new Emitter();\n    const iconRegistry = getIconRegistry();\n    iconRegistry.onDidChange(() => onDidChangeEmmiter.fire());\n    return {\n        onDidChange: onDidChangeEmmiter.event,\n        getCSS() {\n            const usedFontIds = {};\n            const formatIconRule = (contribution) => {\n                let definition = contribution.defaults;\n                while (ThemeIcon.isThemeIcon(definition)) {\n                    const c = iconRegistry.getIcon(definition.id);\n                    if (!c) {\n                        return undefined;\n                    }\n                    definition = c.defaults;\n                }\n                const fontId = definition.fontId;\n                if (fontId) {\n                    const fontContribution = iconRegistry.getIconFont(fontId);\n                    if (fontContribution) {\n                        usedFontIds[fontId] = fontContribution;\n                        return `.codicon-${contribution.id}:before { content: '${definition.fontCharacter}'; font-family: ${asCSSPropertyValue(fontId)}; }`;\n                    }\n                }\n                return `.codicon-${contribution.id}:before { content: '${definition.fontCharacter}'; }`;\n            };\n            const rules = [];\n            for (let contribution of iconRegistry.getIcons()) {\n                const rule = formatIconRule(contribution);\n                if (rule) {\n                    rules.push(rule);\n                }\n            }\n            for (let id in usedFontIds) {\n                const fontContribution = usedFontIds[id];\n                const src = fontContribution.definition.src.map(l => `${asCSSUrl(l.location)} format('${l.format}')`).join(', ');\n                rules.push(`@font-face { src: ${src}; font-family: ${asCSSPropertyValue(id)}; font-display: block; }`);\n            }\n            return rules.join('\\n');\n        }\n    };\n}\n"]},"metadata":{},"sourceType":"module"}