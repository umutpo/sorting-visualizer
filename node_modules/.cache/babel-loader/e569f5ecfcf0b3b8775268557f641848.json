{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nimport { TextModel } from '../model/textModel.js';\nimport { LanguageConfigurationRegistry } from '../modes/languageConfigurationRegistry.js';\nexport { CursorColumns } from './cursorColumns.js';\n\nconst autoCloseAlways = () => true;\n\nconst autoCloseNever = () => false;\n\nconst autoCloseBeforeWhitespace = chr => chr === ' ' || chr === '\\t';\n\nexport class CursorConfiguration {\n  constructor(languageId, modelOptions, configuration) {\n    this._cursorMoveConfigurationBrand = undefined;\n    this._languageId = languageId;\n    const options = configuration.options;\n    const layoutInfo = options.get(129\n    /* layoutInfo */\n    );\n    this.readOnly = options.get(80\n    /* readOnly */\n    );\n    this.tabSize = modelOptions.tabSize;\n    this.indentSize = modelOptions.indentSize;\n    this.insertSpaces = modelOptions.insertSpaces;\n    this.stickyTabStops = options.get(103\n    /* stickyTabStops */\n    );\n    this.lineHeight = options.get(58\n    /* lineHeight */\n    );\n    this.pageSize = Math.max(1, Math.floor(layoutInfo.height / this.lineHeight) - 2);\n    this.useTabStops = options.get(114\n    /* useTabStops */\n    );\n    this.wordSeparators = options.get(115\n    /* wordSeparators */\n    );\n    this.emptySelectionClipboard = options.get(32\n    /* emptySelectionClipboard */\n    );\n    this.copyWithSyntaxHighlighting = options.get(21\n    /* copyWithSyntaxHighlighting */\n    );\n    this.multiCursorMergeOverlapping = options.get(68\n    /* multiCursorMergeOverlapping */\n    );\n    this.multiCursorPaste = options.get(70\n    /* multiCursorPaste */\n    );\n    this.autoClosingBrackets = options.get(5\n    /* autoClosingBrackets */\n    );\n    this.autoClosingQuotes = options.get(8\n    /* autoClosingQuotes */\n    );\n    this.autoClosingDelete = options.get(6\n    /* autoClosingDelete */\n    );\n    this.autoClosingOvertype = options.get(7\n    /* autoClosingOvertype */\n    );\n    this.autoSurround = options.get(11\n    /* autoSurround */\n    );\n    this.autoIndent = options.get(9\n    /* autoIndent */\n    );\n    this.surroundingPairs = {};\n    this._electricChars = null;\n    this.shouldAutoCloseBefore = {\n      quote: CursorConfiguration._getShouldAutoClose(languageId, this.autoClosingQuotes),\n      bracket: CursorConfiguration._getShouldAutoClose(languageId, this.autoClosingBrackets)\n    };\n    this.autoClosingPairs = LanguageConfigurationRegistry.getAutoClosingPairs(languageId);\n\n    let surroundingPairs = CursorConfiguration._getSurroundingPairs(languageId);\n\n    if (surroundingPairs) {\n      for (const pair of surroundingPairs) {\n        this.surroundingPairs[pair.open] = pair.close;\n      }\n    }\n  }\n\n  static shouldRecreate(e) {\n    return e.hasChanged(129\n    /* layoutInfo */\n    ) || e.hasChanged(115\n    /* wordSeparators */\n    ) || e.hasChanged(32\n    /* emptySelectionClipboard */\n    ) || e.hasChanged(68\n    /* multiCursorMergeOverlapping */\n    ) || e.hasChanged(70\n    /* multiCursorPaste */\n    ) || e.hasChanged(5\n    /* autoClosingBrackets */\n    ) || e.hasChanged(8\n    /* autoClosingQuotes */\n    ) || e.hasChanged(6\n    /* autoClosingDelete */\n    ) || e.hasChanged(7\n    /* autoClosingOvertype */\n    ) || e.hasChanged(11\n    /* autoSurround */\n    ) || e.hasChanged(114\n    /* useTabStops */\n    ) || e.hasChanged(58\n    /* lineHeight */\n    ) || e.hasChanged(80\n    /* readOnly */\n    );\n  }\n\n  get electricChars() {\n    if (!this._electricChars) {\n      this._electricChars = {};\n\n      let electricChars = CursorConfiguration._getElectricCharacters(this._languageId);\n\n      if (electricChars) {\n        for (const char of electricChars) {\n          this._electricChars[char] = true;\n        }\n      }\n    }\n\n    return this._electricChars;\n  }\n\n  normalizeIndentation(str) {\n    return TextModel.normalizeIndentation(str, this.indentSize, this.insertSpaces);\n  }\n\n  static _getElectricCharacters(languageId) {\n    try {\n      return LanguageConfigurationRegistry.getElectricCharacters(languageId);\n    } catch (e) {\n      onUnexpectedError(e);\n      return null;\n    }\n  }\n\n  static _getShouldAutoClose(languageId, autoCloseConfig) {\n    switch (autoCloseConfig) {\n      case 'beforeWhitespace':\n        return autoCloseBeforeWhitespace;\n\n      case 'languageDefined':\n        return CursorConfiguration._getLanguageDefinedShouldAutoClose(languageId);\n\n      case 'always':\n        return autoCloseAlways;\n\n      case 'never':\n        return autoCloseNever;\n    }\n  }\n\n  static _getLanguageDefinedShouldAutoClose(languageId) {\n    try {\n      const autoCloseBeforeSet = LanguageConfigurationRegistry.getAutoCloseBeforeSet(languageId);\n      return c => autoCloseBeforeSet.indexOf(c) !== -1;\n    } catch (e) {\n      onUnexpectedError(e);\n      return autoCloseNever;\n    }\n  }\n\n  static _getSurroundingPairs(languageId) {\n    try {\n      return LanguageConfigurationRegistry.getSurroundingPairs(languageId);\n    } catch (e) {\n      onUnexpectedError(e);\n      return null;\n    }\n  }\n\n}\n/**\n * Represents the cursor state on either the model or on the view model.\n */\n\nexport class SingleCursorState {\n  constructor(selectionStart, selectionStartLeftoverVisibleColumns, position, leftoverVisibleColumns) {\n    this._singleCursorStateBrand = undefined;\n    this.selectionStart = selectionStart;\n    this.selectionStartLeftoverVisibleColumns = selectionStartLeftoverVisibleColumns;\n    this.position = position;\n    this.leftoverVisibleColumns = leftoverVisibleColumns;\n    this.selection = SingleCursorState._computeSelection(this.selectionStart, this.position);\n  }\n\n  equals(other) {\n    return this.selectionStartLeftoverVisibleColumns === other.selectionStartLeftoverVisibleColumns && this.leftoverVisibleColumns === other.leftoverVisibleColumns && this.position.equals(other.position) && this.selectionStart.equalsRange(other.selectionStart);\n  }\n\n  hasSelection() {\n    return !this.selection.isEmpty() || !this.selectionStart.isEmpty();\n  }\n\n  move(inSelectionMode, lineNumber, column, leftoverVisibleColumns) {\n    if (inSelectionMode) {\n      // move just position\n      return new SingleCursorState(this.selectionStart, this.selectionStartLeftoverVisibleColumns, new Position(lineNumber, column), leftoverVisibleColumns);\n    } else {\n      // move everything\n      return new SingleCursorState(new Range(lineNumber, column, lineNumber, column), leftoverVisibleColumns, new Position(lineNumber, column), leftoverVisibleColumns);\n    }\n  }\n\n  static _computeSelection(selectionStart, position) {\n    let startLineNumber, startColumn, endLineNumber, endColumn;\n\n    if (selectionStart.isEmpty()) {\n      startLineNumber = selectionStart.startLineNumber;\n      startColumn = selectionStart.startColumn;\n      endLineNumber = position.lineNumber;\n      endColumn = position.column;\n    } else {\n      if (position.isBeforeOrEqual(selectionStart.getStartPosition())) {\n        startLineNumber = selectionStart.endLineNumber;\n        startColumn = selectionStart.endColumn;\n        endLineNumber = position.lineNumber;\n        endColumn = position.column;\n      } else {\n        startLineNumber = selectionStart.startLineNumber;\n        startColumn = selectionStart.startColumn;\n        endLineNumber = position.lineNumber;\n        endColumn = position.column;\n      }\n    }\n\n    return new Selection(startLineNumber, startColumn, endLineNumber, endColumn);\n  }\n\n}\nexport class CursorContext {\n  constructor(model, viewModel, coordinatesConverter, cursorConfig) {\n    this._cursorContextBrand = undefined;\n    this.model = model;\n    this.viewModel = viewModel;\n    this.coordinatesConverter = coordinatesConverter;\n    this.cursorConfig = cursorConfig;\n  }\n\n}\nexport class PartialModelCursorState {\n  constructor(modelState) {\n    this.modelState = modelState;\n    this.viewState = null;\n  }\n\n}\nexport class PartialViewCursorState {\n  constructor(viewState) {\n    this.modelState = null;\n    this.viewState = viewState;\n  }\n\n}\nexport class CursorState {\n  constructor(modelState, viewState) {\n    this._cursorStateBrand = undefined;\n    this.modelState = modelState;\n    this.viewState = viewState;\n  }\n\n  static fromModelState(modelState) {\n    return new PartialModelCursorState(modelState);\n  }\n\n  static fromViewState(viewState) {\n    return new PartialViewCursorState(viewState);\n  }\n\n  static fromModelSelection(modelSelection) {\n    const selectionStartLineNumber = modelSelection.selectionStartLineNumber;\n    const selectionStartColumn = modelSelection.selectionStartColumn;\n    const positionLineNumber = modelSelection.positionLineNumber;\n    const positionColumn = modelSelection.positionColumn;\n    const modelState = new SingleCursorState(new Range(selectionStartLineNumber, selectionStartColumn, selectionStartLineNumber, selectionStartColumn), 0, new Position(positionLineNumber, positionColumn), 0);\n    return CursorState.fromModelState(modelState);\n  }\n\n  static fromModelSelections(modelSelections) {\n    let states = [];\n\n    for (let i = 0, len = modelSelections.length; i < len; i++) {\n      states[i] = this.fromModelSelection(modelSelections[i]);\n    }\n\n    return states;\n  }\n\n  equals(other) {\n    return this.viewState.equals(other.viewState) && this.modelState.equals(other.modelState);\n  }\n\n}\nexport class EditOperationResult {\n  constructor(type, commands, opts) {\n    this._editOperationResultBrand = undefined;\n    this.type = type;\n    this.commands = commands;\n    this.shouldPushStackElementBefore = opts.shouldPushStackElementBefore;\n    this.shouldPushStackElementAfter = opts.shouldPushStackElementAfter;\n  }\n\n}\nexport function isQuote(ch) {\n  return ch === '\\'' || ch === '\"' || ch === '`';\n}","map":{"version":3,"sources":["/home/umut/Documents/cs/cs410/Project2Group14/node_modules/monaco-editor/esm/vs/editor/common/controller/cursorCommon.js"],"names":["onUnexpectedError","Position","Range","Selection","TextModel","LanguageConfigurationRegistry","CursorColumns","autoCloseAlways","autoCloseNever","autoCloseBeforeWhitespace","chr","CursorConfiguration","constructor","languageId","modelOptions","configuration","_cursorMoveConfigurationBrand","undefined","_languageId","options","layoutInfo","get","readOnly","tabSize","indentSize","insertSpaces","stickyTabStops","lineHeight","pageSize","Math","max","floor","height","useTabStops","wordSeparators","emptySelectionClipboard","copyWithSyntaxHighlighting","multiCursorMergeOverlapping","multiCursorPaste","autoClosingBrackets","autoClosingQuotes","autoClosingDelete","autoClosingOvertype","autoSurround","autoIndent","surroundingPairs","_electricChars","shouldAutoCloseBefore","quote","_getShouldAutoClose","bracket","autoClosingPairs","getAutoClosingPairs","_getSurroundingPairs","pair","open","close","shouldRecreate","e","hasChanged","electricChars","_getElectricCharacters","char","normalizeIndentation","str","getElectricCharacters","autoCloseConfig","_getLanguageDefinedShouldAutoClose","autoCloseBeforeSet","getAutoCloseBeforeSet","c","indexOf","getSurroundingPairs","SingleCursorState","selectionStart","selectionStartLeftoverVisibleColumns","position","leftoverVisibleColumns","_singleCursorStateBrand","selection","_computeSelection","equals","other","equalsRange","hasSelection","isEmpty","move","inSelectionMode","lineNumber","column","startLineNumber","startColumn","endLineNumber","endColumn","isBeforeOrEqual","getStartPosition","CursorContext","model","viewModel","coordinatesConverter","cursorConfig","_cursorContextBrand","PartialModelCursorState","modelState","viewState","PartialViewCursorState","CursorState","_cursorStateBrand","fromModelState","fromViewState","fromModelSelection","modelSelection","selectionStartLineNumber","selectionStartColumn","positionLineNumber","positionColumn","fromModelSelections","modelSelections","states","i","len","length","EditOperationResult","type","commands","opts","_editOperationResultBrand","shouldPushStackElementBefore","shouldPushStackElementAfter","isQuote","ch"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nimport { TextModel } from '../model/textModel.js';\nimport { LanguageConfigurationRegistry } from '../modes/languageConfigurationRegistry.js';\nexport { CursorColumns } from './cursorColumns.js';\nconst autoCloseAlways = () => true;\nconst autoCloseNever = () => false;\nconst autoCloseBeforeWhitespace = (chr) => (chr === ' ' || chr === '\\t');\nexport class CursorConfiguration {\n    constructor(languageId, modelOptions, configuration) {\n        this._cursorMoveConfigurationBrand = undefined;\n        this._languageId = languageId;\n        const options = configuration.options;\n        const layoutInfo = options.get(129 /* layoutInfo */);\n        this.readOnly = options.get(80 /* readOnly */);\n        this.tabSize = modelOptions.tabSize;\n        this.indentSize = modelOptions.indentSize;\n        this.insertSpaces = modelOptions.insertSpaces;\n        this.stickyTabStops = options.get(103 /* stickyTabStops */);\n        this.lineHeight = options.get(58 /* lineHeight */);\n        this.pageSize = Math.max(1, Math.floor(layoutInfo.height / this.lineHeight) - 2);\n        this.useTabStops = options.get(114 /* useTabStops */);\n        this.wordSeparators = options.get(115 /* wordSeparators */);\n        this.emptySelectionClipboard = options.get(32 /* emptySelectionClipboard */);\n        this.copyWithSyntaxHighlighting = options.get(21 /* copyWithSyntaxHighlighting */);\n        this.multiCursorMergeOverlapping = options.get(68 /* multiCursorMergeOverlapping */);\n        this.multiCursorPaste = options.get(70 /* multiCursorPaste */);\n        this.autoClosingBrackets = options.get(5 /* autoClosingBrackets */);\n        this.autoClosingQuotes = options.get(8 /* autoClosingQuotes */);\n        this.autoClosingDelete = options.get(6 /* autoClosingDelete */);\n        this.autoClosingOvertype = options.get(7 /* autoClosingOvertype */);\n        this.autoSurround = options.get(11 /* autoSurround */);\n        this.autoIndent = options.get(9 /* autoIndent */);\n        this.surroundingPairs = {};\n        this._electricChars = null;\n        this.shouldAutoCloseBefore = {\n            quote: CursorConfiguration._getShouldAutoClose(languageId, this.autoClosingQuotes),\n            bracket: CursorConfiguration._getShouldAutoClose(languageId, this.autoClosingBrackets)\n        };\n        this.autoClosingPairs = LanguageConfigurationRegistry.getAutoClosingPairs(languageId);\n        let surroundingPairs = CursorConfiguration._getSurroundingPairs(languageId);\n        if (surroundingPairs) {\n            for (const pair of surroundingPairs) {\n                this.surroundingPairs[pair.open] = pair.close;\n            }\n        }\n    }\n    static shouldRecreate(e) {\n        return (e.hasChanged(129 /* layoutInfo */)\n            || e.hasChanged(115 /* wordSeparators */)\n            || e.hasChanged(32 /* emptySelectionClipboard */)\n            || e.hasChanged(68 /* multiCursorMergeOverlapping */)\n            || e.hasChanged(70 /* multiCursorPaste */)\n            || e.hasChanged(5 /* autoClosingBrackets */)\n            || e.hasChanged(8 /* autoClosingQuotes */)\n            || e.hasChanged(6 /* autoClosingDelete */)\n            || e.hasChanged(7 /* autoClosingOvertype */)\n            || e.hasChanged(11 /* autoSurround */)\n            || e.hasChanged(114 /* useTabStops */)\n            || e.hasChanged(58 /* lineHeight */)\n            || e.hasChanged(80 /* readOnly */));\n    }\n    get electricChars() {\n        if (!this._electricChars) {\n            this._electricChars = {};\n            let electricChars = CursorConfiguration._getElectricCharacters(this._languageId);\n            if (electricChars) {\n                for (const char of electricChars) {\n                    this._electricChars[char] = true;\n                }\n            }\n        }\n        return this._electricChars;\n    }\n    normalizeIndentation(str) {\n        return TextModel.normalizeIndentation(str, this.indentSize, this.insertSpaces);\n    }\n    static _getElectricCharacters(languageId) {\n        try {\n            return LanguageConfigurationRegistry.getElectricCharacters(languageId);\n        }\n        catch (e) {\n            onUnexpectedError(e);\n            return null;\n        }\n    }\n    static _getShouldAutoClose(languageId, autoCloseConfig) {\n        switch (autoCloseConfig) {\n            case 'beforeWhitespace':\n                return autoCloseBeforeWhitespace;\n            case 'languageDefined':\n                return CursorConfiguration._getLanguageDefinedShouldAutoClose(languageId);\n            case 'always':\n                return autoCloseAlways;\n            case 'never':\n                return autoCloseNever;\n        }\n    }\n    static _getLanguageDefinedShouldAutoClose(languageId) {\n        try {\n            const autoCloseBeforeSet = LanguageConfigurationRegistry.getAutoCloseBeforeSet(languageId);\n            return c => autoCloseBeforeSet.indexOf(c) !== -1;\n        }\n        catch (e) {\n            onUnexpectedError(e);\n            return autoCloseNever;\n        }\n    }\n    static _getSurroundingPairs(languageId) {\n        try {\n            return LanguageConfigurationRegistry.getSurroundingPairs(languageId);\n        }\n        catch (e) {\n            onUnexpectedError(e);\n            return null;\n        }\n    }\n}\n/**\n * Represents the cursor state on either the model or on the view model.\n */\nexport class SingleCursorState {\n    constructor(selectionStart, selectionStartLeftoverVisibleColumns, position, leftoverVisibleColumns) {\n        this._singleCursorStateBrand = undefined;\n        this.selectionStart = selectionStart;\n        this.selectionStartLeftoverVisibleColumns = selectionStartLeftoverVisibleColumns;\n        this.position = position;\n        this.leftoverVisibleColumns = leftoverVisibleColumns;\n        this.selection = SingleCursorState._computeSelection(this.selectionStart, this.position);\n    }\n    equals(other) {\n        return (this.selectionStartLeftoverVisibleColumns === other.selectionStartLeftoverVisibleColumns\n            && this.leftoverVisibleColumns === other.leftoverVisibleColumns\n            && this.position.equals(other.position)\n            && this.selectionStart.equalsRange(other.selectionStart));\n    }\n    hasSelection() {\n        return (!this.selection.isEmpty() || !this.selectionStart.isEmpty());\n    }\n    move(inSelectionMode, lineNumber, column, leftoverVisibleColumns) {\n        if (inSelectionMode) {\n            // move just position\n            return new SingleCursorState(this.selectionStart, this.selectionStartLeftoverVisibleColumns, new Position(lineNumber, column), leftoverVisibleColumns);\n        }\n        else {\n            // move everything\n            return new SingleCursorState(new Range(lineNumber, column, lineNumber, column), leftoverVisibleColumns, new Position(lineNumber, column), leftoverVisibleColumns);\n        }\n    }\n    static _computeSelection(selectionStart, position) {\n        let startLineNumber, startColumn, endLineNumber, endColumn;\n        if (selectionStart.isEmpty()) {\n            startLineNumber = selectionStart.startLineNumber;\n            startColumn = selectionStart.startColumn;\n            endLineNumber = position.lineNumber;\n            endColumn = position.column;\n        }\n        else {\n            if (position.isBeforeOrEqual(selectionStart.getStartPosition())) {\n                startLineNumber = selectionStart.endLineNumber;\n                startColumn = selectionStart.endColumn;\n                endLineNumber = position.lineNumber;\n                endColumn = position.column;\n            }\n            else {\n                startLineNumber = selectionStart.startLineNumber;\n                startColumn = selectionStart.startColumn;\n                endLineNumber = position.lineNumber;\n                endColumn = position.column;\n            }\n        }\n        return new Selection(startLineNumber, startColumn, endLineNumber, endColumn);\n    }\n}\nexport class CursorContext {\n    constructor(model, viewModel, coordinatesConverter, cursorConfig) {\n        this._cursorContextBrand = undefined;\n        this.model = model;\n        this.viewModel = viewModel;\n        this.coordinatesConverter = coordinatesConverter;\n        this.cursorConfig = cursorConfig;\n    }\n}\nexport class PartialModelCursorState {\n    constructor(modelState) {\n        this.modelState = modelState;\n        this.viewState = null;\n    }\n}\nexport class PartialViewCursorState {\n    constructor(viewState) {\n        this.modelState = null;\n        this.viewState = viewState;\n    }\n}\nexport class CursorState {\n    constructor(modelState, viewState) {\n        this._cursorStateBrand = undefined;\n        this.modelState = modelState;\n        this.viewState = viewState;\n    }\n    static fromModelState(modelState) {\n        return new PartialModelCursorState(modelState);\n    }\n    static fromViewState(viewState) {\n        return new PartialViewCursorState(viewState);\n    }\n    static fromModelSelection(modelSelection) {\n        const selectionStartLineNumber = modelSelection.selectionStartLineNumber;\n        const selectionStartColumn = modelSelection.selectionStartColumn;\n        const positionLineNumber = modelSelection.positionLineNumber;\n        const positionColumn = modelSelection.positionColumn;\n        const modelState = new SingleCursorState(new Range(selectionStartLineNumber, selectionStartColumn, selectionStartLineNumber, selectionStartColumn), 0, new Position(positionLineNumber, positionColumn), 0);\n        return CursorState.fromModelState(modelState);\n    }\n    static fromModelSelections(modelSelections) {\n        let states = [];\n        for (let i = 0, len = modelSelections.length; i < len; i++) {\n            states[i] = this.fromModelSelection(modelSelections[i]);\n        }\n        return states;\n    }\n    equals(other) {\n        return (this.viewState.equals(other.viewState) && this.modelState.equals(other.modelState));\n    }\n}\nexport class EditOperationResult {\n    constructor(type, commands, opts) {\n        this._editOperationResultBrand = undefined;\n        this.type = type;\n        this.commands = commands;\n        this.shouldPushStackElementBefore = opts.shouldPushStackElementBefore;\n        this.shouldPushStackElementAfter = opts.shouldPushStackElementAfter;\n    }\n}\nexport function isQuote(ch) {\n    return (ch === '\\'' || ch === '\"' || ch === '`');\n}\n"]},"metadata":{},"sourceType":"module"}