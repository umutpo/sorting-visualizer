{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../base/common/cancellation.js';\nimport { onUnexpectedExternalError } from '../../../base/common/errors.js';\nimport { hash } from '../../../base/common/hash.js';\nimport { DisposableStore, toDisposable } from '../../../base/common/lifecycle.js';\nimport { LRUCache, ResourceMap } from '../../../base/common/map.js';\nimport { assertType } from '../../../base/common/types.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { registerEditorContribution } from '../../browser/editorExtensions.js';\nimport { ICodeEditorService } from '../../browser/services/codeEditorService.js';\nimport { EDITOR_FONT_DEFAULTS } from '../../common/config/editorOptions.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range } from '../../common/core/range.js';\nimport { InlayHintKind, InlayHintsProviderRegistry } from '../../common/modes.js';\nimport { LanguageFeatureRequestDelays } from '../../common/modes/languageFeatureRegistry.js';\nimport { ITextModelService } from '../../common/services/resolverService.js';\nimport { CommandsRegistry } from '../../../platform/commands/common/commands.js';\nimport { editorInlayHintBackground, editorInlayHintForeground, editorInlayHintParameterBackground, editorInlayHintParameterForeground, editorInlayHintTypeBackground, editorInlayHintTypeForeground } from '../../../platform/theme/common/colorRegistry.js';\nimport { themeColorFromId } from '../../../platform/theme/common/themeService.js';\nconst MAX_DECORATORS = 1500;\n\nclass RequestMap {\n  constructor() {\n    this._data = new ResourceMap();\n  }\n\n  push(model, provider) {\n    const value = this._data.get(model.uri);\n\n    if (value === undefined) {\n      this._data.set(model.uri, new Set([provider]));\n    } else {\n      value.add(provider);\n    }\n  }\n\n  pop(model, provider) {\n    const value = this._data.get(model.uri);\n\n    if (value) {\n      value.delete(provider);\n\n      if (value.size === 0) {\n        this._data.delete(model.uri);\n      }\n    }\n  }\n\n  has(model, provider) {\n    var _a;\n\n    return Boolean((_a = this._data.get(model.uri)) === null || _a === void 0 ? void 0 : _a.has(provider));\n  }\n\n}\n\nexport function getInlayHints(model, ranges, requests, token) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const all = [];\n    const providers = InlayHintsProviderRegistry.ordered(model).reverse();\n    const promises = providers.map(provider => ranges.map(range => __awaiter(this, void 0, void 0, function* () {\n      try {\n        requests.push(model, provider);\n        const result = yield provider.provideInlayHints(model, range, token);\n\n        if (result === null || result === void 0 ? void 0 : result.length) {\n          all.push(result.filter(hint => range.containsPosition(hint.position)));\n        }\n      } catch (err) {\n        onUnexpectedExternalError(err);\n      } finally {\n        requests.pop(model, provider);\n      }\n    })));\n    yield Promise.all(promises.flat());\n    return all.flat().sort((a, b) => Position.compare(a.position, b.position));\n  });\n}\n\nclass InlayHintsCache {\n  constructor() {\n    this._entries = new LRUCache(50);\n  }\n\n  get(model) {\n    const key = InlayHintsCache._key(model);\n\n    return this._entries.get(key);\n  }\n\n  set(model, value) {\n    const key = InlayHintsCache._key(model);\n\n    this._entries.set(key, value);\n  }\n\n  static _key(model) {\n    return `${model.uri.toString()}/${model.getVersionId()}`;\n  }\n\n}\n\nlet InlayHintsController = class InlayHintsController {\n  constructor(_editor, _codeEditorService) {\n    this._editor = _editor;\n    this._codeEditorService = _codeEditorService;\n    this._decorationOwnerId = ++InlayHintsController._decorationOwnerIdPool;\n    this._disposables = new DisposableStore();\n    this._sessionDisposables = new DisposableStore();\n    this._getInlayHintsDelays = new LanguageFeatureRequestDelays(InlayHintsProviderRegistry, 25, 500);\n    this._cache = new InlayHintsCache();\n    this._decorations = new Map();\n\n    this._disposables.add(InlayHintsProviderRegistry.onDidChange(() => this._update()));\n\n    this._disposables.add(_editor.onDidChangeModel(() => this._update()));\n\n    this._disposables.add(_editor.onDidChangeModelLanguage(() => this._update()));\n\n    this._disposables.add(_editor.onDidChangeConfiguration(e => {\n      if (e.hasChanged(125\n      /* inlayHints */\n      )) {\n        this._update();\n      }\n    }));\n\n    this._update();\n  }\n\n  dispose() {\n    this._sessionDisposables.dispose();\n\n    this._removeAllDecorations();\n\n    this._disposables.dispose();\n  }\n\n  _update() {\n    this._sessionDisposables.clear();\n\n    this._removeAllDecorations();\n\n    if (!this._editor.getOption(125\n    /* inlayHints */\n    ).enabled) {\n      return;\n    }\n\n    const model = this._editor.getModel();\n\n    if (!model || !InlayHintsProviderRegistry.has(model)) {\n      return;\n    } // iff possible, quickly update from cache\n\n\n    const cached = this._cache.get(model);\n\n    if (cached) {\n      this._updateHintsDecorators([model.getFullModelRange()], cached);\n    }\n\n    const requests = new RequestMap();\n    const scheduler = new RunOnceScheduler(() => __awaiter(this, void 0, void 0, function* () {\n      const t1 = Date.now();\n      const cts = new CancellationTokenSource();\n\n      this._sessionDisposables.add(toDisposable(() => cts.dispose(true)));\n\n      const ranges = this._getHintsRanges();\n\n      const result = yield getInlayHints(model, ranges, requests, cts.token);\n      scheduler.delay = this._getInlayHintsDelays.update(model, Date.now() - t1);\n\n      if (cts.token.isCancellationRequested) {\n        return;\n      }\n\n      this._updateHintsDecorators(ranges, result);\n\n      this._cache.set(model, Array.from(this._decorations.values()).map(obj => obj.hint));\n    }), this._getInlayHintsDelays.get(model));\n\n    this._sessionDisposables.add(scheduler); // update inline hints when content or scroll position changes\n\n\n    this._sessionDisposables.add(this._editor.onDidChangeModelContent(() => scheduler.schedule()));\n\n    this._disposables.add(this._editor.onDidScrollChange(() => scheduler.schedule()));\n\n    scheduler.schedule(); // update inline hints when any any provider fires an event\n\n    const providerListener = new DisposableStore();\n\n    this._sessionDisposables.add(providerListener);\n\n    for (const provider of InlayHintsProviderRegistry.all(model)) {\n      if (typeof provider.onDidChangeInlayHints === 'function') {\n        providerListener.add(provider.onDidChangeInlayHints(() => {\n          if (!requests.has(model, provider)) {\n            scheduler.schedule();\n          }\n        }));\n      }\n    }\n  }\n\n  _getHintsRanges() {\n    const extra = 30;\n\n    const model = this._editor.getModel();\n\n    const visibleRanges = this._editor.getVisibleRangesPlusViewportAboveBelow();\n\n    const result = [];\n\n    for (const range of visibleRanges.sort(Range.compareRangesUsingStarts)) {\n      const extendedRange = model.validateRange(new Range(range.startLineNumber - extra, range.startColumn, range.endLineNumber + extra, range.endColumn));\n\n      if (result.length === 0 || !Range.areIntersectingOrTouching(result[result.length - 1], extendedRange)) {\n        result.push(extendedRange);\n      } else {\n        result[result.length - 1] = Range.plusRange(result[result.length - 1], extendedRange);\n      }\n    }\n\n    return result;\n  }\n\n  _updateHintsDecorators(ranges, hints) {\n    const {\n      fontSize,\n      fontFamily\n    } = this._getLayoutInfo();\n\n    const model = this._editor.getModel();\n\n    const newDecorationsTypeIds = [];\n    const newDecorationsData = [];\n    const fontFamilyVar = '--code-editorInlayHintsFontFamily';\n\n    this._editor.getContainerDomNode().style.setProperty(fontFamilyVar, fontFamily);\n\n    for (const hint of hints) {\n      const {\n        text,\n        position,\n        whitespaceBefore,\n        whitespaceAfter\n      } = hint;\n      const marginBefore = whitespaceBefore ? fontSize / 3 | 0 : 0;\n      const marginAfter = whitespaceAfter ? fontSize / 3 | 0 : 0;\n      const contentOptions = {\n        contentText: fixSpace(text),\n        fontSize: `${fontSize}px`,\n        margin: `0px ${marginAfter}px 0px ${marginBefore}px`,\n        fontFamily: `var(${fontFamilyVar}), ${EDITOR_FONT_DEFAULTS.fontFamily}`,\n        padding: `1px ${Math.max(1, fontSize / 4) | 0}px`,\n        borderRadius: `${fontSize / 4 | 0}px`,\n        verticalAlign: 'middle',\n        backgroundColor: themeColorFromId(editorInlayHintBackground),\n        color: themeColorFromId(editorInlayHintForeground)\n      };\n\n      if (hint.kind === InlayHintKind.Parameter) {\n        contentOptions.backgroundColor = themeColorFromId(editorInlayHintParameterBackground);\n        contentOptions.color = themeColorFromId(editorInlayHintParameterForeground);\n      } else if (hint.kind === InlayHintKind.Type) {\n        contentOptions.backgroundColor = themeColorFromId(editorInlayHintTypeBackground);\n        contentOptions.color = themeColorFromId(editorInlayHintTypeForeground);\n      }\n\n      let renderOptions = {\n        beforeInjectedText: Object.assign(Object.assign({}, contentOptions), {\n          affectsLetterSpacing: true\n        })\n      };\n      let range = Range.fromPositions(position);\n      let word = model.getWordAtPosition(position);\n      let usesWordRange = false;\n\n      if (word) {\n        if (word.endColumn === position.column) {\n          // change decoration to after\n          renderOptions.afterInjectedText = renderOptions.beforeInjectedText;\n          renderOptions.beforeInjectedText = undefined;\n          usesWordRange = true;\n          range = wordToRange(word, position.lineNumber);\n        } else if (word.startColumn === position.column) {\n          usesWordRange = true;\n          range = wordToRange(word, position.lineNumber);\n        }\n      }\n\n      const key = 'inlayHints-' + hash(renderOptions).toString(16);\n\n      this._codeEditorService.registerDecorationType('inlay-hints-controller', key, renderOptions, undefined, this._editor); // decoration types are ref-counted which means we only need to\n      // call register und remove equally often\n\n\n      newDecorationsTypeIds.push(key);\n      const newLen = newDecorationsData.push({\n        range,\n        options: Object.assign(Object.assign({}, this._codeEditorService.resolveDecorationOptions(key, true)), {\n          showIfCollapsed: !usesWordRange,\n          stickiness: 0\n          /* AlwaysGrowsWhenTypingAtEdges */\n\n        })\n      });\n\n      if (newLen > MAX_DECORATORS) {\n        break;\n      }\n    } // collect all decoration ids that are affected by the ranges\n    // and only update those decorations\n\n\n    const decorationIdsToUpdate = [];\n\n    for (const range of ranges) {\n      for (const {\n        id\n      } of model.getDecorationsInRange(range, this._decorationOwnerId, true)) {\n        const obj = this._decorations.get(id);\n\n        if (obj) {\n          decorationIdsToUpdate.push(id);\n\n          this._codeEditorService.removeDecorationType(obj.decorationTypeId);\n\n          this._decorations.delete(id);\n        }\n      }\n    }\n\n    const newDecorationIds = model.deltaDecorations(decorationIdsToUpdate, newDecorationsData, this._decorationOwnerId);\n\n    for (let i = 0; i < newDecorationIds.length; i++) {\n      this._decorations.set(newDecorationIds[i], {\n        hint: hints[i],\n        decorationTypeId: newDecorationsTypeIds[i]\n      });\n    }\n  }\n\n  _getLayoutInfo() {\n    const options = this._editor.getOption(125\n    /* inlayHints */\n    );\n\n    const editorFontSize = this._editor.getOption(45\n    /* fontSize */\n    );\n\n    let fontSize = options.fontSize;\n\n    if (!fontSize || fontSize < 5 || fontSize > editorFontSize) {\n      fontSize = editorFontSize * .9 | 0;\n    }\n\n    const fontFamily = options.fontFamily || this._editor.getOption(42\n    /* fontFamily */\n    );\n\n    return {\n      fontSize,\n      fontFamily\n    };\n  }\n\n  _removeAllDecorations() {\n    this._editor.deltaDecorations(Array.from(this._decorations.keys()), []);\n\n    for (let obj of this._decorations.values()) {\n      this._codeEditorService.removeDecorationType(obj.decorationTypeId);\n    }\n\n    this._decorations.clear();\n  }\n\n};\nInlayHintsController.ID = 'editor.contrib.InlayHints';\nInlayHintsController._decorationOwnerIdPool = 0;\nInlayHintsController = __decorate([__param(1, ICodeEditorService)], InlayHintsController);\nexport { InlayHintsController };\n\nfunction wordToRange(word, lineNumber) {\n  return new Range(lineNumber, word.startColumn, lineNumber, word.endColumn);\n}\n\nfunction fixSpace(str) {\n  const noBreakWhitespace = '\\xa0';\n  return str.replace(/[ \\t]/g, noBreakWhitespace);\n}\n\nregisterEditorContribution(InlayHintsController.ID, InlayHintsController);\nCommandsRegistry.registerCommand('_executeInlayHintProvider', function (accessor) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  return __awaiter(void 0, void 0, void 0, function* () {\n    const [uri, range] = args;\n    assertType(URI.isUri(uri));\n    assertType(Range.isIRange(range));\n    const ref = yield accessor.get(ITextModelService).createModelReference(uri);\n\n    try {\n      const data = yield getInlayHints(ref.object.textEditorModel, [Range.lift(range)], new RequestMap(), CancellationToken.None);\n      return data;\n    } finally {\n      ref.dispose();\n    }\n  });\n});","map":{"version":3,"sources":["/home/umut/Documents/cs/cs410/Project2Group14/node_modules/monaco-editor/esm/vs/editor/contrib/inlayHints/inlayHintsController.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","RunOnceScheduler","CancellationToken","CancellationTokenSource","onUnexpectedExternalError","hash","DisposableStore","toDisposable","LRUCache","ResourceMap","assertType","URI","registerEditorContribution","ICodeEditorService","EDITOR_FONT_DEFAULTS","Position","Range","InlayHintKind","InlayHintsProviderRegistry","LanguageFeatureRequestDelays","ITextModelService","CommandsRegistry","editorInlayHintBackground","editorInlayHintForeground","editorInlayHintParameterBackground","editorInlayHintParameterForeground","editorInlayHintTypeBackground","editorInlayHintTypeForeground","themeColorFromId","MAX_DECORATORS","RequestMap","constructor","_data","push","model","provider","get","uri","undefined","set","Set","add","pop","delete","size","has","_a","Boolean","getInlayHints","ranges","requests","token","all","providers","ordered","reverse","promises","map","range","provideInlayHints","filter","hint","containsPosition","position","err","flat","sort","a","b","compare","InlayHintsCache","_entries","_key","toString","getVersionId","InlayHintsController","_editor","_codeEditorService","_decorationOwnerId","_decorationOwnerIdPool","_disposables","_sessionDisposables","_getInlayHintsDelays","_cache","_decorations","Map","onDidChange","_update","onDidChangeModel","onDidChangeModelLanguage","onDidChangeConfiguration","hasChanged","dispose","_removeAllDecorations","clear","getOption","enabled","getModel","cached","_updateHintsDecorators","getFullModelRange","scheduler","t1","Date","now","cts","_getHintsRanges","delay","update","isCancellationRequested","Array","from","values","obj","onDidChangeModelContent","schedule","onDidScrollChange","providerListener","onDidChangeInlayHints","extra","visibleRanges","getVisibleRangesPlusViewportAboveBelow","compareRangesUsingStarts","extendedRange","validateRange","startLineNumber","startColumn","endLineNumber","endColumn","areIntersectingOrTouching","plusRange","hints","fontSize","fontFamily","_getLayoutInfo","newDecorationsTypeIds","newDecorationsData","fontFamilyVar","getContainerDomNode","style","setProperty","text","whitespaceBefore","whitespaceAfter","marginBefore","marginAfter","contentOptions","contentText","fixSpace","margin","padding","Math","max","borderRadius","verticalAlign","backgroundColor","color","kind","Parameter","Type","renderOptions","beforeInjectedText","assign","affectsLetterSpacing","fromPositions","word","getWordAtPosition","usesWordRange","column","afterInjectedText","wordToRange","lineNumber","registerDecorationType","newLen","options","resolveDecorationOptions","showIfCollapsed","stickiness","decorationIdsToUpdate","id","getDecorationsInRange","removeDecorationType","decorationTypeId","newDecorationIds","deltaDecorations","editorFontSize","keys","ID","str","noBreakWhitespace","replace","registerCommand","accessor","args","isUri","isIRange","ref","createModelReference","data","object","textEditorModel","lift","None"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../base/common/cancellation.js';\nimport { onUnexpectedExternalError } from '../../../base/common/errors.js';\nimport { hash } from '../../../base/common/hash.js';\nimport { DisposableStore, toDisposable } from '../../../base/common/lifecycle.js';\nimport { LRUCache, ResourceMap } from '../../../base/common/map.js';\nimport { assertType } from '../../../base/common/types.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { registerEditorContribution } from '../../browser/editorExtensions.js';\nimport { ICodeEditorService } from '../../browser/services/codeEditorService.js';\nimport { EDITOR_FONT_DEFAULTS } from '../../common/config/editorOptions.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range } from '../../common/core/range.js';\nimport { InlayHintKind, InlayHintsProviderRegistry } from '../../common/modes.js';\nimport { LanguageFeatureRequestDelays } from '../../common/modes/languageFeatureRegistry.js';\nimport { ITextModelService } from '../../common/services/resolverService.js';\nimport { CommandsRegistry } from '../../../platform/commands/common/commands.js';\nimport { editorInlayHintBackground, editorInlayHintForeground, editorInlayHintParameterBackground, editorInlayHintParameterForeground, editorInlayHintTypeBackground, editorInlayHintTypeForeground } from '../../../platform/theme/common/colorRegistry.js';\nimport { themeColorFromId } from '../../../platform/theme/common/themeService.js';\nconst MAX_DECORATORS = 1500;\nclass RequestMap {\n    constructor() {\n        this._data = new ResourceMap();\n    }\n    push(model, provider) {\n        const value = this._data.get(model.uri);\n        if (value === undefined) {\n            this._data.set(model.uri, new Set([provider]));\n        }\n        else {\n            value.add(provider);\n        }\n    }\n    pop(model, provider) {\n        const value = this._data.get(model.uri);\n        if (value) {\n            value.delete(provider);\n            if (value.size === 0) {\n                this._data.delete(model.uri);\n            }\n        }\n    }\n    has(model, provider) {\n        var _a;\n        return Boolean((_a = this._data.get(model.uri)) === null || _a === void 0 ? void 0 : _a.has(provider));\n    }\n}\nexport function getInlayHints(model, ranges, requests, token) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const all = [];\n        const providers = InlayHintsProviderRegistry.ordered(model).reverse();\n        const promises = providers.map(provider => ranges.map((range) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                requests.push(model, provider);\n                const result = yield provider.provideInlayHints(model, range, token);\n                if (result === null || result === void 0 ? void 0 : result.length) {\n                    all.push(result.filter(hint => range.containsPosition(hint.position)));\n                }\n            }\n            catch (err) {\n                onUnexpectedExternalError(err);\n            }\n            finally {\n                requests.pop(model, provider);\n            }\n        })));\n        yield Promise.all(promises.flat());\n        return all.flat().sort((a, b) => Position.compare(a.position, b.position));\n    });\n}\nclass InlayHintsCache {\n    constructor() {\n        this._entries = new LRUCache(50);\n    }\n    get(model) {\n        const key = InlayHintsCache._key(model);\n        return this._entries.get(key);\n    }\n    set(model, value) {\n        const key = InlayHintsCache._key(model);\n        this._entries.set(key, value);\n    }\n    static _key(model) {\n        return `${model.uri.toString()}/${model.getVersionId()}`;\n    }\n}\nlet InlayHintsController = class InlayHintsController {\n    constructor(_editor, _codeEditorService) {\n        this._editor = _editor;\n        this._codeEditorService = _codeEditorService;\n        this._decorationOwnerId = ++InlayHintsController._decorationOwnerIdPool;\n        this._disposables = new DisposableStore();\n        this._sessionDisposables = new DisposableStore();\n        this._getInlayHintsDelays = new LanguageFeatureRequestDelays(InlayHintsProviderRegistry, 25, 500);\n        this._cache = new InlayHintsCache();\n        this._decorations = new Map();\n        this._disposables.add(InlayHintsProviderRegistry.onDidChange(() => this._update()));\n        this._disposables.add(_editor.onDidChangeModel(() => this._update()));\n        this._disposables.add(_editor.onDidChangeModelLanguage(() => this._update()));\n        this._disposables.add(_editor.onDidChangeConfiguration(e => {\n            if (e.hasChanged(125 /* inlayHints */)) {\n                this._update();\n            }\n        }));\n        this._update();\n    }\n    dispose() {\n        this._sessionDisposables.dispose();\n        this._removeAllDecorations();\n        this._disposables.dispose();\n    }\n    _update() {\n        this._sessionDisposables.clear();\n        this._removeAllDecorations();\n        if (!this._editor.getOption(125 /* inlayHints */).enabled) {\n            return;\n        }\n        const model = this._editor.getModel();\n        if (!model || !InlayHintsProviderRegistry.has(model)) {\n            return;\n        }\n        // iff possible, quickly update from cache\n        const cached = this._cache.get(model);\n        if (cached) {\n            this._updateHintsDecorators([model.getFullModelRange()], cached);\n        }\n        const requests = new RequestMap();\n        const scheduler = new RunOnceScheduler(() => __awaiter(this, void 0, void 0, function* () {\n            const t1 = Date.now();\n            const cts = new CancellationTokenSource();\n            this._sessionDisposables.add(toDisposable(() => cts.dispose(true)));\n            const ranges = this._getHintsRanges();\n            const result = yield getInlayHints(model, ranges, requests, cts.token);\n            scheduler.delay = this._getInlayHintsDelays.update(model, Date.now() - t1);\n            if (cts.token.isCancellationRequested) {\n                return;\n            }\n            this._updateHintsDecorators(ranges, result);\n            this._cache.set(model, Array.from(this._decorations.values()).map(obj => obj.hint));\n        }), this._getInlayHintsDelays.get(model));\n        this._sessionDisposables.add(scheduler);\n        // update inline hints when content or scroll position changes\n        this._sessionDisposables.add(this._editor.onDidChangeModelContent(() => scheduler.schedule()));\n        this._disposables.add(this._editor.onDidScrollChange(() => scheduler.schedule()));\n        scheduler.schedule();\n        // update inline hints when any any provider fires an event\n        const providerListener = new DisposableStore();\n        this._sessionDisposables.add(providerListener);\n        for (const provider of InlayHintsProviderRegistry.all(model)) {\n            if (typeof provider.onDidChangeInlayHints === 'function') {\n                providerListener.add(provider.onDidChangeInlayHints(() => {\n                    if (!requests.has(model, provider)) {\n                        scheduler.schedule();\n                    }\n                }));\n            }\n        }\n    }\n    _getHintsRanges() {\n        const extra = 30;\n        const model = this._editor.getModel();\n        const visibleRanges = this._editor.getVisibleRangesPlusViewportAboveBelow();\n        const result = [];\n        for (const range of visibleRanges.sort(Range.compareRangesUsingStarts)) {\n            const extendedRange = model.validateRange(new Range(range.startLineNumber - extra, range.startColumn, range.endLineNumber + extra, range.endColumn));\n            if (result.length === 0 || !Range.areIntersectingOrTouching(result[result.length - 1], extendedRange)) {\n                result.push(extendedRange);\n            }\n            else {\n                result[result.length - 1] = Range.plusRange(result[result.length - 1], extendedRange);\n            }\n        }\n        return result;\n    }\n    _updateHintsDecorators(ranges, hints) {\n        const { fontSize, fontFamily } = this._getLayoutInfo();\n        const model = this._editor.getModel();\n        const newDecorationsTypeIds = [];\n        const newDecorationsData = [];\n        const fontFamilyVar = '--code-editorInlayHintsFontFamily';\n        this._editor.getContainerDomNode().style.setProperty(fontFamilyVar, fontFamily);\n        for (const hint of hints) {\n            const { text, position, whitespaceBefore, whitespaceAfter } = hint;\n            const marginBefore = whitespaceBefore ? (fontSize / 3) | 0 : 0;\n            const marginAfter = whitespaceAfter ? (fontSize / 3) | 0 : 0;\n            const contentOptions = {\n                contentText: fixSpace(text),\n                fontSize: `${fontSize}px`,\n                margin: `0px ${marginAfter}px 0px ${marginBefore}px`,\n                fontFamily: `var(${fontFamilyVar}), ${EDITOR_FONT_DEFAULTS.fontFamily}`,\n                padding: `1px ${Math.max(1, fontSize / 4) | 0}px`,\n                borderRadius: `${(fontSize / 4) | 0}px`,\n                verticalAlign: 'middle',\n                backgroundColor: themeColorFromId(editorInlayHintBackground),\n                color: themeColorFromId(editorInlayHintForeground)\n            };\n            if (hint.kind === InlayHintKind.Parameter) {\n                contentOptions.backgroundColor = themeColorFromId(editorInlayHintParameterBackground);\n                contentOptions.color = themeColorFromId(editorInlayHintParameterForeground);\n            }\n            else if (hint.kind === InlayHintKind.Type) {\n                contentOptions.backgroundColor = themeColorFromId(editorInlayHintTypeBackground);\n                contentOptions.color = themeColorFromId(editorInlayHintTypeForeground);\n            }\n            let renderOptions = { beforeInjectedText: Object.assign(Object.assign({}, contentOptions), { affectsLetterSpacing: true }) };\n            let range = Range.fromPositions(position);\n            let word = model.getWordAtPosition(position);\n            let usesWordRange = false;\n            if (word) {\n                if (word.endColumn === position.column) {\n                    // change decoration to after\n                    renderOptions.afterInjectedText = renderOptions.beforeInjectedText;\n                    renderOptions.beforeInjectedText = undefined;\n                    usesWordRange = true;\n                    range = wordToRange(word, position.lineNumber);\n                }\n                else if (word.startColumn === position.column) {\n                    usesWordRange = true;\n                    range = wordToRange(word, position.lineNumber);\n                }\n            }\n            const key = 'inlayHints-' + hash(renderOptions).toString(16);\n            this._codeEditorService.registerDecorationType('inlay-hints-controller', key, renderOptions, undefined, this._editor);\n            // decoration types are ref-counted which means we only need to\n            // call register und remove equally often\n            newDecorationsTypeIds.push(key);\n            const newLen = newDecorationsData.push({\n                range,\n                options: Object.assign(Object.assign({}, this._codeEditorService.resolveDecorationOptions(key, true)), { showIfCollapsed: !usesWordRange, stickiness: 0 /* AlwaysGrowsWhenTypingAtEdges */ })\n            });\n            if (newLen > MAX_DECORATORS) {\n                break;\n            }\n        }\n        // collect all decoration ids that are affected by the ranges\n        // and only update those decorations\n        const decorationIdsToUpdate = [];\n        for (const range of ranges) {\n            for (const { id } of model.getDecorationsInRange(range, this._decorationOwnerId, true)) {\n                const obj = this._decorations.get(id);\n                if (obj) {\n                    decorationIdsToUpdate.push(id);\n                    this._codeEditorService.removeDecorationType(obj.decorationTypeId);\n                    this._decorations.delete(id);\n                }\n            }\n        }\n        const newDecorationIds = model.deltaDecorations(decorationIdsToUpdate, newDecorationsData, this._decorationOwnerId);\n        for (let i = 0; i < newDecorationIds.length; i++) {\n            this._decorations.set(newDecorationIds[i], { hint: hints[i], decorationTypeId: newDecorationsTypeIds[i] });\n        }\n    }\n    _getLayoutInfo() {\n        const options = this._editor.getOption(125 /* inlayHints */);\n        const editorFontSize = this._editor.getOption(45 /* fontSize */);\n        let fontSize = options.fontSize;\n        if (!fontSize || fontSize < 5 || fontSize > editorFontSize) {\n            fontSize = (editorFontSize * .9) | 0;\n        }\n        const fontFamily = options.fontFamily || this._editor.getOption(42 /* fontFamily */);\n        return { fontSize, fontFamily };\n    }\n    _removeAllDecorations() {\n        this._editor.deltaDecorations(Array.from(this._decorations.keys()), []);\n        for (let obj of this._decorations.values()) {\n            this._codeEditorService.removeDecorationType(obj.decorationTypeId);\n        }\n        this._decorations.clear();\n    }\n};\nInlayHintsController.ID = 'editor.contrib.InlayHints';\nInlayHintsController._decorationOwnerIdPool = 0;\nInlayHintsController = __decorate([\n    __param(1, ICodeEditorService)\n], InlayHintsController);\nexport { InlayHintsController };\nfunction wordToRange(word, lineNumber) {\n    return new Range(lineNumber, word.startColumn, lineNumber, word.endColumn);\n}\nfunction fixSpace(str) {\n    const noBreakWhitespace = '\\xa0';\n    return str.replace(/[ \\t]/g, noBreakWhitespace);\n}\nregisterEditorContribution(InlayHintsController.ID, InlayHintsController);\nCommandsRegistry.registerCommand('_executeInlayHintProvider', (accessor, ...args) => __awaiter(void 0, void 0, void 0, function* () {\n    const [uri, range] = args;\n    assertType(URI.isUri(uri));\n    assertType(Range.isIRange(range));\n    const ref = yield accessor.get(ITextModelService).createModelReference(uri);\n    try {\n        const data = yield getInlayHints(ref.object.textEditorModel, [Range.lift(range)], new RequestMap(), CancellationToken.None);\n        return data;\n    }\n    finally {\n        ref.dispose();\n    }\n}));\n"]},"metadata":{},"sourceType":"module"}