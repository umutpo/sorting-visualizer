{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { Configuration } from '../../config/configuration.js';\nimport { TextEditorCursorStyle } from '../../../common/config/editorOptions.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { MOUSE_CURSOR_TEXT_CSS_CLASS_NAME } from '../../../../base/browser/ui/mouseCursor/mouseCursor.js';\n\nclass ViewCursorRenderData {\n  constructor(top, left, width, height, textContent, textContentClassName) {\n    this.top = top;\n    this.left = left;\n    this.width = width;\n    this.height = height;\n    this.textContent = textContent;\n    this.textContentClassName = textContentClassName;\n  }\n\n}\n\nexport class ViewCursor {\n  constructor(context) {\n    this._context = context;\n    const options = this._context.configuration.options;\n    const fontInfo = options.get(43\n    /* fontInfo */\n    );\n    this._cursorStyle = options.get(24\n    /* cursorStyle */\n    );\n    this._lineHeight = options.get(58\n    /* lineHeight */\n    );\n    this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n    this._lineCursorWidth = Math.min(options.get(27\n    /* cursorWidth */\n    ), this._typicalHalfwidthCharacterWidth);\n    this._isVisible = true; // Create the dom node\n\n    this._domNode = createFastDomNode(document.createElement('div'));\n\n    this._domNode.setClassName(`cursor ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`);\n\n    this._domNode.setHeight(this._lineHeight);\n\n    this._domNode.setTop(0);\n\n    this._domNode.setLeft(0);\n\n    Configuration.applyFontInfo(this._domNode, fontInfo);\n\n    this._domNode.setDisplay('none');\n\n    this._position = new Position(1, 1);\n    this._lastRenderedContent = '';\n    this._renderData = null;\n  }\n\n  getDomNode() {\n    return this._domNode;\n  }\n\n  getPosition() {\n    return this._position;\n  }\n\n  show() {\n    if (!this._isVisible) {\n      this._domNode.setVisibility('inherit');\n\n      this._isVisible = true;\n    }\n  }\n\n  hide() {\n    if (this._isVisible) {\n      this._domNode.setVisibility('hidden');\n\n      this._isVisible = false;\n    }\n  }\n\n  onConfigurationChanged(e) {\n    const options = this._context.configuration.options;\n    const fontInfo = options.get(43\n    /* fontInfo */\n    );\n    this._cursorStyle = options.get(24\n    /* cursorStyle */\n    );\n    this._lineHeight = options.get(58\n    /* lineHeight */\n    );\n    this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n    this._lineCursorWidth = Math.min(options.get(27\n    /* cursorWidth */\n    ), this._typicalHalfwidthCharacterWidth);\n    Configuration.applyFontInfo(this._domNode, fontInfo);\n    return true;\n  }\n\n  onCursorPositionChanged(position) {\n    this._position = position;\n    return true;\n  }\n\n  _prepareRender(ctx) {\n    let textContent = '';\n\n    if (this._cursorStyle === TextEditorCursorStyle.Line || this._cursorStyle === TextEditorCursorStyle.LineThin) {\n      const visibleRange = ctx.visibleRangeForPosition(this._position);\n\n      if (!visibleRange || visibleRange.outsideRenderedLine) {\n        // Outside viewport\n        return null;\n      }\n\n      let width;\n\n      if (this._cursorStyle === TextEditorCursorStyle.Line) {\n        width = dom.computeScreenAwareSize(this._lineCursorWidth > 0 ? this._lineCursorWidth : 2);\n\n        if (width > 2) {\n          const lineContent = this._context.model.getLineContent(this._position.lineNumber);\n\n          const nextCharLength = strings.nextCharLength(lineContent, this._position.column - 1);\n          textContent = lineContent.substr(this._position.column - 1, nextCharLength);\n        }\n      } else {\n        width = dom.computeScreenAwareSize(1);\n      }\n\n      let left = visibleRange.left;\n\n      if (width >= 2 && left >= 1) {\n        // try to center cursor\n        left -= 1;\n      }\n\n      const top = ctx.getVerticalOffsetForLineNumber(this._position.lineNumber) - ctx.bigNumbersDelta;\n      return new ViewCursorRenderData(top, left, width, this._lineHeight, textContent, '');\n    }\n\n    const lineContent = this._context.model.getLineContent(this._position.lineNumber);\n\n    const nextCharLength = strings.nextCharLength(lineContent, this._position.column - 1);\n    const visibleRangeForCharacter = ctx.linesVisibleRangesForRange(new Range(this._position.lineNumber, this._position.column, this._position.lineNumber, this._position.column + nextCharLength), false);\n\n    if (!visibleRangeForCharacter || visibleRangeForCharacter.length === 0) {\n      // Outside viewport\n      return null;\n    }\n\n    const firstVisibleRangeForCharacter = visibleRangeForCharacter[0];\n\n    if (firstVisibleRangeForCharacter.outsideRenderedLine || firstVisibleRangeForCharacter.ranges.length === 0) {\n      // Outside viewport\n      return null;\n    }\n\n    const range = firstVisibleRangeForCharacter.ranges[0];\n    const width = range.width < 1 ? this._typicalHalfwidthCharacterWidth : range.width;\n    let textContentClassName = '';\n\n    if (this._cursorStyle === TextEditorCursorStyle.Block) {\n      const lineData = this._context.model.getViewLineData(this._position.lineNumber);\n\n      textContent = lineContent.substr(this._position.column - 1, nextCharLength);\n      const tokenIndex = lineData.tokens.findTokenIndexAtOffset(this._position.column - 1);\n      textContentClassName = lineData.tokens.getClassName(tokenIndex);\n    }\n\n    let top = ctx.getVerticalOffsetForLineNumber(this._position.lineNumber) - ctx.bigNumbersDelta;\n    let height = this._lineHeight; // Underline might interfere with clicking\n\n    if (this._cursorStyle === TextEditorCursorStyle.Underline || this._cursorStyle === TextEditorCursorStyle.UnderlineThin) {\n      top += this._lineHeight - 2;\n      height = 2;\n    }\n\n    return new ViewCursorRenderData(top, range.left, width, height, textContent, textContentClassName);\n  }\n\n  prepareRender(ctx) {\n    this._renderData = this._prepareRender(ctx);\n  }\n\n  render(ctx) {\n    if (!this._renderData) {\n      this._domNode.setDisplay('none');\n\n      return null;\n    }\n\n    if (this._lastRenderedContent !== this._renderData.textContent) {\n      this._lastRenderedContent = this._renderData.textContent;\n      this._domNode.domNode.textContent = this._lastRenderedContent;\n    }\n\n    this._domNode.setClassName(`cursor ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME} ${this._renderData.textContentClassName}`);\n\n    this._domNode.setDisplay('block');\n\n    this._domNode.setTop(this._renderData.top);\n\n    this._domNode.setLeft(this._renderData.left);\n\n    this._domNode.setWidth(this._renderData.width);\n\n    this._domNode.setLineHeight(this._renderData.height);\n\n    this._domNode.setHeight(this._renderData.height);\n\n    return {\n      domNode: this._domNode.domNode,\n      position: this._position,\n      contentLeft: this._renderData.left,\n      height: this._renderData.height,\n      width: 2\n    };\n  }\n\n}","map":{"version":3,"sources":["/home/umut/Documents/cs/cs410/Project2Group14/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/viewCursors/viewCursor.js"],"names":["dom","createFastDomNode","strings","Configuration","TextEditorCursorStyle","Position","Range","MOUSE_CURSOR_TEXT_CSS_CLASS_NAME","ViewCursorRenderData","constructor","top","left","width","height","textContent","textContentClassName","ViewCursor","context","_context","options","configuration","fontInfo","get","_cursorStyle","_lineHeight","_typicalHalfwidthCharacterWidth","typicalHalfwidthCharacterWidth","_lineCursorWidth","Math","min","_isVisible","_domNode","document","createElement","setClassName","setHeight","setTop","setLeft","applyFontInfo","setDisplay","_position","_lastRenderedContent","_renderData","getDomNode","getPosition","show","setVisibility","hide","onConfigurationChanged","e","onCursorPositionChanged","position","_prepareRender","ctx","Line","LineThin","visibleRange","visibleRangeForPosition","outsideRenderedLine","computeScreenAwareSize","lineContent","model","getLineContent","lineNumber","nextCharLength","column","substr","getVerticalOffsetForLineNumber","bigNumbersDelta","visibleRangeForCharacter","linesVisibleRangesForRange","length","firstVisibleRangeForCharacter","ranges","range","Block","lineData","getViewLineData","tokenIndex","tokens","findTokenIndexAtOffset","getClassName","Underline","UnderlineThin","prepareRender","render","domNode","setWidth","setLineHeight","contentLeft"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { Configuration } from '../../config/configuration.js';\nimport { TextEditorCursorStyle } from '../../../common/config/editorOptions.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { MOUSE_CURSOR_TEXT_CSS_CLASS_NAME } from '../../../../base/browser/ui/mouseCursor/mouseCursor.js';\nclass ViewCursorRenderData {\n    constructor(top, left, width, height, textContent, textContentClassName) {\n        this.top = top;\n        this.left = left;\n        this.width = width;\n        this.height = height;\n        this.textContent = textContent;\n        this.textContentClassName = textContentClassName;\n    }\n}\nexport class ViewCursor {\n    constructor(context) {\n        this._context = context;\n        const options = this._context.configuration.options;\n        const fontInfo = options.get(43 /* fontInfo */);\n        this._cursorStyle = options.get(24 /* cursorStyle */);\n        this._lineHeight = options.get(58 /* lineHeight */);\n        this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this._lineCursorWidth = Math.min(options.get(27 /* cursorWidth */), this._typicalHalfwidthCharacterWidth);\n        this._isVisible = true;\n        // Create the dom node\n        this._domNode = createFastDomNode(document.createElement('div'));\n        this._domNode.setClassName(`cursor ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`);\n        this._domNode.setHeight(this._lineHeight);\n        this._domNode.setTop(0);\n        this._domNode.setLeft(0);\n        Configuration.applyFontInfo(this._domNode, fontInfo);\n        this._domNode.setDisplay('none');\n        this._position = new Position(1, 1);\n        this._lastRenderedContent = '';\n        this._renderData = null;\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    getPosition() {\n        return this._position;\n    }\n    show() {\n        if (!this._isVisible) {\n            this._domNode.setVisibility('inherit');\n            this._isVisible = true;\n        }\n    }\n    hide() {\n        if (this._isVisible) {\n            this._domNode.setVisibility('hidden');\n            this._isVisible = false;\n        }\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const fontInfo = options.get(43 /* fontInfo */);\n        this._cursorStyle = options.get(24 /* cursorStyle */);\n        this._lineHeight = options.get(58 /* lineHeight */);\n        this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this._lineCursorWidth = Math.min(options.get(27 /* cursorWidth */), this._typicalHalfwidthCharacterWidth);\n        Configuration.applyFontInfo(this._domNode, fontInfo);\n        return true;\n    }\n    onCursorPositionChanged(position) {\n        this._position = position;\n        return true;\n    }\n    _prepareRender(ctx) {\n        let textContent = '';\n        if (this._cursorStyle === TextEditorCursorStyle.Line || this._cursorStyle === TextEditorCursorStyle.LineThin) {\n            const visibleRange = ctx.visibleRangeForPosition(this._position);\n            if (!visibleRange || visibleRange.outsideRenderedLine) {\n                // Outside viewport\n                return null;\n            }\n            let width;\n            if (this._cursorStyle === TextEditorCursorStyle.Line) {\n                width = dom.computeScreenAwareSize(this._lineCursorWidth > 0 ? this._lineCursorWidth : 2);\n                if (width > 2) {\n                    const lineContent = this._context.model.getLineContent(this._position.lineNumber);\n                    const nextCharLength = strings.nextCharLength(lineContent, this._position.column - 1);\n                    textContent = lineContent.substr(this._position.column - 1, nextCharLength);\n                }\n            }\n            else {\n                width = dom.computeScreenAwareSize(1);\n            }\n            let left = visibleRange.left;\n            if (width >= 2 && left >= 1) {\n                // try to center cursor\n                left -= 1;\n            }\n            const top = ctx.getVerticalOffsetForLineNumber(this._position.lineNumber) - ctx.bigNumbersDelta;\n            return new ViewCursorRenderData(top, left, width, this._lineHeight, textContent, '');\n        }\n        const lineContent = this._context.model.getLineContent(this._position.lineNumber);\n        const nextCharLength = strings.nextCharLength(lineContent, this._position.column - 1);\n        const visibleRangeForCharacter = ctx.linesVisibleRangesForRange(new Range(this._position.lineNumber, this._position.column, this._position.lineNumber, this._position.column + nextCharLength), false);\n        if (!visibleRangeForCharacter || visibleRangeForCharacter.length === 0) {\n            // Outside viewport\n            return null;\n        }\n        const firstVisibleRangeForCharacter = visibleRangeForCharacter[0];\n        if (firstVisibleRangeForCharacter.outsideRenderedLine || firstVisibleRangeForCharacter.ranges.length === 0) {\n            // Outside viewport\n            return null;\n        }\n        const range = firstVisibleRangeForCharacter.ranges[0];\n        const width = range.width < 1 ? this._typicalHalfwidthCharacterWidth : range.width;\n        let textContentClassName = '';\n        if (this._cursorStyle === TextEditorCursorStyle.Block) {\n            const lineData = this._context.model.getViewLineData(this._position.lineNumber);\n            textContent = lineContent.substr(this._position.column - 1, nextCharLength);\n            const tokenIndex = lineData.tokens.findTokenIndexAtOffset(this._position.column - 1);\n            textContentClassName = lineData.tokens.getClassName(tokenIndex);\n        }\n        let top = ctx.getVerticalOffsetForLineNumber(this._position.lineNumber) - ctx.bigNumbersDelta;\n        let height = this._lineHeight;\n        // Underline might interfere with clicking\n        if (this._cursorStyle === TextEditorCursorStyle.Underline || this._cursorStyle === TextEditorCursorStyle.UnderlineThin) {\n            top += this._lineHeight - 2;\n            height = 2;\n        }\n        return new ViewCursorRenderData(top, range.left, width, height, textContent, textContentClassName);\n    }\n    prepareRender(ctx) {\n        this._renderData = this._prepareRender(ctx);\n    }\n    render(ctx) {\n        if (!this._renderData) {\n            this._domNode.setDisplay('none');\n            return null;\n        }\n        if (this._lastRenderedContent !== this._renderData.textContent) {\n            this._lastRenderedContent = this._renderData.textContent;\n            this._domNode.domNode.textContent = this._lastRenderedContent;\n        }\n        this._domNode.setClassName(`cursor ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME} ${this._renderData.textContentClassName}`);\n        this._domNode.setDisplay('block');\n        this._domNode.setTop(this._renderData.top);\n        this._domNode.setLeft(this._renderData.left);\n        this._domNode.setWidth(this._renderData.width);\n        this._domNode.setLineHeight(this._renderData.height);\n        this._domNode.setHeight(this._renderData.height);\n        return {\n            domNode: this._domNode.domNode,\n            position: this._position,\n            contentLeft: this._renderData.left,\n            height: this._renderData.height,\n            width: 2\n        };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}