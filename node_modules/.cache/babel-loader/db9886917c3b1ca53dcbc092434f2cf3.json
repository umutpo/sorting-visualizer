{"ast":null,"code":"import { Emitter } from '../../../base/common/event.js';\nimport * as types from '../../../base/common/types.js';\nimport * as nls from '../../../nls.js';\nimport { Extensions as JSONExtensions } from '../../jsonschemas/common/jsonContributionRegistry.js';\nimport { Registry } from '../../registry/common/platform.js';\nexport const Extensions = {\n  Configuration: 'base.contributions.configuration'\n};\nexport const allSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport const applicationSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport const machineSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport const machineOverridableSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport const windowSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport const resourceSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport const resourceLanguageSettingsSchemaId = 'vscode://schemas/settings/resourceLanguage';\nconst contributionRegistry = Registry.as(JSONExtensions.JSONContribution);\n\nclass ConfigurationRegistry {\n  constructor() {\n    this.overrideIdentifiers = new Set();\n    this._onDidSchemaChange = new Emitter();\n    this._onDidUpdateConfiguration = new Emitter();\n    this.defaultValues = {};\n    this.defaultLanguageConfigurationOverridesNode = {\n      id: 'defaultOverrides',\n      title: nls.localize('defaultLanguageConfigurationOverrides.title', \"Default Language Configuration Overrides\"),\n      properties: {}\n    };\n    this.configurationContributors = [this.defaultLanguageConfigurationOverridesNode];\n    this.resourceLanguageSettingsSchema = {\n      properties: {},\n      patternProperties: {},\n      additionalProperties: false,\n      errorMessage: 'Unknown editor configuration setting',\n      allowTrailingCommas: true,\n      allowComments: true\n    };\n    this.configurationProperties = {};\n    this.excludedConfigurationProperties = {};\n    contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\n  }\n\n  registerConfiguration(configuration) {\n    let validate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    this.registerConfigurations([configuration], validate);\n  }\n\n  registerConfigurations(configurations) {\n    let validate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const properties = this.doRegisterConfigurations(configurations, validate);\n    contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\n\n    this._onDidSchemaChange.fire();\n\n    this._onDidUpdateConfiguration.fire(properties);\n  }\n\n  registerOverrideIdentifiers(overrideIdentifiers) {\n    for (const overrideIdentifier of overrideIdentifiers) {\n      this.overrideIdentifiers.add(overrideIdentifier);\n    }\n\n    this.updateOverridePropertyPatternKey();\n  }\n\n  doRegisterConfigurations(configurations, validate) {\n    const properties = [];\n    configurations.forEach(configuration => {\n      properties.push(...this.validateAndRegisterProperties(configuration, validate, configuration.extensionInfo)); // fills in defaults\n\n      this.configurationContributors.push(configuration);\n      this.registerJSONConfiguration(configuration);\n    });\n    return properties;\n  }\n\n  validateAndRegisterProperties(configuration) {\n    let validate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let extensionInfo = arguments.length > 2 ? arguments[2] : undefined;\n    let scope = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 3;\n\n    var _a;\n\n    scope = types.isUndefinedOrNull(configuration.scope) ? scope : configuration.scope;\n    let propertyKeys = [];\n    let properties = configuration.properties;\n\n    if (properties) {\n      for (let key in properties) {\n        if (validate && validateProperty(key)) {\n          delete properties[key];\n          continue;\n        }\n\n        const property = properties[key]; // update default value\n\n        this.updatePropertyDefaultValue(key, property); // update scope\n\n        if (OVERRIDE_PROPERTY_PATTERN.test(key)) {\n          property.scope = undefined; // No scope for overridable properties `[${identifier}]`\n        } else {\n          property.scope = types.isUndefinedOrNull(property.scope) ? scope : property.scope;\n          property.restricted = types.isUndefinedOrNull(property.restricted) ? !!((_a = extensionInfo === null || extensionInfo === void 0 ? void 0 : extensionInfo.restrictedConfigurations) === null || _a === void 0 ? void 0 : _a.includes(key)) : property.restricted;\n        } // Add to properties maps\n        // Property is included by default if 'included' is unspecified\n\n\n        if (properties[key].hasOwnProperty('included') && !properties[key].included) {\n          this.excludedConfigurationProperties[key] = properties[key];\n          delete properties[key];\n          continue;\n        } else {\n          this.configurationProperties[key] = properties[key];\n        }\n\n        if (!properties[key].deprecationMessage && properties[key].markdownDeprecationMessage) {\n          // If not set, default deprecationMessage to the markdown source\n          properties[key].deprecationMessage = properties[key].markdownDeprecationMessage;\n        }\n\n        propertyKeys.push(key);\n      }\n    }\n\n    let subNodes = configuration.allOf;\n\n    if (subNodes) {\n      for (let node of subNodes) {\n        propertyKeys.push(...this.validateAndRegisterProperties(node, validate, extensionInfo, scope));\n      }\n    }\n\n    return propertyKeys;\n  }\n\n  getConfigurationProperties() {\n    return this.configurationProperties;\n  }\n\n  registerJSONConfiguration(configuration) {\n    const register = configuration => {\n      let properties = configuration.properties;\n\n      if (properties) {\n        for (const key in properties) {\n          this.updateSchema(key, properties[key]);\n        }\n      }\n\n      let subNodes = configuration.allOf;\n\n      if (subNodes) {\n        subNodes.forEach(register);\n      }\n    };\n\n    register(configuration);\n  }\n\n  updateSchema(key, property) {\n    allSettings.properties[key] = property;\n\n    switch (property.scope) {\n      case 1\n      /* APPLICATION */\n      :\n        applicationSettings.properties[key] = property;\n        break;\n\n      case 2\n      /* MACHINE */\n      :\n        machineSettings.properties[key] = property;\n        break;\n\n      case 6\n      /* MACHINE_OVERRIDABLE */\n      :\n        machineOverridableSettings.properties[key] = property;\n        break;\n\n      case 3\n      /* WINDOW */\n      :\n        windowSettings.properties[key] = property;\n        break;\n\n      case 4\n      /* RESOURCE */\n      :\n        resourceSettings.properties[key] = property;\n        break;\n\n      case 5\n      /* LANGUAGE_OVERRIDABLE */\n      :\n        resourceSettings.properties[key] = property;\n        this.resourceLanguageSettingsSchema.properties[key] = property;\n        break;\n    }\n  }\n\n  updateOverridePropertyPatternKey() {\n    for (const overrideIdentifier of this.overrideIdentifiers.values()) {\n      const overrideIdentifierProperty = `[${overrideIdentifier}]`;\n      const resourceLanguagePropertiesSchema = {\n        type: 'object',\n        description: nls.localize('overrideSettings.defaultDescription', \"Configure editor settings to be overridden for a language.\"),\n        errorMessage: nls.localize('overrideSettings.errorMessage', \"This setting does not support per-language configuration.\"),\n        $ref: resourceLanguageSettingsSchemaId\n      };\n      this.updatePropertyDefaultValue(overrideIdentifierProperty, resourceLanguagePropertiesSchema);\n      allSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n      applicationSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n      machineSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n      machineOverridableSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n      windowSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n      resourceSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n    }\n\n    this._onDidSchemaChange.fire();\n  }\n\n  updatePropertyDefaultValue(key, property) {\n    let defaultValue = this.defaultValues[key];\n\n    if (types.isUndefined(defaultValue)) {\n      defaultValue = property.default;\n    }\n\n    if (types.isUndefined(defaultValue)) {\n      defaultValue = getDefaultValue(property.type);\n    }\n\n    property.default = defaultValue;\n  }\n\n}\n\nconst OVERRIDE_PROPERTY = '\\\\[.*\\\\]$';\nexport const OVERRIDE_PROPERTY_PATTERN = new RegExp(OVERRIDE_PROPERTY);\nexport function overrideIdentifierFromKey(key) {\n  return key.substring(1, key.length - 1);\n}\nexport function getDefaultValue(type) {\n  const t = Array.isArray(type) ? type[0] : type;\n\n  switch (t) {\n    case 'boolean':\n      return false;\n\n    case 'integer':\n    case 'number':\n      return 0;\n\n    case 'string':\n      return '';\n\n    case 'array':\n      return [];\n\n    case 'object':\n      return {};\n\n    default:\n      return null;\n  }\n}\nconst configurationRegistry = new ConfigurationRegistry();\nRegistry.add(Extensions.Configuration, configurationRegistry);\nexport function validateProperty(property) {\n  if (!property.trim()) {\n    return nls.localize('config.property.empty', \"Cannot register an empty property\");\n  }\n\n  if (OVERRIDE_PROPERTY_PATTERN.test(property)) {\n    return nls.localize('config.property.languageDefault', \"Cannot register '{0}'. This matches property pattern '\\\\\\\\[.*\\\\\\\\]$' for describing language specific editor settings. Use 'configurationDefaults' contribution.\", property);\n  }\n\n  if (configurationRegistry.getConfigurationProperties()[property] !== undefined) {\n    return nls.localize('config.property.duplicate', \"Cannot register '{0}'. This property is already registered.\", property);\n  }\n\n  return null;\n}","map":{"version":3,"sources":["/home/umut/Documents/cs/cs410/Project2Group14/node_modules/monaco-editor/esm/vs/platform/configuration/common/configurationRegistry.js"],"names":["Emitter","types","nls","Extensions","JSONExtensions","Registry","Configuration","allSettings","properties","patternProperties","applicationSettings","machineSettings","machineOverridableSettings","windowSettings","resourceSettings","resourceLanguageSettingsSchemaId","contributionRegistry","as","JSONContribution","ConfigurationRegistry","constructor","overrideIdentifiers","Set","_onDidSchemaChange","_onDidUpdateConfiguration","defaultValues","defaultLanguageConfigurationOverridesNode","id","title","localize","configurationContributors","resourceLanguageSettingsSchema","additionalProperties","errorMessage","allowTrailingCommas","allowComments","configurationProperties","excludedConfigurationProperties","registerSchema","registerConfiguration","configuration","validate","registerConfigurations","configurations","doRegisterConfigurations","fire","registerOverrideIdentifiers","overrideIdentifier","add","updateOverridePropertyPatternKey","forEach","push","validateAndRegisterProperties","extensionInfo","registerJSONConfiguration","scope","_a","isUndefinedOrNull","propertyKeys","key","validateProperty","property","updatePropertyDefaultValue","OVERRIDE_PROPERTY_PATTERN","test","undefined","restricted","restrictedConfigurations","includes","hasOwnProperty","included","deprecationMessage","markdownDeprecationMessage","subNodes","allOf","node","getConfigurationProperties","register","updateSchema","values","overrideIdentifierProperty","resourceLanguagePropertiesSchema","type","description","$ref","defaultValue","isUndefined","default","getDefaultValue","OVERRIDE_PROPERTY","RegExp","overrideIdentifierFromKey","substring","length","t","Array","isArray","configurationRegistry","trim"],"mappings":"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","sourcesContent":["import { Emitter } from '../../../base/common/event.js';\nimport * as types from '../../../base/common/types.js';\nimport * as nls from '../../../nls.js';\nimport { Extensions as JSONExtensions } from '../../jsonschemas/common/jsonContributionRegistry.js';\nimport { Registry } from '../../registry/common/platform.js';\nexport const Extensions = {\n    Configuration: 'base.contributions.configuration'\n};\nexport const allSettings = { properties: {}, patternProperties: {} };\nexport const applicationSettings = { properties: {}, patternProperties: {} };\nexport const machineSettings = { properties: {}, patternProperties: {} };\nexport const machineOverridableSettings = { properties: {}, patternProperties: {} };\nexport const windowSettings = { properties: {}, patternProperties: {} };\nexport const resourceSettings = { properties: {}, patternProperties: {} };\nexport const resourceLanguageSettingsSchemaId = 'vscode://schemas/settings/resourceLanguage';\nconst contributionRegistry = Registry.as(JSONExtensions.JSONContribution);\nclass ConfigurationRegistry {\n    constructor() {\n        this.overrideIdentifiers = new Set();\n        this._onDidSchemaChange = new Emitter();\n        this._onDidUpdateConfiguration = new Emitter();\n        this.defaultValues = {};\n        this.defaultLanguageConfigurationOverridesNode = {\n            id: 'defaultOverrides',\n            title: nls.localize('defaultLanguageConfigurationOverrides.title', \"Default Language Configuration Overrides\"),\n            properties: {}\n        };\n        this.configurationContributors = [this.defaultLanguageConfigurationOverridesNode];\n        this.resourceLanguageSettingsSchema = { properties: {}, patternProperties: {}, additionalProperties: false, errorMessage: 'Unknown editor configuration setting', allowTrailingCommas: true, allowComments: true };\n        this.configurationProperties = {};\n        this.excludedConfigurationProperties = {};\n        contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\n    }\n    registerConfiguration(configuration, validate = true) {\n        this.registerConfigurations([configuration], validate);\n    }\n    registerConfigurations(configurations, validate = true) {\n        const properties = this.doRegisterConfigurations(configurations, validate);\n        contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\n        this._onDidSchemaChange.fire();\n        this._onDidUpdateConfiguration.fire(properties);\n    }\n    registerOverrideIdentifiers(overrideIdentifiers) {\n        for (const overrideIdentifier of overrideIdentifiers) {\n            this.overrideIdentifiers.add(overrideIdentifier);\n        }\n        this.updateOverridePropertyPatternKey();\n    }\n    doRegisterConfigurations(configurations, validate) {\n        const properties = [];\n        configurations.forEach(configuration => {\n            properties.push(...this.validateAndRegisterProperties(configuration, validate, configuration.extensionInfo)); // fills in defaults\n            this.configurationContributors.push(configuration);\n            this.registerJSONConfiguration(configuration);\n        });\n        return properties;\n    }\n    validateAndRegisterProperties(configuration, validate = true, extensionInfo, scope = 3 /* WINDOW */) {\n        var _a;\n        scope = types.isUndefinedOrNull(configuration.scope) ? scope : configuration.scope;\n        let propertyKeys = [];\n        let properties = configuration.properties;\n        if (properties) {\n            for (let key in properties) {\n                if (validate && validateProperty(key)) {\n                    delete properties[key];\n                    continue;\n                }\n                const property = properties[key];\n                // update default value\n                this.updatePropertyDefaultValue(key, property);\n                // update scope\n                if (OVERRIDE_PROPERTY_PATTERN.test(key)) {\n                    property.scope = undefined; // No scope for overridable properties `[${identifier}]`\n                }\n                else {\n                    property.scope = types.isUndefinedOrNull(property.scope) ? scope : property.scope;\n                    property.restricted = types.isUndefinedOrNull(property.restricted) ? !!((_a = extensionInfo === null || extensionInfo === void 0 ? void 0 : extensionInfo.restrictedConfigurations) === null || _a === void 0 ? void 0 : _a.includes(key)) : property.restricted;\n                }\n                // Add to properties maps\n                // Property is included by default if 'included' is unspecified\n                if (properties[key].hasOwnProperty('included') && !properties[key].included) {\n                    this.excludedConfigurationProperties[key] = properties[key];\n                    delete properties[key];\n                    continue;\n                }\n                else {\n                    this.configurationProperties[key] = properties[key];\n                }\n                if (!properties[key].deprecationMessage && properties[key].markdownDeprecationMessage) {\n                    // If not set, default deprecationMessage to the markdown source\n                    properties[key].deprecationMessage = properties[key].markdownDeprecationMessage;\n                }\n                propertyKeys.push(key);\n            }\n        }\n        let subNodes = configuration.allOf;\n        if (subNodes) {\n            for (let node of subNodes) {\n                propertyKeys.push(...this.validateAndRegisterProperties(node, validate, extensionInfo, scope));\n            }\n        }\n        return propertyKeys;\n    }\n    getConfigurationProperties() {\n        return this.configurationProperties;\n    }\n    registerJSONConfiguration(configuration) {\n        const register = (configuration) => {\n            let properties = configuration.properties;\n            if (properties) {\n                for (const key in properties) {\n                    this.updateSchema(key, properties[key]);\n                }\n            }\n            let subNodes = configuration.allOf;\n            if (subNodes) {\n                subNodes.forEach(register);\n            }\n        };\n        register(configuration);\n    }\n    updateSchema(key, property) {\n        allSettings.properties[key] = property;\n        switch (property.scope) {\n            case 1 /* APPLICATION */:\n                applicationSettings.properties[key] = property;\n                break;\n            case 2 /* MACHINE */:\n                machineSettings.properties[key] = property;\n                break;\n            case 6 /* MACHINE_OVERRIDABLE */:\n                machineOverridableSettings.properties[key] = property;\n                break;\n            case 3 /* WINDOW */:\n                windowSettings.properties[key] = property;\n                break;\n            case 4 /* RESOURCE */:\n                resourceSettings.properties[key] = property;\n                break;\n            case 5 /* LANGUAGE_OVERRIDABLE */:\n                resourceSettings.properties[key] = property;\n                this.resourceLanguageSettingsSchema.properties[key] = property;\n                break;\n        }\n    }\n    updateOverridePropertyPatternKey() {\n        for (const overrideIdentifier of this.overrideIdentifiers.values()) {\n            const overrideIdentifierProperty = `[${overrideIdentifier}]`;\n            const resourceLanguagePropertiesSchema = {\n                type: 'object',\n                description: nls.localize('overrideSettings.defaultDescription', \"Configure editor settings to be overridden for a language.\"),\n                errorMessage: nls.localize('overrideSettings.errorMessage', \"This setting does not support per-language configuration.\"),\n                $ref: resourceLanguageSettingsSchemaId,\n            };\n            this.updatePropertyDefaultValue(overrideIdentifierProperty, resourceLanguagePropertiesSchema);\n            allSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n            applicationSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n            machineSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n            machineOverridableSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n            windowSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n            resourceSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n        }\n        this._onDidSchemaChange.fire();\n    }\n    updatePropertyDefaultValue(key, property) {\n        let defaultValue = this.defaultValues[key];\n        if (types.isUndefined(defaultValue)) {\n            defaultValue = property.default;\n        }\n        if (types.isUndefined(defaultValue)) {\n            defaultValue = getDefaultValue(property.type);\n        }\n        property.default = defaultValue;\n    }\n}\nconst OVERRIDE_PROPERTY = '\\\\[.*\\\\]$';\nexport const OVERRIDE_PROPERTY_PATTERN = new RegExp(OVERRIDE_PROPERTY);\nexport function overrideIdentifierFromKey(key) {\n    return key.substring(1, key.length - 1);\n}\nexport function getDefaultValue(type) {\n    const t = Array.isArray(type) ? type[0] : type;\n    switch (t) {\n        case 'boolean':\n            return false;\n        case 'integer':\n        case 'number':\n            return 0;\n        case 'string':\n            return '';\n        case 'array':\n            return [];\n        case 'object':\n            return {};\n        default:\n            return null;\n    }\n}\nconst configurationRegistry = new ConfigurationRegistry();\nRegistry.add(Extensions.Configuration, configurationRegistry);\nexport function validateProperty(property) {\n    if (!property.trim()) {\n        return nls.localize('config.property.empty', \"Cannot register an empty property\");\n    }\n    if (OVERRIDE_PROPERTY_PATTERN.test(property)) {\n        return nls.localize('config.property.languageDefault', \"Cannot register '{0}'. This matches property pattern '\\\\\\\\[.*\\\\\\\\]$' for describing language specific editor settings. Use 'configurationDefaults' contribution.\", property);\n    }\n    if (configurationRegistry.getConfigurationProperties()[property] !== undefined) {\n        return nls.localize('config.property.duplicate', \"Cannot register '{0}'. This property is already registered.\", property);\n    }\n    return null;\n}\n"]},"metadata":{},"sourceType":"module"}