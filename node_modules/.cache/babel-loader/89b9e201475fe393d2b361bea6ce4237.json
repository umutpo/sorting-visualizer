{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { toUint32 } from '../../../base/common/uint.js';\nexport class PrefixSumIndexOfResult {\n  constructor(index, remainder) {\n    this._prefixSumIndexOfResultBrand = undefined;\n    this.index = index;\n    this.remainder = remainder;\n  }\n\n}\nexport class PrefixSumComputer {\n  constructor(values) {\n    this.values = values;\n    this.prefixSum = new Uint32Array(values.length);\n    this.prefixSumValidIndex = new Int32Array(1);\n    this.prefixSumValidIndex[0] = -1;\n  }\n\n  insertValues(insertIndex, insertValues) {\n    insertIndex = toUint32(insertIndex);\n    const oldValues = this.values;\n    const oldPrefixSum = this.prefixSum;\n    const insertValuesLen = insertValues.length;\n\n    if (insertValuesLen === 0) {\n      return false;\n    }\n\n    this.values = new Uint32Array(oldValues.length + insertValuesLen);\n    this.values.set(oldValues.subarray(0, insertIndex), 0);\n    this.values.set(oldValues.subarray(insertIndex), insertIndex + insertValuesLen);\n    this.values.set(insertValues, insertIndex);\n\n    if (insertIndex - 1 < this.prefixSumValidIndex[0]) {\n      this.prefixSumValidIndex[0] = insertIndex - 1;\n    }\n\n    this.prefixSum = new Uint32Array(this.values.length);\n\n    if (this.prefixSumValidIndex[0] >= 0) {\n      this.prefixSum.set(oldPrefixSum.subarray(0, this.prefixSumValidIndex[0] + 1));\n    }\n\n    return true;\n  }\n\n  changeValue(index, value) {\n    index = toUint32(index);\n    value = toUint32(value);\n\n    if (this.values[index] === value) {\n      return false;\n    }\n\n    this.values[index] = value;\n\n    if (index - 1 < this.prefixSumValidIndex[0]) {\n      this.prefixSumValidIndex[0] = index - 1;\n    }\n\n    return true;\n  }\n\n  removeValues(startIndex, count) {\n    startIndex = toUint32(startIndex);\n    count = toUint32(count);\n    const oldValues = this.values;\n    const oldPrefixSum = this.prefixSum;\n\n    if (startIndex >= oldValues.length) {\n      return false;\n    }\n\n    let maxCount = oldValues.length - startIndex;\n\n    if (count >= maxCount) {\n      count = maxCount;\n    }\n\n    if (count === 0) {\n      return false;\n    }\n\n    this.values = new Uint32Array(oldValues.length - count);\n    this.values.set(oldValues.subarray(0, startIndex), 0);\n    this.values.set(oldValues.subarray(startIndex + count), startIndex);\n    this.prefixSum = new Uint32Array(this.values.length);\n\n    if (startIndex - 1 < this.prefixSumValidIndex[0]) {\n      this.prefixSumValidIndex[0] = startIndex - 1;\n    }\n\n    if (this.prefixSumValidIndex[0] >= 0) {\n      this.prefixSum.set(oldPrefixSum.subarray(0, this.prefixSumValidIndex[0] + 1));\n    }\n\n    return true;\n  }\n\n  getTotalSum() {\n    if (this.values.length === 0) {\n      return 0;\n    }\n\n    return this._getPrefixSum(this.values.length - 1);\n  }\n\n  getPrefixSum(index) {\n    if (index < 0) {\n      return 0;\n    }\n\n    index = toUint32(index);\n    return this._getPrefixSum(index);\n  }\n\n  _getPrefixSum(index) {\n    if (index <= this.prefixSumValidIndex[0]) {\n      return this.prefixSum[index];\n    }\n\n    let startIndex = this.prefixSumValidIndex[0] + 1;\n\n    if (startIndex === 0) {\n      this.prefixSum[0] = this.values[0];\n      startIndex++;\n    }\n\n    if (index >= this.values.length) {\n      index = this.values.length - 1;\n    }\n\n    for (let i = startIndex; i <= index; i++) {\n      this.prefixSum[i] = this.prefixSum[i - 1] + this.values[i];\n    }\n\n    this.prefixSumValidIndex[0] = Math.max(this.prefixSumValidIndex[0], index);\n    return this.prefixSum[index];\n  }\n\n  getIndexOf(sum) {\n    sum = Math.floor(sum); //@perf\n    // Compute all sums (to get a fully valid prefixSum)\n\n    this.getTotalSum();\n    let low = 0;\n    let high = this.values.length - 1;\n    let mid = 0;\n    let midStop = 0;\n    let midStart = 0;\n\n    while (low <= high) {\n      mid = low + (high - low) / 2 | 0;\n      midStop = this.prefixSum[mid];\n      midStart = midStop - this.values[mid];\n\n      if (sum < midStart) {\n        high = mid - 1;\n      } else if (sum >= midStop) {\n        low = mid + 1;\n      } else {\n        break;\n      }\n    }\n\n    return new PrefixSumIndexOfResult(mid, sum - midStart);\n  }\n\n}","map":{"version":3,"sources":["/home/umut/Documents/cs/cs410/Project2Group14/node_modules/monaco-editor/esm/vs/editor/common/viewModel/prefixSumComputer.js"],"names":["toUint32","PrefixSumIndexOfResult","constructor","index","remainder","_prefixSumIndexOfResultBrand","undefined","PrefixSumComputer","values","prefixSum","Uint32Array","length","prefixSumValidIndex","Int32Array","insertValues","insertIndex","oldValues","oldPrefixSum","insertValuesLen","set","subarray","changeValue","value","removeValues","startIndex","count","maxCount","getTotalSum","_getPrefixSum","getPrefixSum","i","Math","max","getIndexOf","sum","floor","low","high","mid","midStop","midStart"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { toUint32 } from '../../../base/common/uint.js';\nexport class PrefixSumIndexOfResult {\n    constructor(index, remainder) {\n        this._prefixSumIndexOfResultBrand = undefined;\n        this.index = index;\n        this.remainder = remainder;\n    }\n}\nexport class PrefixSumComputer {\n    constructor(values) {\n        this.values = values;\n        this.prefixSum = new Uint32Array(values.length);\n        this.prefixSumValidIndex = new Int32Array(1);\n        this.prefixSumValidIndex[0] = -1;\n    }\n    insertValues(insertIndex, insertValues) {\n        insertIndex = toUint32(insertIndex);\n        const oldValues = this.values;\n        const oldPrefixSum = this.prefixSum;\n        const insertValuesLen = insertValues.length;\n        if (insertValuesLen === 0) {\n            return false;\n        }\n        this.values = new Uint32Array(oldValues.length + insertValuesLen);\n        this.values.set(oldValues.subarray(0, insertIndex), 0);\n        this.values.set(oldValues.subarray(insertIndex), insertIndex + insertValuesLen);\n        this.values.set(insertValues, insertIndex);\n        if (insertIndex - 1 < this.prefixSumValidIndex[0]) {\n            this.prefixSumValidIndex[0] = insertIndex - 1;\n        }\n        this.prefixSum = new Uint32Array(this.values.length);\n        if (this.prefixSumValidIndex[0] >= 0) {\n            this.prefixSum.set(oldPrefixSum.subarray(0, this.prefixSumValidIndex[0] + 1));\n        }\n        return true;\n    }\n    changeValue(index, value) {\n        index = toUint32(index);\n        value = toUint32(value);\n        if (this.values[index] === value) {\n            return false;\n        }\n        this.values[index] = value;\n        if (index - 1 < this.prefixSumValidIndex[0]) {\n            this.prefixSumValidIndex[0] = index - 1;\n        }\n        return true;\n    }\n    removeValues(startIndex, count) {\n        startIndex = toUint32(startIndex);\n        count = toUint32(count);\n        const oldValues = this.values;\n        const oldPrefixSum = this.prefixSum;\n        if (startIndex >= oldValues.length) {\n            return false;\n        }\n        let maxCount = oldValues.length - startIndex;\n        if (count >= maxCount) {\n            count = maxCount;\n        }\n        if (count === 0) {\n            return false;\n        }\n        this.values = new Uint32Array(oldValues.length - count);\n        this.values.set(oldValues.subarray(0, startIndex), 0);\n        this.values.set(oldValues.subarray(startIndex + count), startIndex);\n        this.prefixSum = new Uint32Array(this.values.length);\n        if (startIndex - 1 < this.prefixSumValidIndex[0]) {\n            this.prefixSumValidIndex[0] = startIndex - 1;\n        }\n        if (this.prefixSumValidIndex[0] >= 0) {\n            this.prefixSum.set(oldPrefixSum.subarray(0, this.prefixSumValidIndex[0] + 1));\n        }\n        return true;\n    }\n    getTotalSum() {\n        if (this.values.length === 0) {\n            return 0;\n        }\n        return this._getPrefixSum(this.values.length - 1);\n    }\n    getPrefixSum(index) {\n        if (index < 0) {\n            return 0;\n        }\n        index = toUint32(index);\n        return this._getPrefixSum(index);\n    }\n    _getPrefixSum(index) {\n        if (index <= this.prefixSumValidIndex[0]) {\n            return this.prefixSum[index];\n        }\n        let startIndex = this.prefixSumValidIndex[0] + 1;\n        if (startIndex === 0) {\n            this.prefixSum[0] = this.values[0];\n            startIndex++;\n        }\n        if (index >= this.values.length) {\n            index = this.values.length - 1;\n        }\n        for (let i = startIndex; i <= index; i++) {\n            this.prefixSum[i] = this.prefixSum[i - 1] + this.values[i];\n        }\n        this.prefixSumValidIndex[0] = Math.max(this.prefixSumValidIndex[0], index);\n        return this.prefixSum[index];\n    }\n    getIndexOf(sum) {\n        sum = Math.floor(sum); //@perf\n        // Compute all sums (to get a fully valid prefixSum)\n        this.getTotalSum();\n        let low = 0;\n        let high = this.values.length - 1;\n        let mid = 0;\n        let midStop = 0;\n        let midStart = 0;\n        while (low <= high) {\n            mid = low + ((high - low) / 2) | 0;\n            midStop = this.prefixSum[mid];\n            midStart = midStop - this.values[mid];\n            if (sum < midStart) {\n                high = mid - 1;\n            }\n            else if (sum >= midStop) {\n                low = mid + 1;\n            }\n            else {\n                break;\n            }\n        }\n        return new PrefixSumIndexOfResult(mid, sum - midStart);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}