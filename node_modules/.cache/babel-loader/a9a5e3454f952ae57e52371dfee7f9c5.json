{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport { isFirefox } from '../../../base/browser/browser.js';\nimport * as types from '../../../base/common/types.js';\nimport { status } from '../../../base/browser/ui/aria/aria.js';\nimport { Command, EditorCommand, registerEditorCommand, UndoCommand, RedoCommand, SelectAllCommand } from '../editorExtensions.js';\nimport { ICodeEditorService } from '../services/codeEditorService.js';\nimport { ColumnSelection } from '../../common/controller/cursorColumnSelection.js';\nimport { CursorState } from '../../common/controller/cursorCommon.js';\nimport { DeleteOperations } from '../../common/controller/cursorDeleteOperations.js';\nimport { CursorMove as CursorMove_, CursorMoveCommands } from '../../common/controller/cursorMoveCommands.js';\nimport { TypeOperations } from '../../common/controller/cursorTypeOperations.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range } from '../../common/core/range.js';\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\nimport { ContextKeyExpr } from '../../../platform/contextkey/common/contextkey.js';\nimport { KeybindingsRegistry } from '../../../platform/keybinding/common/keybindingsRegistry.js';\nconst CORE_WEIGHT = 0\n/* EditorCore */\n;\nexport class CoreEditorCommand extends EditorCommand {\n  runEditorCommand(accessor, editor, args) {\n    const viewModel = editor._getViewModel();\n\n    if (!viewModel) {\n      // the editor has no view => has no cursors\n      return;\n    }\n\n    this.runCoreEditorCommand(viewModel, args || {});\n  }\n\n}\nexport var EditorScroll_;\n\n(function (EditorScroll_) {\n  const isEditorScrollArgs = function (arg) {\n    if (!types.isObject(arg)) {\n      return false;\n    }\n\n    const scrollArg = arg;\n\n    if (!types.isString(scrollArg.to)) {\n      return false;\n    }\n\n    if (!types.isUndefined(scrollArg.by) && !types.isString(scrollArg.by)) {\n      return false;\n    }\n\n    if (!types.isUndefined(scrollArg.value) && !types.isNumber(scrollArg.value)) {\n      return false;\n    }\n\n    if (!types.isUndefined(scrollArg.revealCursor) && !types.isBoolean(scrollArg.revealCursor)) {\n      return false;\n    }\n\n    return true;\n  };\n\n  EditorScroll_.description = {\n    description: 'Scroll editor in the given direction',\n    args: [{\n      name: 'Editor scroll argument object',\n      description: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t* 'to': A mandatory direction value.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'up', 'down'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t* 'by': Unit to move. Default is computed based on 'to' value.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'line', 'wrappedLine', 'page', 'halfPage'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t* 'value': Number of units to move. Default is '1'.\n\t\t\t\t\t* 'revealCursor': If 'true' reveals the cursor if it is outside view port.\n\t\t\t\t`,\n      constraint: isEditorScrollArgs,\n      schema: {\n        'type': 'object',\n        'required': ['to'],\n        'properties': {\n          'to': {\n            'type': 'string',\n            'enum': ['up', 'down']\n          },\n          'by': {\n            'type': 'string',\n            'enum': ['line', 'wrappedLine', 'page', 'halfPage']\n          },\n          'value': {\n            'type': 'number',\n            'default': 1\n          },\n          'revealCursor': {\n            'type': 'boolean'\n          }\n        }\n      }\n    }]\n  };\n  /**\n   * Directions in the view for editor scroll command.\n   */\n\n  EditorScroll_.RawDirection = {\n    Up: 'up',\n    Down: 'down'\n  };\n  /**\n   * Units for editor scroll 'by' argument\n   */\n\n  EditorScroll_.RawUnit = {\n    Line: 'line',\n    WrappedLine: 'wrappedLine',\n    Page: 'page',\n    HalfPage: 'halfPage'\n  };\n\n  function parse(args) {\n    let direction;\n\n    switch (args.to) {\n      case EditorScroll_.RawDirection.Up:\n        direction = 1\n        /* Up */\n        ;\n        break;\n\n      case EditorScroll_.RawDirection.Down:\n        direction = 2\n        /* Down */\n        ;\n        break;\n\n      default:\n        // Illegal arguments\n        return null;\n    }\n\n    let unit;\n\n    switch (args.by) {\n      case EditorScroll_.RawUnit.Line:\n        unit = 1\n        /* Line */\n        ;\n        break;\n\n      case EditorScroll_.RawUnit.WrappedLine:\n        unit = 2\n        /* WrappedLine */\n        ;\n        break;\n\n      case EditorScroll_.RawUnit.Page:\n        unit = 3\n        /* Page */\n        ;\n        break;\n\n      case EditorScroll_.RawUnit.HalfPage:\n        unit = 4\n        /* HalfPage */\n        ;\n        break;\n\n      default:\n        unit = 2\n        /* WrappedLine */\n        ;\n    }\n\n    const value = Math.floor(args.value || 1);\n    const revealCursor = !!args.revealCursor;\n    return {\n      direction: direction,\n      unit: unit,\n      value: value,\n      revealCursor: revealCursor,\n      select: !!args.select\n    };\n  }\n\n  EditorScroll_.parse = parse;\n})(EditorScroll_ || (EditorScroll_ = {}));\n\nexport var RevealLine_;\n\n(function (RevealLine_) {\n  const isRevealLineArgs = function (arg) {\n    if (!types.isObject(arg)) {\n      return false;\n    }\n\n    const reveaLineArg = arg;\n\n    if (!types.isNumber(reveaLineArg.lineNumber) && !types.isString(reveaLineArg.lineNumber)) {\n      return false;\n    }\n\n    if (!types.isUndefined(reveaLineArg.at) && !types.isString(reveaLineArg.at)) {\n      return false;\n    }\n\n    return true;\n  };\n\n  RevealLine_.description = {\n    description: 'Reveal the given line at the given logical position',\n    args: [{\n      name: 'Reveal line argument object',\n      description: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t* 'lineNumber': A mandatory line number value.\n\t\t\t\t\t* 'at': Logical position at which line has to be revealed.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'top', 'center', 'bottom'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t`,\n      constraint: isRevealLineArgs,\n      schema: {\n        'type': 'object',\n        'required': ['lineNumber'],\n        'properties': {\n          'lineNumber': {\n            'type': ['number', 'string']\n          },\n          'at': {\n            'type': 'string',\n            'enum': ['top', 'center', 'bottom']\n          }\n        }\n      }\n    }]\n  };\n  /**\n   * Values for reveal line 'at' argument\n   */\n\n  RevealLine_.RawAtArgument = {\n    Top: 'top',\n    Center: 'center',\n    Bottom: 'bottom'\n  };\n})(RevealLine_ || (RevealLine_ = {}));\n\nclass EditorOrNativeTextInputCommand {\n  constructor(target) {\n    // 1. handle case when focus is in editor.\n    target.addImplementation(10000, 'code-editor', (accessor, args) => {\n      // Only if editor text focus (i.e. not if editor has widget focus).\n      const focusedEditor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n\n      if (focusedEditor && focusedEditor.hasTextFocus()) {\n        return this._runEditorCommand(accessor, focusedEditor, args);\n      }\n\n      return false;\n    }); // 2. handle case when focus is in some other `input` / `textarea`.\n\n    target.addImplementation(1000, 'generic-dom-input-textarea', (accessor, args) => {\n      // Only if focused on an element that allows for entering text\n      const activeElement = document.activeElement;\n\n      if (activeElement && ['input', 'textarea'].indexOf(activeElement.tagName.toLowerCase()) >= 0) {\n        this.runDOMCommand();\n        return true;\n      }\n\n      return false;\n    }); // 3. (default) handle case when focus is somewhere else.\n\n    target.addImplementation(0, 'generic-dom', (accessor, args) => {\n      // Redirecting to active editor\n      const activeEditor = accessor.get(ICodeEditorService).getActiveCodeEditor();\n\n      if (activeEditor) {\n        activeEditor.focus();\n        return this._runEditorCommand(accessor, activeEditor, args);\n      }\n\n      return false;\n    });\n  }\n\n  _runEditorCommand(accessor, editor, args) {\n    const result = this.runEditorCommand(accessor, editor, args);\n\n    if (result) {\n      return result;\n    }\n\n    return true;\n  }\n\n}\n\nexport var CoreNavigationCommands;\n\n(function (CoreNavigationCommands) {\n  class BaseMoveToCommand extends CoreEditorCommand {\n    constructor(opts) {\n      super(opts);\n      this._inSelectionMode = opts.inSelectionMode;\n    }\n\n    runCoreEditorCommand(viewModel, args) {\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(args.source, 3\n      /* Explicit */\n      , [CursorMoveCommands.moveTo(viewModel, viewModel.getPrimaryCursorState(), this._inSelectionMode, args.position, args.viewPosition)]);\n      viewModel.revealPrimaryCursor(args.source, true);\n    }\n\n  }\n\n  CoreNavigationCommands.MoveTo = registerEditorCommand(new BaseMoveToCommand({\n    id: '_moveTo',\n    inSelectionMode: false,\n    precondition: undefined\n  }));\n  CoreNavigationCommands.MoveToSelect = registerEditorCommand(new BaseMoveToCommand({\n    id: '_moveToSelect',\n    inSelectionMode: true,\n    precondition: undefined\n  }));\n\n  class ColumnSelectCommand extends CoreEditorCommand {\n    runCoreEditorCommand(viewModel, args) {\n      viewModel.model.pushStackElement();\n\n      const result = this._getColumnSelectResult(viewModel, viewModel.getPrimaryCursorState(), viewModel.getCursorColumnSelectData(), args);\n\n      viewModel.setCursorStates(args.source, 3\n      /* Explicit */\n      , result.viewStates.map(viewState => CursorState.fromViewState(viewState)));\n      viewModel.setCursorColumnSelectData({\n        isReal: true,\n        fromViewLineNumber: result.fromLineNumber,\n        fromViewVisualColumn: result.fromVisualColumn,\n        toViewLineNumber: result.toLineNumber,\n        toViewVisualColumn: result.toVisualColumn\n      });\n\n      if (result.reversed) {\n        viewModel.revealTopMostCursor(args.source);\n      } else {\n        viewModel.revealBottomMostCursor(args.source);\n      }\n    }\n\n  }\n\n  CoreNavigationCommands.ColumnSelect = registerEditorCommand(new class extends ColumnSelectCommand {\n    constructor() {\n      super({\n        id: 'columnSelect',\n        precondition: undefined\n      });\n    }\n\n    _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n      // validate `args`\n      const validatedPosition = viewModel.model.validatePosition(args.position);\n      const validatedViewPosition = viewModel.coordinatesConverter.validateViewPosition(new Position(args.viewPosition.lineNumber, args.viewPosition.column), validatedPosition);\n      let fromViewLineNumber = args.doColumnSelect ? prevColumnSelectData.fromViewLineNumber : validatedViewPosition.lineNumber;\n      let fromViewVisualColumn = args.doColumnSelect ? prevColumnSelectData.fromViewVisualColumn : args.mouseColumn - 1;\n      return ColumnSelection.columnSelect(viewModel.cursorConfig, viewModel, fromViewLineNumber, fromViewVisualColumn, validatedViewPosition.lineNumber, args.mouseColumn - 1);\n    }\n\n  }());\n  CoreNavigationCommands.CursorColumnSelectLeft = registerEditorCommand(new class extends ColumnSelectCommand {\n    constructor() {\n      super({\n        id: 'cursorColumnSelectLeft',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 2048\n          /* CtrlCmd */\n          | 1024\n          /* Shift */\n          | 512\n          /* Alt */\n          | 15\n          /* LeftArrow */\n          ,\n          linux: {\n            primary: 0\n          }\n        }\n      });\n    }\n\n    _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n      return ColumnSelection.columnSelectLeft(viewModel.cursorConfig, viewModel, prevColumnSelectData);\n    }\n\n  }());\n  CoreNavigationCommands.CursorColumnSelectRight = registerEditorCommand(new class extends ColumnSelectCommand {\n    constructor() {\n      super({\n        id: 'cursorColumnSelectRight',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 2048\n          /* CtrlCmd */\n          | 1024\n          /* Shift */\n          | 512\n          /* Alt */\n          | 17\n          /* RightArrow */\n          ,\n          linux: {\n            primary: 0\n          }\n        }\n      });\n    }\n\n    _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n      return ColumnSelection.columnSelectRight(viewModel.cursorConfig, viewModel, prevColumnSelectData);\n    }\n\n  }());\n\n  class ColumnSelectUpCommand extends ColumnSelectCommand {\n    constructor(opts) {\n      super(opts);\n      this._isPaged = opts.isPaged;\n    }\n\n    _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n      return ColumnSelection.columnSelectUp(viewModel.cursorConfig, viewModel, prevColumnSelectData, this._isPaged);\n    }\n\n  }\n\n  CoreNavigationCommands.CursorColumnSelectUp = registerEditorCommand(new ColumnSelectUpCommand({\n    isPaged: false,\n    id: 'cursorColumnSelectUp',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048\n      /* CtrlCmd */\n      | 1024\n      /* Shift */\n      | 512\n      /* Alt */\n      | 16\n      /* UpArrow */\n      ,\n      linux: {\n        primary: 0\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorColumnSelectPageUp = registerEditorCommand(new ColumnSelectUpCommand({\n    isPaged: true,\n    id: 'cursorColumnSelectPageUp',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048\n      /* CtrlCmd */\n      | 1024\n      /* Shift */\n      | 512\n      /* Alt */\n      | 11\n      /* PageUp */\n      ,\n      linux: {\n        primary: 0\n      }\n    }\n  }));\n\n  class ColumnSelectDownCommand extends ColumnSelectCommand {\n    constructor(opts) {\n      super(opts);\n      this._isPaged = opts.isPaged;\n    }\n\n    _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n      return ColumnSelection.columnSelectDown(viewModel.cursorConfig, viewModel, prevColumnSelectData, this._isPaged);\n    }\n\n  }\n\n  CoreNavigationCommands.CursorColumnSelectDown = registerEditorCommand(new ColumnSelectDownCommand({\n    isPaged: false,\n    id: 'cursorColumnSelectDown',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048\n      /* CtrlCmd */\n      | 1024\n      /* Shift */\n      | 512\n      /* Alt */\n      | 18\n      /* DownArrow */\n      ,\n      linux: {\n        primary: 0\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorColumnSelectPageDown = registerEditorCommand(new ColumnSelectDownCommand({\n    isPaged: true,\n    id: 'cursorColumnSelectPageDown',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048\n      /* CtrlCmd */\n      | 1024\n      /* Shift */\n      | 512\n      /* Alt */\n      | 12\n      /* PageDown */\n      ,\n      linux: {\n        primary: 0\n      }\n    }\n  }));\n\n  class CursorMoveImpl extends CoreEditorCommand {\n    constructor() {\n      super({\n        id: 'cursorMove',\n        precondition: undefined,\n        description: CursorMove_.description\n      });\n    }\n\n    runCoreEditorCommand(viewModel, args) {\n      const parsed = CursorMove_.parse(args);\n\n      if (!parsed) {\n        // illegal arguments\n        return;\n      }\n\n      this._runCursorMove(viewModel, args.source, parsed);\n    }\n\n    _runCursorMove(viewModel, source, args) {\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(source, 3\n      /* Explicit */\n      , CursorMoveImpl._move(viewModel, viewModel.getCursorStates(), args));\n      viewModel.revealPrimaryCursor(source, true);\n    }\n\n    static _move(viewModel, cursors, args) {\n      const inSelectionMode = args.select;\n      const value = args.value;\n\n      switch (args.direction) {\n        case 0\n        /* Left */\n        :\n        case 1\n        /* Right */\n        :\n        case 2\n        /* Up */\n        :\n        case 3\n        /* Down */\n        :\n        case 4\n        /* PrevBlankLine */\n        :\n        case 5\n        /* NextBlankLine */\n        :\n        case 6\n        /* WrappedLineStart */\n        :\n        case 7\n        /* WrappedLineFirstNonWhitespaceCharacter */\n        :\n        case 8\n        /* WrappedLineColumnCenter */\n        :\n        case 9\n        /* WrappedLineEnd */\n        :\n        case 10\n        /* WrappedLineLastNonWhitespaceCharacter */\n        :\n          return CursorMoveCommands.simpleMove(viewModel, cursors, args.direction, inSelectionMode, value, args.unit);\n\n        case 11\n        /* ViewPortTop */\n        :\n        case 13\n        /* ViewPortBottom */\n        :\n        case 12\n        /* ViewPortCenter */\n        :\n        case 14\n        /* ViewPortIfOutside */\n        :\n          return CursorMoveCommands.viewportMove(viewModel, cursors, args.direction, inSelectionMode, value);\n\n        default:\n          return null;\n      }\n    }\n\n  }\n\n  CoreNavigationCommands.CursorMoveImpl = CursorMoveImpl;\n  CoreNavigationCommands.CursorMove = registerEditorCommand(new CursorMoveImpl());\n\n  class CursorMoveBasedCommand extends CoreEditorCommand {\n    constructor(opts) {\n      super(opts);\n      this._staticArgs = opts.args;\n    }\n\n    runCoreEditorCommand(viewModel, dynamicArgs) {\n      let args = this._staticArgs;\n\n      if (this._staticArgs.value === -1\n      /* PAGE_SIZE_MARKER */\n      ) {\n        // -1 is a marker for page size\n        args = {\n          direction: this._staticArgs.direction,\n          unit: this._staticArgs.unit,\n          select: this._staticArgs.select,\n          value: viewModel.cursorConfig.pageSize\n        };\n      }\n\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(dynamicArgs.source, 3\n      /* Explicit */\n      , CursorMoveCommands.simpleMove(viewModel, viewModel.getCursorStates(), args.direction, args.select, args.value, args.unit));\n      viewModel.revealPrimaryCursor(dynamicArgs.source, true);\n    }\n\n  }\n\n  CoreNavigationCommands.CursorLeft = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 0\n      /* Left */\n      ,\n      unit: 0\n      /* None */\n      ,\n      select: false,\n      value: 1\n    },\n    id: 'cursorLeft',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 15\n      /* LeftArrow */\n      ,\n      mac: {\n        primary: 15\n        /* LeftArrow */\n        ,\n        secondary: [256\n        /* WinCtrl */\n        | 32\n        /* KeyB */\n        ]\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorLeftSelect = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 0\n      /* Left */\n      ,\n      unit: 0\n      /* None */\n      ,\n      select: true,\n      value: 1\n    },\n    id: 'cursorLeftSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 1024\n      /* Shift */\n      | 15\n      /* LeftArrow */\n\n    }\n  }));\n  CoreNavigationCommands.CursorRight = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 1\n      /* Right */\n      ,\n      unit: 0\n      /* None */\n      ,\n      select: false,\n      value: 1\n    },\n    id: 'cursorRight',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 17\n      /* RightArrow */\n      ,\n      mac: {\n        primary: 17\n        /* RightArrow */\n        ,\n        secondary: [256\n        /* WinCtrl */\n        | 36\n        /* KeyF */\n        ]\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorRightSelect = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 1\n      /* Right */\n      ,\n      unit: 0\n      /* None */\n      ,\n      select: true,\n      value: 1\n    },\n    id: 'cursorRightSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 1024\n      /* Shift */\n      | 17\n      /* RightArrow */\n\n    }\n  }));\n  CoreNavigationCommands.CursorUp = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 2\n      /* Up */\n      ,\n      unit: 2\n      /* WrappedLine */\n      ,\n      select: false,\n      value: 1\n    },\n    id: 'cursorUp',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 16\n      /* UpArrow */\n      ,\n      mac: {\n        primary: 16\n        /* UpArrow */\n        ,\n        secondary: [256\n        /* WinCtrl */\n        | 46\n        /* KeyP */\n        ]\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorUpSelect = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 2\n      /* Up */\n      ,\n      unit: 2\n      /* WrappedLine */\n      ,\n      select: true,\n      value: 1\n    },\n    id: 'cursorUpSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 1024\n      /* Shift */\n      | 16\n      /* UpArrow */\n      ,\n      secondary: [2048\n      /* CtrlCmd */\n      | 1024\n      /* Shift */\n      | 16\n      /* UpArrow */\n      ],\n      mac: {\n        primary: 1024\n        /* Shift */\n        | 16\n        /* UpArrow */\n\n      },\n      linux: {\n        primary: 1024\n        /* Shift */\n        | 16\n        /* UpArrow */\n\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorPageUp = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 2\n      /* Up */\n      ,\n      unit: 2\n      /* WrappedLine */\n      ,\n      select: false,\n      value: -1\n      /* PAGE_SIZE_MARKER */\n\n    },\n    id: 'cursorPageUp',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 11\n      /* PageUp */\n\n    }\n  }));\n  CoreNavigationCommands.CursorPageUpSelect = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 2\n      /* Up */\n      ,\n      unit: 2\n      /* WrappedLine */\n      ,\n      select: true,\n      value: -1\n      /* PAGE_SIZE_MARKER */\n\n    },\n    id: 'cursorPageUpSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 1024\n      /* Shift */\n      | 11\n      /* PageUp */\n\n    }\n  }));\n  CoreNavigationCommands.CursorDown = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 3\n      /* Down */\n      ,\n      unit: 2\n      /* WrappedLine */\n      ,\n      select: false,\n      value: 1\n    },\n    id: 'cursorDown',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 18\n      /* DownArrow */\n      ,\n      mac: {\n        primary: 18\n        /* DownArrow */\n        ,\n        secondary: [256\n        /* WinCtrl */\n        | 44\n        /* KeyN */\n        ]\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorDownSelect = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 3\n      /* Down */\n      ,\n      unit: 2\n      /* WrappedLine */\n      ,\n      select: true,\n      value: 1\n    },\n    id: 'cursorDownSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 1024\n      /* Shift */\n      | 18\n      /* DownArrow */\n      ,\n      secondary: [2048\n      /* CtrlCmd */\n      | 1024\n      /* Shift */\n      | 18\n      /* DownArrow */\n      ],\n      mac: {\n        primary: 1024\n        /* Shift */\n        | 18\n        /* DownArrow */\n\n      },\n      linux: {\n        primary: 1024\n        /* Shift */\n        | 18\n        /* DownArrow */\n\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorPageDown = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 3\n      /* Down */\n      ,\n      unit: 2\n      /* WrappedLine */\n      ,\n      select: false,\n      value: -1\n      /* PAGE_SIZE_MARKER */\n\n    },\n    id: 'cursorPageDown',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 12\n      /* PageDown */\n\n    }\n  }));\n  CoreNavigationCommands.CursorPageDownSelect = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 3\n      /* Down */\n      ,\n      unit: 2\n      /* WrappedLine */\n      ,\n      select: true,\n      value: -1\n      /* PAGE_SIZE_MARKER */\n\n    },\n    id: 'cursorPageDownSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 1024\n      /* Shift */\n      | 12\n      /* PageDown */\n\n    }\n  }));\n  CoreNavigationCommands.CreateCursor = registerEditorCommand(new class extends CoreEditorCommand {\n    constructor() {\n      super({\n        id: 'createCursor',\n        precondition: undefined\n      });\n    }\n\n    runCoreEditorCommand(viewModel, args) {\n      let newState;\n\n      if (args.wholeLine) {\n        newState = CursorMoveCommands.line(viewModel, viewModel.getPrimaryCursorState(), false, args.position, args.viewPosition);\n      } else {\n        newState = CursorMoveCommands.moveTo(viewModel, viewModel.getPrimaryCursorState(), false, args.position, args.viewPosition);\n      }\n\n      const states = viewModel.getCursorStates(); // Check if we should remove a cursor (sort of like a toggle)\n\n      if (states.length > 1) {\n        const newModelPosition = newState.modelState ? newState.modelState.position : null;\n        const newViewPosition = newState.viewState ? newState.viewState.position : null;\n\n        for (let i = 0, len = states.length; i < len; i++) {\n          const state = states[i];\n\n          if (newModelPosition && !state.modelState.selection.containsPosition(newModelPosition)) {\n            continue;\n          }\n\n          if (newViewPosition && !state.viewState.selection.containsPosition(newViewPosition)) {\n            continue;\n          } // => Remove the cursor\n\n\n          states.splice(i, 1);\n          viewModel.model.pushStackElement();\n          viewModel.setCursorStates(args.source, 3\n          /* Explicit */\n          , states);\n          return;\n        }\n      } // => Add the new cursor\n\n\n      states.push(newState);\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(args.source, 3\n      /* Explicit */\n      , states);\n    }\n\n  }());\n  CoreNavigationCommands.LastCursorMoveToSelect = registerEditorCommand(new class extends CoreEditorCommand {\n    constructor() {\n      super({\n        id: '_lastCursorMoveToSelect',\n        precondition: undefined\n      });\n    }\n\n    runCoreEditorCommand(viewModel, args) {\n      const lastAddedCursorIndex = viewModel.getLastAddedCursorIndex();\n      const states = viewModel.getCursorStates();\n      const newStates = states.slice(0);\n      newStates[lastAddedCursorIndex] = CursorMoveCommands.moveTo(viewModel, states[lastAddedCursorIndex], true, args.position, args.viewPosition);\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(args.source, 3\n      /* Explicit */\n      , newStates);\n    }\n\n  }());\n\n  class HomeCommand extends CoreEditorCommand {\n    constructor(opts) {\n      super(opts);\n      this._inSelectionMode = opts.inSelectionMode;\n    }\n\n    runCoreEditorCommand(viewModel, args) {\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(args.source, 3\n      /* Explicit */\n      , CursorMoveCommands.moveToBeginningOfLine(viewModel, viewModel.getCursorStates(), this._inSelectionMode));\n      viewModel.revealPrimaryCursor(args.source, true);\n    }\n\n  }\n\n  CoreNavigationCommands.CursorHome = registerEditorCommand(new HomeCommand({\n    inSelectionMode: false,\n    id: 'cursorHome',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 14\n      /* Home */\n      ,\n      mac: {\n        primary: 14\n        /* Home */\n        ,\n        secondary: [2048\n        /* CtrlCmd */\n        | 15\n        /* LeftArrow */\n        ]\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorHomeSelect = registerEditorCommand(new HomeCommand({\n    inSelectionMode: true,\n    id: 'cursorHomeSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 1024\n      /* Shift */\n      | 14\n      /* Home */\n      ,\n      mac: {\n        primary: 1024\n        /* Shift */\n        | 14\n        /* Home */\n        ,\n        secondary: [2048\n        /* CtrlCmd */\n        | 1024\n        /* Shift */\n        | 15\n        /* LeftArrow */\n        ]\n      }\n    }\n  }));\n\n  class LineStartCommand extends CoreEditorCommand {\n    constructor(opts) {\n      super(opts);\n      this._inSelectionMode = opts.inSelectionMode;\n    }\n\n    runCoreEditorCommand(viewModel, args) {\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(args.source, 3\n      /* Explicit */\n      , this._exec(viewModel.getCursorStates()));\n      viewModel.revealPrimaryCursor(args.source, true);\n    }\n\n    _exec(cursors) {\n      const result = [];\n\n      for (let i = 0, len = cursors.length; i < len; i++) {\n        const cursor = cursors[i];\n        const lineNumber = cursor.modelState.position.lineNumber;\n        result[i] = CursorState.fromModelState(cursor.modelState.move(this._inSelectionMode, lineNumber, 1, 0));\n      }\n\n      return result;\n    }\n\n  }\n\n  CoreNavigationCommands.CursorLineStart = registerEditorCommand(new LineStartCommand({\n    inSelectionMode: false,\n    id: 'cursorLineStart',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 0,\n      mac: {\n        primary: 256\n        /* WinCtrl */\n        | 31\n        /* KeyA */\n\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorLineStartSelect = registerEditorCommand(new LineStartCommand({\n    inSelectionMode: true,\n    id: 'cursorLineStartSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 0,\n      mac: {\n        primary: 256\n        /* WinCtrl */\n        | 1024\n        /* Shift */\n        | 31\n        /* KeyA */\n\n      }\n    }\n  }));\n\n  class EndCommand extends CoreEditorCommand {\n    constructor(opts) {\n      super(opts);\n      this._inSelectionMode = opts.inSelectionMode;\n    }\n\n    runCoreEditorCommand(viewModel, args) {\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(args.source, 3\n      /* Explicit */\n      , CursorMoveCommands.moveToEndOfLine(viewModel, viewModel.getCursorStates(), this._inSelectionMode, args.sticky || false));\n      viewModel.revealPrimaryCursor(args.source, true);\n    }\n\n  }\n\n  CoreNavigationCommands.CursorEnd = registerEditorCommand(new EndCommand({\n    inSelectionMode: false,\n    id: 'cursorEnd',\n    precondition: undefined,\n    kbOpts: {\n      args: {\n        sticky: false\n      },\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 13\n      /* End */\n      ,\n      mac: {\n        primary: 13\n        /* End */\n        ,\n        secondary: [2048\n        /* CtrlCmd */\n        | 17\n        /* RightArrow */\n        ]\n      }\n    },\n    description: {\n      description: `Go to End`,\n      args: [{\n        name: 'args',\n        schema: {\n          type: 'object',\n          properties: {\n            'sticky': {\n              description: nls.localize('stickydesc', \"Stick to the end even when going to longer lines\"),\n              type: 'boolean',\n              default: false\n            }\n          }\n        }\n      }]\n    }\n  }));\n  CoreNavigationCommands.CursorEndSelect = registerEditorCommand(new EndCommand({\n    inSelectionMode: true,\n    id: 'cursorEndSelect',\n    precondition: undefined,\n    kbOpts: {\n      args: {\n        sticky: false\n      },\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 1024\n      /* Shift */\n      | 13\n      /* End */\n      ,\n      mac: {\n        primary: 1024\n        /* Shift */\n        | 13\n        /* End */\n        ,\n        secondary: [2048\n        /* CtrlCmd */\n        | 1024\n        /* Shift */\n        | 17\n        /* RightArrow */\n        ]\n      }\n    },\n    description: {\n      description: `Select to End`,\n      args: [{\n        name: 'args',\n        schema: {\n          type: 'object',\n          properties: {\n            'sticky': {\n              description: nls.localize('stickydesc', \"Stick to the end even when going to longer lines\"),\n              type: 'boolean',\n              default: false\n            }\n          }\n        }\n      }]\n    }\n  }));\n\n  class LineEndCommand extends CoreEditorCommand {\n    constructor(opts) {\n      super(opts);\n      this._inSelectionMode = opts.inSelectionMode;\n    }\n\n    runCoreEditorCommand(viewModel, args) {\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(args.source, 3\n      /* Explicit */\n      , this._exec(viewModel, viewModel.getCursorStates()));\n      viewModel.revealPrimaryCursor(args.source, true);\n    }\n\n    _exec(viewModel, cursors) {\n      const result = [];\n\n      for (let i = 0, len = cursors.length; i < len; i++) {\n        const cursor = cursors[i];\n        const lineNumber = cursor.modelState.position.lineNumber;\n        const maxColumn = viewModel.model.getLineMaxColumn(lineNumber);\n        result[i] = CursorState.fromModelState(cursor.modelState.move(this._inSelectionMode, lineNumber, maxColumn, 0));\n      }\n\n      return result;\n    }\n\n  }\n\n  CoreNavigationCommands.CursorLineEnd = registerEditorCommand(new LineEndCommand({\n    inSelectionMode: false,\n    id: 'cursorLineEnd',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 0,\n      mac: {\n        primary: 256\n        /* WinCtrl */\n        | 35\n        /* KeyE */\n\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorLineEndSelect = registerEditorCommand(new LineEndCommand({\n    inSelectionMode: true,\n    id: 'cursorLineEndSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 0,\n      mac: {\n        primary: 256\n        /* WinCtrl */\n        | 1024\n        /* Shift */\n        | 35\n        /* KeyE */\n\n      }\n    }\n  }));\n\n  class TopCommand extends CoreEditorCommand {\n    constructor(opts) {\n      super(opts);\n      this._inSelectionMode = opts.inSelectionMode;\n    }\n\n    runCoreEditorCommand(viewModel, args) {\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(args.source, 3\n      /* Explicit */\n      , CursorMoveCommands.moveToBeginningOfBuffer(viewModel, viewModel.getCursorStates(), this._inSelectionMode));\n      viewModel.revealPrimaryCursor(args.source, true);\n    }\n\n  }\n\n  CoreNavigationCommands.CursorTop = registerEditorCommand(new TopCommand({\n    inSelectionMode: false,\n    id: 'cursorTop',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048\n      /* CtrlCmd */\n      | 14\n      /* Home */\n      ,\n      mac: {\n        primary: 2048\n        /* CtrlCmd */\n        | 16\n        /* UpArrow */\n\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorTopSelect = registerEditorCommand(new TopCommand({\n    inSelectionMode: true,\n    id: 'cursorTopSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048\n      /* CtrlCmd */\n      | 1024\n      /* Shift */\n      | 14\n      /* Home */\n      ,\n      mac: {\n        primary: 2048\n        /* CtrlCmd */\n        | 1024\n        /* Shift */\n        | 16\n        /* UpArrow */\n\n      }\n    }\n  }));\n\n  class BottomCommand extends CoreEditorCommand {\n    constructor(opts) {\n      super(opts);\n      this._inSelectionMode = opts.inSelectionMode;\n    }\n\n    runCoreEditorCommand(viewModel, args) {\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(args.source, 3\n      /* Explicit */\n      , CursorMoveCommands.moveToEndOfBuffer(viewModel, viewModel.getCursorStates(), this._inSelectionMode));\n      viewModel.revealPrimaryCursor(args.source, true);\n    }\n\n  }\n\n  CoreNavigationCommands.CursorBottom = registerEditorCommand(new BottomCommand({\n    inSelectionMode: false,\n    id: 'cursorBottom',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048\n      /* CtrlCmd */\n      | 13\n      /* End */\n      ,\n      mac: {\n        primary: 2048\n        /* CtrlCmd */\n        | 18\n        /* DownArrow */\n\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorBottomSelect = registerEditorCommand(new BottomCommand({\n    inSelectionMode: true,\n    id: 'cursorBottomSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048\n      /* CtrlCmd */\n      | 1024\n      /* Shift */\n      | 13\n      /* End */\n      ,\n      mac: {\n        primary: 2048\n        /* CtrlCmd */\n        | 1024\n        /* Shift */\n        | 18\n        /* DownArrow */\n\n      }\n    }\n  }));\n\n  class EditorScrollImpl extends CoreEditorCommand {\n    constructor() {\n      super({\n        id: 'editorScroll',\n        precondition: undefined,\n        description: EditorScroll_.description\n      });\n    }\n\n    runCoreEditorCommand(viewModel, args) {\n      const parsed = EditorScroll_.parse(args);\n\n      if (!parsed) {\n        // illegal arguments\n        return;\n      }\n\n      this._runEditorScroll(viewModel, args.source, parsed);\n    }\n\n    _runEditorScroll(viewModel, source, args) {\n      const desiredScrollTop = this._computeDesiredScrollTop(viewModel, args);\n\n      if (args.revealCursor) {\n        // must ensure cursor is in new visible range\n        const desiredVisibleViewRange = viewModel.getCompletelyVisibleViewRangeAtScrollTop(desiredScrollTop);\n        viewModel.setCursorStates(source, 3\n        /* Explicit */\n        , [CursorMoveCommands.findPositionInViewportIfOutside(viewModel, viewModel.getPrimaryCursorState(), desiredVisibleViewRange, args.select)]);\n      }\n\n      viewModel.setScrollTop(desiredScrollTop, 0\n      /* Smooth */\n      );\n    }\n\n    _computeDesiredScrollTop(viewModel, args) {\n      if (args.unit === 1\n      /* Line */\n      ) {\n        // scrolling by model lines\n        const visibleViewRange = viewModel.getCompletelyVisibleViewRange();\n        const visibleModelRange = viewModel.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange);\n        let desiredTopModelLineNumber;\n\n        if (args.direction === 1\n        /* Up */\n        ) {\n          // must go x model lines up\n          desiredTopModelLineNumber = Math.max(1, visibleModelRange.startLineNumber - args.value);\n        } else {\n          // must go x model lines down\n          desiredTopModelLineNumber = Math.min(viewModel.model.getLineCount(), visibleModelRange.startLineNumber + args.value);\n        }\n\n        const viewPosition = viewModel.coordinatesConverter.convertModelPositionToViewPosition(new Position(desiredTopModelLineNumber, 1));\n        return viewModel.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n      }\n\n      let noOfLines;\n\n      if (args.unit === 3\n      /* Page */\n      ) {\n        noOfLines = viewModel.cursorConfig.pageSize * args.value;\n      } else if (args.unit === 4\n      /* HalfPage */\n      ) {\n        noOfLines = Math.round(viewModel.cursorConfig.pageSize / 2) * args.value;\n      } else {\n        noOfLines = args.value;\n      }\n\n      const deltaLines = (args.direction === 1\n      /* Up */\n      ? -1 : 1) * noOfLines;\n      return viewModel.getScrollTop() + deltaLines * viewModel.cursorConfig.lineHeight;\n    }\n\n  }\n\n  CoreNavigationCommands.EditorScrollImpl = EditorScrollImpl;\n  CoreNavigationCommands.EditorScroll = registerEditorCommand(new EditorScrollImpl());\n  CoreNavigationCommands.ScrollLineUp = registerEditorCommand(new class extends CoreEditorCommand {\n    constructor() {\n      super({\n        id: 'scrollLineUp',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 2048\n          /* CtrlCmd */\n          | 16\n          /* UpArrow */\n          ,\n          mac: {\n            primary: 256\n            /* WinCtrl */\n            | 11\n            /* PageUp */\n\n          }\n        }\n      });\n    }\n\n    runCoreEditorCommand(viewModel, args) {\n      CoreNavigationCommands.EditorScroll._runEditorScroll(viewModel, args.source, {\n        direction: 1\n        /* Up */\n        ,\n        unit: 2\n        /* WrappedLine */\n        ,\n        value: 1,\n        revealCursor: false,\n        select: false\n      });\n    }\n\n  }());\n  CoreNavigationCommands.ScrollPageUp = registerEditorCommand(new class extends CoreEditorCommand {\n    constructor() {\n      super({\n        id: 'scrollPageUp',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 2048\n          /* CtrlCmd */\n          | 11\n          /* PageUp */\n          ,\n          win: {\n            primary: 512\n            /* Alt */\n            | 11\n            /* PageUp */\n\n          },\n          linux: {\n            primary: 512\n            /* Alt */\n            | 11\n            /* PageUp */\n\n          }\n        }\n      });\n    }\n\n    runCoreEditorCommand(viewModel, args) {\n      CoreNavigationCommands.EditorScroll._runEditorScroll(viewModel, args.source, {\n        direction: 1\n        /* Up */\n        ,\n        unit: 3\n        /* Page */\n        ,\n        value: 1,\n        revealCursor: false,\n        select: false\n      });\n    }\n\n  }());\n  CoreNavigationCommands.ScrollLineDown = registerEditorCommand(new class extends CoreEditorCommand {\n    constructor() {\n      super({\n        id: 'scrollLineDown',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 2048\n          /* CtrlCmd */\n          | 18\n          /* DownArrow */\n          ,\n          mac: {\n            primary: 256\n            /* WinCtrl */\n            | 12\n            /* PageDown */\n\n          }\n        }\n      });\n    }\n\n    runCoreEditorCommand(viewModel, args) {\n      CoreNavigationCommands.EditorScroll._runEditorScroll(viewModel, args.source, {\n        direction: 2\n        /* Down */\n        ,\n        unit: 2\n        /* WrappedLine */\n        ,\n        value: 1,\n        revealCursor: false,\n        select: false\n      });\n    }\n\n  }());\n  CoreNavigationCommands.ScrollPageDown = registerEditorCommand(new class extends CoreEditorCommand {\n    constructor() {\n      super({\n        id: 'scrollPageDown',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 2048\n          /* CtrlCmd */\n          | 12\n          /* PageDown */\n          ,\n          win: {\n            primary: 512\n            /* Alt */\n            | 12\n            /* PageDown */\n\n          },\n          linux: {\n            primary: 512\n            /* Alt */\n            | 12\n            /* PageDown */\n\n          }\n        }\n      });\n    }\n\n    runCoreEditorCommand(viewModel, args) {\n      CoreNavigationCommands.EditorScroll._runEditorScroll(viewModel, args.source, {\n        direction: 2\n        /* Down */\n        ,\n        unit: 3\n        /* Page */\n        ,\n        value: 1,\n        revealCursor: false,\n        select: false\n      });\n    }\n\n  }());\n\n  class WordCommand extends CoreEditorCommand {\n    constructor(opts) {\n      super(opts);\n      this._inSelectionMode = opts.inSelectionMode;\n    }\n\n    runCoreEditorCommand(viewModel, args) {\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(args.source, 3\n      /* Explicit */\n      , [CursorMoveCommands.word(viewModel, viewModel.getPrimaryCursorState(), this._inSelectionMode, args.position)]);\n      viewModel.revealPrimaryCursor(args.source, true);\n    }\n\n  }\n\n  CoreNavigationCommands.WordSelect = registerEditorCommand(new WordCommand({\n    inSelectionMode: false,\n    id: '_wordSelect',\n    precondition: undefined\n  }));\n  CoreNavigationCommands.WordSelectDrag = registerEditorCommand(new WordCommand({\n    inSelectionMode: true,\n    id: '_wordSelectDrag',\n    precondition: undefined\n  }));\n  CoreNavigationCommands.LastCursorWordSelect = registerEditorCommand(new class extends CoreEditorCommand {\n    constructor() {\n      super({\n        id: 'lastCursorWordSelect',\n        precondition: undefined\n      });\n    }\n\n    runCoreEditorCommand(viewModel, args) {\n      const lastAddedCursorIndex = viewModel.getLastAddedCursorIndex();\n      const states = viewModel.getCursorStates();\n      const newStates = states.slice(0);\n      const lastAddedState = states[lastAddedCursorIndex];\n      newStates[lastAddedCursorIndex] = CursorMoveCommands.word(viewModel, lastAddedState, lastAddedState.modelState.hasSelection(), args.position);\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(args.source, 3\n      /* Explicit */\n      , newStates);\n    }\n\n  }());\n\n  class LineCommand extends CoreEditorCommand {\n    constructor(opts) {\n      super(opts);\n      this._inSelectionMode = opts.inSelectionMode;\n    }\n\n    runCoreEditorCommand(viewModel, args) {\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(args.source, 3\n      /* Explicit */\n      , [CursorMoveCommands.line(viewModel, viewModel.getPrimaryCursorState(), this._inSelectionMode, args.position, args.viewPosition)]);\n      viewModel.revealPrimaryCursor(args.source, false);\n    }\n\n  }\n\n  CoreNavigationCommands.LineSelect = registerEditorCommand(new LineCommand({\n    inSelectionMode: false,\n    id: '_lineSelect',\n    precondition: undefined\n  }));\n  CoreNavigationCommands.LineSelectDrag = registerEditorCommand(new LineCommand({\n    inSelectionMode: true,\n    id: '_lineSelectDrag',\n    precondition: undefined\n  }));\n\n  class LastCursorLineCommand extends CoreEditorCommand {\n    constructor(opts) {\n      super(opts);\n      this._inSelectionMode = opts.inSelectionMode;\n    }\n\n    runCoreEditorCommand(viewModel, args) {\n      const lastAddedCursorIndex = viewModel.getLastAddedCursorIndex();\n      const states = viewModel.getCursorStates();\n      const newStates = states.slice(0);\n      newStates[lastAddedCursorIndex] = CursorMoveCommands.line(viewModel, states[lastAddedCursorIndex], this._inSelectionMode, args.position, args.viewPosition);\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(args.source, 3\n      /* Explicit */\n      , newStates);\n    }\n\n  }\n\n  CoreNavigationCommands.LastCursorLineSelect = registerEditorCommand(new LastCursorLineCommand({\n    inSelectionMode: false,\n    id: 'lastCursorLineSelect',\n    precondition: undefined\n  }));\n  CoreNavigationCommands.LastCursorLineSelectDrag = registerEditorCommand(new LastCursorLineCommand({\n    inSelectionMode: true,\n    id: 'lastCursorLineSelectDrag',\n    precondition: undefined\n  }));\n  CoreNavigationCommands.ExpandLineSelection = registerEditorCommand(new class extends CoreEditorCommand {\n    constructor() {\n      super({\n        id: 'expandLineSelection',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 2048\n          /* CtrlCmd */\n          | 42\n          /* KeyL */\n\n        }\n      });\n    }\n\n    runCoreEditorCommand(viewModel, args) {\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(args.source, 3\n      /* Explicit */\n      , CursorMoveCommands.expandLineSelection(viewModel, viewModel.getCursorStates()));\n      viewModel.revealPrimaryCursor(args.source, true);\n    }\n\n  }());\n  CoreNavigationCommands.CancelSelection = registerEditorCommand(new class extends CoreEditorCommand {\n    constructor() {\n      super({\n        id: 'cancelSelection',\n        precondition: EditorContextKeys.hasNonEmptySelection,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 9\n          /* Escape */\n          ,\n          secondary: [1024\n          /* Shift */\n          | 9\n          /* Escape */\n          ]\n        }\n      });\n    }\n\n    runCoreEditorCommand(viewModel, args) {\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(args.source, 3\n      /* Explicit */\n      , [CursorMoveCommands.cancelSelection(viewModel, viewModel.getPrimaryCursorState())]);\n      viewModel.revealPrimaryCursor(args.source, true);\n    }\n\n  }());\n  CoreNavigationCommands.RemoveSecondaryCursors = registerEditorCommand(new class extends CoreEditorCommand {\n    constructor() {\n      super({\n        id: 'removeSecondaryCursors',\n        precondition: EditorContextKeys.hasMultipleSelections,\n        kbOpts: {\n          weight: CORE_WEIGHT + 1,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 9\n          /* Escape */\n          ,\n          secondary: [1024\n          /* Shift */\n          | 9\n          /* Escape */\n          ]\n        }\n      });\n    }\n\n    runCoreEditorCommand(viewModel, args) {\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(args.source, 3\n      /* Explicit */\n      , [viewModel.getPrimaryCursorState()]);\n      viewModel.revealPrimaryCursor(args.source, true);\n      status(nls.localize('removedCursor', \"Removed secondary cursors\"));\n    }\n\n  }());\n  CoreNavigationCommands.RevealLine = registerEditorCommand(new class extends CoreEditorCommand {\n    constructor() {\n      super({\n        id: 'revealLine',\n        precondition: undefined,\n        description: RevealLine_.description\n      });\n    }\n\n    runCoreEditorCommand(viewModel, args) {\n      const revealLineArg = args;\n      const lineNumberArg = revealLineArg.lineNumber || 0;\n      let lineNumber = typeof lineNumberArg === 'number' ? lineNumberArg + 1 : parseInt(lineNumberArg) + 1;\n\n      if (lineNumber < 1) {\n        lineNumber = 1;\n      }\n\n      const lineCount = viewModel.model.getLineCount();\n\n      if (lineNumber > lineCount) {\n        lineNumber = lineCount;\n      }\n\n      const range = new Range(lineNumber, 1, lineNumber, viewModel.model.getLineMaxColumn(lineNumber));\n      let revealAt = 0\n      /* Simple */\n      ;\n\n      if (revealLineArg.at) {\n        switch (revealLineArg.at) {\n          case RevealLine_.RawAtArgument.Top:\n            revealAt = 3\n            /* Top */\n            ;\n            break;\n\n          case RevealLine_.RawAtArgument.Center:\n            revealAt = 1\n            /* Center */\n            ;\n            break;\n\n          case RevealLine_.RawAtArgument.Bottom:\n            revealAt = 4\n            /* Bottom */\n            ;\n            break;\n\n          default:\n            break;\n        }\n      }\n\n      const viewRange = viewModel.coordinatesConverter.convertModelRangeToViewRange(range);\n      viewModel.revealRange(args.source, false, viewRange, revealAt, 0\n      /* Smooth */\n      );\n    }\n\n  }());\n  CoreNavigationCommands.SelectAll = new class extends EditorOrNativeTextInputCommand {\n    constructor() {\n      super(SelectAllCommand);\n    }\n\n    runDOMCommand() {\n      if (isFirefox) {\n        document.activeElement.focus();\n        document.activeElement.select();\n      }\n\n      document.execCommand('selectAll');\n    }\n\n    runEditorCommand(accessor, editor, args) {\n      const viewModel = editor._getViewModel();\n\n      if (!viewModel) {\n        // the editor has no view => has no cursors\n        return;\n      }\n\n      this.runCoreEditorCommand(viewModel, args);\n    }\n\n    runCoreEditorCommand(viewModel, args) {\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates('keyboard', 3\n      /* Explicit */\n      , [CursorMoveCommands.selectAll(viewModel, viewModel.getPrimaryCursorState())]);\n    }\n\n  }();\n  CoreNavigationCommands.SetSelection = registerEditorCommand(new class extends CoreEditorCommand {\n    constructor() {\n      super({\n        id: 'setSelection',\n        precondition: undefined\n      });\n    }\n\n    runCoreEditorCommand(viewModel, args) {\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(args.source, 3\n      /* Explicit */\n      , [CursorState.fromModelSelection(args.selection)]);\n    }\n\n  }());\n})(CoreNavigationCommands || (CoreNavigationCommands = {}));\n\nconst columnSelectionCondition = ContextKeyExpr.and(EditorContextKeys.textInputFocus, EditorContextKeys.columnSelection);\n\nfunction registerColumnSelection(id, keybinding) {\n  KeybindingsRegistry.registerKeybindingRule({\n    id: id,\n    primary: keybinding,\n    when: columnSelectionCondition,\n    weight: CORE_WEIGHT + 1\n  });\n}\n\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectLeft.id, 1024\n/* Shift */\n| 15\n/* LeftArrow */\n);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectRight.id, 1024\n/* Shift */\n| 17\n/* RightArrow */\n);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectUp.id, 1024\n/* Shift */\n| 16\n/* UpArrow */\n);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectPageUp.id, 1024\n/* Shift */\n| 11\n/* PageUp */\n);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectDown.id, 1024\n/* Shift */\n| 18\n/* DownArrow */\n);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectPageDown.id, 1024\n/* Shift */\n| 12\n/* PageDown */\n);\n\nfunction registerCommand(command) {\n  command.register();\n  return command;\n}\n\nexport var CoreEditingCommands;\n\n(function (CoreEditingCommands) {\n  class CoreEditingCommand extends EditorCommand {\n    runEditorCommand(accessor, editor, args) {\n      const viewModel = editor._getViewModel();\n\n      if (!viewModel) {\n        // the editor has no view => has no cursors\n        return;\n      }\n\n      this.runCoreEditingCommand(editor, viewModel, args || {});\n    }\n\n  }\n\n  CoreEditingCommands.CoreEditingCommand = CoreEditingCommand;\n  CoreEditingCommands.LineBreakInsert = registerEditorCommand(new class extends CoreEditingCommand {\n    constructor() {\n      super({\n        id: 'lineBreakInsert',\n        precondition: EditorContextKeys.writable,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 0,\n          mac: {\n            primary: 256\n            /* WinCtrl */\n            | 45\n            /* KeyO */\n\n          }\n        }\n      });\n    }\n\n    runCoreEditingCommand(editor, viewModel, args) {\n      editor.pushUndoStop();\n      editor.executeCommands(this.id, TypeOperations.lineBreakInsert(viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection)));\n    }\n\n  }());\n  CoreEditingCommands.Outdent = registerEditorCommand(new class extends CoreEditingCommand {\n    constructor() {\n      super({\n        id: 'outdent',\n        precondition: EditorContextKeys.writable,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: ContextKeyExpr.and(EditorContextKeys.editorTextFocus, EditorContextKeys.tabDoesNotMoveFocus),\n          primary: 1024\n          /* Shift */\n          | 2\n          /* Tab */\n\n        }\n      });\n    }\n\n    runCoreEditingCommand(editor, viewModel, args) {\n      editor.pushUndoStop();\n      editor.executeCommands(this.id, TypeOperations.outdent(viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection)));\n      editor.pushUndoStop();\n    }\n\n  }());\n  CoreEditingCommands.Tab = registerEditorCommand(new class extends CoreEditingCommand {\n    constructor() {\n      super({\n        id: 'tab',\n        precondition: EditorContextKeys.writable,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: ContextKeyExpr.and(EditorContextKeys.editorTextFocus, EditorContextKeys.tabDoesNotMoveFocus),\n          primary: 2\n          /* Tab */\n\n        }\n      });\n    }\n\n    runCoreEditingCommand(editor, viewModel, args) {\n      editor.pushUndoStop();\n      editor.executeCommands(this.id, TypeOperations.tab(viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection)));\n      editor.pushUndoStop();\n    }\n\n  }());\n  CoreEditingCommands.DeleteLeft = registerEditorCommand(new class extends CoreEditingCommand {\n    constructor() {\n      super({\n        id: 'deleteLeft',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 1\n          /* Backspace */\n          ,\n          secondary: [1024\n          /* Shift */\n          | 1\n          /* Backspace */\n          ],\n          mac: {\n            primary: 1\n            /* Backspace */\n            ,\n            secondary: [1024\n            /* Shift */\n            | 1\n            /* Backspace */\n            , 256\n            /* WinCtrl */\n            | 38\n            /* KeyH */\n            , 256\n            /* WinCtrl */\n            | 1\n            /* Backspace */\n            ]\n          }\n        }\n      });\n    }\n\n    runCoreEditingCommand(editor, viewModel, args) {\n      const [shouldPushStackElementBefore, commands] = DeleteOperations.deleteLeft(viewModel.getPrevEditOperationType(), viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection), viewModel.getCursorAutoClosedCharacters());\n\n      if (shouldPushStackElementBefore) {\n        editor.pushUndoStop();\n      }\n\n      editor.executeCommands(this.id, commands);\n      viewModel.setPrevEditOperationType(2\n      /* DeletingLeft */\n      );\n    }\n\n  }());\n  CoreEditingCommands.DeleteRight = registerEditorCommand(new class extends CoreEditingCommand {\n    constructor() {\n      super({\n        id: 'deleteRight',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 20\n          /* Delete */\n          ,\n          mac: {\n            primary: 20\n            /* Delete */\n            ,\n            secondary: [256\n            /* WinCtrl */\n            | 34\n            /* KeyD */\n            , 256\n            /* WinCtrl */\n            | 20\n            /* Delete */\n            ]\n          }\n        }\n      });\n    }\n\n    runCoreEditingCommand(editor, viewModel, args) {\n      const [shouldPushStackElementBefore, commands] = DeleteOperations.deleteRight(viewModel.getPrevEditOperationType(), viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection));\n\n      if (shouldPushStackElementBefore) {\n        editor.pushUndoStop();\n      }\n\n      editor.executeCommands(this.id, commands);\n      viewModel.setPrevEditOperationType(3\n      /* DeletingRight */\n      );\n    }\n\n  }());\n  CoreEditingCommands.Undo = new class extends EditorOrNativeTextInputCommand {\n    constructor() {\n      super(UndoCommand);\n    }\n\n    runDOMCommand() {\n      document.execCommand('undo');\n    }\n\n    runEditorCommand(accessor, editor, args) {\n      if (!editor.hasModel() || editor.getOption(80\n      /* readOnly */\n      ) === true) {\n        return;\n      }\n\n      return editor.getModel().undo();\n    }\n\n  }();\n  CoreEditingCommands.Redo = new class extends EditorOrNativeTextInputCommand {\n    constructor() {\n      super(RedoCommand);\n    }\n\n    runDOMCommand() {\n      document.execCommand('redo');\n    }\n\n    runEditorCommand(accessor, editor, args) {\n      if (!editor.hasModel() || editor.getOption(80\n      /* readOnly */\n      ) === true) {\n        return;\n      }\n\n      return editor.getModel().redo();\n    }\n\n  }();\n})(CoreEditingCommands || (CoreEditingCommands = {}));\n/**\n * A command that will invoke a command on the focused editor.\n */\n\n\nclass EditorHandlerCommand extends Command {\n  constructor(id, handlerId, description) {\n    super({\n      id: id,\n      precondition: undefined,\n      description: description\n    });\n    this._handlerId = handlerId;\n  }\n\n  runCommand(accessor, args) {\n    const editor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n\n    if (!editor) {\n      return;\n    }\n\n    editor.trigger('keyboard', this._handlerId, args);\n  }\n\n}\n\nfunction registerOverwritableCommand(handlerId, description) {\n  registerCommand(new EditorHandlerCommand('default:' + handlerId, handlerId));\n  registerCommand(new EditorHandlerCommand(handlerId, handlerId, description));\n}\n\nregisterOverwritableCommand(\"type\"\n/* Type */\n, {\n  description: `Type`,\n  args: [{\n    name: 'args',\n    schema: {\n      'type': 'object',\n      'required': ['text'],\n      'properties': {\n        'text': {\n          'type': 'string'\n        }\n      }\n    }\n  }]\n});\nregisterOverwritableCommand(\"replacePreviousChar\"\n/* ReplacePreviousChar */\n);\nregisterOverwritableCommand(\"compositionType\"\n/* CompositionType */\n);\nregisterOverwritableCommand(\"compositionStart\"\n/* CompositionStart */\n);\nregisterOverwritableCommand(\"compositionEnd\"\n/* CompositionEnd */\n);\nregisterOverwritableCommand(\"paste\"\n/* Paste */\n);\nregisterOverwritableCommand(\"cut\"\n/* Cut */\n);","map":{"version":3,"sources":["/home/umut/Documents/cs/cs410/Project2Group14/node_modules/monaco-editor/esm/vs/editor/browser/controller/coreCommands.js"],"names":["nls","isFirefox","types","status","Command","EditorCommand","registerEditorCommand","UndoCommand","RedoCommand","SelectAllCommand","ICodeEditorService","ColumnSelection","CursorState","DeleteOperations","CursorMove","CursorMove_","CursorMoveCommands","TypeOperations","Position","Range","EditorContextKeys","ContextKeyExpr","KeybindingsRegistry","CORE_WEIGHT","CoreEditorCommand","runEditorCommand","accessor","editor","args","viewModel","_getViewModel","runCoreEditorCommand","EditorScroll_","isEditorScrollArgs","arg","isObject","scrollArg","isString","to","isUndefined","by","value","isNumber","revealCursor","isBoolean","description","name","constraint","schema","RawDirection","Up","Down","RawUnit","Line","WrappedLine","Page","HalfPage","parse","direction","unit","Math","floor","select","RevealLine_","isRevealLineArgs","reveaLineArg","lineNumber","at","RawAtArgument","Top","Center","Bottom","EditorOrNativeTextInputCommand","constructor","target","addImplementation","focusedEditor","get","getFocusedCodeEditor","hasTextFocus","_runEditorCommand","activeElement","document","indexOf","tagName","toLowerCase","runDOMCommand","activeEditor","getActiveCodeEditor","focus","result","CoreNavigationCommands","BaseMoveToCommand","opts","_inSelectionMode","inSelectionMode","model","pushStackElement","setCursorStates","source","moveTo","getPrimaryCursorState","position","viewPosition","revealPrimaryCursor","MoveTo","id","precondition","undefined","MoveToSelect","ColumnSelectCommand","_getColumnSelectResult","getCursorColumnSelectData","viewStates","map","viewState","fromViewState","setCursorColumnSelectData","isReal","fromViewLineNumber","fromLineNumber","fromViewVisualColumn","fromVisualColumn","toViewLineNumber","toLineNumber","toViewVisualColumn","toVisualColumn","reversed","revealTopMostCursor","revealBottomMostCursor","ColumnSelect","primary","prevColumnSelectData","validatedPosition","validatePosition","validatedViewPosition","coordinatesConverter","validateViewPosition","column","doColumnSelect","mouseColumn","columnSelect","cursorConfig","CursorColumnSelectLeft","kbOpts","weight","kbExpr","textInputFocus","linux","columnSelectLeft","CursorColumnSelectRight","columnSelectRight","ColumnSelectUpCommand","_isPaged","isPaged","columnSelectUp","CursorColumnSelectUp","CursorColumnSelectPageUp","ColumnSelectDownCommand","columnSelectDown","CursorColumnSelectDown","CursorColumnSelectPageDown","CursorMoveImpl","parsed","_runCursorMove","_move","getCursorStates","cursors","simpleMove","viewportMove","CursorMoveBasedCommand","_staticArgs","dynamicArgs","pageSize","CursorLeft","mac","secondary","CursorLeftSelect","CursorRight","CursorRightSelect","CursorUp","CursorUpSelect","CursorPageUp","CursorPageUpSelect","CursorDown","CursorDownSelect","CursorPageDown","CursorPageDownSelect","CreateCursor","newState","wholeLine","line","states","length","newModelPosition","modelState","newViewPosition","i","len","state","selection","containsPosition","splice","push","LastCursorMoveToSelect","lastAddedCursorIndex","getLastAddedCursorIndex","newStates","slice","HomeCommand","moveToBeginningOfLine","CursorHome","CursorHomeSelect","LineStartCommand","_exec","cursor","fromModelState","move","CursorLineStart","CursorLineStartSelect","EndCommand","moveToEndOfLine","sticky","CursorEnd","type","properties","localize","default","CursorEndSelect","LineEndCommand","maxColumn","getLineMaxColumn","CursorLineEnd","CursorLineEndSelect","TopCommand","moveToBeginningOfBuffer","CursorTop","CursorTopSelect","BottomCommand","moveToEndOfBuffer","CursorBottom","CursorBottomSelect","EditorScrollImpl","_runEditorScroll","desiredScrollTop","_computeDesiredScrollTop","desiredVisibleViewRange","getCompletelyVisibleViewRangeAtScrollTop","findPositionInViewportIfOutside","setScrollTop","visibleViewRange","getCompletelyVisibleViewRange","visibleModelRange","convertViewRangeToModelRange","desiredTopModelLineNumber","max","startLineNumber","min","getLineCount","convertModelPositionToViewPosition","getVerticalOffsetForLineNumber","noOfLines","round","deltaLines","getScrollTop","lineHeight","EditorScroll","ScrollLineUp","ScrollPageUp","win","ScrollLineDown","ScrollPageDown","WordCommand","word","WordSelect","WordSelectDrag","LastCursorWordSelect","lastAddedState","hasSelection","LineCommand","LineSelect","LineSelectDrag","LastCursorLineCommand","LastCursorLineSelect","LastCursorLineSelectDrag","ExpandLineSelection","expandLineSelection","CancelSelection","hasNonEmptySelection","cancelSelection","RemoveSecondaryCursors","hasMultipleSelections","RevealLine","revealLineArg","lineNumberArg","parseInt","lineCount","range","revealAt","viewRange","convertModelRangeToViewRange","revealRange","SelectAll","execCommand","selectAll","SetSelection","fromModelSelection","columnSelectionCondition","and","columnSelection","registerColumnSelection","keybinding","registerKeybindingRule","when","registerCommand","command","register","CoreEditingCommands","CoreEditingCommand","runCoreEditingCommand","LineBreakInsert","writable","pushUndoStop","executeCommands","lineBreakInsert","s","Outdent","editorTextFocus","tabDoesNotMoveFocus","outdent","Tab","tab","DeleteLeft","shouldPushStackElementBefore","commands","deleteLeft","getPrevEditOperationType","getCursorAutoClosedCharacters","setPrevEditOperationType","DeleteRight","deleteRight","Undo","hasModel","getOption","getModel","undo","Redo","redo","EditorHandlerCommand","handlerId","_handlerId","runCommand","trigger","registerOverwritableCommand"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport { isFirefox } from '../../../base/browser/browser.js';\nimport * as types from '../../../base/common/types.js';\nimport { status } from '../../../base/browser/ui/aria/aria.js';\nimport { Command, EditorCommand, registerEditorCommand, UndoCommand, RedoCommand, SelectAllCommand } from '../editorExtensions.js';\nimport { ICodeEditorService } from '../services/codeEditorService.js';\nimport { ColumnSelection } from '../../common/controller/cursorColumnSelection.js';\nimport { CursorState } from '../../common/controller/cursorCommon.js';\nimport { DeleteOperations } from '../../common/controller/cursorDeleteOperations.js';\nimport { CursorMove as CursorMove_, CursorMoveCommands } from '../../common/controller/cursorMoveCommands.js';\nimport { TypeOperations } from '../../common/controller/cursorTypeOperations.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range } from '../../common/core/range.js';\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\nimport { ContextKeyExpr } from '../../../platform/contextkey/common/contextkey.js';\nimport { KeybindingsRegistry } from '../../../platform/keybinding/common/keybindingsRegistry.js';\nconst CORE_WEIGHT = 0 /* EditorCore */;\nexport class CoreEditorCommand extends EditorCommand {\n    runEditorCommand(accessor, editor, args) {\n        const viewModel = editor._getViewModel();\n        if (!viewModel) {\n            // the editor has no view => has no cursors\n            return;\n        }\n        this.runCoreEditorCommand(viewModel, args || {});\n    }\n}\nexport var EditorScroll_;\n(function (EditorScroll_) {\n    const isEditorScrollArgs = function (arg) {\n        if (!types.isObject(arg)) {\n            return false;\n        }\n        const scrollArg = arg;\n        if (!types.isString(scrollArg.to)) {\n            return false;\n        }\n        if (!types.isUndefined(scrollArg.by) && !types.isString(scrollArg.by)) {\n            return false;\n        }\n        if (!types.isUndefined(scrollArg.value) && !types.isNumber(scrollArg.value)) {\n            return false;\n        }\n        if (!types.isUndefined(scrollArg.revealCursor) && !types.isBoolean(scrollArg.revealCursor)) {\n            return false;\n        }\n        return true;\n    };\n    EditorScroll_.description = {\n        description: 'Scroll editor in the given direction',\n        args: [\n            {\n                name: 'Editor scroll argument object',\n                description: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t* 'to': A mandatory direction value.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'up', 'down'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t* 'by': Unit to move. Default is computed based on 'to' value.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'line', 'wrappedLine', 'page', 'halfPage'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t* 'value': Number of units to move. Default is '1'.\n\t\t\t\t\t* 'revealCursor': If 'true' reveals the cursor if it is outside view port.\n\t\t\t\t`,\n                constraint: isEditorScrollArgs,\n                schema: {\n                    'type': 'object',\n                    'required': ['to'],\n                    'properties': {\n                        'to': {\n                            'type': 'string',\n                            'enum': ['up', 'down']\n                        },\n                        'by': {\n                            'type': 'string',\n                            'enum': ['line', 'wrappedLine', 'page', 'halfPage']\n                        },\n                        'value': {\n                            'type': 'number',\n                            'default': 1\n                        },\n                        'revealCursor': {\n                            'type': 'boolean',\n                        }\n                    }\n                }\n            }\n        ]\n    };\n    /**\n     * Directions in the view for editor scroll command.\n     */\n    EditorScroll_.RawDirection = {\n        Up: 'up',\n        Down: 'down',\n    };\n    /**\n     * Units for editor scroll 'by' argument\n     */\n    EditorScroll_.RawUnit = {\n        Line: 'line',\n        WrappedLine: 'wrappedLine',\n        Page: 'page',\n        HalfPage: 'halfPage'\n    };\n    function parse(args) {\n        let direction;\n        switch (args.to) {\n            case EditorScroll_.RawDirection.Up:\n                direction = 1 /* Up */;\n                break;\n            case EditorScroll_.RawDirection.Down:\n                direction = 2 /* Down */;\n                break;\n            default:\n                // Illegal arguments\n                return null;\n        }\n        let unit;\n        switch (args.by) {\n            case EditorScroll_.RawUnit.Line:\n                unit = 1 /* Line */;\n                break;\n            case EditorScroll_.RawUnit.WrappedLine:\n                unit = 2 /* WrappedLine */;\n                break;\n            case EditorScroll_.RawUnit.Page:\n                unit = 3 /* Page */;\n                break;\n            case EditorScroll_.RawUnit.HalfPage:\n                unit = 4 /* HalfPage */;\n                break;\n            default:\n                unit = 2 /* WrappedLine */;\n        }\n        const value = Math.floor(args.value || 1);\n        const revealCursor = !!args.revealCursor;\n        return {\n            direction: direction,\n            unit: unit,\n            value: value,\n            revealCursor: revealCursor,\n            select: (!!args.select)\n        };\n    }\n    EditorScroll_.parse = parse;\n})(EditorScroll_ || (EditorScroll_ = {}));\nexport var RevealLine_;\n(function (RevealLine_) {\n    const isRevealLineArgs = function (arg) {\n        if (!types.isObject(arg)) {\n            return false;\n        }\n        const reveaLineArg = arg;\n        if (!types.isNumber(reveaLineArg.lineNumber) && !types.isString(reveaLineArg.lineNumber)) {\n            return false;\n        }\n        if (!types.isUndefined(reveaLineArg.at) && !types.isString(reveaLineArg.at)) {\n            return false;\n        }\n        return true;\n    };\n    RevealLine_.description = {\n        description: 'Reveal the given line at the given logical position',\n        args: [\n            {\n                name: 'Reveal line argument object',\n                description: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t* 'lineNumber': A mandatory line number value.\n\t\t\t\t\t* 'at': Logical position at which line has to be revealed.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'top', 'center', 'bottom'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t`,\n                constraint: isRevealLineArgs,\n                schema: {\n                    'type': 'object',\n                    'required': ['lineNumber'],\n                    'properties': {\n                        'lineNumber': {\n                            'type': ['number', 'string'],\n                        },\n                        'at': {\n                            'type': 'string',\n                            'enum': ['top', 'center', 'bottom']\n                        }\n                    }\n                }\n            }\n        ]\n    };\n    /**\n     * Values for reveal line 'at' argument\n     */\n    RevealLine_.RawAtArgument = {\n        Top: 'top',\n        Center: 'center',\n        Bottom: 'bottom'\n    };\n})(RevealLine_ || (RevealLine_ = {}));\nclass EditorOrNativeTextInputCommand {\n    constructor(target) {\n        // 1. handle case when focus is in editor.\n        target.addImplementation(10000, 'code-editor', (accessor, args) => {\n            // Only if editor text focus (i.e. not if editor has widget focus).\n            const focusedEditor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n            if (focusedEditor && focusedEditor.hasTextFocus()) {\n                return this._runEditorCommand(accessor, focusedEditor, args);\n            }\n            return false;\n        });\n        // 2. handle case when focus is in some other `input` / `textarea`.\n        target.addImplementation(1000, 'generic-dom-input-textarea', (accessor, args) => {\n            // Only if focused on an element that allows for entering text\n            const activeElement = document.activeElement;\n            if (activeElement && ['input', 'textarea'].indexOf(activeElement.tagName.toLowerCase()) >= 0) {\n                this.runDOMCommand();\n                return true;\n            }\n            return false;\n        });\n        // 3. (default) handle case when focus is somewhere else.\n        target.addImplementation(0, 'generic-dom', (accessor, args) => {\n            // Redirecting to active editor\n            const activeEditor = accessor.get(ICodeEditorService).getActiveCodeEditor();\n            if (activeEditor) {\n                activeEditor.focus();\n                return this._runEditorCommand(accessor, activeEditor, args);\n            }\n            return false;\n        });\n    }\n    _runEditorCommand(accessor, editor, args) {\n        const result = this.runEditorCommand(accessor, editor, args);\n        if (result) {\n            return result;\n        }\n        return true;\n    }\n}\nexport var CoreNavigationCommands;\n(function (CoreNavigationCommands) {\n    class BaseMoveToCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, [\n                CursorMoveCommands.moveTo(viewModel, viewModel.getPrimaryCursorState(), this._inSelectionMode, args.position, args.viewPosition)\n            ]);\n            viewModel.revealPrimaryCursor(args.source, true);\n        }\n    }\n    CoreNavigationCommands.MoveTo = registerEditorCommand(new BaseMoveToCommand({\n        id: '_moveTo',\n        inSelectionMode: false,\n        precondition: undefined\n    }));\n    CoreNavigationCommands.MoveToSelect = registerEditorCommand(new BaseMoveToCommand({\n        id: '_moveToSelect',\n        inSelectionMode: true,\n        precondition: undefined\n    }));\n    class ColumnSelectCommand extends CoreEditorCommand {\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            const result = this._getColumnSelectResult(viewModel, viewModel.getPrimaryCursorState(), viewModel.getCursorColumnSelectData(), args);\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, result.viewStates.map((viewState) => CursorState.fromViewState(viewState)));\n            viewModel.setCursorColumnSelectData({\n                isReal: true,\n                fromViewLineNumber: result.fromLineNumber,\n                fromViewVisualColumn: result.fromVisualColumn,\n                toViewLineNumber: result.toLineNumber,\n                toViewVisualColumn: result.toVisualColumn\n            });\n            if (result.reversed) {\n                viewModel.revealTopMostCursor(args.source);\n            }\n            else {\n                viewModel.revealBottomMostCursor(args.source);\n            }\n        }\n    }\n    CoreNavigationCommands.ColumnSelect = registerEditorCommand(new class extends ColumnSelectCommand {\n        constructor() {\n            super({\n                id: 'columnSelect',\n                precondition: undefined\n            });\n        }\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n            // validate `args`\n            const validatedPosition = viewModel.model.validatePosition(args.position);\n            const validatedViewPosition = viewModel.coordinatesConverter.validateViewPosition(new Position(args.viewPosition.lineNumber, args.viewPosition.column), validatedPosition);\n            let fromViewLineNumber = args.doColumnSelect ? prevColumnSelectData.fromViewLineNumber : validatedViewPosition.lineNumber;\n            let fromViewVisualColumn = args.doColumnSelect ? prevColumnSelectData.fromViewVisualColumn : args.mouseColumn - 1;\n            return ColumnSelection.columnSelect(viewModel.cursorConfig, viewModel, fromViewLineNumber, fromViewVisualColumn, validatedViewPosition.lineNumber, args.mouseColumn - 1);\n        }\n    });\n    CoreNavigationCommands.CursorColumnSelectLeft = registerEditorCommand(new class extends ColumnSelectCommand {\n        constructor() {\n            super({\n                id: 'cursorColumnSelectLeft',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 512 /* Alt */ | 15 /* LeftArrow */,\n                    linux: { primary: 0 }\n                }\n            });\n        }\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n            return ColumnSelection.columnSelectLeft(viewModel.cursorConfig, viewModel, prevColumnSelectData);\n        }\n    });\n    CoreNavigationCommands.CursorColumnSelectRight = registerEditorCommand(new class extends ColumnSelectCommand {\n        constructor() {\n            super({\n                id: 'cursorColumnSelectRight',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 512 /* Alt */ | 17 /* RightArrow */,\n                    linux: { primary: 0 }\n                }\n            });\n        }\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n            return ColumnSelection.columnSelectRight(viewModel.cursorConfig, viewModel, prevColumnSelectData);\n        }\n    });\n    class ColumnSelectUpCommand extends ColumnSelectCommand {\n        constructor(opts) {\n            super(opts);\n            this._isPaged = opts.isPaged;\n        }\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n            return ColumnSelection.columnSelectUp(viewModel.cursorConfig, viewModel, prevColumnSelectData, this._isPaged);\n        }\n    }\n    CoreNavigationCommands.CursorColumnSelectUp = registerEditorCommand(new ColumnSelectUpCommand({\n        isPaged: false,\n        id: 'cursorColumnSelectUp',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 512 /* Alt */ | 16 /* UpArrow */,\n            linux: { primary: 0 }\n        }\n    }));\n    CoreNavigationCommands.CursorColumnSelectPageUp = registerEditorCommand(new ColumnSelectUpCommand({\n        isPaged: true,\n        id: 'cursorColumnSelectPageUp',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 512 /* Alt */ | 11 /* PageUp */,\n            linux: { primary: 0 }\n        }\n    }));\n    class ColumnSelectDownCommand extends ColumnSelectCommand {\n        constructor(opts) {\n            super(opts);\n            this._isPaged = opts.isPaged;\n        }\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n            return ColumnSelection.columnSelectDown(viewModel.cursorConfig, viewModel, prevColumnSelectData, this._isPaged);\n        }\n    }\n    CoreNavigationCommands.CursorColumnSelectDown = registerEditorCommand(new ColumnSelectDownCommand({\n        isPaged: false,\n        id: 'cursorColumnSelectDown',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 512 /* Alt */ | 18 /* DownArrow */,\n            linux: { primary: 0 }\n        }\n    }));\n    CoreNavigationCommands.CursorColumnSelectPageDown = registerEditorCommand(new ColumnSelectDownCommand({\n        isPaged: true,\n        id: 'cursorColumnSelectPageDown',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 512 /* Alt */ | 12 /* PageDown */,\n            linux: { primary: 0 }\n        }\n    }));\n    class CursorMoveImpl extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'cursorMove',\n                precondition: undefined,\n                description: CursorMove_.description\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            const parsed = CursorMove_.parse(args);\n            if (!parsed) {\n                // illegal arguments\n                return;\n            }\n            this._runCursorMove(viewModel, args.source, parsed);\n        }\n        _runCursorMove(viewModel, source, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(source, 3 /* Explicit */, CursorMoveImpl._move(viewModel, viewModel.getCursorStates(), args));\n            viewModel.revealPrimaryCursor(source, true);\n        }\n        static _move(viewModel, cursors, args) {\n            const inSelectionMode = args.select;\n            const value = args.value;\n            switch (args.direction) {\n                case 0 /* Left */:\n                case 1 /* Right */:\n                case 2 /* Up */:\n                case 3 /* Down */:\n                case 4 /* PrevBlankLine */:\n                case 5 /* NextBlankLine */:\n                case 6 /* WrappedLineStart */:\n                case 7 /* WrappedLineFirstNonWhitespaceCharacter */:\n                case 8 /* WrappedLineColumnCenter */:\n                case 9 /* WrappedLineEnd */:\n                case 10 /* WrappedLineLastNonWhitespaceCharacter */:\n                    return CursorMoveCommands.simpleMove(viewModel, cursors, args.direction, inSelectionMode, value, args.unit);\n                case 11 /* ViewPortTop */:\n                case 13 /* ViewPortBottom */:\n                case 12 /* ViewPortCenter */:\n                case 14 /* ViewPortIfOutside */:\n                    return CursorMoveCommands.viewportMove(viewModel, cursors, args.direction, inSelectionMode, value);\n                default:\n                    return null;\n            }\n        }\n    }\n    CoreNavigationCommands.CursorMoveImpl = CursorMoveImpl;\n    CoreNavigationCommands.CursorMove = registerEditorCommand(new CursorMoveImpl());\n    class CursorMoveBasedCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._staticArgs = opts.args;\n        }\n        runCoreEditorCommand(viewModel, dynamicArgs) {\n            let args = this._staticArgs;\n            if (this._staticArgs.value === -1 /* PAGE_SIZE_MARKER */) {\n                // -1 is a marker for page size\n                args = {\n                    direction: this._staticArgs.direction,\n                    unit: this._staticArgs.unit,\n                    select: this._staticArgs.select,\n                    value: viewModel.cursorConfig.pageSize\n                };\n            }\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(dynamicArgs.source, 3 /* Explicit */, CursorMoveCommands.simpleMove(viewModel, viewModel.getCursorStates(), args.direction, args.select, args.value, args.unit));\n            viewModel.revealPrimaryCursor(dynamicArgs.source, true);\n        }\n    }\n    CoreNavigationCommands.CursorLeft = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 0 /* Left */,\n            unit: 0 /* None */,\n            select: false,\n            value: 1\n        },\n        id: 'cursorLeft',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 15 /* LeftArrow */,\n            mac: { primary: 15 /* LeftArrow */, secondary: [256 /* WinCtrl */ | 32 /* KeyB */] }\n        }\n    }));\n    CoreNavigationCommands.CursorLeftSelect = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 0 /* Left */,\n            unit: 0 /* None */,\n            select: true,\n            value: 1\n        },\n        id: 'cursorLeftSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* Shift */ | 15 /* LeftArrow */\n        }\n    }));\n    CoreNavigationCommands.CursorRight = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 1 /* Right */,\n            unit: 0 /* None */,\n            select: false,\n            value: 1\n        },\n        id: 'cursorRight',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 17 /* RightArrow */,\n            mac: { primary: 17 /* RightArrow */, secondary: [256 /* WinCtrl */ | 36 /* KeyF */] }\n        }\n    }));\n    CoreNavigationCommands.CursorRightSelect = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 1 /* Right */,\n            unit: 0 /* None */,\n            select: true,\n            value: 1\n        },\n        id: 'cursorRightSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* Shift */ | 17 /* RightArrow */\n        }\n    }));\n    CoreNavigationCommands.CursorUp = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 2 /* Up */,\n            unit: 2 /* WrappedLine */,\n            select: false,\n            value: 1\n        },\n        id: 'cursorUp',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 16 /* UpArrow */,\n            mac: { primary: 16 /* UpArrow */, secondary: [256 /* WinCtrl */ | 46 /* KeyP */] }\n        }\n    }));\n    CoreNavigationCommands.CursorUpSelect = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 2 /* Up */,\n            unit: 2 /* WrappedLine */,\n            select: true,\n            value: 1\n        },\n        id: 'cursorUpSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* Shift */ | 16 /* UpArrow */,\n            secondary: [2048 /* CtrlCmd */ | 1024 /* Shift */ | 16 /* UpArrow */],\n            mac: { primary: 1024 /* Shift */ | 16 /* UpArrow */ },\n            linux: { primary: 1024 /* Shift */ | 16 /* UpArrow */ }\n        }\n    }));\n    CoreNavigationCommands.CursorPageUp = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 2 /* Up */,\n            unit: 2 /* WrappedLine */,\n            select: false,\n            value: -1 /* PAGE_SIZE_MARKER */\n        },\n        id: 'cursorPageUp',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 11 /* PageUp */\n        }\n    }));\n    CoreNavigationCommands.CursorPageUpSelect = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 2 /* Up */,\n            unit: 2 /* WrappedLine */,\n            select: true,\n            value: -1 /* PAGE_SIZE_MARKER */\n        },\n        id: 'cursorPageUpSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* Shift */ | 11 /* PageUp */\n        }\n    }));\n    CoreNavigationCommands.CursorDown = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 3 /* Down */,\n            unit: 2 /* WrappedLine */,\n            select: false,\n            value: 1\n        },\n        id: 'cursorDown',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 18 /* DownArrow */,\n            mac: { primary: 18 /* DownArrow */, secondary: [256 /* WinCtrl */ | 44 /* KeyN */] }\n        }\n    }));\n    CoreNavigationCommands.CursorDownSelect = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 3 /* Down */,\n            unit: 2 /* WrappedLine */,\n            select: true,\n            value: 1\n        },\n        id: 'cursorDownSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* Shift */ | 18 /* DownArrow */,\n            secondary: [2048 /* CtrlCmd */ | 1024 /* Shift */ | 18 /* DownArrow */],\n            mac: { primary: 1024 /* Shift */ | 18 /* DownArrow */ },\n            linux: { primary: 1024 /* Shift */ | 18 /* DownArrow */ }\n        }\n    }));\n    CoreNavigationCommands.CursorPageDown = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 3 /* Down */,\n            unit: 2 /* WrappedLine */,\n            select: false,\n            value: -1 /* PAGE_SIZE_MARKER */\n        },\n        id: 'cursorPageDown',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 12 /* PageDown */\n        }\n    }));\n    CoreNavigationCommands.CursorPageDownSelect = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 3 /* Down */,\n            unit: 2 /* WrappedLine */,\n            select: true,\n            value: -1 /* PAGE_SIZE_MARKER */\n        },\n        id: 'cursorPageDownSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* Shift */ | 12 /* PageDown */\n        }\n    }));\n    CoreNavigationCommands.CreateCursor = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'createCursor',\n                precondition: undefined\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            let newState;\n            if (args.wholeLine) {\n                newState = CursorMoveCommands.line(viewModel, viewModel.getPrimaryCursorState(), false, args.position, args.viewPosition);\n            }\n            else {\n                newState = CursorMoveCommands.moveTo(viewModel, viewModel.getPrimaryCursorState(), false, args.position, args.viewPosition);\n            }\n            const states = viewModel.getCursorStates();\n            // Check if we should remove a cursor (sort of like a toggle)\n            if (states.length > 1) {\n                const newModelPosition = (newState.modelState ? newState.modelState.position : null);\n                const newViewPosition = (newState.viewState ? newState.viewState.position : null);\n                for (let i = 0, len = states.length; i < len; i++) {\n                    const state = states[i];\n                    if (newModelPosition && !state.modelState.selection.containsPosition(newModelPosition)) {\n                        continue;\n                    }\n                    if (newViewPosition && !state.viewState.selection.containsPosition(newViewPosition)) {\n                        continue;\n                    }\n                    // => Remove the cursor\n                    states.splice(i, 1);\n                    viewModel.model.pushStackElement();\n                    viewModel.setCursorStates(args.source, 3 /* Explicit */, states);\n                    return;\n                }\n            }\n            // => Add the new cursor\n            states.push(newState);\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, states);\n        }\n    });\n    CoreNavigationCommands.LastCursorMoveToSelect = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: '_lastCursorMoveToSelect',\n                precondition: undefined\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            const lastAddedCursorIndex = viewModel.getLastAddedCursorIndex();\n            const states = viewModel.getCursorStates();\n            const newStates = states.slice(0);\n            newStates[lastAddedCursorIndex] = CursorMoveCommands.moveTo(viewModel, states[lastAddedCursorIndex], true, args.position, args.viewPosition);\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, newStates);\n        }\n    });\n    class HomeCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, CursorMoveCommands.moveToBeginningOfLine(viewModel, viewModel.getCursorStates(), this._inSelectionMode));\n            viewModel.revealPrimaryCursor(args.source, true);\n        }\n    }\n    CoreNavigationCommands.CursorHome = registerEditorCommand(new HomeCommand({\n        inSelectionMode: false,\n        id: 'cursorHome',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 14 /* Home */,\n            mac: { primary: 14 /* Home */, secondary: [2048 /* CtrlCmd */ | 15 /* LeftArrow */] }\n        }\n    }));\n    CoreNavigationCommands.CursorHomeSelect = registerEditorCommand(new HomeCommand({\n        inSelectionMode: true,\n        id: 'cursorHomeSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* Shift */ | 14 /* Home */,\n            mac: { primary: 1024 /* Shift */ | 14 /* Home */, secondary: [2048 /* CtrlCmd */ | 1024 /* Shift */ | 15 /* LeftArrow */] }\n        }\n    }));\n    class LineStartCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, this._exec(viewModel.getCursorStates()));\n            viewModel.revealPrimaryCursor(args.source, true);\n        }\n        _exec(cursors) {\n            const result = [];\n            for (let i = 0, len = cursors.length; i < len; i++) {\n                const cursor = cursors[i];\n                const lineNumber = cursor.modelState.position.lineNumber;\n                result[i] = CursorState.fromModelState(cursor.modelState.move(this._inSelectionMode, lineNumber, 1, 0));\n            }\n            return result;\n        }\n    }\n    CoreNavigationCommands.CursorLineStart = registerEditorCommand(new LineStartCommand({\n        inSelectionMode: false,\n        id: 'cursorLineStart',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 0,\n            mac: { primary: 256 /* WinCtrl */ | 31 /* KeyA */ }\n        }\n    }));\n    CoreNavigationCommands.CursorLineStartSelect = registerEditorCommand(new LineStartCommand({\n        inSelectionMode: true,\n        id: 'cursorLineStartSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 0,\n            mac: { primary: 256 /* WinCtrl */ | 1024 /* Shift */ | 31 /* KeyA */ }\n        }\n    }));\n    class EndCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, CursorMoveCommands.moveToEndOfLine(viewModel, viewModel.getCursorStates(), this._inSelectionMode, args.sticky || false));\n            viewModel.revealPrimaryCursor(args.source, true);\n        }\n    }\n    CoreNavigationCommands.CursorEnd = registerEditorCommand(new EndCommand({\n        inSelectionMode: false,\n        id: 'cursorEnd',\n        precondition: undefined,\n        kbOpts: {\n            args: { sticky: false },\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 13 /* End */,\n            mac: { primary: 13 /* End */, secondary: [2048 /* CtrlCmd */ | 17 /* RightArrow */] }\n        },\n        description: {\n            description: `Go to End`,\n            args: [{\n                    name: 'args',\n                    schema: {\n                        type: 'object',\n                        properties: {\n                            'sticky': {\n                                description: nls.localize('stickydesc', \"Stick to the end even when going to longer lines\"),\n                                type: 'boolean',\n                                default: false\n                            }\n                        }\n                    }\n                }]\n        }\n    }));\n    CoreNavigationCommands.CursorEndSelect = registerEditorCommand(new EndCommand({\n        inSelectionMode: true,\n        id: 'cursorEndSelect',\n        precondition: undefined,\n        kbOpts: {\n            args: { sticky: false },\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* Shift */ | 13 /* End */,\n            mac: { primary: 1024 /* Shift */ | 13 /* End */, secondary: [2048 /* CtrlCmd */ | 1024 /* Shift */ | 17 /* RightArrow */] }\n        },\n        description: {\n            description: `Select to End`,\n            args: [{\n                    name: 'args',\n                    schema: {\n                        type: 'object',\n                        properties: {\n                            'sticky': {\n                                description: nls.localize('stickydesc', \"Stick to the end even when going to longer lines\"),\n                                type: 'boolean',\n                                default: false\n                            }\n                        }\n                    }\n                }]\n        }\n    }));\n    class LineEndCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, this._exec(viewModel, viewModel.getCursorStates()));\n            viewModel.revealPrimaryCursor(args.source, true);\n        }\n        _exec(viewModel, cursors) {\n            const result = [];\n            for (let i = 0, len = cursors.length; i < len; i++) {\n                const cursor = cursors[i];\n                const lineNumber = cursor.modelState.position.lineNumber;\n                const maxColumn = viewModel.model.getLineMaxColumn(lineNumber);\n                result[i] = CursorState.fromModelState(cursor.modelState.move(this._inSelectionMode, lineNumber, maxColumn, 0));\n            }\n            return result;\n        }\n    }\n    CoreNavigationCommands.CursorLineEnd = registerEditorCommand(new LineEndCommand({\n        inSelectionMode: false,\n        id: 'cursorLineEnd',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 0,\n            mac: { primary: 256 /* WinCtrl */ | 35 /* KeyE */ }\n        }\n    }));\n    CoreNavigationCommands.CursorLineEndSelect = registerEditorCommand(new LineEndCommand({\n        inSelectionMode: true,\n        id: 'cursorLineEndSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 0,\n            mac: { primary: 256 /* WinCtrl */ | 1024 /* Shift */ | 35 /* KeyE */ }\n        }\n    }));\n    class TopCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, CursorMoveCommands.moveToBeginningOfBuffer(viewModel, viewModel.getCursorStates(), this._inSelectionMode));\n            viewModel.revealPrimaryCursor(args.source, true);\n        }\n    }\n    CoreNavigationCommands.CursorTop = registerEditorCommand(new TopCommand({\n        inSelectionMode: false,\n        id: 'cursorTop',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* CtrlCmd */ | 14 /* Home */,\n            mac: { primary: 2048 /* CtrlCmd */ | 16 /* UpArrow */ }\n        }\n    }));\n    CoreNavigationCommands.CursorTopSelect = registerEditorCommand(new TopCommand({\n        inSelectionMode: true,\n        id: 'cursorTopSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 14 /* Home */,\n            mac: { primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 16 /* UpArrow */ }\n        }\n    }));\n    class BottomCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, CursorMoveCommands.moveToEndOfBuffer(viewModel, viewModel.getCursorStates(), this._inSelectionMode));\n            viewModel.revealPrimaryCursor(args.source, true);\n        }\n    }\n    CoreNavigationCommands.CursorBottom = registerEditorCommand(new BottomCommand({\n        inSelectionMode: false,\n        id: 'cursorBottom',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* CtrlCmd */ | 13 /* End */,\n            mac: { primary: 2048 /* CtrlCmd */ | 18 /* DownArrow */ }\n        }\n    }));\n    CoreNavigationCommands.CursorBottomSelect = registerEditorCommand(new BottomCommand({\n        inSelectionMode: true,\n        id: 'cursorBottomSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 13 /* End */,\n            mac: { primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 18 /* DownArrow */ }\n        }\n    }));\n    class EditorScrollImpl extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'editorScroll',\n                precondition: undefined,\n                description: EditorScroll_.description\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            const parsed = EditorScroll_.parse(args);\n            if (!parsed) {\n                // illegal arguments\n                return;\n            }\n            this._runEditorScroll(viewModel, args.source, parsed);\n        }\n        _runEditorScroll(viewModel, source, args) {\n            const desiredScrollTop = this._computeDesiredScrollTop(viewModel, args);\n            if (args.revealCursor) {\n                // must ensure cursor is in new visible range\n                const desiredVisibleViewRange = viewModel.getCompletelyVisibleViewRangeAtScrollTop(desiredScrollTop);\n                viewModel.setCursorStates(source, 3 /* Explicit */, [\n                    CursorMoveCommands.findPositionInViewportIfOutside(viewModel, viewModel.getPrimaryCursorState(), desiredVisibleViewRange, args.select)\n                ]);\n            }\n            viewModel.setScrollTop(desiredScrollTop, 0 /* Smooth */);\n        }\n        _computeDesiredScrollTop(viewModel, args) {\n            if (args.unit === 1 /* Line */) {\n                // scrolling by model lines\n                const visibleViewRange = viewModel.getCompletelyVisibleViewRange();\n                const visibleModelRange = viewModel.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange);\n                let desiredTopModelLineNumber;\n                if (args.direction === 1 /* Up */) {\n                    // must go x model lines up\n                    desiredTopModelLineNumber = Math.max(1, visibleModelRange.startLineNumber - args.value);\n                }\n                else {\n                    // must go x model lines down\n                    desiredTopModelLineNumber = Math.min(viewModel.model.getLineCount(), visibleModelRange.startLineNumber + args.value);\n                }\n                const viewPosition = viewModel.coordinatesConverter.convertModelPositionToViewPosition(new Position(desiredTopModelLineNumber, 1));\n                return viewModel.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n            }\n            let noOfLines;\n            if (args.unit === 3 /* Page */) {\n                noOfLines = viewModel.cursorConfig.pageSize * args.value;\n            }\n            else if (args.unit === 4 /* HalfPage */) {\n                noOfLines = Math.round(viewModel.cursorConfig.pageSize / 2) * args.value;\n            }\n            else {\n                noOfLines = args.value;\n            }\n            const deltaLines = (args.direction === 1 /* Up */ ? -1 : 1) * noOfLines;\n            return viewModel.getScrollTop() + deltaLines * viewModel.cursorConfig.lineHeight;\n        }\n    }\n    CoreNavigationCommands.EditorScrollImpl = EditorScrollImpl;\n    CoreNavigationCommands.EditorScroll = registerEditorCommand(new EditorScrollImpl());\n    CoreNavigationCommands.ScrollLineUp = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollLineUp',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 2048 /* CtrlCmd */ | 16 /* UpArrow */,\n                    mac: { primary: 256 /* WinCtrl */ | 11 /* PageUp */ }\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll._runEditorScroll(viewModel, args.source, {\n                direction: 1 /* Up */,\n                unit: 2 /* WrappedLine */,\n                value: 1,\n                revealCursor: false,\n                select: false\n            });\n        }\n    });\n    CoreNavigationCommands.ScrollPageUp = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollPageUp',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 2048 /* CtrlCmd */ | 11 /* PageUp */,\n                    win: { primary: 512 /* Alt */ | 11 /* PageUp */ },\n                    linux: { primary: 512 /* Alt */ | 11 /* PageUp */ }\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll._runEditorScroll(viewModel, args.source, {\n                direction: 1 /* Up */,\n                unit: 3 /* Page */,\n                value: 1,\n                revealCursor: false,\n                select: false\n            });\n        }\n    });\n    CoreNavigationCommands.ScrollLineDown = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollLineDown',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 2048 /* CtrlCmd */ | 18 /* DownArrow */,\n                    mac: { primary: 256 /* WinCtrl */ | 12 /* PageDown */ }\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll._runEditorScroll(viewModel, args.source, {\n                direction: 2 /* Down */,\n                unit: 2 /* WrappedLine */,\n                value: 1,\n                revealCursor: false,\n                select: false\n            });\n        }\n    });\n    CoreNavigationCommands.ScrollPageDown = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollPageDown',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 2048 /* CtrlCmd */ | 12 /* PageDown */,\n                    win: { primary: 512 /* Alt */ | 12 /* PageDown */ },\n                    linux: { primary: 512 /* Alt */ | 12 /* PageDown */ }\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll._runEditorScroll(viewModel, args.source, {\n                direction: 2 /* Down */,\n                unit: 3 /* Page */,\n                value: 1,\n                revealCursor: false,\n                select: false\n            });\n        }\n    });\n    class WordCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, [\n                CursorMoveCommands.word(viewModel, viewModel.getPrimaryCursorState(), this._inSelectionMode, args.position)\n            ]);\n            viewModel.revealPrimaryCursor(args.source, true);\n        }\n    }\n    CoreNavigationCommands.WordSelect = registerEditorCommand(new WordCommand({\n        inSelectionMode: false,\n        id: '_wordSelect',\n        precondition: undefined\n    }));\n    CoreNavigationCommands.WordSelectDrag = registerEditorCommand(new WordCommand({\n        inSelectionMode: true,\n        id: '_wordSelectDrag',\n        precondition: undefined\n    }));\n    CoreNavigationCommands.LastCursorWordSelect = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'lastCursorWordSelect',\n                precondition: undefined\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            const lastAddedCursorIndex = viewModel.getLastAddedCursorIndex();\n            const states = viewModel.getCursorStates();\n            const newStates = states.slice(0);\n            const lastAddedState = states[lastAddedCursorIndex];\n            newStates[lastAddedCursorIndex] = CursorMoveCommands.word(viewModel, lastAddedState, lastAddedState.modelState.hasSelection(), args.position);\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, newStates);\n        }\n    });\n    class LineCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, [\n                CursorMoveCommands.line(viewModel, viewModel.getPrimaryCursorState(), this._inSelectionMode, args.position, args.viewPosition)\n            ]);\n            viewModel.revealPrimaryCursor(args.source, false);\n        }\n    }\n    CoreNavigationCommands.LineSelect = registerEditorCommand(new LineCommand({\n        inSelectionMode: false,\n        id: '_lineSelect',\n        precondition: undefined\n    }));\n    CoreNavigationCommands.LineSelectDrag = registerEditorCommand(new LineCommand({\n        inSelectionMode: true,\n        id: '_lineSelectDrag',\n        precondition: undefined\n    }));\n    class LastCursorLineCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            const lastAddedCursorIndex = viewModel.getLastAddedCursorIndex();\n            const states = viewModel.getCursorStates();\n            const newStates = states.slice(0);\n            newStates[lastAddedCursorIndex] = CursorMoveCommands.line(viewModel, states[lastAddedCursorIndex], this._inSelectionMode, args.position, args.viewPosition);\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, newStates);\n        }\n    }\n    CoreNavigationCommands.LastCursorLineSelect = registerEditorCommand(new LastCursorLineCommand({\n        inSelectionMode: false,\n        id: 'lastCursorLineSelect',\n        precondition: undefined\n    }));\n    CoreNavigationCommands.LastCursorLineSelectDrag = registerEditorCommand(new LastCursorLineCommand({\n        inSelectionMode: true,\n        id: 'lastCursorLineSelectDrag',\n        precondition: undefined\n    }));\n    CoreNavigationCommands.ExpandLineSelection = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'expandLineSelection',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 2048 /* CtrlCmd */ | 42 /* KeyL */\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, CursorMoveCommands.expandLineSelection(viewModel, viewModel.getCursorStates()));\n            viewModel.revealPrimaryCursor(args.source, true);\n        }\n    });\n    CoreNavigationCommands.CancelSelection = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'cancelSelection',\n                precondition: EditorContextKeys.hasNonEmptySelection,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 9 /* Escape */,\n                    secondary: [1024 /* Shift */ | 9 /* Escape */]\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, [\n                CursorMoveCommands.cancelSelection(viewModel, viewModel.getPrimaryCursorState())\n            ]);\n            viewModel.revealPrimaryCursor(args.source, true);\n        }\n    });\n    CoreNavigationCommands.RemoveSecondaryCursors = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'removeSecondaryCursors',\n                precondition: EditorContextKeys.hasMultipleSelections,\n                kbOpts: {\n                    weight: CORE_WEIGHT + 1,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 9 /* Escape */,\n                    secondary: [1024 /* Shift */ | 9 /* Escape */]\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, [\n                viewModel.getPrimaryCursorState()\n            ]);\n            viewModel.revealPrimaryCursor(args.source, true);\n            status(nls.localize('removedCursor', \"Removed secondary cursors\"));\n        }\n    });\n    CoreNavigationCommands.RevealLine = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'revealLine',\n                precondition: undefined,\n                description: RevealLine_.description\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            const revealLineArg = args;\n            const lineNumberArg = revealLineArg.lineNumber || 0;\n            let lineNumber = typeof lineNumberArg === 'number' ? (lineNumberArg + 1) : (parseInt(lineNumberArg) + 1);\n            if (lineNumber < 1) {\n                lineNumber = 1;\n            }\n            const lineCount = viewModel.model.getLineCount();\n            if (lineNumber > lineCount) {\n                lineNumber = lineCount;\n            }\n            const range = new Range(lineNumber, 1, lineNumber, viewModel.model.getLineMaxColumn(lineNumber));\n            let revealAt = 0 /* Simple */;\n            if (revealLineArg.at) {\n                switch (revealLineArg.at) {\n                    case RevealLine_.RawAtArgument.Top:\n                        revealAt = 3 /* Top */;\n                        break;\n                    case RevealLine_.RawAtArgument.Center:\n                        revealAt = 1 /* Center */;\n                        break;\n                    case RevealLine_.RawAtArgument.Bottom:\n                        revealAt = 4 /* Bottom */;\n                        break;\n                    default:\n                        break;\n                }\n            }\n            const viewRange = viewModel.coordinatesConverter.convertModelRangeToViewRange(range);\n            viewModel.revealRange(args.source, false, viewRange, revealAt, 0 /* Smooth */);\n        }\n    });\n    CoreNavigationCommands.SelectAll = new class extends EditorOrNativeTextInputCommand {\n        constructor() {\n            super(SelectAllCommand);\n        }\n        runDOMCommand() {\n            if (isFirefox) {\n                document.activeElement.focus();\n                document.activeElement.select();\n            }\n            document.execCommand('selectAll');\n        }\n        runEditorCommand(accessor, editor, args) {\n            const viewModel = editor._getViewModel();\n            if (!viewModel) {\n                // the editor has no view => has no cursors\n                return;\n            }\n            this.runCoreEditorCommand(viewModel, args);\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates('keyboard', 3 /* Explicit */, [\n                CursorMoveCommands.selectAll(viewModel, viewModel.getPrimaryCursorState())\n            ]);\n        }\n    }();\n    CoreNavigationCommands.SetSelection = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'setSelection',\n                precondition: undefined\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, [\n                CursorState.fromModelSelection(args.selection)\n            ]);\n        }\n    });\n})(CoreNavigationCommands || (CoreNavigationCommands = {}));\nconst columnSelectionCondition = ContextKeyExpr.and(EditorContextKeys.textInputFocus, EditorContextKeys.columnSelection);\nfunction registerColumnSelection(id, keybinding) {\n    KeybindingsRegistry.registerKeybindingRule({\n        id: id,\n        primary: keybinding,\n        when: columnSelectionCondition,\n        weight: CORE_WEIGHT + 1\n    });\n}\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectLeft.id, 1024 /* Shift */ | 15 /* LeftArrow */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectRight.id, 1024 /* Shift */ | 17 /* RightArrow */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectUp.id, 1024 /* Shift */ | 16 /* UpArrow */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectPageUp.id, 1024 /* Shift */ | 11 /* PageUp */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectDown.id, 1024 /* Shift */ | 18 /* DownArrow */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectPageDown.id, 1024 /* Shift */ | 12 /* PageDown */);\nfunction registerCommand(command) {\n    command.register();\n    return command;\n}\nexport var CoreEditingCommands;\n(function (CoreEditingCommands) {\n    class CoreEditingCommand extends EditorCommand {\n        runEditorCommand(accessor, editor, args) {\n            const viewModel = editor._getViewModel();\n            if (!viewModel) {\n                // the editor has no view => has no cursors\n                return;\n            }\n            this.runCoreEditingCommand(editor, viewModel, args || {});\n        }\n    }\n    CoreEditingCommands.CoreEditingCommand = CoreEditingCommand;\n    CoreEditingCommands.LineBreakInsert = registerEditorCommand(new class extends CoreEditingCommand {\n        constructor() {\n            super({\n                id: 'lineBreakInsert',\n                precondition: EditorContextKeys.writable,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 0,\n                    mac: { primary: 256 /* WinCtrl */ | 45 /* KeyO */ }\n                }\n            });\n        }\n        runCoreEditingCommand(editor, viewModel, args) {\n            editor.pushUndoStop();\n            editor.executeCommands(this.id, TypeOperations.lineBreakInsert(viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection)));\n        }\n    });\n    CoreEditingCommands.Outdent = registerEditorCommand(new class extends CoreEditingCommand {\n        constructor() {\n            super({\n                id: 'outdent',\n                precondition: EditorContextKeys.writable,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: ContextKeyExpr.and(EditorContextKeys.editorTextFocus, EditorContextKeys.tabDoesNotMoveFocus),\n                    primary: 1024 /* Shift */ | 2 /* Tab */\n                }\n            });\n        }\n        runCoreEditingCommand(editor, viewModel, args) {\n            editor.pushUndoStop();\n            editor.executeCommands(this.id, TypeOperations.outdent(viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection)));\n            editor.pushUndoStop();\n        }\n    });\n    CoreEditingCommands.Tab = registerEditorCommand(new class extends CoreEditingCommand {\n        constructor() {\n            super({\n                id: 'tab',\n                precondition: EditorContextKeys.writable,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: ContextKeyExpr.and(EditorContextKeys.editorTextFocus, EditorContextKeys.tabDoesNotMoveFocus),\n                    primary: 2 /* Tab */\n                }\n            });\n        }\n        runCoreEditingCommand(editor, viewModel, args) {\n            editor.pushUndoStop();\n            editor.executeCommands(this.id, TypeOperations.tab(viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection)));\n            editor.pushUndoStop();\n        }\n    });\n    CoreEditingCommands.DeleteLeft = registerEditorCommand(new class extends CoreEditingCommand {\n        constructor() {\n            super({\n                id: 'deleteLeft',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 1 /* Backspace */,\n                    secondary: [1024 /* Shift */ | 1 /* Backspace */],\n                    mac: { primary: 1 /* Backspace */, secondary: [1024 /* Shift */ | 1 /* Backspace */, 256 /* WinCtrl */ | 38 /* KeyH */, 256 /* WinCtrl */ | 1 /* Backspace */] }\n                }\n            });\n        }\n        runCoreEditingCommand(editor, viewModel, args) {\n            const [shouldPushStackElementBefore, commands] = DeleteOperations.deleteLeft(viewModel.getPrevEditOperationType(), viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection), viewModel.getCursorAutoClosedCharacters());\n            if (shouldPushStackElementBefore) {\n                editor.pushUndoStop();\n            }\n            editor.executeCommands(this.id, commands);\n            viewModel.setPrevEditOperationType(2 /* DeletingLeft */);\n        }\n    });\n    CoreEditingCommands.DeleteRight = registerEditorCommand(new class extends CoreEditingCommand {\n        constructor() {\n            super({\n                id: 'deleteRight',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 20 /* Delete */,\n                    mac: { primary: 20 /* Delete */, secondary: [256 /* WinCtrl */ | 34 /* KeyD */, 256 /* WinCtrl */ | 20 /* Delete */] }\n                }\n            });\n        }\n        runCoreEditingCommand(editor, viewModel, args) {\n            const [shouldPushStackElementBefore, commands] = DeleteOperations.deleteRight(viewModel.getPrevEditOperationType(), viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection));\n            if (shouldPushStackElementBefore) {\n                editor.pushUndoStop();\n            }\n            editor.executeCommands(this.id, commands);\n            viewModel.setPrevEditOperationType(3 /* DeletingRight */);\n        }\n    });\n    CoreEditingCommands.Undo = new class extends EditorOrNativeTextInputCommand {\n        constructor() {\n            super(UndoCommand);\n        }\n        runDOMCommand() {\n            document.execCommand('undo');\n        }\n        runEditorCommand(accessor, editor, args) {\n            if (!editor.hasModel() || editor.getOption(80 /* readOnly */) === true) {\n                return;\n            }\n            return editor.getModel().undo();\n        }\n    }();\n    CoreEditingCommands.Redo = new class extends EditorOrNativeTextInputCommand {\n        constructor() {\n            super(RedoCommand);\n        }\n        runDOMCommand() {\n            document.execCommand('redo');\n        }\n        runEditorCommand(accessor, editor, args) {\n            if (!editor.hasModel() || editor.getOption(80 /* readOnly */) === true) {\n                return;\n            }\n            return editor.getModel().redo();\n        }\n    }();\n})(CoreEditingCommands || (CoreEditingCommands = {}));\n/**\n * A command that will invoke a command on the focused editor.\n */\nclass EditorHandlerCommand extends Command {\n    constructor(id, handlerId, description) {\n        super({\n            id: id,\n            precondition: undefined,\n            description: description\n        });\n        this._handlerId = handlerId;\n    }\n    runCommand(accessor, args) {\n        const editor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n        if (!editor) {\n            return;\n        }\n        editor.trigger('keyboard', this._handlerId, args);\n    }\n}\nfunction registerOverwritableCommand(handlerId, description) {\n    registerCommand(new EditorHandlerCommand('default:' + handlerId, handlerId));\n    registerCommand(new EditorHandlerCommand(handlerId, handlerId, description));\n}\nregisterOverwritableCommand(\"type\" /* Type */, {\n    description: `Type`,\n    args: [{\n            name: 'args',\n            schema: {\n                'type': 'object',\n                'required': ['text'],\n                'properties': {\n                    'text': {\n                        'type': 'string'\n                    }\n                },\n            }\n        }]\n});\nregisterOverwritableCommand(\"replacePreviousChar\" /* ReplacePreviousChar */);\nregisterOverwritableCommand(\"compositionType\" /* CompositionType */);\nregisterOverwritableCommand(\"compositionStart\" /* CompositionStart */);\nregisterOverwritableCommand(\"compositionEnd\" /* CompositionEnd */);\nregisterOverwritableCommand(\"paste\" /* Paste */);\nregisterOverwritableCommand(\"cut\" /* Cut */);\n"]},"metadata":{},"sourceType":"module"}