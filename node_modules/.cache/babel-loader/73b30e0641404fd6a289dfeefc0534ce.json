{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\nimport { LRUCache, TernarySearchTree } from '../../../base/common/map.js';\nimport { completionKindFromString } from '../../common/modes.js';\nimport { IConfigurationService } from '../../../platform/configuration/common/configuration.js';\nimport { registerSingleton } from '../../../platform/instantiation/common/extensions.js';\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nimport { IStorageService, WillSaveStateReason } from '../../../platform/storage/common/storage.js';\nexport class Memory {\n  constructor(name) {\n    this.name = name;\n  }\n\n  select(model, pos, items) {\n    if (items.length === 0) {\n      return 0;\n    }\n\n    let topScore = items[0].score[0];\n\n    for (let i = 0; i < items.length; i++) {\n      const {\n        score,\n        completion: suggestion\n      } = items[i];\n\n      if (score[0] !== topScore) {\n        // stop when leaving the group of top matches\n        break;\n      }\n\n      if (suggestion.preselect) {\n        // stop when seeing an auto-select-item\n        return i;\n      }\n    }\n\n    return 0;\n  }\n\n}\nexport class NoMemory extends Memory {\n  constructor() {\n    super('first');\n  }\n\n  memorize(model, pos, item) {// no-op\n  }\n\n  toJSON() {\n    return undefined;\n  }\n\n  fromJSON() {//\n  }\n\n}\nexport class LRUMemory extends Memory {\n  constructor() {\n    super('recentlyUsed');\n    this._cache = new LRUCache(300, 0.66);\n    this._seq = 0;\n  }\n\n  memorize(model, pos, item) {\n    const key = `${model.getLanguageId()}/${item.textLabel}`;\n\n    this._cache.set(key, {\n      touch: this._seq++,\n      type: item.completion.kind,\n      insertText: item.completion.insertText\n    });\n  }\n\n  select(model, pos, items) {\n    if (items.length === 0) {\n      return 0;\n    }\n\n    const lineSuffix = model.getLineContent(pos.lineNumber).substr(pos.column - 10, pos.column - 1);\n\n    if (/\\s$/.test(lineSuffix)) {\n      return super.select(model, pos, items);\n    }\n\n    let topScore = items[0].score[0];\n    let indexPreselect = -1;\n    let indexRecency = -1;\n    let seq = -1;\n\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].score[0] !== topScore) {\n        // consider only top items\n        break;\n      }\n\n      const key = `${model.getLanguageId()}/${items[i].textLabel}`;\n\n      const item = this._cache.peek(key);\n\n      if (item && item.touch > seq && item.type === items[i].completion.kind && item.insertText === items[i].completion.insertText) {\n        seq = item.touch;\n        indexRecency = i;\n      }\n\n      if (items[i].completion.preselect && indexPreselect === -1) {\n        // stop when seeing an auto-select-item\n        return indexPreselect = i;\n      }\n    }\n\n    if (indexRecency !== -1) {\n      return indexRecency;\n    } else if (indexPreselect !== -1) {\n      return indexPreselect;\n    } else {\n      return 0;\n    }\n  }\n\n  toJSON() {\n    return this._cache.toJSON();\n  }\n\n  fromJSON(data) {\n    this._cache.clear();\n\n    let seq = 0;\n\n    for (const [key, value] of data) {\n      value.touch = seq;\n      value.type = typeof value.type === 'number' ? value.type : completionKindFromString(value.type);\n\n      this._cache.set(key, value);\n    }\n\n    this._seq = this._cache.size;\n  }\n\n}\nexport class PrefixMemory extends Memory {\n  constructor() {\n    super('recentlyUsedByPrefix');\n    this._trie = TernarySearchTree.forStrings();\n    this._seq = 0;\n  }\n\n  memorize(model, pos, item) {\n    const {\n      word\n    } = model.getWordUntilPosition(pos);\n    const key = `${model.getLanguageId()}/${word}`;\n\n    this._trie.set(key, {\n      type: item.completion.kind,\n      insertText: item.completion.insertText,\n      touch: this._seq++\n    });\n  }\n\n  select(model, pos, items) {\n    let {\n      word\n    } = model.getWordUntilPosition(pos);\n\n    if (!word) {\n      return super.select(model, pos, items);\n    }\n\n    let key = `${model.getLanguageId()}/${word}`;\n\n    let item = this._trie.get(key);\n\n    if (!item) {\n      item = this._trie.findSubstr(key);\n    }\n\n    if (item) {\n      for (let i = 0; i < items.length; i++) {\n        let {\n          kind,\n          insertText\n        } = items[i].completion;\n\n        if (kind === item.type && insertText === item.insertText) {\n          return i;\n        }\n      }\n    }\n\n    return super.select(model, pos, items);\n  }\n\n  toJSON() {\n    let entries = [];\n\n    this._trie.forEach((value, key) => entries.push([key, value])); // sort by last recently used (touch), then\n    // take the top 200 item and normalize their\n    // touch\n\n\n    entries.sort((a, b) => -(a[1].touch - b[1].touch)).forEach((value, i) => value[1].touch = i);\n    return entries.slice(0, 200);\n  }\n\n  fromJSON(data) {\n    this._trie.clear();\n\n    if (data.length > 0) {\n      this._seq = data[0][1].touch + 1;\n\n      for (const [key, value] of data) {\n        value.type = typeof value.type === 'number' ? value.type : completionKindFromString(value.type);\n\n        this._trie.set(key, value);\n      }\n    }\n  }\n\n}\nlet SuggestMemoryService = class SuggestMemoryService {\n  constructor(_storageService, _configService) {\n    this._storageService = _storageService;\n    this._configService = _configService;\n    this._disposables = new DisposableStore();\n    this._persistSoon = new RunOnceScheduler(() => this._saveState(), 500);\n\n    this._disposables.add(_storageService.onWillSaveState(e => {\n      if (e.reason === WillSaveStateReason.SHUTDOWN) {\n        this._saveState();\n      }\n    }));\n  }\n\n  dispose() {\n    this._disposables.dispose();\n\n    this._persistSoon.dispose();\n  }\n\n  memorize(model, pos, item) {\n    this._withStrategy(model, pos).memorize(model, pos, item);\n\n    this._persistSoon.schedule();\n  }\n\n  select(model, pos, items) {\n    return this._withStrategy(model, pos).select(model, pos, items);\n  }\n\n  _withStrategy(model, pos) {\n    var _a;\n\n    const mode = this._configService.getValue('editor.suggestSelection', {\n      overrideIdentifier: model.getLanguageIdAtPosition(pos.lineNumber, pos.column),\n      resource: model.uri\n    });\n\n    if (((_a = this._strategy) === null || _a === void 0 ? void 0 : _a.name) !== mode) {\n      this._saveState();\n\n      const ctor = SuggestMemoryService._strategyCtors.get(mode) || NoMemory;\n      this._strategy = new ctor();\n\n      try {\n        const share = this._configService.getValue('editor.suggest.shareSuggestSelections');\n\n        const scope = share ? 0\n        /* GLOBAL */\n        : 1\n        /* WORKSPACE */\n        ;\n\n        const raw = this._storageService.get(`${SuggestMemoryService._storagePrefix}/${mode}`, scope);\n\n        if (raw) {\n          this._strategy.fromJSON(JSON.parse(raw));\n        }\n      } catch (e) {// things can go wrong with JSON...\n      }\n    }\n\n    return this._strategy;\n  }\n\n  _saveState() {\n    if (this._strategy) {\n      const share = this._configService.getValue('editor.suggest.shareSuggestSelections');\n\n      const scope = share ? 0\n      /* GLOBAL */\n      : 1\n      /* WORKSPACE */\n      ;\n      const raw = JSON.stringify(this._strategy);\n\n      this._storageService.store(`${SuggestMemoryService._storagePrefix}/${this._strategy.name}`, raw, scope, 1\n      /* MACHINE */\n      );\n    }\n  }\n\n};\nSuggestMemoryService._strategyCtors = new Map([['recentlyUsedByPrefix', PrefixMemory], ['recentlyUsed', LRUMemory], ['first', NoMemory]]);\nSuggestMemoryService._storagePrefix = 'suggest/memories';\nSuggestMemoryService = __decorate([__param(0, IStorageService), __param(1, IConfigurationService)], SuggestMemoryService);\nexport { SuggestMemoryService };\nexport const ISuggestMemoryService = createDecorator('ISuggestMemories');\nregisterSingleton(ISuggestMemoryService, SuggestMemoryService, true);","map":{"version":3,"sources":["/home/umut/Documents/cs/cs410/Project2Group14/node_modules/monaco-editor/esm/vs/editor/contrib/suggest/suggestMemory.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","RunOnceScheduler","DisposableStore","LRUCache","TernarySearchTree","completionKindFromString","IConfigurationService","registerSingleton","createDecorator","IStorageService","WillSaveStateReason","Memory","constructor","name","select","model","pos","items","topScore","score","completion","suggestion","preselect","NoMemory","memorize","item","toJSON","undefined","fromJSON","LRUMemory","_cache","_seq","getLanguageId","textLabel","set","touch","type","kind","insertText","lineSuffix","getLineContent","lineNumber","substr","column","test","indexPreselect","indexRecency","seq","peek","data","clear","value","size","PrefixMemory","_trie","forStrings","word","getWordUntilPosition","get","findSubstr","entries","forEach","push","sort","a","b","slice","SuggestMemoryService","_storageService","_configService","_disposables","_persistSoon","_saveState","add","onWillSaveState","e","reason","SHUTDOWN","dispose","_withStrategy","schedule","_a","mode","getValue","overrideIdentifier","getLanguageIdAtPosition","resource","uri","_strategy","ctor","_strategyCtors","share","scope","raw","_storagePrefix","JSON","parse","stringify","store","Map","ISuggestMemoryService"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\nimport { LRUCache, TernarySearchTree } from '../../../base/common/map.js';\nimport { completionKindFromString } from '../../common/modes.js';\nimport { IConfigurationService } from '../../../platform/configuration/common/configuration.js';\nimport { registerSingleton } from '../../../platform/instantiation/common/extensions.js';\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nimport { IStorageService, WillSaveStateReason } from '../../../platform/storage/common/storage.js';\nexport class Memory {\n    constructor(name) {\n        this.name = name;\n    }\n    select(model, pos, items) {\n        if (items.length === 0) {\n            return 0;\n        }\n        let topScore = items[0].score[0];\n        for (let i = 0; i < items.length; i++) {\n            const { score, completion: suggestion } = items[i];\n            if (score[0] !== topScore) {\n                // stop when leaving the group of top matches\n                break;\n            }\n            if (suggestion.preselect) {\n                // stop when seeing an auto-select-item\n                return i;\n            }\n        }\n        return 0;\n    }\n}\nexport class NoMemory extends Memory {\n    constructor() {\n        super('first');\n    }\n    memorize(model, pos, item) {\n        // no-op\n    }\n    toJSON() {\n        return undefined;\n    }\n    fromJSON() {\n        //\n    }\n}\nexport class LRUMemory extends Memory {\n    constructor() {\n        super('recentlyUsed');\n        this._cache = new LRUCache(300, 0.66);\n        this._seq = 0;\n    }\n    memorize(model, pos, item) {\n        const key = `${model.getLanguageId()}/${item.textLabel}`;\n        this._cache.set(key, {\n            touch: this._seq++,\n            type: item.completion.kind,\n            insertText: item.completion.insertText\n        });\n    }\n    select(model, pos, items) {\n        if (items.length === 0) {\n            return 0;\n        }\n        const lineSuffix = model.getLineContent(pos.lineNumber).substr(pos.column - 10, pos.column - 1);\n        if (/\\s$/.test(lineSuffix)) {\n            return super.select(model, pos, items);\n        }\n        let topScore = items[0].score[0];\n        let indexPreselect = -1;\n        let indexRecency = -1;\n        let seq = -1;\n        for (let i = 0; i < items.length; i++) {\n            if (items[i].score[0] !== topScore) {\n                // consider only top items\n                break;\n            }\n            const key = `${model.getLanguageId()}/${items[i].textLabel}`;\n            const item = this._cache.peek(key);\n            if (item && item.touch > seq && item.type === items[i].completion.kind && item.insertText === items[i].completion.insertText) {\n                seq = item.touch;\n                indexRecency = i;\n            }\n            if (items[i].completion.preselect && indexPreselect === -1) {\n                // stop when seeing an auto-select-item\n                return indexPreselect = i;\n            }\n        }\n        if (indexRecency !== -1) {\n            return indexRecency;\n        }\n        else if (indexPreselect !== -1) {\n            return indexPreselect;\n        }\n        else {\n            return 0;\n        }\n    }\n    toJSON() {\n        return this._cache.toJSON();\n    }\n    fromJSON(data) {\n        this._cache.clear();\n        let seq = 0;\n        for (const [key, value] of data) {\n            value.touch = seq;\n            value.type = typeof value.type === 'number' ? value.type : completionKindFromString(value.type);\n            this._cache.set(key, value);\n        }\n        this._seq = this._cache.size;\n    }\n}\nexport class PrefixMemory extends Memory {\n    constructor() {\n        super('recentlyUsedByPrefix');\n        this._trie = TernarySearchTree.forStrings();\n        this._seq = 0;\n    }\n    memorize(model, pos, item) {\n        const { word } = model.getWordUntilPosition(pos);\n        const key = `${model.getLanguageId()}/${word}`;\n        this._trie.set(key, {\n            type: item.completion.kind,\n            insertText: item.completion.insertText,\n            touch: this._seq++\n        });\n    }\n    select(model, pos, items) {\n        let { word } = model.getWordUntilPosition(pos);\n        if (!word) {\n            return super.select(model, pos, items);\n        }\n        let key = `${model.getLanguageId()}/${word}`;\n        let item = this._trie.get(key);\n        if (!item) {\n            item = this._trie.findSubstr(key);\n        }\n        if (item) {\n            for (let i = 0; i < items.length; i++) {\n                let { kind, insertText } = items[i].completion;\n                if (kind === item.type && insertText === item.insertText) {\n                    return i;\n                }\n            }\n        }\n        return super.select(model, pos, items);\n    }\n    toJSON() {\n        let entries = [];\n        this._trie.forEach((value, key) => entries.push([key, value]));\n        // sort by last recently used (touch), then\n        // take the top 200 item and normalize their\n        // touch\n        entries\n            .sort((a, b) => -(a[1].touch - b[1].touch))\n            .forEach((value, i) => value[1].touch = i);\n        return entries.slice(0, 200);\n    }\n    fromJSON(data) {\n        this._trie.clear();\n        if (data.length > 0) {\n            this._seq = data[0][1].touch + 1;\n            for (const [key, value] of data) {\n                value.type = typeof value.type === 'number' ? value.type : completionKindFromString(value.type);\n                this._trie.set(key, value);\n            }\n        }\n    }\n}\nlet SuggestMemoryService = class SuggestMemoryService {\n    constructor(_storageService, _configService) {\n        this._storageService = _storageService;\n        this._configService = _configService;\n        this._disposables = new DisposableStore();\n        this._persistSoon = new RunOnceScheduler(() => this._saveState(), 500);\n        this._disposables.add(_storageService.onWillSaveState(e => {\n            if (e.reason === WillSaveStateReason.SHUTDOWN) {\n                this._saveState();\n            }\n        }));\n    }\n    dispose() {\n        this._disposables.dispose();\n        this._persistSoon.dispose();\n    }\n    memorize(model, pos, item) {\n        this._withStrategy(model, pos).memorize(model, pos, item);\n        this._persistSoon.schedule();\n    }\n    select(model, pos, items) {\n        return this._withStrategy(model, pos).select(model, pos, items);\n    }\n    _withStrategy(model, pos) {\n        var _a;\n        const mode = this._configService.getValue('editor.suggestSelection', {\n            overrideIdentifier: model.getLanguageIdAtPosition(pos.lineNumber, pos.column),\n            resource: model.uri\n        });\n        if (((_a = this._strategy) === null || _a === void 0 ? void 0 : _a.name) !== mode) {\n            this._saveState();\n            const ctor = SuggestMemoryService._strategyCtors.get(mode) || NoMemory;\n            this._strategy = new ctor();\n            try {\n                const share = this._configService.getValue('editor.suggest.shareSuggestSelections');\n                const scope = share ? 0 /* GLOBAL */ : 1 /* WORKSPACE */;\n                const raw = this._storageService.get(`${SuggestMemoryService._storagePrefix}/${mode}`, scope);\n                if (raw) {\n                    this._strategy.fromJSON(JSON.parse(raw));\n                }\n            }\n            catch (e) {\n                // things can go wrong with JSON...\n            }\n        }\n        return this._strategy;\n    }\n    _saveState() {\n        if (this._strategy) {\n            const share = this._configService.getValue('editor.suggest.shareSuggestSelections');\n            const scope = share ? 0 /* GLOBAL */ : 1 /* WORKSPACE */;\n            const raw = JSON.stringify(this._strategy);\n            this._storageService.store(`${SuggestMemoryService._storagePrefix}/${this._strategy.name}`, raw, scope, 1 /* MACHINE */);\n        }\n    }\n};\nSuggestMemoryService._strategyCtors = new Map([\n    ['recentlyUsedByPrefix', PrefixMemory],\n    ['recentlyUsed', LRUMemory],\n    ['first', NoMemory]\n]);\nSuggestMemoryService._storagePrefix = 'suggest/memories';\nSuggestMemoryService = __decorate([\n    __param(0, IStorageService),\n    __param(1, IConfigurationService)\n], SuggestMemoryService);\nexport { SuggestMemoryService };\nexport const ISuggestMemoryService = createDecorator('ISuggestMemories');\nregisterSingleton(ISuggestMemoryService, SuggestMemoryService, true);\n"]},"metadata":{},"sourceType":"module"}