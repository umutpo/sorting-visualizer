{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Color } from '../../../base/common/color.js';\nimport { Range } from '../../common/core/range.js';\nimport { Token, TokenizationResult, TokenizationResult2 } from '../../common/core/token.js';\nimport * as modes from '../../common/modes.js';\nimport { LanguageConfigurationRegistry } from '../../common/modes/languageConfigurationRegistry.js';\nimport { ModesRegistry } from '../../common/modes/modesRegistry.js';\nimport * as standaloneEnums from '../../common/standalone/standaloneEnums.js';\nimport { StaticServices } from './standaloneServices.js';\nimport { compile } from '../common/monarch/monarchCompile.js';\nimport { createTokenizationSupport } from '../common/monarch/monarchLexer.js';\n/**\n * Register information about a new language.\n */\n\nexport function register(language) {\n  ModesRegistry.registerLanguage(language);\n}\n/**\n * Get the information of all the registered languages.\n */\n\nexport function getLanguages() {\n  let result = [];\n  result = result.concat(ModesRegistry.getLanguages());\n  return result;\n}\nexport function getEncodedLanguageId(languageId) {\n  const modeService = StaticServices.modeService.get();\n  return modeService.languageIdCodec.encodeLanguageId(languageId);\n}\n/**\n * An event emitted when a language is first time needed (e.g. a model has it set).\n * @event\n */\n\nexport function onLanguage(languageId, callback) {\n  let disposable = StaticServices.modeService.get().onDidEncounterLanguage(encounteredLanguageId => {\n    if (encounteredLanguageId === languageId) {\n      // stop listening\n      disposable.dispose(); // invoke actual listener\n\n      callback();\n    }\n  });\n  return disposable;\n}\n/**\n * Set the editing configuration for a language.\n */\n\nexport function setLanguageConfiguration(languageId, configuration) {\n  const validLanguageId = StaticServices.modeService.get().validateLanguageId(languageId);\n\n  if (!validLanguageId) {\n    throw new Error(`Cannot set configuration for unknown language ${languageId}`);\n  }\n\n  return LanguageConfigurationRegistry.register(validLanguageId, configuration, 100);\n}\n/**\n * @internal\n */\n\nexport class EncodedTokenizationSupport2Adapter {\n  constructor(languageId, actual) {\n    this._languageId = languageId;\n    this._actual = actual;\n  }\n\n  getInitialState() {\n    return this._actual.getInitialState();\n  }\n\n  tokenize(line, hasEOL, state, offsetDelta) {\n    if (typeof this._actual.tokenize === 'function') {\n      return TokenizationSupport2Adapter.adaptTokenize(this._languageId, this._actual, line, state, offsetDelta);\n    }\n\n    throw new Error('Not supported!');\n  }\n\n  tokenize2(line, hasEOL, state) {\n    let result = this._actual.tokenizeEncoded(line, state);\n\n    return new TokenizationResult2(result.tokens, result.endState);\n  }\n\n}\n/**\n * @internal\n */\n\nexport class TokenizationSupport2Adapter {\n  constructor(_languageId, _actual, _modeService, _standaloneThemeService) {\n    this._languageId = _languageId;\n    this._actual = _actual;\n    this._modeService = _modeService;\n    this._standaloneThemeService = _standaloneThemeService;\n  }\n\n  getInitialState() {\n    return this._actual.getInitialState();\n  }\n\n  static _toClassicTokens(tokens, language, offsetDelta) {\n    let result = [];\n    let previousStartIndex = 0;\n\n    for (let i = 0, len = tokens.length; i < len; i++) {\n      const t = tokens[i];\n      let startIndex = t.startIndex; // Prevent issues stemming from a buggy external tokenizer.\n\n      if (i === 0) {\n        // Force first token to start at first index!\n        startIndex = 0;\n      } else if (startIndex < previousStartIndex) {\n        // Force tokens to be after one another!\n        startIndex = previousStartIndex;\n      }\n\n      result[i] = new Token(startIndex + offsetDelta, t.scopes, language);\n      previousStartIndex = startIndex;\n    }\n\n    return result;\n  }\n\n  static adaptTokenize(language, actual, line, state, offsetDelta) {\n    let actualResult = actual.tokenize(line, state);\n\n    let tokens = TokenizationSupport2Adapter._toClassicTokens(actualResult.tokens, language, offsetDelta);\n\n    let endState; // try to save an object if possible\n\n    if (actualResult.endState.equals(state)) {\n      endState = state;\n    } else {\n      endState = actualResult.endState;\n    }\n\n    return new TokenizationResult(tokens, endState);\n  }\n\n  tokenize(line, hasEOL, state, offsetDelta) {\n    return TokenizationSupport2Adapter.adaptTokenize(this._languageId, this._actual, line, state, offsetDelta);\n  }\n\n  _toBinaryTokens(languageIdCodec, tokens, offsetDelta) {\n    const languageId = languageIdCodec.encodeLanguageId(this._languageId);\n\n    const tokenTheme = this._standaloneThemeService.getColorTheme().tokenTheme;\n\n    let result = [],\n        resultLen = 0;\n    let previousStartIndex = 0;\n\n    for (let i = 0, len = tokens.length; i < len; i++) {\n      const t = tokens[i];\n      const metadata = tokenTheme.match(languageId, t.scopes);\n\n      if (resultLen > 0 && result[resultLen - 1] === metadata) {\n        // same metadata\n        continue;\n      }\n\n      let startIndex = t.startIndex; // Prevent issues stemming from a buggy external tokenizer.\n\n      if (i === 0) {\n        // Force first token to start at first index!\n        startIndex = 0;\n      } else if (startIndex < previousStartIndex) {\n        // Force tokens to be after one another!\n        startIndex = previousStartIndex;\n      }\n\n      result[resultLen++] = startIndex + offsetDelta;\n      result[resultLen++] = metadata;\n      previousStartIndex = startIndex;\n    }\n\n    let actualResult = new Uint32Array(resultLen);\n\n    for (let i = 0; i < resultLen; i++) {\n      actualResult[i] = result[i];\n    }\n\n    return actualResult;\n  }\n\n  tokenize2(line, hasEOL, state, offsetDelta) {\n    let actualResult = this._actual.tokenize(line, state);\n\n    let tokens = this._toBinaryTokens(this._modeService.languageIdCodec, actualResult.tokens, offsetDelta);\n\n    let endState; // try to save an object if possible\n\n    if (actualResult.endState.equals(state)) {\n      endState = state;\n    } else {\n      endState = actualResult.endState;\n    }\n\n    return new TokenizationResult2(tokens, endState);\n  }\n\n}\n\nfunction isEncodedTokensProvider(provider) {\n  return 'tokenizeEncoded' in provider;\n}\n\nfunction isThenable(obj) {\n  return obj && typeof obj.then === 'function';\n}\n/**\n * Change the color map that is used for token colors.\n * Supported formats (hex): #RRGGBB, $RRGGBBAA, #RGB, #RGBA\n */\n\n\nexport function setColorMap(colorMap) {\n  if (colorMap) {\n    const result = [null];\n\n    for (let i = 1, len = colorMap.length; i < len; i++) {\n      result[i] = Color.fromHex(colorMap[i]);\n    }\n\n    StaticServices.standaloneThemeService.get().setColorMapOverride(result);\n  } else {\n    StaticServices.standaloneThemeService.get().setColorMapOverride(null);\n  }\n}\n/**\n * Set the tokens provider for a language (manual implementation).\n */\n\nexport function setTokensProvider(languageId, provider) {\n  const validLanguageId = StaticServices.modeService.get().validateLanguageId(languageId);\n\n  if (!validLanguageId) {\n    throw new Error(`Cannot set tokens provider for unknown language ${languageId}`);\n  }\n\n  const create = provider => {\n    if (isEncodedTokensProvider(provider)) {\n      return new EncodedTokenizationSupport2Adapter(validLanguageId, provider);\n    } else {\n      return new TokenizationSupport2Adapter(validLanguageId, provider, StaticServices.modeService.get(), StaticServices.standaloneThemeService.get());\n    }\n  };\n\n  if (isThenable(provider)) {\n    return modes.TokenizationRegistry.registerPromise(languageId, provider.then(provider => create(provider)));\n  }\n\n  return modes.TokenizationRegistry.register(languageId, create(provider));\n}\n/**\n * Set the tokens provider for a language (monarch implementation).\n */\n\nexport function setMonarchTokensProvider(languageId, languageDef) {\n  const create = languageDef => {\n    return createTokenizationSupport(StaticServices.modeService.get(), StaticServices.standaloneThemeService.get(), languageId, compile(languageId, languageDef));\n  };\n\n  if (isThenable(languageDef)) {\n    return modes.TokenizationRegistry.registerPromise(languageId, languageDef.then(languageDef => create(languageDef)));\n  }\n\n  return modes.TokenizationRegistry.register(languageId, create(languageDef));\n}\n/**\n * Register a reference provider (used by e.g. reference search).\n */\n\nexport function registerReferenceProvider(languageId, provider) {\n  return modes.ReferenceProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a rename provider (used by e.g. rename symbol).\n */\n\nexport function registerRenameProvider(languageId, provider) {\n  return modes.RenameProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a signature help provider (used by e.g. parameter hints).\n */\n\nexport function registerSignatureHelpProvider(languageId, provider) {\n  return modes.SignatureHelpProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a hover provider (used by e.g. editor hover).\n */\n\nexport function registerHoverProvider(languageId, provider) {\n  return modes.HoverProviderRegistry.register(languageId, {\n    provideHover: (model, position, token) => {\n      let word = model.getWordAtPosition(position);\n      return Promise.resolve(provider.provideHover(model, position, token)).then(value => {\n        if (!value) {\n          return undefined;\n        }\n\n        if (!value.range && word) {\n          value.range = new Range(position.lineNumber, word.startColumn, position.lineNumber, word.endColumn);\n        }\n\n        if (!value.range) {\n          value.range = new Range(position.lineNumber, position.column, position.lineNumber, position.column);\n        }\n\n        return value;\n      });\n    }\n  });\n}\n/**\n * Register a document symbol provider (used by e.g. outline).\n */\n\nexport function registerDocumentSymbolProvider(languageId, provider) {\n  return modes.DocumentSymbolProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a document highlight provider (used by e.g. highlight occurrences).\n */\n\nexport function registerDocumentHighlightProvider(languageId, provider) {\n  return modes.DocumentHighlightProviderRegistry.register(languageId, provider);\n}\n/**\n * Register an linked editing range provider.\n */\n\nexport function registerLinkedEditingRangeProvider(languageId, provider) {\n  return modes.LinkedEditingRangeProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a definition provider (used by e.g. go to definition).\n */\n\nexport function registerDefinitionProvider(languageId, provider) {\n  return modes.DefinitionProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a implementation provider (used by e.g. go to implementation).\n */\n\nexport function registerImplementationProvider(languageId, provider) {\n  return modes.ImplementationProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a type definition provider (used by e.g. go to type definition).\n */\n\nexport function registerTypeDefinitionProvider(languageId, provider) {\n  return modes.TypeDefinitionProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a code lens provider (used by e.g. inline code lenses).\n */\n\nexport function registerCodeLensProvider(languageId, provider) {\n  return modes.CodeLensProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a code action provider (used by e.g. quick fix).\n */\n\nexport function registerCodeActionProvider(languageId, provider, metadata) {\n  return modes.CodeActionProviderRegistry.register(languageId, {\n    providedCodeActionKinds: metadata === null || metadata === void 0 ? void 0 : metadata.providedCodeActionKinds,\n    provideCodeActions: (model, range, context, token) => {\n      let markers = StaticServices.markerService.get().read({\n        resource: model.uri\n      }).filter(m => {\n        return Range.areIntersectingOrTouching(m, range);\n      });\n      return provider.provideCodeActions(model, range, {\n        markers,\n        only: context.only\n      }, token);\n    },\n    resolveCodeAction: provider.resolveCodeAction\n  });\n}\n/**\n * Register a formatter that can handle only entire models.\n */\n\nexport function registerDocumentFormattingEditProvider(languageId, provider) {\n  return modes.DocumentFormattingEditProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a formatter that can handle a range inside a model.\n */\n\nexport function registerDocumentRangeFormattingEditProvider(languageId, provider) {\n  return modes.DocumentRangeFormattingEditProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a formatter than can do formatting as the user types.\n */\n\nexport function registerOnTypeFormattingEditProvider(languageId, provider) {\n  return modes.OnTypeFormattingEditProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a link provider that can find links in text.\n */\n\nexport function registerLinkProvider(languageId, provider) {\n  return modes.LinkProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a completion item provider (use by e.g. suggestions).\n */\n\nexport function registerCompletionItemProvider(languageId, provider) {\n  return modes.CompletionProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a document color provider (used by Color Picker, Color Decorator).\n */\n\nexport function registerColorProvider(languageId, provider) {\n  return modes.ColorProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a folding range provider\n */\n\nexport function registerFoldingRangeProvider(languageId, provider) {\n  return modes.FoldingRangeProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a declaration provider\n */\n\nexport function registerDeclarationProvider(languageId, provider) {\n  return modes.DeclarationProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a selection range provider\n */\n\nexport function registerSelectionRangeProvider(languageId, provider) {\n  return modes.SelectionRangeRegistry.register(languageId, provider);\n}\n/**\n * Register a document semantic tokens provider\n */\n\nexport function registerDocumentSemanticTokensProvider(languageId, provider) {\n  return modes.DocumentSemanticTokensProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a document range semantic tokens provider\n */\n\nexport function registerDocumentRangeSemanticTokensProvider(languageId, provider) {\n  return modes.DocumentRangeSemanticTokensProviderRegistry.register(languageId, provider);\n}\n/**\n * Register an inline completions provider.\n */\n\nexport function registerInlineCompletionsProvider(languageId, provider) {\n  return modes.InlineCompletionsProviderRegistry.register(languageId, provider);\n}\n/**\n * Register an inlay hints provider.\n */\n\nexport function registerInlayHintsProvider(languageId, provider) {\n  return modes.InlayHintsProviderRegistry.register(languageId, provider);\n}\n/**\n * @internal\n */\n\nexport function createMonacoLanguagesAPI() {\n  return {\n    register: register,\n    getLanguages: getLanguages,\n    onLanguage: onLanguage,\n    getEncodedLanguageId: getEncodedLanguageId,\n    // provider methods\n    setLanguageConfiguration: setLanguageConfiguration,\n    setColorMap: setColorMap,\n    setTokensProvider: setTokensProvider,\n    setMonarchTokensProvider: setMonarchTokensProvider,\n    registerReferenceProvider: registerReferenceProvider,\n    registerRenameProvider: registerRenameProvider,\n    registerCompletionItemProvider: registerCompletionItemProvider,\n    registerSignatureHelpProvider: registerSignatureHelpProvider,\n    registerHoverProvider: registerHoverProvider,\n    registerDocumentSymbolProvider: registerDocumentSymbolProvider,\n    registerDocumentHighlightProvider: registerDocumentHighlightProvider,\n    registerLinkedEditingRangeProvider: registerLinkedEditingRangeProvider,\n    registerDefinitionProvider: registerDefinitionProvider,\n    registerImplementationProvider: registerImplementationProvider,\n    registerTypeDefinitionProvider: registerTypeDefinitionProvider,\n    registerCodeLensProvider: registerCodeLensProvider,\n    registerCodeActionProvider: registerCodeActionProvider,\n    registerDocumentFormattingEditProvider: registerDocumentFormattingEditProvider,\n    registerDocumentRangeFormattingEditProvider: registerDocumentRangeFormattingEditProvider,\n    registerOnTypeFormattingEditProvider: registerOnTypeFormattingEditProvider,\n    registerLinkProvider: registerLinkProvider,\n    registerColorProvider: registerColorProvider,\n    registerFoldingRangeProvider: registerFoldingRangeProvider,\n    registerDeclarationProvider: registerDeclarationProvider,\n    registerSelectionRangeProvider: registerSelectionRangeProvider,\n    registerDocumentSemanticTokensProvider: registerDocumentSemanticTokensProvider,\n    registerDocumentRangeSemanticTokensProvider: registerDocumentRangeSemanticTokensProvider,\n    registerInlineCompletionsProvider: registerInlineCompletionsProvider,\n    registerInlayHintsProvider: registerInlayHintsProvider,\n    // enums\n    DocumentHighlightKind: standaloneEnums.DocumentHighlightKind,\n    CompletionItemKind: standaloneEnums.CompletionItemKind,\n    CompletionItemTag: standaloneEnums.CompletionItemTag,\n    CompletionItemInsertTextRule: standaloneEnums.CompletionItemInsertTextRule,\n    SymbolKind: standaloneEnums.SymbolKind,\n    SymbolTag: standaloneEnums.SymbolTag,\n    IndentAction: standaloneEnums.IndentAction,\n    CompletionTriggerKind: standaloneEnums.CompletionTriggerKind,\n    SignatureHelpTriggerKind: standaloneEnums.SignatureHelpTriggerKind,\n    InlayHintKind: standaloneEnums.InlayHintKind,\n    InlineCompletionTriggerKind: standaloneEnums.InlineCompletionTriggerKind,\n    // classes\n    FoldingRangeKind: modes.FoldingRangeKind\n  };\n}","map":{"version":3,"sources":["/home/umut/Documents/cs/cs410/Project2Group14/node_modules/monaco-editor/esm/vs/editor/standalone/browser/standaloneLanguages.js"],"names":["Color","Range","Token","TokenizationResult","TokenizationResult2","modes","LanguageConfigurationRegistry","ModesRegistry","standaloneEnums","StaticServices","compile","createTokenizationSupport","register","language","registerLanguage","getLanguages","result","concat","getEncodedLanguageId","languageId","modeService","get","languageIdCodec","encodeLanguageId","onLanguage","callback","disposable","onDidEncounterLanguage","encounteredLanguageId","dispose","setLanguageConfiguration","configuration","validLanguageId","validateLanguageId","Error","EncodedTokenizationSupport2Adapter","constructor","actual","_languageId","_actual","getInitialState","tokenize","line","hasEOL","state","offsetDelta","TokenizationSupport2Adapter","adaptTokenize","tokenize2","tokenizeEncoded","tokens","endState","_modeService","_standaloneThemeService","_toClassicTokens","previousStartIndex","i","len","length","t","startIndex","scopes","actualResult","equals","_toBinaryTokens","tokenTheme","getColorTheme","resultLen","metadata","match","Uint32Array","isEncodedTokensProvider","provider","isThenable","obj","then","setColorMap","colorMap","fromHex","standaloneThemeService","setColorMapOverride","setTokensProvider","create","TokenizationRegistry","registerPromise","setMonarchTokensProvider","languageDef","registerReferenceProvider","ReferenceProviderRegistry","registerRenameProvider","RenameProviderRegistry","registerSignatureHelpProvider","SignatureHelpProviderRegistry","registerHoverProvider","HoverProviderRegistry","provideHover","model","position","token","word","getWordAtPosition","Promise","resolve","value","undefined","range","lineNumber","startColumn","endColumn","column","registerDocumentSymbolProvider","DocumentSymbolProviderRegistry","registerDocumentHighlightProvider","DocumentHighlightProviderRegistry","registerLinkedEditingRangeProvider","LinkedEditingRangeProviderRegistry","registerDefinitionProvider","DefinitionProviderRegistry","registerImplementationProvider","ImplementationProviderRegistry","registerTypeDefinitionProvider","TypeDefinitionProviderRegistry","registerCodeLensProvider","CodeLensProviderRegistry","registerCodeActionProvider","CodeActionProviderRegistry","providedCodeActionKinds","provideCodeActions","context","markers","markerService","read","resource","uri","filter","m","areIntersectingOrTouching","only","resolveCodeAction","registerDocumentFormattingEditProvider","DocumentFormattingEditProviderRegistry","registerDocumentRangeFormattingEditProvider","DocumentRangeFormattingEditProviderRegistry","registerOnTypeFormattingEditProvider","OnTypeFormattingEditProviderRegistry","registerLinkProvider","LinkProviderRegistry","registerCompletionItemProvider","CompletionProviderRegistry","registerColorProvider","ColorProviderRegistry","registerFoldingRangeProvider","FoldingRangeProviderRegistry","registerDeclarationProvider","DeclarationProviderRegistry","registerSelectionRangeProvider","SelectionRangeRegistry","registerDocumentSemanticTokensProvider","DocumentSemanticTokensProviderRegistry","registerDocumentRangeSemanticTokensProvider","DocumentRangeSemanticTokensProviderRegistry","registerInlineCompletionsProvider","InlineCompletionsProviderRegistry","registerInlayHintsProvider","InlayHintsProviderRegistry","createMonacoLanguagesAPI","DocumentHighlightKind","CompletionItemKind","CompletionItemTag","CompletionItemInsertTextRule","SymbolKind","SymbolTag","IndentAction","CompletionTriggerKind","SignatureHelpTriggerKind","InlayHintKind","InlineCompletionTriggerKind","FoldingRangeKind"],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Color } from '../../../base/common/color.js';\nimport { Range } from '../../common/core/range.js';\nimport { Token, TokenizationResult, TokenizationResult2 } from '../../common/core/token.js';\nimport * as modes from '../../common/modes.js';\nimport { LanguageConfigurationRegistry } from '../../common/modes/languageConfigurationRegistry.js';\nimport { ModesRegistry } from '../../common/modes/modesRegistry.js';\nimport * as standaloneEnums from '../../common/standalone/standaloneEnums.js';\nimport { StaticServices } from './standaloneServices.js';\nimport { compile } from '../common/monarch/monarchCompile.js';\nimport { createTokenizationSupport } from '../common/monarch/monarchLexer.js';\n/**\n * Register information about a new language.\n */\nexport function register(language) {\n    ModesRegistry.registerLanguage(language);\n}\n/**\n * Get the information of all the registered languages.\n */\nexport function getLanguages() {\n    let result = [];\n    result = result.concat(ModesRegistry.getLanguages());\n    return result;\n}\nexport function getEncodedLanguageId(languageId) {\n    const modeService = StaticServices.modeService.get();\n    return modeService.languageIdCodec.encodeLanguageId(languageId);\n}\n/**\n * An event emitted when a language is first time needed (e.g. a model has it set).\n * @event\n */\nexport function onLanguage(languageId, callback) {\n    let disposable = StaticServices.modeService.get().onDidEncounterLanguage((encounteredLanguageId) => {\n        if (encounteredLanguageId === languageId) {\n            // stop listening\n            disposable.dispose();\n            // invoke actual listener\n            callback();\n        }\n    });\n    return disposable;\n}\n/**\n * Set the editing configuration for a language.\n */\nexport function setLanguageConfiguration(languageId, configuration) {\n    const validLanguageId = StaticServices.modeService.get().validateLanguageId(languageId);\n    if (!validLanguageId) {\n        throw new Error(`Cannot set configuration for unknown language ${languageId}`);\n    }\n    return LanguageConfigurationRegistry.register(validLanguageId, configuration, 100);\n}\n/**\n * @internal\n */\nexport class EncodedTokenizationSupport2Adapter {\n    constructor(languageId, actual) {\n        this._languageId = languageId;\n        this._actual = actual;\n    }\n    getInitialState() {\n        return this._actual.getInitialState();\n    }\n    tokenize(line, hasEOL, state, offsetDelta) {\n        if (typeof this._actual.tokenize === 'function') {\n            return TokenizationSupport2Adapter.adaptTokenize(this._languageId, this._actual, line, state, offsetDelta);\n        }\n        throw new Error('Not supported!');\n    }\n    tokenize2(line, hasEOL, state) {\n        let result = this._actual.tokenizeEncoded(line, state);\n        return new TokenizationResult2(result.tokens, result.endState);\n    }\n}\n/**\n * @internal\n */\nexport class TokenizationSupport2Adapter {\n    constructor(_languageId, _actual, _modeService, _standaloneThemeService) {\n        this._languageId = _languageId;\n        this._actual = _actual;\n        this._modeService = _modeService;\n        this._standaloneThemeService = _standaloneThemeService;\n    }\n    getInitialState() {\n        return this._actual.getInitialState();\n    }\n    static _toClassicTokens(tokens, language, offsetDelta) {\n        let result = [];\n        let previousStartIndex = 0;\n        for (let i = 0, len = tokens.length; i < len; i++) {\n            const t = tokens[i];\n            let startIndex = t.startIndex;\n            // Prevent issues stemming from a buggy external tokenizer.\n            if (i === 0) {\n                // Force first token to start at first index!\n                startIndex = 0;\n            }\n            else if (startIndex < previousStartIndex) {\n                // Force tokens to be after one another!\n                startIndex = previousStartIndex;\n            }\n            result[i] = new Token(startIndex + offsetDelta, t.scopes, language);\n            previousStartIndex = startIndex;\n        }\n        return result;\n    }\n    static adaptTokenize(language, actual, line, state, offsetDelta) {\n        let actualResult = actual.tokenize(line, state);\n        let tokens = TokenizationSupport2Adapter._toClassicTokens(actualResult.tokens, language, offsetDelta);\n        let endState;\n        // try to save an object if possible\n        if (actualResult.endState.equals(state)) {\n            endState = state;\n        }\n        else {\n            endState = actualResult.endState;\n        }\n        return new TokenizationResult(tokens, endState);\n    }\n    tokenize(line, hasEOL, state, offsetDelta) {\n        return TokenizationSupport2Adapter.adaptTokenize(this._languageId, this._actual, line, state, offsetDelta);\n    }\n    _toBinaryTokens(languageIdCodec, tokens, offsetDelta) {\n        const languageId = languageIdCodec.encodeLanguageId(this._languageId);\n        const tokenTheme = this._standaloneThemeService.getColorTheme().tokenTheme;\n        let result = [], resultLen = 0;\n        let previousStartIndex = 0;\n        for (let i = 0, len = tokens.length; i < len; i++) {\n            const t = tokens[i];\n            const metadata = tokenTheme.match(languageId, t.scopes);\n            if (resultLen > 0 && result[resultLen - 1] === metadata) {\n                // same metadata\n                continue;\n            }\n            let startIndex = t.startIndex;\n            // Prevent issues stemming from a buggy external tokenizer.\n            if (i === 0) {\n                // Force first token to start at first index!\n                startIndex = 0;\n            }\n            else if (startIndex < previousStartIndex) {\n                // Force tokens to be after one another!\n                startIndex = previousStartIndex;\n            }\n            result[resultLen++] = startIndex + offsetDelta;\n            result[resultLen++] = metadata;\n            previousStartIndex = startIndex;\n        }\n        let actualResult = new Uint32Array(resultLen);\n        for (let i = 0; i < resultLen; i++) {\n            actualResult[i] = result[i];\n        }\n        return actualResult;\n    }\n    tokenize2(line, hasEOL, state, offsetDelta) {\n        let actualResult = this._actual.tokenize(line, state);\n        let tokens = this._toBinaryTokens(this._modeService.languageIdCodec, actualResult.tokens, offsetDelta);\n        let endState;\n        // try to save an object if possible\n        if (actualResult.endState.equals(state)) {\n            endState = state;\n        }\n        else {\n            endState = actualResult.endState;\n        }\n        return new TokenizationResult2(tokens, endState);\n    }\n}\nfunction isEncodedTokensProvider(provider) {\n    return 'tokenizeEncoded' in provider;\n}\nfunction isThenable(obj) {\n    return obj && typeof obj.then === 'function';\n}\n/**\n * Change the color map that is used for token colors.\n * Supported formats (hex): #RRGGBB, $RRGGBBAA, #RGB, #RGBA\n */\nexport function setColorMap(colorMap) {\n    if (colorMap) {\n        const result = [null];\n        for (let i = 1, len = colorMap.length; i < len; i++) {\n            result[i] = Color.fromHex(colorMap[i]);\n        }\n        StaticServices.standaloneThemeService.get().setColorMapOverride(result);\n    }\n    else {\n        StaticServices.standaloneThemeService.get().setColorMapOverride(null);\n    }\n}\n/**\n * Set the tokens provider for a language (manual implementation).\n */\nexport function setTokensProvider(languageId, provider) {\n    const validLanguageId = StaticServices.modeService.get().validateLanguageId(languageId);\n    if (!validLanguageId) {\n        throw new Error(`Cannot set tokens provider for unknown language ${languageId}`);\n    }\n    const create = (provider) => {\n        if (isEncodedTokensProvider(provider)) {\n            return new EncodedTokenizationSupport2Adapter(validLanguageId, provider);\n        }\n        else {\n            return new TokenizationSupport2Adapter(validLanguageId, provider, StaticServices.modeService.get(), StaticServices.standaloneThemeService.get());\n        }\n    };\n    if (isThenable(provider)) {\n        return modes.TokenizationRegistry.registerPromise(languageId, provider.then(provider => create(provider)));\n    }\n    return modes.TokenizationRegistry.register(languageId, create(provider));\n}\n/**\n * Set the tokens provider for a language (monarch implementation).\n */\nexport function setMonarchTokensProvider(languageId, languageDef) {\n    const create = (languageDef) => {\n        return createTokenizationSupport(StaticServices.modeService.get(), StaticServices.standaloneThemeService.get(), languageId, compile(languageId, languageDef));\n    };\n    if (isThenable(languageDef)) {\n        return modes.TokenizationRegistry.registerPromise(languageId, languageDef.then(languageDef => create(languageDef)));\n    }\n    return modes.TokenizationRegistry.register(languageId, create(languageDef));\n}\n/**\n * Register a reference provider (used by e.g. reference search).\n */\nexport function registerReferenceProvider(languageId, provider) {\n    return modes.ReferenceProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a rename provider (used by e.g. rename symbol).\n */\nexport function registerRenameProvider(languageId, provider) {\n    return modes.RenameProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a signature help provider (used by e.g. parameter hints).\n */\nexport function registerSignatureHelpProvider(languageId, provider) {\n    return modes.SignatureHelpProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a hover provider (used by e.g. editor hover).\n */\nexport function registerHoverProvider(languageId, provider) {\n    return modes.HoverProviderRegistry.register(languageId, {\n        provideHover: (model, position, token) => {\n            let word = model.getWordAtPosition(position);\n            return Promise.resolve(provider.provideHover(model, position, token)).then((value) => {\n                if (!value) {\n                    return undefined;\n                }\n                if (!value.range && word) {\n                    value.range = new Range(position.lineNumber, word.startColumn, position.lineNumber, word.endColumn);\n                }\n                if (!value.range) {\n                    value.range = new Range(position.lineNumber, position.column, position.lineNumber, position.column);\n                }\n                return value;\n            });\n        }\n    });\n}\n/**\n * Register a document symbol provider (used by e.g. outline).\n */\nexport function registerDocumentSymbolProvider(languageId, provider) {\n    return modes.DocumentSymbolProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a document highlight provider (used by e.g. highlight occurrences).\n */\nexport function registerDocumentHighlightProvider(languageId, provider) {\n    return modes.DocumentHighlightProviderRegistry.register(languageId, provider);\n}\n/**\n * Register an linked editing range provider.\n */\nexport function registerLinkedEditingRangeProvider(languageId, provider) {\n    return modes.LinkedEditingRangeProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a definition provider (used by e.g. go to definition).\n */\nexport function registerDefinitionProvider(languageId, provider) {\n    return modes.DefinitionProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a implementation provider (used by e.g. go to implementation).\n */\nexport function registerImplementationProvider(languageId, provider) {\n    return modes.ImplementationProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a type definition provider (used by e.g. go to type definition).\n */\nexport function registerTypeDefinitionProvider(languageId, provider) {\n    return modes.TypeDefinitionProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a code lens provider (used by e.g. inline code lenses).\n */\nexport function registerCodeLensProvider(languageId, provider) {\n    return modes.CodeLensProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a code action provider (used by e.g. quick fix).\n */\nexport function registerCodeActionProvider(languageId, provider, metadata) {\n    return modes.CodeActionProviderRegistry.register(languageId, {\n        providedCodeActionKinds: metadata === null || metadata === void 0 ? void 0 : metadata.providedCodeActionKinds,\n        provideCodeActions: (model, range, context, token) => {\n            let markers = StaticServices.markerService.get().read({ resource: model.uri }).filter(m => {\n                return Range.areIntersectingOrTouching(m, range);\n            });\n            return provider.provideCodeActions(model, range, { markers, only: context.only }, token);\n        },\n        resolveCodeAction: provider.resolveCodeAction\n    });\n}\n/**\n * Register a formatter that can handle only entire models.\n */\nexport function registerDocumentFormattingEditProvider(languageId, provider) {\n    return modes.DocumentFormattingEditProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a formatter that can handle a range inside a model.\n */\nexport function registerDocumentRangeFormattingEditProvider(languageId, provider) {\n    return modes.DocumentRangeFormattingEditProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a formatter than can do formatting as the user types.\n */\nexport function registerOnTypeFormattingEditProvider(languageId, provider) {\n    return modes.OnTypeFormattingEditProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a link provider that can find links in text.\n */\nexport function registerLinkProvider(languageId, provider) {\n    return modes.LinkProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a completion item provider (use by e.g. suggestions).\n */\nexport function registerCompletionItemProvider(languageId, provider) {\n    return modes.CompletionProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a document color provider (used by Color Picker, Color Decorator).\n */\nexport function registerColorProvider(languageId, provider) {\n    return modes.ColorProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a folding range provider\n */\nexport function registerFoldingRangeProvider(languageId, provider) {\n    return modes.FoldingRangeProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a declaration provider\n */\nexport function registerDeclarationProvider(languageId, provider) {\n    return modes.DeclarationProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a selection range provider\n */\nexport function registerSelectionRangeProvider(languageId, provider) {\n    return modes.SelectionRangeRegistry.register(languageId, provider);\n}\n/**\n * Register a document semantic tokens provider\n */\nexport function registerDocumentSemanticTokensProvider(languageId, provider) {\n    return modes.DocumentSemanticTokensProviderRegistry.register(languageId, provider);\n}\n/**\n * Register a document range semantic tokens provider\n */\nexport function registerDocumentRangeSemanticTokensProvider(languageId, provider) {\n    return modes.DocumentRangeSemanticTokensProviderRegistry.register(languageId, provider);\n}\n/**\n * Register an inline completions provider.\n */\nexport function registerInlineCompletionsProvider(languageId, provider) {\n    return modes.InlineCompletionsProviderRegistry.register(languageId, provider);\n}\n/**\n * Register an inlay hints provider.\n */\nexport function registerInlayHintsProvider(languageId, provider) {\n    return modes.InlayHintsProviderRegistry.register(languageId, provider);\n}\n/**\n * @internal\n */\nexport function createMonacoLanguagesAPI() {\n    return {\n        register: register,\n        getLanguages: getLanguages,\n        onLanguage: onLanguage,\n        getEncodedLanguageId: getEncodedLanguageId,\n        // provider methods\n        setLanguageConfiguration: setLanguageConfiguration,\n        setColorMap: setColorMap,\n        setTokensProvider: setTokensProvider,\n        setMonarchTokensProvider: setMonarchTokensProvider,\n        registerReferenceProvider: registerReferenceProvider,\n        registerRenameProvider: registerRenameProvider,\n        registerCompletionItemProvider: registerCompletionItemProvider,\n        registerSignatureHelpProvider: registerSignatureHelpProvider,\n        registerHoverProvider: registerHoverProvider,\n        registerDocumentSymbolProvider: registerDocumentSymbolProvider,\n        registerDocumentHighlightProvider: registerDocumentHighlightProvider,\n        registerLinkedEditingRangeProvider: registerLinkedEditingRangeProvider,\n        registerDefinitionProvider: registerDefinitionProvider,\n        registerImplementationProvider: registerImplementationProvider,\n        registerTypeDefinitionProvider: registerTypeDefinitionProvider,\n        registerCodeLensProvider: registerCodeLensProvider,\n        registerCodeActionProvider: registerCodeActionProvider,\n        registerDocumentFormattingEditProvider: registerDocumentFormattingEditProvider,\n        registerDocumentRangeFormattingEditProvider: registerDocumentRangeFormattingEditProvider,\n        registerOnTypeFormattingEditProvider: registerOnTypeFormattingEditProvider,\n        registerLinkProvider: registerLinkProvider,\n        registerColorProvider: registerColorProvider,\n        registerFoldingRangeProvider: registerFoldingRangeProvider,\n        registerDeclarationProvider: registerDeclarationProvider,\n        registerSelectionRangeProvider: registerSelectionRangeProvider,\n        registerDocumentSemanticTokensProvider: registerDocumentSemanticTokensProvider,\n        registerDocumentRangeSemanticTokensProvider: registerDocumentRangeSemanticTokensProvider,\n        registerInlineCompletionsProvider: registerInlineCompletionsProvider,\n        registerInlayHintsProvider: registerInlayHintsProvider,\n        // enums\n        DocumentHighlightKind: standaloneEnums.DocumentHighlightKind,\n        CompletionItemKind: standaloneEnums.CompletionItemKind,\n        CompletionItemTag: standaloneEnums.CompletionItemTag,\n        CompletionItemInsertTextRule: standaloneEnums.CompletionItemInsertTextRule,\n        SymbolKind: standaloneEnums.SymbolKind,\n        SymbolTag: standaloneEnums.SymbolTag,\n        IndentAction: standaloneEnums.IndentAction,\n        CompletionTriggerKind: standaloneEnums.CompletionTriggerKind,\n        SignatureHelpTriggerKind: standaloneEnums.SignatureHelpTriggerKind,\n        InlayHintKind: standaloneEnums.InlayHintKind,\n        InlineCompletionTriggerKind: standaloneEnums.InlineCompletionTriggerKind,\n        // classes\n        FoldingRangeKind: modes.FoldingRangeKind,\n    };\n}\n"]},"metadata":{},"sourceType":"module"}